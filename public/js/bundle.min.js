function isAndroid(){return"Android"===$.ua.os.name}function isiOS(){return"iOS"===$.ua.os.name}function isWechat(){return"WeChat"===$.ua.browser.name}function isWeibo(){return/weibo/i.test($.ua.ua)}function digger(e){function t(e){return unescape(B(e))}function n(e){var t=typeof e;return"undefined"!==t}function i(e){return"function"==typeof e}function r(e){return"object"==typeof e}function o(e){return"string"==typeof e||e instanceof String}function s(e,t){return null===e||void 0===e||!t&&""===e||ne(e)&&0===e.length}function a(e,t){if(e&&t&&"object"==typeof t){var n;for(n in t)e[n]=t[n]}return e}function l(e,t,n,i,r,o){var s;n&&(s=new Date,s.setTime(s.getTime()+n)),P.cookie=e+"="+B(t)+(n?";expires="+s.toGMTString():"")+";path="+(i||"/")+(r?";domain="+r:"")+(o?";secure":"")}function u(e){var t=new RegExp("(^|;)[ ]*"+e+"=([^;]*)"),n=t.exec(P.cookie);return n?q(n[2]):null}function c(){if(!n(M.cookieEnabled)){var e=getCookieName("testcookie");return l(e,"1"),"1"===u(e)?"1":"0"}return M.cookieEnabled?"1":"0"}function f(){var e,t,r={pdf:"application/pdf",qt:"video/quicktime",realp:"audio/x-pn-realaudio-plugin",wma:"application/x-mplayer2",dir:"application/x-director",fla:"application/x-shockwave-flash",java:"application/x-java-vm",gears:"application/x-googlegears",ag:"application/x-silverlight"},o=F.devicePixelRatio||1;if(!new RegExp("MSIE").test(M.userAgent)){if(M.mimeTypes&&M.mimeTypes.length)for(e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t=M.mimeTypes[r[e]],D[e]=t&&t.enabledPlugin?"1":"0");"unknown"!=typeof navigator.javaEnabled&&n(M.javaEnabled)&&M.javaEnabled()&&(D.java="1"),i(F.GearsFactory)&&(D.gears="1"),D.cookie=c()}var s=parseInt(H.width,10)*o,a=parseInt(H.height,10)*o;D.res=parseInt(s,10)+"x"+parseInt(a,10)}function d(){return W((M.userAgent||"")+(M.platform||"")+JSON.stringify(D)+(new Date).getTime()+Math.random()).slice(0,16)}function h(e){var t=new RegExp("^(?:(?:https?|ftp):)/*(?:[^@]+@)?([^:/#]+)"),n=t.exec(e);return n?n[1]:e}function p(e){var n,i,r,o,s,a,l,u,c,f,d=function(e,t){return e<<t|e>>>32-t},h=function(e){var t,n,i="";for(t=7;t>=0;t--)n=e>>>4*t&15,i+=n.toString(16);return i},p=[],v=1732584193,m=4023233417,g=2562383102,y=271733878,b=3285377520,w=[];for(e=t(e),f=e.length,i=0;i<f-3;i+=4)r=e.charCodeAt(i)<<24|e.charCodeAt(i+1)<<16|e.charCodeAt(i+2)<<8|e.charCodeAt(i+3),w.push(r);switch(3&f){case 0:i=2147483648;break;case 1:i=e.charCodeAt(f-1)<<24|8388608;break;case 2:i=e.charCodeAt(f-2)<<24|e.charCodeAt(f-1)<<16|32768;break;case 3:i=e.charCodeAt(f-3)<<24|e.charCodeAt(f-2)<<16|e.charCodeAt(f-1)<<8|128}for(w.push(i);14!==(15&w.length);)w.push(0);for(w.push(f>>>29),w.push(f<<3&4294967295),n=0;n<w.length;n+=16){for(i=0;i<16;i++)p[i]=w[n+i];for(i=16;i<=79;i++)p[i]=d(p[i-3]^p[i-8]^p[i-14]^p[i-16],1);for(o=v,s=m,a=g,l=y,u=b,i=0;i<=19;i++)c=d(o,5)+(s&a|~s&l)+u+p[i]+1518500249&4294967295,u=l,l=a,a=d(s,30),s=o,o=c;for(i=20;i<=39;i++)c=d(o,5)+(s^a^l)+u+p[i]+1859775393&4294967295,u=l,l=a,a=d(s,30),s=o,o=c;for(i=40;i<=59;i++)c=d(o,5)+(s&a|s&l|a&l)+u+p[i]+2400959708&4294967295,u=l,l=a,a=d(s,30),s=o,o=c;for(i=60;i<=79;i++)c=d(o,5)+(s^a^l)+u+p[i]+3395469782&4294967295,u=l,l=a,a=d(s,30),s=o,o=c;v=v+o&4294967295,m=m+s&4294967295,g=g+a&4294967295,y=y+l&4294967295,b=b+u&4294967295}return c=h(v)+h(m)+h(g)+h(y)+h(b),c.toLowerCase()}function v(e,t,n,i){return e.addEventListener?(e.addEventListener(t,n,i),!0):e.attachEvent?e.attachEvent("on"+t,n):void(e["on"+t]=n)}function m(e){switch(e.type){case"click":N(e)}}function g(){var e="";try{e=F.top.document.referrer}catch(t){if(F.parent)try{e=F.parent.document.referrer}catch(t){e=""}}return""===e&&(e=P.referrer),e}function y(){var e={};for(var t in J)e[t]=B(u(J[t]));return e}function w(){var e={};for(var t in Y)e[t]=B(R.getItem(Y[t]));return e}function x(e){if(!e)return"";var t="";for(var n in e)t+=n+"="+B(e[n])+"&";return t.length>0?t.substring(0,t.length-1):t}function C(e,t,n){var i=new Image(1,1);i.onload=function(){O=0,"function"==typeof n&&n()},i.src=e+(e.indexOf("?")<0?"?":"")+t}function _(e){if(!window.DmallAnalysis.digger.config.overrideParams||!r(window.DmallAnalysis.digger.config.overrideParams))return e;for(var t in window.DmallAnalysis.digger.config.overrideParams)void 0!==e[t]&&(e[t]=window.DmallAnalysis.digger.config.overrideParams[t]);return e}function k(){var e={},t=u(I+"uuid"),n=24*X*60*60,i=u("cookie_id");return e=a(e,y()),e=a(e,K),R&&(e=a(e,w())),s(t)&&(l(I+"uuid",d(),n,G,V||h(F.location.href)),t=u(I+"uuid")),s(i)&&(i=Date.now()+String(t).substr(0,5),l("cookie_id",i,n,G,V||h(F.location.href))),e[I+"uuid"]=u(I+"uuid"),e.cookie_id=i,e.url=P.URL,e.refer_url=g(),e.pageTitle=Z,e}function E(e,t){if(!te)return _(e);var n={},i=te.paramOrder[t];if(!i)return _(e);for(var r=0;r<i.length;r++)n[i[r]]=e[i[r]];if(te&&te.disableDefaultParams)return _(n);for(var o in e)void 0===n[o]&&(n[o]=e[o]);return _(n)}function T(){window.DmallAnalysis||(window.DmallAnalysis={}),window.DmallAnalysis.digger||(window.DmallAnalysis.digger={}),window.DmallAnalysis.digger.config||(window.DmallAnalysis.digger.config={})}function A(e){T(),window.DmallAnalysis.digger.config.overrideParams=e}function S(){T();var e=k(),t={};e.action=j.pageVie;for(var n in Q)if("pageView"===n)if(ne(Q[n]))for(var i in Q[n])t=E(e,Q[n][i]),C(Q[n][i],x(t));else o(Q[n])&&(t=E(e,Q[n]),C(Q[n],x(t)))}function N(e){for(var t=(e.currentTarget||e.target,{}),n=k(),i={},r=0;r<ee.length;r++)if("click"===e.type){t=ee[r];break}if(t)if(t.extendParams&&(n=a(n,t.extendParams)),n.action=j.click,i=E(n,Q.click),ne(Q.click))for(var s in Q.click)C(Q.click[s],x(i));else o(Q[b])&&C(Q.click,x(i))}function $(){if(ee&&!(ee.length<1))for(var e=0;e<ee.length;e++){var t=ee[e].eventType,n=ee[e].selectors,i=[];if(!n)break;if(o(n)&&(i=i.concat(ie.find(n))),ne(n))for(var r=0;r<n.length;r++)i=i.concat(ie.find(n[r]));ee[e].currentTargets=i;for(var s=0;s<i.length;s++)v(i[s],t,m,!1)}}var O,j={pageView:"0",download:"1",click:"2",link:"3"},D={},L={},P=document,M=navigator,H=screen,F=window,R=localStorage,B=(F.performance||F.mozPerformance||F.msPerformance||F.webkitPerformance,F.encodeURIComponent),q=F.decodeURIComponent,I=(unescape,"_digger_"),W=p,z=(e&&e.disableUUID,e&&e.disablePageViewTrack),U=e&&e.disableAutoReport,V=e&&e.cookieDomain?e.cookieDomain:"",X=e&&e.expireDay?e.expireDay:365,G=e&&e.cookiePath?e.cookiePath:"/",J=e&&e.trackCookieKeys?e.trackCookieKeys:{},Y=e&&e.trackLocalStorageKeys?e.trackLocalStorageKeys:{},K=e&&e.extendParams?e.extendParams:{},Q=e&&e.trackerUrlMap?a(L,e.trackerUrlMap):L,Z=e&&e.trackerTitle?e.trackerTitle:P.title,ee=e&&e.eventConfigArr?e.eventConfigArr:[],te=!(!e||!e.strictMode)&&e.strictMode,ne="isArray"in Array?Array.isArray:function(e){return"[object Array]"===toString.call(e)},ie={htmlCollectionToArray:function(e){var t,n=[];if(!e||!e.length)return n;for(t=0;t<e.length;t++)n.push(e[t]);return n},find:function(e){if(!document.querySelectorAll||!e)return[];var t=document.querySelectorAll(e);return this.htmlCollectionToArray(t)},findMultiple:function(e){if(!e||!e.length)return[];var t,n,i=[];for(t=0;t<e.length;t++)n=this.find(e[t]),i=i.concat(n);return i=this.makeNodesUnique(i)},findNodesByTagName:function(e,t){if(!e||!t||!e.getElementsByTagName)return[];var n=e.getElementsByTagName(t);return this.htmlCollectionToArray(n)},makeNodesUnique:function(e){var t=[].concat(e);if(e.sort(function(e,n){if(e===n)return 0;var i=indexOfArray(t,e),r=indexOfArray(t,n);return i===r?0:i>r?-1:1}),e.length<=1)return e;var n,i=0,r=0,o=[];for(n=e[i++];n;)n===e[i]&&(r=o.push(i)),n=e[i++]||null;for(;r--;)e.splice(o[r],1);return e},getAttributeValueFromNode:function(e,t){if(this.hasNodeAttribute(e,t)){if(e&&e.getAttribute)return e.getAttribute(t);if(e&&e.attributes){var n=typeof e.attributes[t];if("undefined"!==n){if(e.attributes[t].value)return e.attributes[t].value;if(e.attributes[t].nodeValue)return e.attributes[t].nodeValue;var i,r=e.attributes;if(r){for(i=0;i<r.length;i++)if(r[i].nodeName===t)return r[i].nodeValue;return null}}}}},hasNodeAttributeWithValue:function(e,t){var n=this.getAttributeValueFromNode(e,t);return!!n},hasNodeAttribute:function(e,t){if(e&&e.hasAttribute)return e.hasAttribute(t);if(e&&e.attributes){var n=typeof e.attributes[t];return"undefined"!==n}return!1},hasNodeCssClass:function(e,t){if(e&&t&&e.className){var n="string"==typeof e.className?e.className.split(" "):[];if(-1!==indexOfArray(n,t))return!0}return!1},findNodesHavingAttribute:function(e,t,n){if(n||(n=[]),!e||!t)return n;var i=getChildrenFromNode(e);if(!i||!i.length)return n;var r,o;for(r=0;r<i.length;r++)o=i[r],this.hasNodeAttribute(o,t)&&n.push(o),n=this.findNodesHavingAttribute(o,t,n);return n},findFirstNodeHavingAttribute:function(e,t){if(e&&t){if(this.hasNodeAttribute(e,t))return e;var n=this.findNodesHavingAttribute(e,t);return n&&n.length?n[0]:void 0}},findFirstNodeHavingAttributeWithValue:function(e,t){if(e&&t){if(this.hasNodeAttributeWithValue(e,t))return e;var n=this.findNodesHavingAttribute(e,t);if(n&&n.length){var i;for(i=0;i<n.length;i++)if(this.getAttributeValueFromNode(n[i],t))return n[i]}}},findNodesHavingCssClass:function(e,t,n){if(n||(n=[]),!e||!t)return n;if(e.getElementsByClassName){var i=e.getElementsByClassName(t);return this.htmlCollectionToArray(i)}var r=getChildrenFromNode(e);if(!r||!r.length)return[];var o,s;for(o=0;o<r.length;o++)s=r[o],this.hasNodeCssClass(s,t)&&n.push(s),n=this.findNodesHavingCssClass(s,t,n);return n},findFirstNodeHavingClass:function(e,t){if(e&&t){if(this.hasNodeCssClass(e,t))return e;var n=this.findNodesHavingCssClass(e,t);return n&&n.length?n[0]:void 0}},isLinkElement:function(e){if(!e)return!1;var t=String(e.nodeName).toLowerCase(),n=["a","area"],i=indexOfArray(n,t);return i!==-1},setAnyAttribute:function(e,t,n){e&&t&&(e.setAttribute?e.setAttribute(t,n):e[t]=n)}};return T(),f(),$(),z||U||S(),window.DmallAnalysis.digger=Object.assign(window.DmallAnalysis.digger,{sendPageViewTracker:S,setOverrideParams:A}),window.DmallAnalysis}!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.axios=t():e.axios=t()}(this,function(){return function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function i(e){var t=new s(e),n=o(s.prototype.request,t);return r.extend(n,s.prototype,t),r.extend(n,t),n}var r=n(2),o=n(3),s=n(4),a=n(5),l=i(a);l.Axios=s,l.create=function(e){return i(r.merge(a,e))},l.Cancel=n(22),l.CancelToken=n(23),l.isCancel=n(19),l.all=function(e){return Promise.all(e)},l.spread=n(24),e.exports=l,e.exports.default=l},function(e,t,n){"use strict";function i(e){return"[object Array]"===_.call(e)}function r(e){return"[object ArrayBuffer]"===_.call(e)}function o(e){return"undefined"!=typeof FormData&&e instanceof FormData}function s(e){var t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer}function a(e){return"string"==typeof e}function l(e){return"number"==typeof e}function u(e){return"undefined"==typeof e}function c(e){return null!==e&&"object"==typeof e}function f(e){return"[object Date]"===_.call(e)}function d(e){return"[object File]"===_.call(e)}function h(e){return"[object Blob]"===_.call(e)}function p(e){return"[object Function]"===_.call(e)}function v(e){return c(e)&&p(e.pipe)}function m(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}function g(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}function y(){return"undefined"!=typeof window&&"undefined"!=typeof document&&"function"==typeof document.createElement}function b(e,t){if(null!==e&&"undefined"!=typeof e)if("object"==typeof e||i(e)||(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}function w(){function e(e,n){"object"==typeof t[n]&&"object"==typeof e?t[n]=w(t[n],e):t[n]=e}for(var t={},n=0,i=arguments.length;n<i;n++)b(arguments[n],e);return t}function x(e,t,n){return b(t,function(t,i){n&&"function"==typeof t?e[i]=C(t,n):e[i]=t}),e}var C=n(3),_=Object.prototype.toString;e.exports={isArray:i,isArrayBuffer:r,isFormData:o,isArrayBufferView:s,isString:a,isNumber:l,isObject:c,isUndefined:u,isDate:f,isFile:d,isBlob:h,isFunction:p,isStream:v,isURLSearchParams:m,isStandardBrowserEnv:y,forEach:b,merge:w,extend:x,trim:g}},function(e,t){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),i=0;i<n.length;i++)n[i]=arguments[i];return e.apply(t,n)}}},function(e,t,n){"use strict";function i(e){this.defaults=e,this.interceptors={request:new s,response:new s}}var r=n(5),o=n(2),s=n(16),a=n(17),l=n(20),u=n(21);i.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),e=o.merge(r,this.defaults,{method:"get"},e),e.baseURL&&!l(e.url)&&(e.url=u(e.baseURL,e.url));var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head"],function(e){i.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){i.prototype[e]=function(t,n,i){return this.request(o.merge(i||{},{method:e,url:t,data:n}))}}),e.exports=i},function(e,t,n){"use strict";function i(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}function r(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(7):"undefined"!=typeof process&&(e=n(7)),e}var o=n(2),s=n(6),a=/^\)\]\}',?\n/,l={"Content-Type":"application/x-www-form-urlencoded"},u={adapter:r(),transformRequest:[function(e,t){return s(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e){e=e.replace(a,"");try{e=JSON.parse(e)}catch(e){}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],function(e){u.headers[e]={}}),o.forEach(["post","put","patch"],function(e){u.headers[e]=o.merge(l)}),e.exports=u},function(e,t,n){"use strict";var i=n(2);e.exports=function(e,t){i.forEach(e,function(n,i){i!==t&&i.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[i])})}},function(e,t,n){"use strict";var i=n(2),r=n(8),o=n(11),s=n(12),a=n(13),l=n(9),u="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(14);e.exports=function(e){return new Promise(function(t,c){var f=e.data,d=e.headers;i.isFormData(f)&&delete d["Content-Type"];var h=new XMLHttpRequest,p="onreadystatechange",v=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||a(e.url)||(h=new window.XDomainRequest,p="onload",v=!0,h.onprogress=function(){},h.ontimeout=function(){}),e.auth){var m=e.auth.username||"",g=e.auth.password||"";d.Authorization="Basic "+u(m+":"+g)}if(h.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h[p]=function(){if(h&&(4===h.readyState||v)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in h?s(h.getAllResponseHeaders()):null,i=e.responseType&&"text"!==e.responseType?h.response:h.responseText,o={data:i,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:n,config:e,request:h};r(t,c,o),h=null}},h.onerror=function(){c(l("Network Error",e)),h=null},h.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED")),h=null},i.isStandardBrowserEnv()){var y=n(15),b=(e.withCredentials||a(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;b&&(d[e.xsrfHeaderName]=b)}if("setRequestHeader"in h&&i.forEach(d,function(e,t){"undefined"==typeof f&&"content-type"===t.toLowerCase()?delete d[t]:h.setRequestHeader(t,e)}),e.withCredentials&&(h.withCredentials=!0),e.responseType)try{h.responseType=e.responseType}catch(e){if("json"!==h.responseType)throw e}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){h&&(h.abort(),c(e),h=null)}),void 0===f&&(f=null),h.send(f)})}},function(e,t,n){"use strict";var i=n(9);e.exports=function(e,t,n){var r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(i("Request failed with status code "+n.status,n.config,null,n)):e(n)}},function(e,t,n){"use strict";var i=n(10);e.exports=function(e,t,n,r){var o=new Error(e);return i(o,t,n,r)}},function(e,t){"use strict";e.exports=function(e,t,n,i){return e.config=t,n&&(e.code=n),e.response=i,e}},function(e,t,n){"use strict";function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var r=n(2);e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var s=[];r.forEach(t,function(e,t){null!==e&&"undefined"!=typeof e&&(r.isArray(e)&&(t+="[]"),r.isArray(e)||(e=[e]),r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(i(t)+"="+i(e))}))}),o=s.join("&")}return o&&(e+=(e.indexOf("?")===-1?"?":"&")+o),e}},function(e,t,n){"use strict";var i=n(2);e.exports=function(e){var t,n,r,o={};return e?(i.forEach(e.split("\n"),function(e){r=e.indexOf(":"),t=i.trim(e.substr(0,r)).toLowerCase(),n=i.trim(e.substr(r+1)),t&&(o[t]=o[t]?o[t]+", "+n:n)}),o):o}},function(e,t,n){"use strict";var i=n(2);e.exports=i.isStandardBrowserEnv()?function(){function e(e){var t=e;return n&&(r.setAttribute("href",t),t=r.href),r.setAttribute("href",t),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}var t,n=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");return t=e(window.location.href),function(n){var r=i.isString(n)?e(n):n;return r.protocol===t.protocol&&r.host===t.host}}():function(){return function(){return!0}}()},function(e,t){"use strict";function n(){this.message="String contains an invalid character"}function i(e){for(var t,i,o=String(e),s="",a=0,l=r;o.charAt(0|a)||(l="=",a%1);s+=l.charAt(63&t>>8-a%1*8)){if(i=o.charCodeAt(a+=.75),i>255)throw new n;t=t<<8|i}return s}var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";n.prototype=new Error,n.prototype.code=5,n.prototype.name="InvalidCharacterError",e.exports=i},function(e,t,n){"use strict";var i=n(2);e.exports=i.isStandardBrowserEnv()?function(){return{write:function(e,t,n,r,o,s){var a=[];a.push(e+"="+encodeURIComponent(t)),i.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),i.isString(r)&&a.push("path="+r),i.isString(o)&&a.push("domain="+o),s===!0&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}()},function(e,t,n){"use strict";function i(){this.handlers=[]}var r=n(2);i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=i},function(e,t,n){"use strict";function i(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var r=n(2),o=n(18),s=n(19),a=n(5);e.exports=function(e){i(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]});var t=e.adapter||a.adapter;return t(e).then(function(t){return i(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return s(t)||(i(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var i=n(2);e.exports=function(e,t,n){return i.forEach(n,function(n){e=n(e,t)}),e}},function(e,t){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t){"use strict";e.exports=function(e,t){return e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,"")}},function(e,t){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,n){"use strict";function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}var r=n(22);i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e,t=new i(function(t){e=t});return{token:t,cancel:e}},e.exports=i},function(e,t){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}}])}),!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.ES6Promise=t()}(this,function(){"use strict";function e(e){return"function"==typeof e||"object"==typeof e&&null!==e}function t(e){return"function"==typeof e}function n(e){V=e}function i(e){X=e}function r(){return function(){return process.nextTick(u)}}function o(){return"undefined"!=typeof U?function(){U(u)}:l()}function s(){var e=0,t=new Y(u),n=document.createTextNode("");return t.observe(n,{characterData:!0}),function(){n.data=e=++e%2}}function a(){var e=new MessageChannel;return e.port1.onmessage=u,function(){return e.port2.postMessage(0)}}function l(){var e=setTimeout;return function(){return e(u,1)}}function u(){for(var e=0;e<z;e+=2){var t=Z[e],n=Z[e+1];t(n),Z[e]=void 0,Z[e+1]=void 0}z=0}function c(){try{var e=require,t=e("vertx");return U=t.runOnLoop||t.runOnContext,o()}catch(e){return l()}}function f(e,t){var n=arguments,i=this,r=new this.constructor(h);void 0===r[te]&&j(r);var o=i._state;return o?!function(){var e=n[o-1];X(function(){return N(o,r,e,i._result)})}():E(i,r,e,t),r}function d(e){var t=this;if(e&&"object"==typeof e&&e.constructor===t)return e;var n=new t(h);return x(n,e),n}function h(){}function p(){return new TypeError("You cannot resolve a promise with itself")}function v(){return new TypeError("A promises callback cannot return that same promise.")}function m(e){try{return e.then}catch(e){return oe.error=e,oe}}function g(e,t,n,i){try{e.call(t,n,i)}catch(e){return e}}function y(e,t,n){X(function(e){var i=!1,r=g(n,t,function(n){i||(i=!0,t!==n?x(e,n):_(e,n))},function(t){i||(i=!0,k(e,t))},"Settle: "+(e._label||" unknown promise"));!i&&r&&(i=!0,k(e,r))},e)}function b(e,t){t._state===ie?_(e,t._result):t._state===re?k(e,t._result):E(t,void 0,function(t){return x(e,t)},function(t){return k(e,t)})}function w(e,n,i){n.constructor===e.constructor&&i===f&&n.constructor.resolve===d?b(e,n):i===oe?k(e,oe.error):void 0===i?_(e,n):t(i)?y(e,n,i):_(e,n)}function x(t,n){t===n?k(t,p()):e(n)?w(t,n,m(n)):_(t,n)}function C(e){e._onerror&&e._onerror(e._result),T(e)}function _(e,t){e._state===ne&&(e._result=t,e._state=ie,0!==e._subscribers.length&&X(T,e))}function k(e,t){e._state===ne&&(e._state=re,e._result=t,X(C,e))}function E(e,t,n,i){var r=e._subscribers,o=r.length;e._onerror=null,r[o]=t,r[o+ie]=n,r[o+re]=i,0===o&&e._state&&X(T,e)}function T(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var i=void 0,r=void 0,o=e._result,s=0;s<t.length;s+=3)i=t[s],r=t[s+n],i?N(n,i,r,o):r(o);e._subscribers.length=0}}function A(){this.error=null}function S(e,t){try{return e(t)}catch(e){return se.error=e,se}}function N(e,n,i,r){var o=t(i),s=void 0,a=void 0,l=void 0,u=void 0;if(o){if(s=S(i,r),s===se?(u=!0,a=s.error,s=null):l=!0,n===s)return void k(n,v())}else s=r,l=!0;n._state!==ne||(o&&l?x(n,s):u?k(n,a):e===ie?_(n,s):e===re&&k(n,s))}function $(e,t){try{t(function(t){x(e,t)},function(t){k(e,t)})}catch(t){k(e,t)}}function O(){return ae++}function j(e){e[te]=ae++,e._state=void 0,e._result=void 0,e._subscribers=[]}function D(e,t){this._instanceConstructor=e,this.promise=new e(h),this.promise[te]||j(this.promise),W(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?_(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&_(this.promise,this._result))):k(this.promise,L())}function L(){return new Error("Array Methods must be provided an Array")}function P(e){return new D(this,e).promise}function M(e){var t=this;return new t(W(e)?function(n,i){for(var r=e.length,o=0;o<r;o++)t.resolve(e[o]).then(n,i)}:function(e,t){return t(new TypeError("You must pass an array to race."))})}function H(e){var t=this,n=new t(h);return k(n,e),n}function F(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function R(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function B(e){this[te]=O(),this._result=this._state=void 0,this._subscribers=[],h!==e&&("function"!=typeof e&&F(),this instanceof B?$(this,e):R())}function q(){var e=void 0;if("undefined"!=typeof global)e=global;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=B}var I=void 0;I=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)};var W=I,z=0,U=void 0,V=void 0,X=function(e,t){Z[z]=e,Z[z+1]=t,z+=2,2===z&&(V?V(u):ee())},G="undefined"!=typeof window?window:void 0,J=G||{},Y=J.MutationObserver||J.WebKitMutationObserver,K="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),Q="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Z=new Array(1e3),ee=void 0;ee=K?r():Y?s():Q?a():void 0===G&&"function"==typeof require?c():l();var te=Math.random().toString(36).substring(16),ne=void 0,ie=1,re=2,oe=new A,se=new A,ae=0;return D.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===ne&&n<e;n++)this._eachEntry(t[n],n)},D.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,i=n.resolve;if(i===d){var r=m(e);if(r===f&&e._state!==ne)this._settledAt(e._state,t,e._result);else if("function"!=typeof r)this._remaining--,this._result[t]=e;else if(n===B){var o=new n(h);w(o,e,r),this._willSettleAt(o,t)}else this._willSettleAt(new n(function(t){return t(e)}),t)}else this._willSettleAt(i(e),t)},D.prototype._settledAt=function(e,t,n){var i=this.promise;i._state===ne&&(this._remaining--,e===re?k(i,n):this._result[t]=n),0===this._remaining&&_(i,this._result)},D.prototype._willSettleAt=function(e,t){var n=this;E(e,void 0,function(e){return n._settledAt(ie,t,e)},function(e){return n._settledAt(re,t,e)})},B.all=P,B.race=M,B.resolve=d,B.reject=H,B._setScheduler=n,B._setAsap=i,B._asap=X,B.prototype={constructor:B,then:f,catch:function(e){return this.then(null,e)}},B.polyfill=q,B.Promise=B,B}),ES6Promise.polyfill(),!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=e.length,n=re.type(e);return"function"!==n&&!re.isWindow(e)&&(!(1!==e.nodeType||!t)||("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e))}function i(e,t,n){if(re.isFunction(t))return re.grep(e,function(e,i){return!!t.call(e,i,e)!==n});if(t.nodeType)return re.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(de.test(t))return re.filter(t,e,n);t=re.filter(t,e)}return re.grep(e,function(e){return re.inArray(e,t)>=0!==n})}function r(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function o(e){var t=we[e]={};return re.each(e.match(be)||[],function(e,n){t[n]=!0}),t}function s(){pe.addEventListener?(pe.removeEventListener("DOMContentLoaded",a,!1),e.removeEventListener("load",a,!1)):(pe.detachEvent("onreadystatechange",a),e.detachEvent("onload",a))}function a(){(pe.addEventListener||"load"===event.type||"complete"===pe.readyState)&&(s(),re.ready())}function l(e,t,n){if(void 0===n&&1===e.nodeType){var i="data-"+t.replace(Ee,"-$1").toLowerCase();if(n=e.getAttribute(i),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:ke.test(n)?re.parseJSON(n):n)}catch(e){}re.data(e,t,n)}else n=void 0}return n}function u(e){var t;for(t in e)if(("data"!==t||!re.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function c(e,t,n,i){if(re.acceptData(e)){var r,o,s=re.expando,a=e.nodeType,l=a?re.cache:e,u=a?e[s]:e[s]&&s;if(u&&l[u]&&(i||l[u].data)||void 0!==n||"string"!=typeof t)return u||(u=a?e[s]=G.pop()||re.guid++:s),l[u]||(l[u]=a?{}:{toJSON:re.noop}),("object"==typeof t||"function"==typeof t)&&(i?l[u]=re.extend(l[u],t):l[u].data=re.extend(l[u].data,t)),o=l[u],i||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[re.camelCase(t)]=n),"string"==typeof t?(r=o[t],null==r&&(r=o[re.camelCase(t)])):r=o,r}}function f(e,t,n){if(re.acceptData(e)){var i,r,o=e.nodeType,s=o?re.cache:e,a=o?e[re.expando]:re.expando;if(s[a]){if(t&&(i=n?s[a]:s[a].data)){re.isArray(t)?t=t.concat(re.map(t,re.camelCase)):t in i?t=[t]:(t=re.camelCase(t),t=t in i?[t]:t.split(" ")),r=t.length;for(;r--;)delete i[t[r]];if(n?!u(i):!re.isEmptyObject(i))return}(n||(delete s[a].data,u(s[a])))&&(o?re.cleanData([e],!0):ne.deleteExpando||s!=s.window?delete s[a]:s[a]=null)}}}function d(){return!0}function h(){return!1}function p(){try{return pe.activeElement}catch(e){}}function v(e){var t=Me.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function m(e,t){var n,i,r=0,o=typeof e.getElementsByTagName!==_e?e.getElementsByTagName(t||"*"):typeof e.querySelectorAll!==_e?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(i=n[r]);r++)!t||re.nodeName(i,t)?o.push(i):re.merge(o,m(i,t));return void 0===t||t&&re.nodeName(e,t)?re.merge([e],o):o}function g(e){$e.test(e.type)&&(e.defaultChecked=e.checked)}function y(e,t){return re.nodeName(e,"table")&&re.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function b(e){return e.type=(null!==re.find.attr(e,"type"))+"/"+e.type,e}function w(e){var t=Xe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function x(e,t){for(var n,i=0;null!=(n=e[i]);i++)re._data(n,"globalEval",!t||re._data(t[i],"globalEval"))}function C(e,t){if(1===t.nodeType&&re.hasData(e)){var n,i,r,o=re._data(e),s=re._data(t,o),a=o.events;if(a){delete s.handle,s.events={};for(n in a)for(i=0,
r=a[n].length;r>i;i++)re.event.add(t,n,a[n][i])}s.data&&(s.data=re.extend({},s.data))}}function _(e,t){var n,i,r;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!ne.noCloneEvent&&t[re.expando]){r=re._data(t);for(i in r.events)re.removeEvent(t,i,r.handle);t.removeAttribute(re.expando)}"script"===n&&t.text!==e.text?(b(t).text=e.text,w(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),ne.html5Clone&&e.innerHTML&&!re.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&$e.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}function k(t,n){var i,r=re(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(i=e.getDefaultComputedStyle(r[0]))?i.display:re.css(r[0],"display");return r.detach(),o}function E(e){var t=pe,n=Ze[e];return n||(n=k(e,t),"none"!==n&&n||(Qe=(Qe||re("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(Qe[0].contentWindow||Qe[0].contentDocument).document,t.write(),t.close(),n=k(e,t),Qe.detach()),Ze[e]=n),n}function T(e,t){return{get:function(){var n=e();if(null!=n)return n?void delete this.get:(this.get=t).apply(this,arguments)}}}function A(e,t){if(t in e)return t;for(var n=t.charAt(0).toUpperCase()+t.slice(1),i=t,r=dt.length;r--;)if(t=dt[r]+n,t in e)return t;return i}function S(e,t){for(var n,i,r,o=[],s=0,a=e.length;a>s;s++)i=e[s],i.style&&(o[s]=re._data(i,"olddisplay"),n=i.style.display,t?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&Se(i)&&(o[s]=re._data(i,"olddisplay",E(i.nodeName)))):(r=Se(i),(n&&"none"!==n||!r)&&re._data(i,"olddisplay",r?n:re.css(i,"display"))));for(s=0;a>s;s++)i=e[s],i.style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?o[s]||"":"none"));return e}function N(e,t,n){var i=lt.exec(t);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):t}function $(e,t,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===t?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=re.css(e,n+Ae[o],!0,r)),i?("content"===n&&(s-=re.css(e,"padding"+Ae[o],!0,r)),"margin"!==n&&(s-=re.css(e,"border"+Ae[o]+"Width",!0,r))):(s+=re.css(e,"padding"+Ae[o],!0,r),"padding"!==n&&(s+=re.css(e,"border"+Ae[o]+"Width",!0,r)));return s}function O(e,t,n){var i=!0,r="width"===t?e.offsetWidth:e.offsetHeight,o=et(e),s=ne.boxSizing&&"border-box"===re.css(e,"boxSizing",!1,o);if(0>=r||null==r){if(r=tt(e,t,o),(0>r||null==r)&&(r=e.style[t]),it.test(r))return r;i=s&&(ne.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+$(e,t,n||(s?"border":"content"),i,o)+"px"}function j(e,t,n,i,r){return new j.prototype.init(e,t,n,i,r)}function D(){return setTimeout(function(){ht=void 0}),ht=re.now()}function L(e,t){var n,i={height:e},r=0;for(t=t?1:0;4>r;r+=2-t)n=Ae[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function P(e,t,n){for(var i,r=(bt[t]||[]).concat(bt["*"]),o=0,s=r.length;s>o;o++)if(i=r[o].call(n,t,e))return i}function M(e,t,n){var i,r,o,s,a,l,u,c,f=this,d={},h=e.style,p=e.nodeType&&Se(e),v=re._data(e,"fxshow");n.queue||(a=re._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,re.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],u=re.css(e,"display"),c="none"===u?re._data(e,"olddisplay")||E(e.nodeName):u,"inline"===c&&"none"===re.css(e,"float")&&(ne.inlineBlockNeedsLayout&&"inline"!==E(e.nodeName)?h.zoom=1:h.display="inline-block")),n.overflow&&(h.overflow="hidden",ne.shrinkWrapBlocks()||f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(i in t)if(r=t[i],vt.exec(r)){if(delete t[i],o=o||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;p=!0}d[i]=v&&v[i]||re.style(e,i)}else u=void 0;if(re.isEmptyObject(d))"inline"===("none"===u?E(e.nodeName):u)&&(h.display=u);else{v?"hidden"in v&&(p=v.hidden):v=re._data(e,"fxshow",{}),o&&(v.hidden=!p),p?re(e).show():f.done(function(){re(e).hide()}),f.done(function(){var t;re._removeData(e,"fxshow");for(t in d)re.style(e,t,d[t])});for(i in d)s=P(p?v[i]:0,i,f),i in v||(v[i]=s.start,p&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function H(e,t){var n,i,r,o,s;for(n in e)if(i=re.camelCase(n),r=t[i],o=e[n],re.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),s=re.cssHooks[i],s&&"expand"in s){o=s.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}function F(e,t,n){var i,r,o=0,s=yt.length,a=re.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=ht||D(),n=Math.max(0,u.startTime+u.duration-t),i=n/u.duration||0,o=1-i,s=0,l=u.tweens.length;l>s;s++)u.tweens[s].run(o);return a.notifyWith(e,[u,o,n]),1>o&&l?n:(a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:re.extend({},t),opts:re.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:ht||D(),duration:n.duration,tweens:[],createTween:function(t,n){var i=re.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)u.tweens[n].run(1);return t?a.resolveWith(e,[u,t]):a.rejectWith(e,[u,t]),this}}),c=u.props;for(H(c,u.opts.specialEasing);s>o;o++)if(i=yt[o].call(u,e,c,u.opts))return i;return re.map(c,P,u),re.isFunction(u.opts.start)&&u.opts.start.call(e,u),re.fx.timer(re.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function R(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(be)||[];if(re.isFunction(n))for(;i=o[r++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function B(e,t,n,i){function r(a){var l;return o[a]=!0,re.each(e[a]||[],function(e,a){var u=a(t,n,i);return"string"!=typeof u||s||o[u]?s?!(l=u):void 0:(t.dataTypes.unshift(u),r(u),!1)}),l}var o={},s=e===Wt;return r(t.dataTypes[0])||!o["*"]&&r("*")}function q(e,t){var n,i,r=re.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((r[i]?e:n||(n={}))[i]=t[i]);return n&&re.extend(!0,e,n),e}function I(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(s in a)if(a[s]&&a[s].test(r)){l.unshift(s);break}if(l[0]in n)o=l[0];else{for(s in n){if(!l[0]||e.converters[s+" "+l[0]]){o=s;break}i||(i=s)}o=o||i}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function W(e,t,n,i){var r,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(s=u[l+" "+o]||u["* "+o],!s)for(r in u)if(a=r.split(" "),a[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){s===!0?s=u[r]:u[r]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}function z(e,t,n,i){var r;if(re.isArray(t))re.each(t,function(t,r){n||Vt.test(e)?i(e,r):z(e+"["+("object"==typeof r?t:"")+"]",r,n,i)});else if(n||"object"!==re.type(t))i(e,t);else for(r in t)z(e+"["+r+"]",t[r],n,i)}function U(){try{return new e.XMLHttpRequest}catch(e){}}function V(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function X(e){return re.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}var G=[],J=G.slice,Y=G.concat,K=G.push,Q=G.indexOf,Z={},ee=Z.toString,te=Z.hasOwnProperty,ne={},ie="1.11.2",re=function(e,t){return new re.fn.init(e,t)},oe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,se=/^-ms-/,ae=/-([\da-z])/gi,le=function(e,t){return t.toUpperCase()};re.fn=re.prototype={jquery:ie,constructor:re,selector:"",length:0,toArray:function(){return J.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:J.call(this)},pushStack:function(e){var t=re.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return re.each(this,e,t)},map:function(e){return this.pushStack(re.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(J.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:K,sort:G.sort,splice:G.splice},re.extend=re.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||re.isFunction(s)||(s={}),a===l&&(s=this,a--);l>a;a++)if(null!=(r=arguments[a]))for(i in r)e=s[i],n=r[i],s!==n&&(u&&n&&(re.isPlainObject(n)||(t=re.isArray(n)))?(t?(t=!1,o=e&&re.isArray(e)?e:[]):o=e&&re.isPlainObject(e)?e:{},s[i]=re.extend(u,o,n)):void 0!==n&&(s[i]=n));return s},re.extend({expando:"jQuery"+(ie+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===re.type(e)},isArray:Array.isArray||function(e){return"array"===re.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!re.isArray(e)&&e-parseFloat(e)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==re.type(e)||e.nodeType||re.isWindow(e))return!1;try{if(e.constructor&&!te.call(e,"constructor")&&!te.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(ne.ownLast)for(t in e)return te.call(e,t);for(t in e);return void 0===t||te.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?Z[ee.call(e)]||"object":typeof e},globalEval:function(t){t&&re.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(se,"ms-").replace(ae,le)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,i){var r,o=0,s=e.length,a=n(e);if(i){if(a)for(;s>o&&(r=t.apply(e[o],i),r!==!1);o++);else for(o in e)if(r=t.apply(e[o],i),r===!1)break}else if(a)for(;s>o&&(r=t.call(e[o],o,e[o]),r!==!1);o++);else for(o in e)if(r=t.call(e[o],o,e[o]),r===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(oe,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(n(Object(e))?re.merge(i,"string"==typeof e?[e]:e):K.call(i,e)),i},inArray:function(e,t,n){var i;if(t){if(Q)return Q.call(t,e,n);for(i=t.length,n=n?0>n?Math.max(0,i+n):n:0;i>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;n>i;)e[r++]=t[i++];if(n!==n)for(;void 0!==t[i];)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){for(var i,r=[],o=0,s=e.length,a=!n;s>o;o++)i=!t(e[o],o),i!==a&&r.push(e[o]);return r},map:function(e,t,i){var r,o=0,s=e.length,a=n(e),l=[];if(a)for(;s>o;o++)r=t(e[o],o,i),null!=r&&l.push(r);else for(o in e)r=t(e[o],o,i),null!=r&&l.push(r);return Y.apply([],l)},guid:1,proxy:function(e,t){var n,i,r;return"string"==typeof t&&(r=e[t],t=e,e=r),re.isFunction(e)?(n=J.call(arguments,2),i=function(){return e.apply(t||this,n.concat(J.call(arguments)))},i.guid=e.guid=e.guid||re.guid++,i):void 0},now:function(){return+new Date},support:ne}),re.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){Z["[object "+t+"]"]=t.toLowerCase()});var ue=function(e){function t(e,t,n,i){var r,o,s,a,l,u,f,h,p,v;if((t?t.ownerDocument||t:B)!==j&&O(t),t=t||j,n=n||[],a=t.nodeType,"string"!=typeof e||!e||1!==a&&9!==a&&11!==a)return n;if(!i&&L){if(11!==a&&(r=ye.exec(e)))if(s=r[1]){if(9===a){if(o=t.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(s))&&F(t,o)&&o.id===s)return n.push(o),n}else{if(r[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((s=r[3])&&x.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(s)),n}if(x.qsa&&(!P||!P.test(e))){if(h=f=R,p=t,v=1!==a&&e,1===a&&"object"!==t.nodeName.toLowerCase()){for(u=E(e),(f=t.getAttribute("id"))?h=f.replace(we,"\\$&"):t.setAttribute("id",h),h="[id='"+h+"'] ",l=u.length;l--;)u[l]=h+d(u[l]);p=be.test(e)&&c(t.parentNode)||t,v=u.join(",")}if(v)try{return Q.apply(n,p.querySelectorAll(v)),n}catch(e){}finally{f||t.removeAttribute("id")}}}return A(e.replace(le,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>C.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[R]=!0,e}function r(e){var t=j.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),i=e.length;i--;)C.attrHandle[n[i]]=t}function s(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||X)-(~e.sourceIndex||X);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function u(e){return i(function(t){return t=+t,i(function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function d(e){for(var t=0,n=e.length,i="";n>t;t++)i+=e[t].value;return i}function h(e,t,n){var i=t.dir,r=n&&"parentNode"===i,o=I++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||r)return e(t,n,o)}:function(t,n,s){var a,l,u=[q,o];if(s){for(;t=t[i];)if((1===t.nodeType||r)&&e(t,n,s))return!0}else for(;t=t[i];)if(1===t.nodeType||r){if(l=t[R]||(t[R]={}),(a=l[i])&&a[0]===q&&a[1]===o)return u[2]=a[2];if(l[i]=u,u[2]=e(t,n,s))return!0}}}function p(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function v(e,n,i){for(var r=0,o=n.length;o>r;r++)t(e,n[r],i);return i}function m(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,u=null!=t;l>a;a++)(o=e[a])&&(!n||n(o,i,r))&&(s.push(o),u&&t.push(a));return s}function g(e,t,n,r,o,s){return r&&!r[R]&&(r=g(r)),o&&!o[R]&&(o=g(o,s)),i(function(i,s,a,l){var u,c,f,d=[],h=[],p=s.length,g=i||v(t||"*",a.nodeType?[a]:a,[]),y=!e||!i&&t?g:m(g,d,e,a,l),b=n?o||(i?e:p||r)?[]:s:y;if(n&&n(y,b,a,l),r)for(u=m(b,h),r(u,[],a,l),c=u.length;c--;)(f=u[c])&&(b[h[c]]=!(y[h[c]]=f));if(i){if(o||e){if(o){for(u=[],c=b.length;c--;)(f=b[c])&&u.push(y[c]=f);o(null,b=[],u,l)}for(c=b.length;c--;)(f=b[c])&&(u=o?ee(i,f):d[c])>-1&&(i[u]=!(s[u]=f))}}else b=m(b===s?b.splice(p,b.length):b),o?o(null,s,b,l):Q.apply(s,b)})}function y(e){for(var t,n,i,r=e.length,o=C.relative[e[0].type],s=o||C.relative[" "],a=o?1:0,l=h(function(e){return e===t},s,!0),u=h(function(e){return ee(t,e)>-1},s,!0),c=[function(e,n,i){var r=!o&&(i||n!==S)||((t=n).nodeType?l(e,n,i):u(e,n,i));return t=null,r}];r>a;a++)if(n=C.relative[e[a].type])c=[h(p(c),n)];else{if(n=C.filter[e[a].type].apply(null,e[a].matches),n[R]){for(i=++a;r>i&&!C.relative[e[i].type];i++);return g(a>1&&p(c),a>1&&d(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(le,"$1"),n,i>a&&y(e.slice(a,i)),r>i&&y(e=e.slice(i)),r>i&&d(e))}c.push(n)}return p(c)}function b(e,n){var r=n.length>0,o=e.length>0,s=function(i,s,a,l,u){var c,f,d,h=0,p="0",v=i&&[],g=[],y=S,b=i||o&&C.find.TAG("*",u),w=q+=null==y?1:Math.random()||.1,x=b.length;for(u&&(S=s!==j&&s);p!==x&&null!=(c=b[p]);p++){if(o&&c){for(f=0;d=e[f++];)if(d(c,s,a)){l.push(c);break}u&&(q=w)}r&&((c=!d&&c)&&h--,i&&v.push(c))}if(h+=p,r&&p!==h){for(f=0;d=n[f++];)d(v,g,s,a);if(i){if(h>0)for(;p--;)v[p]||g[p]||(g[p]=Y.call(l));g=m(g)}Q.apply(l,g),u&&!i&&g.length>0&&h+n.length>1&&t.uniqueSort(l)}return u&&(q=w,S=y),v};return r?i(s):s}var w,x,C,_,k,E,T,A,S,N,$,O,j,D,L,P,M,H,F,R="sizzle"+1*new Date,B=e.document,q=0,I=0,W=n(),z=n(),U=n(),V=function(e,t){return e===t&&($=!0),0},X=1<<31,G={}.hasOwnProperty,J=[],Y=J.pop,K=J.push,Q=J.push,Z=J.slice,ee=function(e,t){for(var n=0,i=e.length;i>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",ie="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",re=ie.replace("w","w#"),oe="\\["+ne+"*("+ie+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",se=":("+ie+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+oe+")*)|.*)\\)|)",ae=new RegExp(ne+"+","g"),le=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),fe=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),de=new RegExp(se),he=new RegExp("^"+re+"$"),pe={ID:new RegExp("^#("+ie+")"),CLASS:new RegExp("^\\.("+ie+")"),TAG:new RegExp("^("+ie.replace("w","w*")+")"),ATTR:new RegExp("^"+oe),PSEUDO:new RegExp("^"+se),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},ve=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ge=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,be=/[+~]/,we=/'|\\/g,xe=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),Ce=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},_e=function(){O()};try{Q.apply(J=Z.call(B.childNodes),B.childNodes),J[B.childNodes.length].nodeType}catch(e){Q={apply:J.length?function(e,t){K.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}x=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},O=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:B;return i!==j&&9===i.nodeType&&i.documentElement?(j=i,D=i.documentElement,n=i.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",_e,!1):n.attachEvent&&n.attachEvent("onunload",_e)),L=!k(i),x.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=r(function(e){return e.appendChild(i.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=ge.test(i.getElementsByClassName),x.getById=r(function(e){return D.appendChild(e).id=R,!i.getElementsByName||!i.getElementsByName(R).length}),x.getById?(C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&L){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},C.filter.ID=function(e){var t=e.replace(xe,Ce);return function(e){return e.getAttribute("id")===t}}):(delete C.find.ID,C.filter.ID=function(e){var t=e.replace(xe,Ce);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),C.find.TAG=x.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},C.find.CLASS=x.getElementsByClassName&&function(e,t){return L?t.getElementsByClassName(e):void 0},M=[],P=[],(x.qsa=ge.test(i.querySelectorAll))&&(r(function(e){D.appendChild(e).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||P.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+R+"-]").length||P.push("~="),e.querySelectorAll(":checked").length||P.push(":checked"),e.querySelectorAll("a#"+R+"+*").length||P.push(".#.+[+~]")}),r(function(e){var t=i.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&P.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||P.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),P.push(",.*:")})),(x.matchesSelector=ge.test(H=D.matches||D.webkitMatchesSelector||D.mozMatchesSelector||D.oMatchesSelector||D.msMatchesSelector))&&r(function(e){x.disconnectedMatch=H.call(e,"div"),H.call(e,"[s!='']:x"),M.push("!=",se)}),P=P.length&&new RegExp(P.join("|")),M=M.length&&new RegExp(M.join("|")),t=ge.test(D.compareDocumentPosition),F=t||ge.test(D.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},V=t?function(e,t){if(e===t)return $=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===i||e.ownerDocument===B&&F(B,e)?-1:t===i||t.ownerDocument===B&&F(B,t)?1:N?ee(N,e)-ee(N,t):0:4&n?-1:1)}:function(e,t){if(e===t)return $=!0,0;var n,r=0,o=e.parentNode,a=t.parentNode,l=[e],u=[t];if(!o||!a)return e===i?-1:t===i?1:o?-1:a?1:N?ee(N,e)-ee(N,t):0;if(o===a)return s(e,t);for(n=e;n=n.parentNode;)l.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;l[r]===u[r];)r++;return r?s(l[r],u[r]):l[r]===B?-1:u[r]===B?1:0},i):j},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==j&&O(e),n=n.replace(fe,"='$1']"),!(!x.matchesSelector||!L||M&&M.test(n)||P&&P.test(n)))try{var i=H.call(e,n);if(i||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,j,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==j&&O(e),F(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==j&&O(e);var n=C.attrHandle[t.toLowerCase()],i=n&&G.call(C.attrHandle,t.toLowerCase())?n(e,t,!L):void 0;return void 0!==i?i:x.attributes||!L?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if($=!x.detectDuplicates,N=!x.sortStable&&e.slice(0),e.sort(V),$){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return N=null,e},_=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=_(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=_(t);return n},C=t.selectors={cacheLength:50,createPseudo:i,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,Ce),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,Ce),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=E(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,Ce).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var o=t.attr(r,e);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(ae," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,f,d,h,p,v=o!==s?"nextSibling":"previousSibling",m=t.parentNode,g=a&&t.nodeName.toLowerCase(),y=!l&&!a;if(m){if(o){for(;v;){for(f=t;f=f[v];)if(a?f.nodeName.toLowerCase()===g:1===f.nodeType)return!1;p=v="only"===e&&!p&&"nextSibling"}return!0}if(p=[s?m.firstChild:m.lastChild],s&&y){for(c=m[R]||(m[R]={}),u=c[e]||[],h=u[0]===q&&u[1],d=u[0]===q&&u[2],f=h&&m.childNodes[h];f=++h&&f&&f[v]||(d=h=0)||p.pop();)if(1===f.nodeType&&++d&&f===t){c[e]=[q,h,d];break}}else if(y&&(u=(t[R]||(t[R]={}))[e])&&u[0]===q)d=u[1];else for(;(f=++h&&f&&f[v]||(d=h=0)||p.pop())&&((a?f.nodeName.toLowerCase()!==g:1!==f.nodeType)||!++d||(y&&((f[R]||(f[R]={}))[e]=[q,d]),f!==t)););return d-=r,d===i||d%i===0&&d/i>=0}}},PSEUDO:function(e,n){var r,o=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[R]?o(n):o.length>1?(r=[e,e,"",n],C.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=o(e,n),s=r.length;s--;)i=ee(e,r[s]),e[i]=!(t[i]=r[s])}):function(e){return o(e,0,r)}):o}},pseudos:{not:i(function(e){var t=[],n=[],r=T(e.replace(le,"$1"));return r[R]?i(function(e,t,n,i){for(var o,s=r(e,null,i,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(xe,Ce),function(t){return(t.textContent||t.innerText||_(t)).indexOf(e)>-1}}),lang:i(function(e){return he.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xe,Ce).toLowerCase(),function(t){var n;do if(n=L?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===D},focus:function(e){return e===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return ve.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[0>n?n+t:n]}),even:u(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var i=0>n?n+t:n;--i>=0;)e.push(i);return e}),gt:u(function(e,t,n){for(var i=0>n?n+t:n;++i<t;)e.push(i);return e})}},C.pseudos.nth=C.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})C.pseudos[w]=l(w);return f.prototype=C.filters=C.pseudos,C.setFilters=new f,E=t.tokenize=function(e,n){var i,r,o,s,a,l,u,c=z[e+" "];if(c)return n?0:c.slice(0);for(a=e,l=[],u=C.preFilter;a;){(!i||(r=ue.exec(a)))&&(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=ce.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(le," ")}),a=a.slice(i.length));for(s in C.filter)!(r=pe[s].exec(a))||u[s]&&!(r=u[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?t.error(e):z(e,l).slice(0)},T=t.compile=function(e,t){var n,i=[],r=[],o=U[e+" "];if(!o){for(t||(t=E(e)),n=t.length;n--;)o=y(t[n]),o[R]?i.push(o):r.push(o);o=U(e,b(r,i)),o.selector=e}return o},A=t.select=function(e,t,n,i){var r,o,s,a,l,u="function"==typeof e&&e,f=!i&&E(e=u.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&x.getById&&9===t.nodeType&&L&&C.relative[o[1].type]){if(t=(C.find.ID(s.matches[0].replace(xe,Ce),t)||[])[0],!t)return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=pe.needsContext.test(e)?0:o.length;r--&&(s=o[r],!C.relative[a=s.type]);)if((l=C.find[a])&&(i=l(s.matches[0].replace(xe,Ce),be.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(r,1),e=i.length&&d(o),!e)return Q.apply(n,i),n;break}}return(u||T(e,f))(i,t,!L,n,be.test(e)&&c(t.parentNode)||t),n},x.sortStable=R.split("").sort(V).join("")===R,x.detectDuplicates=!!$,O(),x.sortDetached=r(function(e){return 1&e.compareDocumentPosition(j.createElement("div"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var i;return n?void 0:e[t]===!0?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);re.find=ue,re.expr=ue.selectors,re.expr[":"]=re.expr.pseudos,re.unique=ue.uniqueSort,re.text=ue.getText,re.isXMLDoc=ue.isXML,re.contains=ue.contains;var ce=re.expr.match.needsContext,fe=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,de=/^.[^:#\[\.,]*$/;re.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?re.find.matchesSelector(i,e)?[i]:[]:re.find.matches(e,re.grep(t,function(e){return 1===e.nodeType}))},re.fn.extend({find:function(e){var t,n=[],i=this,r=i.length;if("string"!=typeof e)return this.pushStack(re(e).filter(function(){for(t=0;r>t;t++)if(re.contains(i[t],this))return!0}));for(t=0;r>t;t++)re.find(e,i[t],n);return n=this.pushStack(r>1?re.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&ce.test(e)?re(e):e||[],!1).length}});var he,pe=e.document,ve=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,me=re.fn.init=function(e,t){var n,i;if(!e)return this;if("string"==typeof e){if(n="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:ve.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||he).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof re?t[0]:t,re.merge(this,re.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:pe,!0)),fe.test(n[1])&&re.isPlainObject(t))for(n in t)re.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}if(i=pe.getElementById(n[2]),i&&i.parentNode){if(i.id!==n[2])return he.find(e);this.length=1,this[0]=i}return this.context=pe,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):re.isFunction(e)?"undefined"!=typeof he.ready?he.ready(e):e(re):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),re.makeArray(e,this))};me.prototype=re.fn,he=re(pe);var ge=/^(?:parents|prev(?:Until|All))/,ye={children:!0,contents:!0,next:!0,
prev:!0};re.extend({dir:function(e,t,n){for(var i=[],r=e[t];r&&9!==r.nodeType&&(void 0===n||1!==r.nodeType||!re(r).is(n));)1===r.nodeType&&i.push(r),r=r[t];return i},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),re.fn.extend({has:function(e){var t,n=re(e,this),i=n.length;return this.filter(function(){for(t=0;i>t;t++)if(re.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,i=0,r=this.length,o=[],s=ce.test(e)||"string"!=typeof e?re(e,t||this.context):0;r>i;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&re.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?re.unique(o):o)},index:function(e){return e?"string"==typeof e?re.inArray(this[0],re(e)):re.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(re.unique(re.merge(this.get(),re(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),re.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return re.dir(e,"parentNode")},parentsUntil:function(e,t,n){return re.dir(e,"parentNode",n)},next:function(e){return r(e,"nextSibling")},prev:function(e){return r(e,"previousSibling")},nextAll:function(e){return re.dir(e,"nextSibling")},prevAll:function(e){return re.dir(e,"previousSibling")},nextUntil:function(e,t,n){return re.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return re.dir(e,"previousSibling",n)},siblings:function(e){return re.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return re.sibling(e.firstChild)},contents:function(e){return re.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:re.merge([],e.childNodes)}},function(e,t){re.fn[e]=function(n,i){var r=re.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=re.filter(i,r)),this.length>1&&(ye[e]||(r=re.unique(r)),ge.test(e)&&(r=r.reverse())),this.pushStack(r)}});var be=/\S+/g,we={};re.Callbacks=function(e){e="string"==typeof e?we[e]||o(e):re.extend({},e);var t,n,i,r,s,a,l=[],u=!e.once&&[],c=function(o){for(n=e.memory&&o,i=!0,s=a||0,a=0,r=l.length,t=!0;l&&r>s;s++)if(l[s].apply(o[0],o[1])===!1&&e.stopOnFalse){n=!1;break}t=!1,l&&(u?u.length&&c(u.shift()):n?l=[]:f.disable())},f={add:function(){if(l){var i=l.length;!function t(n){re.each(n,function(n,i){var r=re.type(i);"function"===r?e.unique&&f.has(i)||l.push(i):i&&i.length&&"string"!==r&&t(i)})}(arguments),t?r=l.length:n&&(a=i,c(n))}return this},remove:function(){return l&&re.each(arguments,function(e,n){for(var i;(i=re.inArray(n,l,i))>-1;)l.splice(i,1),t&&(r>=i&&r--,s>=i&&s--)}),this},has:function(e){return e?re.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],r=0,this},disable:function(){return l=u=n=void 0,this},disabled:function(){return!l},lock:function(){return u=void 0,n||f.disable(),this},locked:function(){return!u},fireWith:function(e,n){return!l||i&&!u||(n=n||[],n=[e,n.slice?n.slice():n],t?u.push(n):c(n)),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!i}};return f},re.extend({Deferred:function(e){var t=[["resolve","done",re.Callbacks("once memory"),"resolved"],["reject","fail",re.Callbacks("once memory"),"rejected"],["notify","progress",re.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var e=arguments;return re.Deferred(function(n){re.each(t,function(t,o){var s=re.isFunction(e[t])&&e[t];r[o[1]](function(){var e=s&&s.apply(this,arguments);e&&re.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===i?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?re.extend(e,i):i}},r={};return i.pipe=i.then,re.each(t,function(e,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),e&&e.call(r,r),r},when:function(e){var t,n,i,r=0,o=J.call(arguments),s=o.length,a=1!==s||e&&re.isFunction(e.promise)?s:0,l=1===a?e:re.Deferred(),u=function(e,n,i){return function(r){n[e]=this,i[e]=arguments.length>1?J.call(arguments):r,i===t?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(s>1)for(t=new Array(s),n=new Array(s),i=new Array(s);s>r;r++)o[r]&&re.isFunction(o[r].promise)?o[r].promise().done(u(r,i,o)).fail(l.reject).progress(u(r,n,t)):--a;return a||l.resolveWith(i,o),l.promise()}});var xe;re.fn.ready=function(e){return re.ready.promise().done(e),this},re.extend({isReady:!1,readyWait:1,holdReady:function(e){e?re.readyWait++:re.ready(!0)},ready:function(e){if(e===!0?!--re.readyWait:!re.isReady){if(!pe.body)return setTimeout(re.ready);re.isReady=!0,e!==!0&&--re.readyWait>0||(xe.resolveWith(pe,[re]),re.fn.triggerHandler&&(re(pe).triggerHandler("ready"),re(pe).off("ready")))}}}),re.ready.promise=function(t){if(!xe)if(xe=re.Deferred(),"complete"===pe.readyState)setTimeout(re.ready);else if(pe.addEventListener)pe.addEventListener("DOMContentLoaded",a,!1),e.addEventListener("load",a,!1);else{pe.attachEvent("onreadystatechange",a),e.attachEvent("onload",a);var n=!1;try{n=null==e.frameElement&&pe.documentElement}catch(e){}n&&n.doScroll&&!function e(){if(!re.isReady){try{n.doScroll("left")}catch(t){return setTimeout(e,50)}s(),re.ready()}}()}return xe.promise(t)};var Ce,_e="undefined";for(Ce in re(ne))break;ne.ownLast="0"!==Ce,ne.inlineBlockNeedsLayout=!1,re(function(){var e,t,n,i;n=pe.getElementsByTagName("body")[0],n&&n.style&&(t=pe.createElement("div"),i=pe.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),typeof t.style.zoom!==_e&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",ne.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(i))}),function(){var e=pe.createElement("div");if(null==ne.deleteExpando){ne.deleteExpando=!0;try{delete e.test}catch(e){ne.deleteExpando=!1}}e=null}(),re.acceptData=function(e){var t=re.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||t!==!0&&e.getAttribute("classid")===t)};var ke=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ee=/([A-Z])/g;re.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?re.cache[e[re.expando]]:e[re.expando],!!e&&!u(e)},data:function(e,t,n){return c(e,t,n)},removeData:function(e,t){return f(e,t)},_data:function(e,t,n){return c(e,t,n,!0)},_removeData:function(e,t){return f(e,t,!0)}}),re.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=re.data(o),1===o.nodeType&&!re._data(o,"parsedAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=re.camelCase(i.slice(5)),l(o,i,r[i])));re._data(o,"parsedAttrs",!0)}return r}return"object"==typeof e?this.each(function(){re.data(this,e)}):arguments.length>1?this.each(function(){re.data(this,e,t)}):o?l(o,e,re.data(o,e)):void 0},removeData:function(e){return this.each(function(){re.removeData(this,e)})}}),re.extend({queue:function(e,t,n){var i;return e?(t=(t||"fx")+"queue",i=re._data(e,t),n&&(!i||re.isArray(n)?i=re._data(e,t,re.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=re.queue(e,t),i=n.length,r=n.shift(),o=re._queueHooks(e,t),s=function(){re.dequeue(e,t)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return re._data(e,n)||re._data(e,n,{empty:re.Callbacks("once memory").add(function(){re._removeData(e,t+"queue"),re._removeData(e,n)})})}}),re.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?re.queue(this[0],e):void 0===t?this:this.each(function(){var n=re.queue(this,e,t);re._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&re.dequeue(this,e)})},dequeue:function(e){return this.each(function(){re.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=re.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=re._data(o[s],e+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var Te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ae=["Top","Right","Bottom","Left"],Se=function(e,t){return e=t||e,"none"===re.css(e,"display")||!re.contains(e.ownerDocument,e)},Ne=re.access=function(e,t,n,i,r,o,s){var a=0,l=e.length,u=null==n;if("object"===re.type(n)){r=!0;for(a in n)re.access(e,t,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,re.isFunction(i)||(s=!0),u&&(s?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(re(e),n)})),t))for(;l>a;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:u?t.call(e):l?t(e[0],n):o},$e=/^(?:checkbox|radio)$/i;!function(){var e=pe.createElement("input"),t=pe.createElement("div"),n=pe.createDocumentFragment();if(t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ne.leadingWhitespace=3===t.firstChild.nodeType,ne.tbody=!t.getElementsByTagName("tbody").length,ne.htmlSerialize=!!t.getElementsByTagName("link").length,ne.html5Clone="<:nav></:nav>"!==pe.createElement("nav").cloneNode(!0).outerHTML,e.type="checkbox",e.checked=!0,n.appendChild(e),ne.appendChecked=e.checked,t.innerHTML="<textarea>x</textarea>",ne.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,n.appendChild(t),t.innerHTML="<input type='radio' checked='checked' name='t'/>",ne.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,ne.noCloneEvent=!0,t.attachEvent&&(t.attachEvent("onclick",function(){ne.noCloneEvent=!1}),t.cloneNode(!0).click()),null==ne.deleteExpando){ne.deleteExpando=!0;try{delete t.test}catch(e){ne.deleteExpando=!1}}}(),function(){var t,n,i=pe.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(ne[t+"Bubbles"]=n in e)||(i.setAttribute(n,"t"),ne[t+"Bubbles"]=i.attributes[n].expando===!1);i=null}();var Oe=/^(?:input|select|textarea)$/i,je=/^key/,De=/^(?:mouse|pointer|contextmenu)|click/,Le=/^(?:focusinfocus|focusoutblur)$/,Pe=/^([^.]*)(?:\.(.+)|)$/;re.event={global:{},add:function(e,t,n,i,r){var o,s,a,l,u,c,f,d,h,p,v,m=re._data(e);if(m){for(n.handler&&(l=n,n=l.handler,r=l.selector),n.guid||(n.guid=re.guid++),(s=m.events)||(s=m.events={}),(c=m.handle)||(c=m.handle=function(e){return typeof re===_e||e&&re.event.triggered===e.type?void 0:re.event.dispatch.apply(c.elem,arguments)},c.elem=e),t=(t||"").match(be)||[""],a=t.length;a--;)o=Pe.exec(t[a])||[],h=v=o[1],p=(o[2]||"").split(".").sort(),h&&(u=re.event.special[h]||{},h=(r?u.delegateType:u.bindType)||h,u=re.event.special[h]||{},f=re.extend({type:h,origType:v,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&re.expr.match.needsContext.test(r),namespace:p.join(".")},l),(d=s[h])||(d=s[h]=[],d.delegateCount=0,u.setup&&u.setup.call(e,i,p,c)!==!1||(e.addEventListener?e.addEventListener(h,c,!1):e.attachEvent&&e.attachEvent("on"+h,c))),u.add&&(u.add.call(e,f),f.handler.guid||(f.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,f):d.push(f),re.event.global[h]=!0);e=null}},remove:function(e,t,n,i,r){var o,s,a,l,u,c,f,d,h,p,v,m=re.hasData(e)&&re._data(e);if(m&&(c=m.events)){for(t=(t||"").match(be)||[""],u=t.length;u--;)if(a=Pe.exec(t[u])||[],h=v=a[1],p=(a[2]||"").split(".").sort(),h){for(f=re.event.special[h]||{},h=(i?f.delegateType:f.bindType)||h,d=c[h]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=d.length;o--;)s=d[o],!r&&v!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||i&&i!==s.selector&&("**"!==i||!s.selector)||(d.splice(o,1),s.selector&&d.delegateCount--,f.remove&&f.remove.call(e,s));l&&!d.length&&(f.teardown&&f.teardown.call(e,p,m.handle)!==!1||re.removeEvent(e,h,m.handle),delete c[h])}else for(h in c)re.event.remove(e,h+t[u],n,i,!0);re.isEmptyObject(c)&&(delete m.handle,re._removeData(e,"events"))}},trigger:function(t,n,i,r){var o,s,a,l,u,c,f,d=[i||pe],h=te.call(t,"type")?t.type:t,p=te.call(t,"namespace")?t.namespace.split("."):[];if(a=c=i=i||pe,3!==i.nodeType&&8!==i.nodeType&&!Le.test(h+re.event.triggered)&&(h.indexOf(".")>=0&&(p=h.split("."),h=p.shift(),p.sort()),s=h.indexOf(":")<0&&"on"+h,t=t[re.expando]?t:new re.Event(h,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=p.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:re.makeArray(n,[t]),u=re.event.special[h]||{},r||!u.trigger||u.trigger.apply(i,n)!==!1)){if(!r&&!u.noBubble&&!re.isWindow(i)){for(l=u.delegateType||h,Le.test(l+h)||(a=a.parentNode);a;a=a.parentNode)d.push(a),c=a;c===(i.ownerDocument||pe)&&d.push(c.defaultView||c.parentWindow||e)}for(f=0;(a=d[f++])&&!t.isPropagationStopped();)t.type=f>1?l:u.bindType||h,o=(re._data(a,"events")||{})[t.type]&&re._data(a,"handle"),o&&o.apply(a,n),o=s&&a[s],o&&o.apply&&re.acceptData(a)&&(t.result=o.apply(a,n),t.result===!1&&t.preventDefault());if(t.type=h,!r&&!t.isDefaultPrevented()&&(!u._default||u._default.apply(d.pop(),n)===!1)&&re.acceptData(i)&&s&&i[h]&&!re.isWindow(i)){c=i[s],c&&(i[s]=null),re.event.triggered=h;try{i[h]()}catch(e){}re.event.triggered=void 0,c&&(i[s]=c)}return t.result}},dispatch:function(e){e=re.event.fix(e);var t,n,i,r,o,s=[],a=J.call(arguments),l=(re._data(this,"events")||{})[e.type]||[],u=re.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,e)!==!1){for(s=re.event.handlers.call(this,e,l),t=0;(r=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=r.elem,o=0;(i=r.handlers[o++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,n=((re.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,a),void 0!==n&&(e.result=n)===!1&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,r,o,s=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&(!e.button||"click"!==e.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==e.type)){for(r=[],o=0;a>o;o++)i=t[o],n=i.selector+" ",void 0===r[n]&&(r[n]=i.needsContext?re(n,this).index(l)>=0:re.find(n,this,null,[l]).length),r[n]&&r.push(i);r.length&&s.push({elem:l,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},fix:function(e){if(e[re.expando])return e;var t,n,i,r=e.type,o=e,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=De.test(r)?this.mouseHooks:je.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,e=new re.Event(o),t=i.length;t--;)n=i[t],e[n]=o[n];return e.target||(e.target=o.srcElement||pe),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,r,o=t.button,s=t.fromElement;return null==e.pageX&&null!=t.clientX&&(i=e.target.ownerDocument||pe,r=i.documentElement,n=i.body,e.pageX=t.clientX+(r&&r.scrollLeft||n&&n.scrollLeft||0)-(r&&r.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||n&&n.scrollTop||0)-(r&&r.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&s&&(e.relatedTarget=s===e.target?t.toElement:s),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==p()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===p()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return re.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(e){return re.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,i){var r=re.extend(new re.Event,n,{type:e,isSimulated:!0,originalEvent:{}});i?re.event.trigger(r,null,t):re.event.dispatch.call(t,r),r.isDefaultPrevented()&&n.preventDefault()}},re.removeEvent=pe.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var i="on"+t;e.detachEvent&&(typeof e[i]===_e&&(e[i]=null),e.detachEvent(i,n))},re.Event=function(e,t){return this instanceof re.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?d:h):this.type=e,t&&re.extend(this,t),this.timeStamp=e&&e.timeStamp||re.now(),void(this[re.expando]=!0)):new re.Event(e,t)},re.Event.prototype={isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=d,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=d,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=d,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},re.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){re.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return(!r||r!==i&&!re.contains(i,r))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),ne.submitBubbles||(re.event.special.submit={setup:function(){return!re.nodeName(this,"form")&&void re.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=re.nodeName(t,"input")||re.nodeName(t,"button")?t.form:void 0;n&&!re._data(n,"submitBubbles")&&(re.event.add(n,"submit._submit",function(e){e._submit_bubble=!0}),re._data(n,"submitBubbles",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&re.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return!re.nodeName(this,"form")&&void re.event.remove(this,"._submit")}}),ne.changeBubbles||(re.event.special.change={setup:function(){return Oe.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(re.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),re.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),re.event.simulate("change",this,e,!0)})),!1):void re.event.add(this,"beforeactivate._change",function(e){var t=e.target;Oe.test(t.nodeName)&&!re._data(t,"changeBubbles")&&(re.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||re.event.simulate("change",this.parentNode,e,!0)}),re._data(t,"changeBubbles",!0))})},handle:function(e){var t=e.target;return this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type?e.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return re.event.remove(this,"._change"),!Oe.test(this.nodeName)}}),ne.focusinBubbles||re.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){re.event.simulate(t,e.target,re.event.fix(e),!0)};re.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=re._data(i,t);r||i.addEventListener(e,n,!0),re._data(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=re._data(i,t)-1;r?re._data(i,t,r):(i.removeEventListener(e,n,!0),re._removeData(i,t))}}}),re.fn.extend({on:function(e,t,n,i,r){var o,s;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(o in e)this.on(o,t,n,e[o],r);return this}if(null==n&&null==i?(i=t,n=t=void 0):null==i&&("string"==typeof t?(i=n,n=void 0):(i=n,n=t,t=void 0)),i===!1)i=h;else if(!i)return this;return 1===r&&(s=i,i=function(e){return re().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=re.guid++)),this.each(function(){re.event.add(this,e,i,n,t)})},one:function(e,t,n,i){return this.on(e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,re(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=h),this.each(function(){re.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){re.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?re.event.trigger(e,t,n,!0):void 0}});var Me="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",He=/ jQuery\d+="(?:null|\d+)"/g,Fe=new RegExp("<(?:"+Me+")[\\s/>]","i"),Re=/^\s+/,Be=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,qe=/<([\w:]+)/,Ie=/<tbody/i,We=/<|&#?\w+;/,ze=/<(?:script|style|link)/i,Ue=/checked\s*(?:[^=]|=\s*.checked.)/i,Ve=/^$|\/(?:java|ecma)script/i,Xe=/^true\/(.*)/,Ge=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Je={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ne.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Ye=v(pe),Ke=Ye.appendChild(pe.createElement("div"));Je.optgroup=Je.option,Je.tbody=Je.tfoot=Je.colgroup=Je.caption=Je.thead,Je.th=Je.td,re.extend({clone:function(e,t,n){var i,r,o,s,a,l=re.contains(e.ownerDocument,e);if(ne.html5Clone||re.isXMLDoc(e)||!Fe.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Ke.innerHTML=e.outerHTML,Ke.removeChild(o=Ke.firstChild)),!(ne.noCloneEvent&&ne.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||re.isXMLDoc(e)))for(i=m(o),a=m(e),s=0;null!=(r=a[s]);++s)i[s]&&_(r,i[s]);if(t)if(n)for(a=a||m(e),i=i||m(o),s=0;null!=(r=a[s]);s++)C(r,i[s]);else C(e,o);return i=m(o,"script"),i.length>0&&x(i,!l&&m(e,"script")),i=a=r=null,o},buildFragment:function(e,t,n,i){for(var r,o,s,a,l,u,c,f=e.length,d=v(t),h=[],p=0;f>p;p++)if(o=e[p],o||0===o)if("object"===re.type(o))re.merge(h,o.nodeType?[o]:o);else if(We.test(o)){for(a=a||d.appendChild(t.createElement("div")),l=(qe.exec(o)||["",""])[1].toLowerCase(),c=Je[l]||Je._default,a.innerHTML=c[1]+o.replace(Be,"<$1></$2>")+c[2],r=c[0];r--;)a=a.lastChild;if(!ne.leadingWhitespace&&Re.test(o)&&h.push(t.createTextNode(Re.exec(o)[0])),!ne.tbody)for(o="table"!==l||Ie.test(o)?"<table>"!==c[1]||Ie.test(o)?0:a:a.firstChild,r=o&&o.childNodes.length;r--;)re.nodeName(u=o.childNodes[r],"tbody")&&!u.childNodes.length&&o.removeChild(u);for(re.merge(h,a.childNodes),a.textContent="";a.firstChild;)a.removeChild(a.firstChild);a=d.lastChild}else h.push(t.createTextNode(o));for(a&&d.removeChild(a),ne.appendChecked||re.grep(m(h,"input"),g),p=0;o=h[p++];)if((!i||-1===re.inArray(o,i))&&(s=re.contains(o.ownerDocument,o),a=m(d.appendChild(o),"script"),s&&x(a),n))for(r=0;o=a[r++];)Ve.test(o.type||"")&&n.push(o);return a=null,d},cleanData:function(e,t){for(var n,i,r,o,s=0,a=re.expando,l=re.cache,u=ne.deleteExpando,c=re.event.special;null!=(n=e[s]);s++)if((t||re.acceptData(n))&&(r=n[a],o=r&&l[r])){if(o.events)for(i in o.events)c[i]?re.event.remove(n,i):re.removeEvent(n,i,o.handle);l[r]&&(delete l[r],u?delete n[a]:typeof n.removeAttribute!==_e?n.removeAttribute(a):n[a]=null,G.push(r))}}}),re.fn.extend({text:function(e){return Ne(this,function(e){return void 0===e?re.text(this):this.empty().append((this[0]&&this[0].ownerDocument||pe).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=y(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=y(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,i=e?re.filter(e,this):this,r=0;null!=(n=i[r]);r++)t||1!==n.nodeType||re.cleanData(m(n)),n.parentNode&&(t&&re.contains(n.ownerDocument,n)&&x(m(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&re.cleanData(m(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&re.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return re.clone(this,e,t)})},html:function(e){return Ne(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(He,""):void 0;if(!("string"!=typeof e||ze.test(e)||!ne.htmlSerialize&&Fe.test(e)||!ne.leadingWhitespace&&Re.test(e)||Je[(qe.exec(e)||["",""])[1].toLowerCase()])){e=e.replace(Be,"<$1></$2>");try{for(;i>n;n++)t=this[n]||{},1===t.nodeType&&(re.cleanData(m(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,re.cleanData(m(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=Y.apply([],e);var n,i,r,o,s,a,l=0,u=this.length,c=this,f=u-1,d=e[0],h=re.isFunction(d);if(h||u>1&&"string"==typeof d&&!ne.checkClone&&Ue.test(d))return this.each(function(n){var i=c.eq(n);h&&(e[0]=d.call(this,n,i.html())),i.domManip(e,t)});if(u&&(a=re.buildFragment(e,this[0].ownerDocument,!1,this),n=a.firstChild,1===a.childNodes.length&&(a=n),n)){for(o=re.map(m(a,"script"),b),r=o.length;u>l;l++)i=a,l!==f&&(i=re.clone(i,!0,!0),r&&re.merge(o,m(i,"script"))),t.call(this[l],i,l);if(r)for(s=o[o.length-1].ownerDocument,re.map(o,w),l=0;r>l;l++)i=o[l],Ve.test(i.type||"")&&!re._data(i,"globalEval")&&re.contains(s,i)&&(i.src?re._evalUrl&&re._evalUrl(i.src):re.globalEval((i.text||i.textContent||i.innerHTML||"").replace(Ge,"")));a=n=null}return this}}),re.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){re.fn[e]=function(e){for(var n,i=0,r=[],o=re(e),s=o.length-1;s>=i;i++)n=i===s?this:this.clone(!0),re(o[i])[t](n),K.apply(r,n.get());return this.pushStack(r)}});var Qe,Ze={};!function(){var e;ne.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,i;return n=pe.getElementsByTagName("body")[0],n&&n.style?(t=pe.createElement("div"),i=pe.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),typeof t.style.zoom!==_e&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(pe.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(i),e):void 0}}();var et,tt,nt=/^margin/,it=new RegExp("^("+Te+")(?!px)[a-z%]+$","i"),rt=/^(top|right|bottom|left)$/;e.getComputedStyle?(et=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)},tt=function(e,t,n){var i,r,o,s,a=e.style;return n=n||et(e),s=n?n.getPropertyValue(t)||n[t]:void 0,n&&(""!==s||re.contains(e.ownerDocument,e)||(s=re.style(e,t)),it.test(s)&&nt.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0===s?s:s+""}):pe.documentElement.currentStyle&&(et=function(e){return e.currentStyle},tt=function(e,t,n){var i,r,o,s,a=e.style;return n=n||et(e),s=n?n[t]:void 0,null==s&&a&&a[t]&&(s=a[t]),it.test(s)&&!rt.test(t)&&(i=a.left,r=e.runtimeStyle,o=r&&r.left,o&&(r.left=e.currentStyle.left),a.left="fontSize"===t?"1em":s,s=a.pixelLeft+"px",a.left=i,o&&(r.left=o)),void 0===s?s:s+""||"auto"}),!function(){function t(){var t,n,i,r;n=pe.getElementsByTagName("body")[0],n&&n.style&&(t=pe.createElement("div"),i=pe.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),t.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",o=s=!1,l=!0,e.getComputedStyle&&(o="1%"!==(e.getComputedStyle(t,null)||{}).top,s="4px"===(e.getComputedStyle(t,null)||{width:"4px"}).width,r=t.appendChild(pe.createElement("div")),r.style.cssText=t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",r.style.marginRight=r.style.width="0",t.style.width="1px",l=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight),t.removeChild(r)),t.innerHTML="<table><tr><td></td><td>t</td></tr></table>",r=t.getElementsByTagName("td"),r[0].style.cssText="margin:0;border:0;padding:0;display:none",a=0===r[0].offsetHeight,a&&(r[0].style.display="",r[1].style.display="none",a=0===r[0].offsetHeight),n.removeChild(i))}var n,i,r,o,s,a,l;n=pe.createElement("div"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",r=n.getElementsByTagName("a")[0],(i=r&&r.style)&&(i.cssText="float:left;opacity:.5",ne.opacity="0.5"===i.opacity,ne.cssFloat=!!i.cssFloat,n.style.backgroundClip="content-box",n.cloneNode(!0).style.backgroundClip="",ne.clearCloneStyle="content-box"===n.style.backgroundClip,ne.boxSizing=""===i.boxSizing||""===i.MozBoxSizing||""===i.WebkitBoxSizing,re.extend(ne,{reliableHiddenOffsets:function(){return null==a&&t(),a},boxSizingReliable:function(){return null==s&&t(),s},pixelPosition:function(){return null==o&&t(),o},reliableMarginRight:function(){return null==l&&t(),l}}))}(),re.swap=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=s[o];return r};var ot=/alpha\([^)]*\)/i,st=/opacity\s*=\s*([^)]*)/,at=/^(none|table(?!-c[ea]).+)/,lt=new RegExp("^("+Te+")(.*)$","i"),ut=new RegExp("^([+-])=("+Te+")","i"),ct={position:"absolute",visibility:"hidden",display:"block"},ft={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","O","Moz","ms"];re.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=tt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:ne.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=re.camelCase(t),l=e.style;if(t=re.cssProps[a]||(re.cssProps[a]=A(l,a)),s=re.cssHooks[t]||re.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:l[t];if(o=typeof n,"string"===o&&(r=ut.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(re.css(e,t)),o="number"),null!=n&&n===n&&("number"!==o||re.cssNumber[a]||(n+="px"),ne.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(s&&"set"in s&&void 0===(n=s.set(e,n,i)))))try{l[t]=n}catch(e){}}},css:function(e,t,n,i){
var r,o,s,a=re.camelCase(t);return t=re.cssProps[a]||(re.cssProps[a]=A(e.style,a)),s=re.cssHooks[t]||re.cssHooks[a],s&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=tt(e,t,i)),"normal"===o&&t in ft&&(o=ft[t]),""===n||n?(r=parseFloat(o),n===!0||re.isNumeric(r)?r||0:o):o}}),re.each(["height","width"],function(e,t){re.cssHooks[t]={get:function(e,n,i){return n?at.test(re.css(e,"display"))&&0===e.offsetWidth?re.swap(e,ct,function(){return O(e,t,i)}):O(e,t,i):void 0},set:function(e,n,i){var r=i&&et(e);return N(e,n,i?$(e,t,i,ne.boxSizing&&"border-box"===re.css(e,"boxSizing",!1,r),r):0)}}}),ne.opacity||(re.cssHooks.opacity={get:function(e,t){return st.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,i=e.currentStyle,r=re.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=i&&i.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===re.trim(o.replace(ot,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||i&&!i.filter)||(n.filter=ot.test(o)?o.replace(ot,r):o+" "+r)}}),re.cssHooks.marginRight=T(ne.reliableMarginRight,function(e,t){return t?re.swap(e,{display:"inline-block"},tt,[e,"marginRight"]):void 0}),re.each({margin:"",padding:"",border:"Width"},function(e,t){re.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[e+Ae[i]+t]=o[i]||o[i-2]||o[0];return r}},nt.test(e)||(re.cssHooks[e+t].set=N)}),re.fn.extend({css:function(e,t){return Ne(this,function(e,t,n){var i,r,o={},s=0;if(re.isArray(t)){for(i=et(e),r=t.length;r>s;s++)o[t[s]]=re.css(e,t[s],!1,i);return o}return void 0!==n?re.style(e,t,n):re.css(e,t)},e,t,arguments.length>1)},show:function(){return S(this,!0)},hide:function(){return S(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Se(this)?re(this).show():re(this).hide()})}}),re.Tween=j,j.prototype={constructor:j,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||"swing",this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(re.cssNumber[n]?"":"px")},cur:function(){var e=j.propHooks[this.prop];return e&&e.get?e.get(this):j.propHooks._default.get(this)},run:function(e){var t,n=j.propHooks[this.prop];return this.pos=t=this.options.duration?re.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):j.propHooks._default.set(this),this}},j.prototype.init.prototype=j.prototype,j.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=re.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){re.fx.step[e.prop]?re.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[re.cssProps[e.prop]]||re.cssHooks[e.prop])?re.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},j.propHooks.scrollTop=j.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},re.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},re.fx=j.prototype.init,re.fx.step={};var ht,pt,vt=/^(?:toggle|show|hide)$/,mt=new RegExp("^(?:([+-])=|)("+Te+")([a-z%]*)$","i"),gt=/queueHooks$/,yt=[M],bt={"*":[function(e,t){var n=this.createTween(e,t),i=n.cur(),r=mt.exec(t),o=r&&r[3]||(re.cssNumber[e]?"":"px"),s=(re.cssNumber[e]||"px"!==o&&+i)&&mt.exec(re.css(n.elem,e)),a=1,l=20;if(s&&s[3]!==o){o=o||s[3],r=r||[],s=+i||1;do a=a||".5",s/=a,re.style(n.elem,e,s+o);while(a!==(a=n.cur()/i)&&1!==a&&--l)}return r&&(s=n.start=+s||+i||0,n.unit=o,n.end=r[1]?s+(r[1]+1)*r[2]:+r[2]),n}]};re.Animation=re.extend(F,{tweener:function(e,t){re.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,i=0,r=e.length;r>i;i++)n=e[i],bt[n]=bt[n]||[],bt[n].unshift(t)},prefilter:function(e,t){t?yt.unshift(e):yt.push(e)}}),re.speed=function(e,t,n){var i=e&&"object"==typeof e?re.extend({},e):{complete:n||!n&&t||re.isFunction(e)&&e,duration:e,easing:n&&t||t&&!re.isFunction(t)&&t};return i.duration=re.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in re.fx.speeds?re.fx.speeds[i.duration]:re.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){re.isFunction(i.old)&&i.old.call(this),i.queue&&re.dequeue(this,i.queue)},i},re.fn.extend({fadeTo:function(e,t,n,i){return this.filter(Se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=re.isEmptyObject(e),o=re.speed(t,n,i),s=function(){var t=F(this,re.extend({},e),o);(r||re._data(this,"finish"))&&t.stop(!0)};return s.finish=s,r||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=re.timers,s=re._data(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&gt.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));(t||!n)&&re.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=re._data(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=re.timers,s=i?i.length:0;for(n.finish=!0,re.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),re.each(["toggle","show","hide"],function(e,t){var n=re.fn[t];re.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(L(t,!0),e,i,r)}}),re.each({slideDown:L("show"),slideUp:L("hide"),slideToggle:L("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){re.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),re.timers=[],re.fx.tick=function(){var e,t=re.timers,n=0;for(ht=re.now();n<t.length;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||re.fx.stop(),ht=void 0},re.fx.timer=function(e){re.timers.push(e),e()?re.fx.start():re.timers.pop()},re.fx.interval=13,re.fx.start=function(){pt||(pt=setInterval(re.fx.tick,re.fx.interval))},re.fx.stop=function(){clearInterval(pt),pt=null},re.fx.speeds={slow:600,fast:200,_default:400},re.fn.delay=function(e,t){return e=re.fx?re.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var i=setTimeout(t,e);n.stop=function(){clearTimeout(i)}})},function(){var e,t,n,i,r;t=pe.createElement("div"),t.setAttribute("className","t"),t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",i=t.getElementsByTagName("a")[0],n=pe.createElement("select"),r=n.appendChild(pe.createElement("option")),e=t.getElementsByTagName("input")[0],i.style.cssText="top:1px",ne.getSetAttribute="t"!==t.className,ne.style=/top/.test(i.getAttribute("style")),ne.hrefNormalized="/a"===i.getAttribute("href"),ne.checkOn=!!e.value,ne.optSelected=r.selected,ne.enctype=!!pe.createElement("form").enctype,n.disabled=!0,ne.optDisabled=!r.disabled,e=pe.createElement("input"),e.setAttribute("value",""),ne.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),ne.radioValue="t"===e.value}();var wt=/\r/g;re.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=re.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(r=i?e.call(this,n,re(this).val()):e,null==r?r="":"number"==typeof r?r+="":re.isArray(r)&&(r=re.map(r,function(e){return null==e?"":e+""})),t=re.valHooks[this.type]||re.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=re.valHooks[r.type]||re.valHooks[r.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(wt,""):null==n?"":n)):void 0}}),re.extend({valHooks:{option:{get:function(e){var t=re.find.attr(e,"value");return null!=t?t:re.trim(re.text(e))}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,o="select-one"===e.type||0>r,s=o?null:[],a=o?r+1:i.length,l=0>r?a:o?r:0;a>l;l++)if(n=i[l],!(!n.selected&&l!==r||(ne.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&re.nodeName(n.parentNode,"optgroup"))){if(t=re(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=re.makeArray(t),s=r.length;s--;)if(i=r[s],re.inArray(re.valHooks.option.get(i),o)>=0)try{i.selected=n=!0}catch(e){i.scrollHeight}else i.selected=!1;return n||(e.selectedIndex=-1),r}}}}),re.each(["radio","checkbox"],function(){re.valHooks[this]={set:function(e,t){return re.isArray(t)?e.checked=re.inArray(re(e).val(),t)>=0:void 0}},ne.checkOn||(re.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var xt,Ct,_t=re.expr.attrHandle,kt=/^(?:checked|selected)$/i,Et=ne.getSetAttribute,Tt=ne.input;re.fn.extend({attr:function(e,t){return Ne(this,re.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){re.removeAttr(this,e)})}}),re.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return typeof e.getAttribute===_e?re.prop(e,t,n):(1===o&&re.isXMLDoc(e)||(t=t.toLowerCase(),i=re.attrHooks[t]||(re.expr.match.bool.test(t)?Ct:xt)),void 0===n?i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=re.find.attr(e,t),null==r?void 0:r):null!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):void re.removeAttr(e,t))},removeAttr:function(e,t){var n,i,r=0,o=t&&t.match(be);if(o&&1===e.nodeType)for(;n=o[r++];)i=re.propFix[n]||n,re.expr.match.bool.test(n)?Tt&&Et||!kt.test(n)?e[i]=!1:e[re.camelCase("default-"+n)]=e[i]=!1:re.attr(e,n,""),e.removeAttribute(Et?n:i)},attrHooks:{type:{set:function(e,t){if(!ne.radioValue&&"radio"===t&&re.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),Ct={set:function(e,t,n){return t===!1?re.removeAttr(e,n):Tt&&Et||!kt.test(n)?e.setAttribute(!Et&&re.propFix[n]||n,n):e[re.camelCase("default-"+n)]=e[n]=!0,n}},re.each(re.expr.match.bool.source.match(/\w+/g),function(e,t){var n=_t[t]||re.find.attr;_t[t]=Tt&&Et||!kt.test(t)?function(e,t,i){var r,o;return i||(o=_t[t],_t[t]=r,r=null!=n(e,t,i)?t.toLowerCase():null,_t[t]=o),r}:function(e,t,n){return n?void 0:e[re.camelCase("default-"+t)]?t.toLowerCase():null}}),Tt&&Et||(re.attrHooks.value={set:function(e,t,n){return re.nodeName(e,"input")?void(e.defaultValue=t):xt&&xt.set(e,t,n)}}),Et||(xt={set:function(e,t,n){var i=e.getAttributeNode(n);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(n)),i.value=t+="","value"===n||t===e.getAttribute(n)?t:void 0}},_t.id=_t.name=_t.coords=function(e,t,n){var i;return n?void 0:(i=e.getAttributeNode(t))&&""!==i.value?i.value:null},re.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);return n&&n.specified?n.value:void 0},set:xt.set},re.attrHooks.contenteditable={set:function(e,t,n){xt.set(e,""!==t&&t,n)}},re.each(["width","height"],function(e,t){re.attrHooks[t]={set:function(e,n){return""===n?(e.setAttribute(t,"auto"),n):void 0}}})),ne.style||(re.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var At=/^(?:input|select|textarea|button|object)$/i,St=/^(?:a|area)$/i;re.fn.extend({prop:function(e,t){return Ne(this,re.prop,e,t,arguments.length>1)},removeProp:function(e){return e=re.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),re.extend({propFix:{for:"htmlFor",class:"className"},prop:function(e,t,n){var i,r,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!re.isXMLDoc(e),o&&(t=re.propFix[t]||t,r=re.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=re.find.attr(e,"tabindex");return t?parseInt(t,10):At.test(e.nodeName)||St.test(e.nodeName)&&e.href?0:-1}}}}),ne.hrefNormalized||re.each(["href","src"],function(e,t){re.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),ne.optSelected||(re.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),re.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){re.propFix[this.toLowerCase()]=this}),ne.enctype||(re.propFix.enctype="encoding");var Nt=/[\t\r\n\f]/g;re.fn.extend({addClass:function(e){var t,n,i,r,o,s,a=0,l=this.length,u="string"==typeof e&&e;if(re.isFunction(e))return this.each(function(t){re(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(be)||[];l>a;a++)if(n=this[a],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Nt," "):" ")){for(o=0;r=t[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");s=re.trim(i),n.className!==s&&(n.className=s)}return this},removeClass:function(e){var t,n,i,r,o,s,a=0,l=this.length,u=0===arguments.length||"string"==typeof e&&e;if(re.isFunction(e))return this.each(function(t){re(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(be)||[];l>a;a++)if(n=this[a],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Nt," "):"")){for(o=0;r=t[o++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");s=e?re.trim(i):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):this.each(re.isFunction(e)?function(n){re(this).toggleClass(e.call(this,n,this.className,t),t)}:function(){if("string"===n)for(var t,i=0,r=re(this),o=e.match(be)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else(n===_e||"boolean"===n)&&(this.className&&re._data(this,"__className__",this.className),this.className=this.className||e===!1?"":re._data(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,i=this.length;i>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(Nt," ").indexOf(t)>=0)return!0;return!1}}),re.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){re.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),re.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var $t=re.now(),Ot=/\?/,jt=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;re.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,i=null,r=re.trim(t+"");return r&&!re.trim(r.replace(jt,function(e,t,r,o){return n&&t&&(i=0),0===i?e:(n=r||t,i+=!o-!r,"")}))?Function("return "+r)():re.error("Invalid JSON: "+t)},re.parseXML=function(t){var n,i;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(i=new DOMParser,n=i.parseFromString(t,"text/xml")):(n=new ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(e){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||re.error("Invalid XML: "+t),n};var Dt,Lt,Pt=/#.*$/,Mt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Ft=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Rt=/^(?:GET|HEAD)$/,Bt=/^\/\//,qt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,It={},Wt={},zt="*/".concat("*");try{Lt=location.href}catch(e){Lt=pe.createElement("a"),Lt.href="",Lt=Lt.href}Dt=qt.exec(Lt.toLowerCase())||[],re.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Lt,type:"GET",isLocal:Ft.test(Dt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":re.parseJSON,"text xml":re.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?q(q(e,re.ajaxSettings),t):q(re.ajaxSettings,e)},ajaxPrefilter:R(It),ajaxTransport:R(Wt),ajax:function(e,t){function n(e,t,n,i){var r,c,g,y,w,C=t;2!==b&&(b=2,a&&clearTimeout(a),u=void 0,s=i||"",x.readyState=e>0?4:0,r=e>=200&&300>e||304===e,n&&(y=I(f,x,n)),y=W(f,y,x,r),r?(f.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(re.lastModified[o]=w),w=x.getResponseHeader("etag"),w&&(re.etag[o]=w)),204===e||"HEAD"===f.type?C="nocontent":304===e?C="notmodified":(C=y.state,c=y.data,g=y.error,r=!g)):(g=C,(e||!C)&&(C="error",0>e&&(e=0))),x.status=e,x.statusText=(t||C)+"",r?p.resolveWith(d,[c,C,x]):p.rejectWith(d,[x,C,g]),x.statusCode(m),m=void 0,l&&h.trigger(r?"ajaxSuccess":"ajaxError",[x,f,r?c:g]),v.fireWith(d,[x,C]),l&&(h.trigger("ajaxComplete",[x,f]),--re.active||re.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,s,a,l,u,c,f=re.ajaxSetup({},t),d=f.context||f,h=f.context&&(d.nodeType||d.jquery)?re(d):re.event,p=re.Deferred(),v=re.Callbacks("once memory"),m=f.statusCode||{},g={},y={},b=0,w="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!c)for(c={};t=Ht.exec(s);)c[t[1].toLowerCase()]=t[2];t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=y[n]=y[n]||e,g[e]=t),this},overrideMimeType:function(e){return b||(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)m[t]=[m[t],e[t]];else x.always(e[x.status]);return this},abort:function(e){var t=e||w;return u&&u.abort(t),n(0,t),this}};if(p.promise(x).complete=v.add,x.success=x.done,x.error=x.fail,f.url=((e||f.url||Lt)+"").replace(Pt,"").replace(Bt,Dt[1]+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=re.trim(f.dataType||"*").toLowerCase().match(be)||[""],null==f.crossDomain&&(i=qt.exec(f.url.toLowerCase()),f.crossDomain=!(!i||i[1]===Dt[1]&&i[2]===Dt[2]&&(i[3]||("http:"===i[1]?"80":"443"))===(Dt[3]||("http:"===Dt[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=re.param(f.data,f.traditional)),B(It,f,t,x),2===b)return x;l=re.event&&f.global,l&&0===re.active++&&re.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Rt.test(f.type),o=f.url,f.hasContent||(f.data&&(o=f.url+=(Ot.test(o)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=Mt.test(o)?o.replace(Mt,"$1_="+$t++):o+(Ot.test(o)?"&":"?")+"_="+$t++)),f.ifModified&&(re.lastModified[o]&&x.setRequestHeader("If-Modified-Since",re.lastModified[o]),re.etag[o]&&x.setRequestHeader("If-None-Match",re.etag[o])),(f.data&&f.hasContent&&f.contentType!==!1||t.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+zt+"; q=0.01":""):f.accepts["*"]);for(r in f.headers)x.setRequestHeader(r,f.headers[r]);if(f.beforeSend&&(f.beforeSend.call(d,x,f)===!1||2===b))return x.abort();w="abort";for(r in{success:1,error:1,complete:1})x[r](f[r]);if(u=B(Wt,f,t,x)){x.readyState=1,l&&h.trigger("ajaxSend",[x,f]),f.async&&f.timeout>0&&(a=setTimeout(function(){x.abort("timeout")},f.timeout));try{b=1,u.send(g,n)}catch(e){if(!(2>b))throw e;n(-1,e)}}else n(-1,"No Transport");return x},getJSON:function(e,t,n){return re.get(e,t,n,"json")},getScript:function(e,t){return re.get(e,void 0,t,"script")}}),re.each(["get","post"],function(e,t){re[t]=function(e,n,i,r){return re.isFunction(n)&&(r=r||i,i=n,n=void 0),re.ajax({url:e,type:t,dataType:r,data:n,success:i})}}),re._evalUrl=function(e){return re.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},re.fn.extend({wrapAll:function(e){if(re.isFunction(e))return this.each(function(t){re(this).wrapAll(e.call(this,t))});if(this[0]){var t=re(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return this.each(re.isFunction(e)?function(t){re(this).wrapInner(e.call(this,t))}:function(){var t=re(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=re.isFunction(e);return this.each(function(n){re(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){re.nodeName(this,"body")||re(this).replaceWith(this.childNodes)}).end()}}),re.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0||!ne.reliableHiddenOffsets()&&"none"===(e.style&&e.style.display||re.css(e,"display"))},re.expr.filters.visible=function(e){return!re.expr.filters.hidden(e)};var Ut=/%20/g,Vt=/\[\]$/,Xt=/\r?\n/g,Gt=/^(?:submit|button|image|reset|file)$/i,Jt=/^(?:input|select|textarea|keygen)/i;re.param=function(e,t){var n,i=[],r=function(e,t){t=re.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=re.ajaxSettings&&re.ajaxSettings.traditional),re.isArray(e)||e.jquery&&!re.isPlainObject(e))re.each(e,function(){r(this.name,this.value)});else for(n in e)z(n,e[n],t,r);return i.join("&").replace(Ut,"+")},re.fn.extend({serialize:function(){return re.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=re.prop(this,"elements");return e?re.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!re(this).is(":disabled")&&Jt.test(this.nodeName)&&!Gt.test(e)&&(this.checked||!$e.test(e))}).map(function(e,t){var n=re(this).val();return null==n?null:re.isArray(n)?re.map(n,function(e){return{name:t.name,value:e.replace(Xt,"\r\n")}}):{name:t.name,value:n.replace(Xt,"\r\n")}}).get()}}),re.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&U()||V()}:U;var Yt=0,Kt={},Qt=re.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Kt)Kt[e](void 0,!0)}),ne.cors=!!Qt&&"withCredentials"in Qt,Qt=ne.ajax=!!Qt,Qt&&re.ajaxTransport(function(e){if(!e.crossDomain||ne.cors){var t;return{send:function(n,i){var r,o=e.xhr(),s=++Yt;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)o[r]=e.xhrFields[r];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)void 0!==n[r]&&o.setRequestHeader(r,n[r]+"");o.send(e.hasContent&&e.data||null),t=function(n,r){var a,l,u;if(t&&(r||4===o.readyState))if(delete Kt[s],t=void 0,o.onreadystatechange=re.noop,r)4!==o.readyState&&o.abort();else{u={},a=o.status,"string"==typeof o.responseText&&(u.text=o.responseText);try{l=o.statusText}catch(e){l=""}a||!e.isLocal||e.crossDomain?1223===a&&(a=204):a=u.text?200:404}u&&i(a,l,u,o.getAllResponseHeaders())},e.async?4===o.readyState?setTimeout(t):o.onreadystatechange=Kt[s]=t:t()},abort:function(){t&&t(void 0,!0)}}}}),re.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return re.globalEval(e),e}}}),re.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),re.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=pe.head||re("head")[0]||pe.documentElement;return{send:function(i,r){t=pe.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||r(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var Zt=[],en=/(=)\?(?=&|$)|\?\?/;re.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Zt.pop()||re.expando+"_"+$t++;return this[e]=!0,e}}),re.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,s,a=t.jsonp!==!1&&(en.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&en.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(r=t.jsonpCallback=re.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(en,"$1"+r):t.jsonp!==!1&&(t.url+=(Ot.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||re.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){s=arguments},i.always(function(){e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,Zt.push(r)),s&&re.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),re.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||pe;var i=fe.exec(e),r=!n&&[];return i?[t.createElement(i[1])]:(i=re.buildFragment([e],t,r),r&&r.length&&re(r).remove(),re.merge([],i.childNodes))};var tn=re.fn.load;re.fn.load=function(e,t,n){if("string"!=typeof e&&tn)return tn.apply(this,arguments);var i,r,o,s=this,a=e.indexOf(" ");return a>=0&&(i=re.trim(e.slice(a,e.length)),e=e.slice(0,a)),re.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&re.ajax({url:e,type:o,dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?re("<div>").append(re.parseHTML(e)).find(i):e)}).complete(n&&function(e,t){s.each(n,r||[e.responseText,t,e])}),this},re.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){re.fn[t]=function(e){return this.on(t,e)}}),re.expr.filters.animated=function(e){return re.grep(re.timers,function(t){return e===t.elem}).length};var nn=e.document.documentElement;re.offset={setOffset:function(e,t,n){var i,r,o,s,a,l,u,c=re.css(e,"position"),f=re(e),d={};"static"===c&&(e.style.position="relative"),a=f.offset(),o=re.css(e,"top"),l=re.css(e,"left"),u=("absolute"===c||"fixed"===c)&&re.inArray("auto",[o,l])>-1,u?(i=f.position(),s=i.top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),re.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+r),"using"in t?t.using.call(e,d):f.css(d)}},re.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){re.offset.setOffset(this,e,t)});var t,n,i={top:0,left:0},r=this[0],o=r&&r.ownerDocument;return o?(t=o.documentElement,re.contains(t,r)?(typeof r.getBoundingClientRect!==_e&&(i=r.getBoundingClientRect()),n=X(o),{top:i.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:i.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):i):void 0},position:function(){if(this[0]){var e,t,n={top:0,left:0},i=this[0];return"fixed"===re.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),re.nodeName(e[0],"html")||(n=e.offset()),n.top+=re.css(e[0],"borderTopWidth",!0),n.left+=re.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-re.css(i,"marginTop",!0),left:t.left-n.left-re.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||nn;e&&!re.nodeName(e,"html")&&"static"===re.css(e,"position");)e=e.offsetParent;return e||nn})}}),re.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);re.fn[e]=function(i){return Ne(this,function(e,i,r){var o=X(e);return void 0===r?o?t in o?o[t]:o.document.documentElement[i]:e[i]:void(o?o.scrollTo(n?re(o).scrollLeft():r,n?r:re(o).scrollTop()):e[i]=r)},e,i,arguments.length,null)}}),re.each(["top","left"],function(e,t){re.cssHooks[t]=T(ne.pixelPosition,function(e,n){return n?(n=tt(e,t),it.test(n)?re(e).position()[t]+"px":n):void 0})}),re.each({Height:"height",Width:"width"},function(e,t){re.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){re.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||r===!0?"margin":"border");return Ne(this,function(t,n,i){var r;return re.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?re.css(t,n,s):re.style(t,n,i,s)},t,o?i:void 0,o,null)}})}),re.fn.size=function(){return this.length},re.fn.andSelf=re.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return re});var rn=e.jQuery,on=e.$;return re.noConflict=function(t){return e.$===re&&(e.$=on),t&&e.jQuery===re&&(e.jQuery=rn),re},typeof t===_e&&(e.jQuery=e.$=re),re});var snid="112",gameid="222",_hmt,searchParams=new URLSearchParams(window.location.search.slice(1));axios.get("./data/test.json").then(function(e){return e.data}).then(function(data){var json=eval("("+data+")");return json.channels}).then(function(e){for(var t,n=searchParams.get("channel"),i=e.length,r=0;r<i;r++)if(e[r].channelId==n){var o=e[r];t=o.content.download.androidUrl}new Vue({el:"html",data:{channel:o,show:!1,iosUrl:"javascript:;",androidUrl:"javascript:;",bgObject:{}},created:function(){var e=this;_hmt=_hmt||[];var t=document.createElement("script");t.src="https://hm.baidu.com/hm.js?"+o.content.baiduAnalytic;var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n),e.bgObject={background:"#fff url("+o.content.bgImg+") no-repeat"}},methods:{androidClick:function(){isWechat()||isWeibo()?this.show=!0:window.location.replace(o.content.download.androidUrl),window._hmt.push(["_trackEvent","software","androidClick","ttplayer"])},iosClick:function(){isWechat()||isWeibo()?this.show=!0:window.location.replace(o.content.download.iosUrl),window._hmt.push(["_trackEvent","software","iosClick","ttplayer"])},closeTip:function(){this.show=!1}}});return t}).then(function(e){var t={disablePageViewTrack:!1,trackerUrlMap:{pageView:["//bicollect.hulai.com:8182/api"],click:["//bicollect.hulai.com:8182/api"]},cookieDomain:"",strictMode:{paramOrder:{"//bicollect.hulai.com:8182/api":["cookie","url","referer","metric","snid","gameid","downloadUrl","act"]},disableDefaultParams:!0},extendParams:{metric:"Landing",snid:snid,gameid:gameid,referer:document.referrer?document.referrer:"",act:"visit",downloadUrl:""},trackCookieKeys:{cookie:"cookie_id"},trackLocalStorageKeys:{latitude:"location.latitude",longitude:"location.longitude"},eventConfigArr:[{eventType:"click",selectors:["a[id='android']"],extendParams:{event_flag:"downloadClick",act:"click",downloadUrl:e}}]};return t}).then(function(e){digger(e)}).catch(function(){}),window.Modernizr=function(e,t,n){function i(e){b.cssText=e}function r(e,t){return i(_.join(e+";")+(t||""))}function o(e,t){return typeof e===t}function s(e,t){return!!~(""+e).indexOf(t)}function a(e,t){for(var i in e){var r=e[i];if(!s(r,"-")&&b[r]!==n)return"pfx"!=t||r}return!1}function l(e,t,i){for(var r in e){var s=t[e[r]];if(s!==n)return i===!1?e[r]:o(s,"function")?s.bind(i||t):s}return!1}function u(e,t,n){var i=e.charAt(0).toUpperCase()+e.slice(1),r=(e+" "+E.join(i+" ")+i).split(" ");return o(t,"string")||o(t,"undefined")?a(r,t):(r=(e+" "+T.join(i+" ")+i).split(" "),l(r,t,n))}function c(){p.input=function(n){for(var i=0,r=n.length;i<r;i++)$[n[i]]=n[i]in w;return $.list&&($.list=!!t.createElement("datalist")&&!!e.HTMLDataListElement),$}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),p.inputtypes=function(e){for(var i,r,o,s=0,a=e.length;s<a;s++)w.setAttribute("type",r=e[s]),i="text"!==w.type,i&&(w.value=x,w.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(r)&&w.style.WebkitAppearance!==n?(m.appendChild(w),o=t.defaultView,i=o.getComputedStyle&&"textfield"!==o.getComputedStyle(w,null).WebkitAppearance&&0!==w.offsetHeight,
m.removeChild(w)):/^(search|tel)$/.test(r)||(i=/^(url|email)$/.test(r)?w.checkValidity&&w.checkValidity()===!1:w.value!=x)),N[e[s]]=!!i;return N}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var f,d,h="2.8.3",p={},v=!0,m=t.documentElement,g="modernizr",y=t.createElement(g),b=y.style,w=t.createElement("input"),x=":)",C={}.toString,_=" -webkit- -moz- -o- -ms- ".split(" "),k="Webkit Moz O ms",E=k.split(" "),T=k.toLowerCase().split(" "),A={svg:"http://www.w3.org/2000/svg"},S={},N={},$={},O=[],j=O.slice,D=function(e,n,i,r){var o,s,a,l,u=t.createElement("div"),c=t.body,f=c||t.createElement("body");if(parseInt(i,10))for(;i--;)a=t.createElement("div"),a.id=r?r[i]:g+(i+1),u.appendChild(a);return o=["&#173;",'<style id="s',g,'">',e,"</style>"].join(""),u.id=g,(c?u:f).innerHTML+=o,f.appendChild(u),c||(f.style.background="",f.style.overflow="hidden",l=m.style.overflow,m.style.overflow="hidden",m.appendChild(f)),s=n(u,e),c?u.parentNode.removeChild(u):(f.parentNode.removeChild(f),m.style.overflow=l),!!s},L=function(t){var n=e.matchMedia||e.msMatchMedia;if(n)return n(t)&&n(t).matches||!1;var i;return D("@media "+t+" { #"+g+" { position: absolute; } }",function(t){i="absolute"==(e.getComputedStyle?getComputedStyle(t,null):t.currentStyle).position}),i},P=function(){function e(e,r){r=r||t.createElement(i[e]||"div"),e="on"+e;var s=e in r;return s||(r.setAttribute||(r=t.createElement("div")),r.setAttribute&&r.removeAttribute&&(r.setAttribute(e,""),s=o(r[e],"function"),o(r[e],"undefined")||(r[e]=n),r.removeAttribute(e))),r=null,s}var i={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return e}(),M={}.hasOwnProperty;d=o(M,"undefined")||o(M.call,"undefined")?function(e,t){return t in e&&o(e.constructor.prototype[t],"undefined")}:function(e,t){return M.call(e,t)},Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if("function"!=typeof t)throw new TypeError;var n=j.call(arguments,1),i=function(){if(this instanceof i){var r=function(){};r.prototype=t.prototype;var o=new r,s=t.apply(o,n.concat(j.call(arguments)));return Object(s)===s?s:o}return t.apply(e,n.concat(j.call(arguments)))};return i}),S.flexbox=function(){return u("flexWrap")},S.canvas=function(){var e=t.createElement("canvas");return!!e.getContext&&!!e.getContext("2d")},S.canvastext=function(){return!!p.canvas&&!!o(t.createElement("canvas").getContext("2d").fillText,"function")},S.webgl=function(){return!!e.WebGLRenderingContext},S.touch=function(){var n;return"ontouchstart"in e||e.DocumentTouch&&t instanceof DocumentTouch?n=!0:D(["@media (",_.join("touch-enabled),("),g,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(e){n=9===e.offsetTop}),n},S.geolocation=function(){return"geolocation"in navigator},S.postmessage=function(){return!!e.postMessage},S.websqldatabase=function(){return!!e.openDatabase},S.indexedDB=function(){return!!u("indexedDB",e)},S.hashchange=function(){return P("hashchange",e)&&(t.documentMode===n||t.documentMode>7)},S.history=function(){return!!e.history&&!!history.pushState},S.draganddrop=function(){var e=t.createElement("div");return"draggable"in e||"ondragstart"in e&&"ondrop"in e},S.websockets=function(){return"WebSocket"in e||"MozWebSocket"in e},S.rgba=function(){return i("background-color:rgba(150,255,150,.5)"),s(b.backgroundColor,"rgba")},S.hsla=function(){return i("background-color:hsla(120,40%,100%,.5)"),s(b.backgroundColor,"rgba")||s(b.backgroundColor,"hsla")},S.multiplebgs=function(){return i("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(b.background)},S.backgroundsize=function(){return u("backgroundSize")},S.borderimage=function(){return u("borderImage")},S.borderradius=function(){return u("borderRadius")},S.boxshadow=function(){return u("boxShadow")},S.textshadow=function(){return""===t.createElement("div").style.textShadow},S.opacity=function(){return r("opacity:.55"),/^0.55$/.test(b.opacity)},S.cssanimations=function(){return u("animationName")},S.csscolumns=function(){return u("columnCount")},S.cssgradients=function(){var e="background-image:",t="gradient(linear,left top,right bottom,from(#9f9),to(white));",n="linear-gradient(left top,#9f9, white);";return i((e+"-webkit- ".split(" ").join(t+e)+_.join(n+e)).slice(0,-e.length)),s(b.backgroundImage,"gradient")},S.cssreflections=function(){return u("boxReflect")},S.csstransforms=function(){return!!u("transform")},S.csstransforms3d=function(){var e=!!u("perspective");return e&&"webkitPerspective"in m.style&&D("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(t,n){e=9===t.offsetLeft&&3===t.offsetHeight}),e},S.csstransitions=function(){return u("transition")},S.fontface=function(){var e;return D('@font-face {font-family:"font";src:url("https://")}',function(n,i){var r=t.getElementById("smodernizr"),o=r.sheet||r.styleSheet,s=o?o.cssRules&&o.cssRules[0]?o.cssRules[0].cssText:o.cssText||"":"";e=/src/i.test(s)&&0===s.indexOf(i.split(" ")[0])}),e},S.generatedcontent=function(){var e;return D(["#",g,"{font:0/0 a}#",g,':after{content:"',x,'";visibility:hidden;font:3px/1 a}'].join(""),function(t){e=t.offsetHeight>=3}),e},S.video=function(){var e=t.createElement("video"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=e.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=e.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(e){}return n},S.audio=function(){var e=t.createElement("audio"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=e.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=e.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(e.canPlayType("audio/x-m4a;")||e.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(e){}return n},S.localstorage=function(){try{return localStorage.setItem(g,g),localStorage.removeItem(g),!0}catch(e){return!1}},S.sessionstorage=function(){try{return sessionStorage.setItem(g,g),sessionStorage.removeItem(g),!0}catch(e){return!1}},S.webworkers=function(){return!!e.Worker},S.applicationcache=function(){return!!e.applicationCache},S.svg=function(){return!!t.createElementNS&&!!t.createElementNS(A.svg,"svg").createSVGRect},S.inlinesvg=function(){var e=t.createElement("div");return e.innerHTML="<svg/>",(e.firstChild&&e.firstChild.namespaceURI)==A.svg},S.smil=function(){return!!t.createElementNS&&/SVGAnimate/.test(C.call(t.createElementNS(A.svg,"animate")))},S.svgclippaths=function(){return!!t.createElementNS&&/SVGClipPath/.test(C.call(t.createElementNS(A.svg,"clipPath")))};for(var H in S)d(S,H)&&(f=H.toLowerCase(),p[f]=S[H](),O.push((p[f]?"":"no-")+f));return p.input||c(),p.addTest=function(e,t){if("object"==typeof e)for(var i in e)d(e,i)&&p.addTest(i,e[i]);else{if(e=e.toLowerCase(),p[e]!==n)return p;t="function"==typeof t?t():t,"undefined"!=typeof v&&v&&(m.className+=" "+(t?"":"no-")+e),p[e]=t}return p},i(""),y=w=null,function(e,t){function n(e,t){var n=e.createElement("p"),i=e.getElementsByTagName("head")[0]||e.documentElement;return n.innerHTML="x<style>"+t+"</style>",i.insertBefore(n.lastChild,i.firstChild)}function i(){var e=y.elements;return"string"==typeof e?e.split(" "):e}function r(e){var t=g[e[v]];return t||(t={},m++,e[v]=m,g[m]=t),t}function o(e,n,i){if(n||(n=t),c)return n.createElement(e);i||(i=r(n));var o;return o=i.cache[e]?i.cache[e].cloneNode():p.test(e)?(i.cache[e]=i.createElem(e)).cloneNode():i.createElem(e),!o.canHaveChildren||h.test(e)||o.tagUrn?o:i.frag.appendChild(o)}function s(e,n){if(e||(e=t),c)return e.createDocumentFragment();n=n||r(e);for(var o=n.frag.cloneNode(),s=0,a=i(),l=a.length;s<l;s++)o.createElement(a[s]);return o}function a(e,t){t.cache||(t.cache={},t.createElem=e.createElement,t.createFrag=e.createDocumentFragment,t.frag=t.createFrag()),e.createElement=function(n){return y.shivMethods?o(n,e,t):t.createElem(n)},e.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+i().join().replace(/[\w\-]+/g,function(e){return t.createElem(e),t.frag.createElement(e),'c("'+e+'")'})+");return n}")(y,t.frag)}function l(e){e||(e=t);var i=r(e);return y.shivCSS&&!u&&!i.hasCSS&&(i.hasCSS=!!n(e,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),c||a(e,i),e}var u,c,f="3.7.0",d=e.html5||{},h=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,p=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,v="_html5shiv",m=0,g={};!function(){try{var e=t.createElement("a");e.innerHTML="<xyz></xyz>",u="hidden"in e,c=1==e.childNodes.length||function(){t.createElement("a");var e=t.createDocumentFragment();return"undefined"==typeof e.cloneNode||"undefined"==typeof e.createDocumentFragment||"undefined"==typeof e.createElement}()}catch(e){u=!0,c=!0}}();var y={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:f,shivCSS:d.shivCSS!==!1,supportsUnknownElements:c,shivMethods:d.shivMethods!==!1,type:"default",shivDocument:l,createElement:o,createDocumentFragment:s};e.html5=y,l(t)}(this,t),p._version=h,p._prefixes=_,p._domPrefixes=T,p._cssomPrefixes=E,p.mq=L,p.hasEvent=P,p.testProp=function(e){return a([e])},p.testAllProps=u,p.testStyles=D,p.prefixed=function(e,t,n){return t?u(e,t,n):u(e,"pfx")},m.className=m.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(v?" js "+O.join(" "):""),p}(this,this.document),function(e,t,n){function i(e){return"[object Function]"==m.call(e)}function r(e){return"string"==typeof e}function o(){}function s(e){return!e||"loaded"==e||"complete"==e||"uninitialized"==e}function a(){var e=g.shift();y=1,e?e.t?p(function(){("c"==e.t?d.injectCss:d.injectJs)(e.s,0,e.a,e.x,e.e,1)},0):(e(),a()):y=0}function l(e,n,i,r,o,l,u){function c(t){if(!h&&s(f.readyState)&&(b.r=h=1,!y&&a(),f.onload=f.onreadystatechange=null,t)){"img"!=e&&p(function(){x.removeChild(f)},50);for(var i in T[n])T[n].hasOwnProperty(i)&&T[n][i].onload()}}var u=u||d.errorTimeout,f=t.createElement(e),h=0,m=0,b={t:i,s:n,e:o,a:l,x:u};1===T[n]&&(m=1,T[n]=[]),"object"==e?f.data=n:(f.src=n,f.type=e),f.width=f.height="0",f.onerror=f.onload=f.onreadystatechange=function(){c.call(this,m)},g.splice(r,0,b),"img"!=e&&(m||2===T[n]?(x.insertBefore(f,w?null:v),p(c,u)):T[n].push(f))}function u(e,t,n,i,o){return y=0,t=t||"j",r(e)?l("c"==t?_:C,e,t,this.i++,n,i,o):(g.splice(this.i++,0,e),1==g.length&&a()),this}function c(){var e=d;return e.loader={load:u,i:0},e}var f,d,h=t.documentElement,p=e.setTimeout,v=t.getElementsByTagName("script")[0],m={}.toString,g=[],y=0,b="MozAppearance"in h.style,w=b&&!!t.createRange().compareNode,x=w?h:v.parentNode,h=e.opera&&"[object Opera]"==m.call(e.opera),h=!!t.attachEvent&&!h,C=b?"object":h?"script":"img",_=h?"script":C,k=Array.isArray||function(e){return"[object Array]"==m.call(e)},E=[],T={},A={timeout:function(e,t){return t.length&&(e.timeout=t[0]),e}};d=function(e){function t(e){var t,n,i,e=e.split("!"),r=E.length,o=e.pop(),s=e.length,o={url:o,origUrl:o,prefixes:e};for(n=0;n<s;n++)i=e[n].split("="),(t=A[i.shift()])&&(o=t(o,i));for(n=0;n<r;n++)o=E[n](o);return o}function s(e,r,o,s,a){var l=t(e),u=l.autoCallback;l.url.split(".").pop().split("?").shift(),l.bypass||(r&&(r=i(r)?r:r[e]||r[s]||r[e.split("/").pop().split("?")[0]]),l.instead?l.instead(e,r,o,s,a):(T[l.url]?l.noexec=!0:T[l.url]=1,o.load(l.url,l.forceCSS||!l.forceJS&&"css"==l.url.split(".").pop().split("?").shift()?"c":n,l.noexec,l.attrs,l.timeout),(i(r)||i(u))&&o.load(function(){c(),r&&r(l.origUrl,a,s),u&&u(l.origUrl,a,s),T[l.url]=2})))}function a(e,t){function n(e,n){if(e){if(r(e))n||(f=function(){var e=[].slice.call(arguments);d.apply(this,e),h()}),s(e,f,t,0,u);else if(Object(e)===e)for(l in a=function(){var t,n=0;for(t in e)e.hasOwnProperty(t)&&n++;return n}(),e)e.hasOwnProperty(l)&&(!n&&!--a&&(i(f)?f=function(){var e=[].slice.call(arguments);d.apply(this,e),h()}:f[l]=function(e){return function(){var t=[].slice.call(arguments);e&&e.apply(this,t),h()}}(d[l])),s(e[l],f,t,l,u))}else!n&&h()}var a,l,u=!!e.test,c=e.load||e.both,f=e.callback||o,d=f,h=e.complete||o;n(u?e.yep:e.nope,!!c),c&&n(c)}var l,u,f=this.yepnope.loader;if(r(e))s(e,0,f,0);else if(k(e))for(l=0;l<e.length;l++)u=e[l],r(u)?s(u,0,f,0):k(u)?d(u):Object(u)===u&&a(u,f);else Object(e)===e&&a(e,f)},d.addPrefix=function(e,t){A[e]=t},d.addFilter=function(e){E.push(e)},d.errorTimeout=1e4,null==t.readyState&&t.addEventListener&&(t.readyState="loading",t.addEventListener("DOMContentLoaded",f=function(){t.removeEventListener("DOMContentLoaded",f,0),t.readyState="complete"},0)),e.yepnope=c(),e.yepnope.executeStack=a,e.yepnope.injectJs=function(e,n,i,r,l,u){var c,f,h=t.createElement("script"),r=r||d.errorTimeout;h.src=e;for(f in i)h.setAttribute(f,i[f]);n=u?a:n||o,h.onreadystatechange=h.onload=function(){!c&&s(h.readyState)&&(c=1,n(),h.onload=h.onreadystatechange=null)},p(function(){c||(c=1,n(1))},r),l?h.onload():v.parentNode.insertBefore(h,v)},e.yepnope.injectCss=function(e,n,i,r,s,l){var u,r=t.createElement("link"),n=l?a:n||o;r.href=e,r.rel="stylesheet",r.type="text/css";for(u in i)r.setAttribute(u,i[u]);s||(v.parentNode.insertBefore(r,v),p(n,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))},function(){for(var e,t=function(){},n=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],i=n.length,r=window.console=window.console||{};i--;)e=n[i],r[e]||(r[e]=t)}(),!function(e,t){"function"==typeof define&&define.amd?define(["jquery"],function(n){return t(e,n)}):"object"==typeof exports?t(e,require("jquery")):t(e,e.jQuery||e.Zepto)}(this,function(e,t){"use strict";function n(e){if(C&&"none"===e.css("animation-name")&&"none"===e.css("-webkit-animation-name")&&"none"===e.css("-moz-animation-name")&&"none"===e.css("-o-animation-name")&&"none"===e.css("-ms-animation-name"))return 0;var t,n,i,r,o=e.css("animation-duration")||e.css("-webkit-animation-duration")||e.css("-moz-animation-duration")||e.css("-o-animation-duration")||e.css("-ms-animation-duration")||"0s",s=e.css("animation-delay")||e.css("-webkit-animation-delay")||e.css("-moz-animation-delay")||e.css("-o-animation-delay")||e.css("-ms-animation-delay")||"0s",a=e.css("animation-iteration-count")||e.css("-webkit-animation-iteration-count")||e.css("-moz-animation-iteration-count")||e.css("-o-animation-iteration-count")||e.css("-ms-animation-iteration-count")||"1";for(o=o.split(", "),s=s.split(", "),a=a.split(", "),r=0,n=o.length,t=Number.NEGATIVE_INFINITY;r<n;r++)i=parseFloat(o[r])*parseInt(a[r],10)+parseFloat(s[r]),i>t&&(t=i);return t}function i(){if(t(document.body).height()<=t(window).height())return 0;var e,n,i=document.createElement("div"),r=document.createElement("div");return i.style.visibility="hidden",i.style.width="100px",document.body.appendChild(i),e=i.offsetWidth,i.style.overflow="scroll",r.style.width="100%",i.appendChild(r),n=r.offsetWidth,i.parentNode.removeChild(i),e-n}function r(){if(!_){var e,n,r=t("html"),o=c("is-locked");r.hasClass(o)||(n=t(document.body),e=parseInt(n.css("padding-right"),10)+i(),n.css("padding-right",e+"px"),r.addClass(o))}}function o(){if(!_){var e,n,r=t("html"),o=c("is-locked");r.hasClass(o)&&(n=t(document.body),e=parseInt(n.css("padding-right"),10)-i(),n.css("padding-right",e+"px"),r.removeClass(o))}}function s(e,t,n,i){var r=c("is",t),o=[c("is",w.CLOSING),c("is",w.OPENING),c("is",w.CLOSED),c("is",w.OPENED)].join(" ");e.$bg.removeClass(o).addClass(r),e.$overlay.removeClass(o).addClass(r),e.$wrapper.removeClass(o).addClass(r),e.$modal.removeClass(o).addClass(r),e.state=t,!n&&e.$modal.trigger({type:t,reason:i},[{reason:i}])}function a(e,i,r){var o=0,s=function(e){e.target===this&&o++},a=function(e){e.target===this&&0===--o&&(t.each(["$bg","$overlay","$wrapper","$modal"],function(e,t){r[t].off(g+" "+y)}),i())};t.each(["$bg","$overlay","$wrapper","$modal"],function(e,t){r[t].on(g,s).on(y,a)}),e(),0===n(r.$bg)&&0===n(r.$overlay)&&0===n(r.$wrapper)&&0===n(r.$modal)&&(t.each(["$bg","$overlay","$wrapper","$modal"],function(e,t){r[t].off(g+" "+y)}),i())}function l(e){e.state!==w.CLOSED&&(t.each(["$bg","$overlay","$wrapper","$modal"],function(t,n){e[n].off(g+" "+y)}),e.$bg.removeClass(e.settings.modifier),e.$overlay.removeClass(e.settings.modifier).hide(),e.$wrapper.hide(),o(),s(e,w.CLOSED,!0))}function u(e){var t,n,i,r,o={};for(e=e.replace(/\s*:\s*/g,":").replace(/\s*,\s*/g,","),t=e.split(","),r=0,n=t.length;r<n;r++)t[r]=t[r].split(":"),i=t[r][1],("string"==typeof i||i instanceof String)&&(i="true"===i||"false"!==i&&i),("string"==typeof i||i instanceof String)&&(i=isNaN(i)?i:+i),o[t[r][0]]=i;return o}function c(){for(var e=m,t=0;t<arguments.length;++t)e+="-"+arguments[t];return e}function f(){var e,n,i=location.hash.replace("#","");if(i){try{n=t('[data-remodal-id="'+i+'"]')}catch(e){}n&&n.length&&(e=t[v].lookup[n.data(v)],e&&e.settings.hashTracking&&e.open())}else h&&h.state===w.OPENED&&h.settings.hashTracking&&h.close()}function d(e,n){var i=t(document.body),r=i,o=this;o.settings=t.extend({},b,n),o.index=t[v].lookup.push(o)-1,o.state=w.CLOSED,o.$overlay=t("."+c("overlay")),null!==o.settings.appendTo&&o.settings.appendTo.length&&(r=t(o.settings.appendTo)),o.$overlay.length||(o.$overlay=t("<div>").addClass(c("overlay")+" "+c("is",w.CLOSED)).hide(),r.append(o.$overlay)),o.$bg=t("."+c("bg")).addClass(c("is",w.CLOSED)),o.$modal=e.addClass(m+" "+c("is-initialized")+" "+o.settings.modifier+" "+c("is",w.CLOSED)).attr("tabindex","-1"),o.$wrapper=t("<div>").addClass(c("wrapper")+" "+o.settings.modifier+" "+c("is",w.CLOSED)).hide().append(o.$modal),r.append(o.$wrapper),o.$wrapper.on("click."+m,'[data-remodal-action="close"]',function(e){e.preventDefault(),o.close()}),o.$wrapper.on("click."+m,'[data-remodal-action="cancel"]',function(e){e.preventDefault(),o.$modal.trigger(x.CANCELLATION),o.settings.closeOnCancel&&o.close(x.CANCELLATION)}),o.$wrapper.on("click."+m,'[data-remodal-action="confirm"]',function(e){e.preventDefault(),o.$modal.trigger(x.CONFIRMATION),o.settings.closeOnConfirm&&o.close(x.CONFIRMATION)}),o.$wrapper.on("click."+m,function(e){var n=t(e.target);n.hasClass(c("wrapper"))&&o.settings.closeOnOutsideClick&&o.close()})}var h,p,v="remodal",m=e.REMODAL_GLOBALS&&e.REMODAL_GLOBALS.NAMESPACE||v,g=t.map(["animationstart","webkitAnimationStart","MSAnimationStart","oAnimationStart"],function(e){return e+"."+m}).join(" "),y=t.map(["animationend","webkitAnimationEnd","MSAnimationEnd","oAnimationEnd"],function(e){return e+"."+m}).join(" "),b=t.extend({hashTracking:!0,closeOnConfirm:!0,closeOnCancel:!0,closeOnEscape:!0,closeOnOutsideClick:!0,modifier:"",appendTo:null},e.REMODAL_GLOBALS&&e.REMODAL_GLOBALS.DEFAULTS),w={CLOSING:"closing",CLOSED:"closed",OPENING:"opening",OPENED:"opened"},x={CONFIRMATION:"confirmation",CANCELLATION:"cancellation"},C=function(){var e=document.createElement("div").style;return void 0!==e.animationName||void 0!==e.WebkitAnimationName||void 0!==e.MozAnimationName||void 0!==e.msAnimationName||void 0!==e.OAnimationName}(),_=/iPad|iPhone|iPod/.test(navigator.platform);d.prototype.open=function(){var e,n=this;n.state!==w.OPENING&&n.state!==w.CLOSING&&(e=n.$modal.attr("data-remodal-id"),e&&n.settings.hashTracking&&(p=t(window).scrollTop(),location.hash=e),h&&h!==n&&l(h),h=n,r(),n.$bg.addClass(n.settings.modifier),n.$overlay.addClass(n.settings.modifier).show(),n.$wrapper.show().scrollTop(0),n.$modal.focus(),a(function(){s(n,w.OPENING)},function(){s(n,w.OPENED)},n))},d.prototype.close=function(e){var n=this;n.state!==w.OPENING&&n.state!==w.CLOSING&&(n.settings.hashTracking&&n.$modal.attr("data-remodal-id")===location.hash.substr(1)&&(location.hash="",t(window).scrollTop(p)),a(function(){s(n,w.CLOSING,!1,e)},function(){n.$bg.removeClass(n.settings.modifier),n.$overlay.removeClass(n.settings.modifier).hide(),n.$wrapper.hide(),o(),s(n,w.CLOSED,!1,e)},n))},d.prototype.getState=function(){return this.state},d.prototype.destroy=function(){var e,n=t[v].lookup;l(this),this.$wrapper.remove(),delete n[this.index],e=t.grep(n,function(e){return!!e}).length,0===e&&(this.$overlay.remove(),this.$bg.removeClass(c("is",w.CLOSING)+" "+c("is",w.OPENING)+" "+c("is",w.CLOSED)+" "+c("is",w.OPENED)))},t[v]={lookup:[]},t.fn[v]=function(e){var n,i;return this.each(function(r,o){i=t(o),null==i.data(v)?(n=new d(i,e),i.data(v,n.index),n.settings.hashTracking&&i.attr("data-remodal-id")===location.hash.substr(1)&&n.open()):n=t[v].lookup[i.data(v)]}),n},t(document).ready(function(){t(document).on("click","[data-remodal-target]",function(e){e.preventDefault();var n=e.currentTarget,i=n.getAttribute("data-remodal-target"),r=t('[data-remodal-id="'+i+'"]');t[v].lookup[r.data(v)].open()}),t(document).find("."+m).each(function(e,n){var i=t(n),r=i.data("remodal-options");r?("string"==typeof r||r instanceof String)&&(r=u(r)):r={},i[v](r)}),t(document).on("keydown."+m,function(e){h&&h.settings.closeOnEscape&&h.state===w.OPENED&&27===e.keyCode&&h.close()}),t(window).on("hashchange."+m,f)})}),!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Sweetalert2=t()}(this,function(){"use strict";var e="swal2-",t=function(t){var n={};for(var i in t)n[t[i]]=e+t[i];return n},n=t(["container","in","iosfix","modal","overlay","fade","show","hide","noanimation","close","title","content","spacer","confirm","cancel","icon","image","input","file","range","select","radio","checkbox","textarea","inputerror","validationerror","progresssteps","activeprogressstep","progresscircle","progressline","loading","styled"]),i=t(["success","warning","info","question","error"]),r={title:"",titleText:"",text:"",html:"",type:null,customClass:"",animation:!0,allowOutsideClick:!0,allowEscapeKey:!0,showConfirmButton:!0,showCancelButton:!1,preConfirm:null,confirmButtonText:"OK",confirmButtonColor:"#3085d6",confirmButtonClass:null,cancelButtonText:"Cancel",cancelButtonColor:"#aaa",cancelButtonClass:null,buttonsStyling:!0,reverseButtons:!1,focusCancel:!1,showCloseButton:!1,showLoaderOnConfirm:!1,imageUrl:null,imageWidth:null,imageHeight:null,imageClass:null,timer:null,width:500,padding:20,background:"#fff",input:null,inputPlaceholder:"",inputValue:"",inputOptions:{},inputAutoTrim:!0,inputClass:null,inputAttributes:{},inputValidator:null,progressSteps:[],currentProgressStep:null,progressStepsDistance:"40px",onOpen:null,onClose:null},o=('\n  <div class="'+n.modal+'" tabIndex="-1">\n    <ul class="'+n.progresssteps+'"></ul>\n    <div class="'+n.icon+" "+i.error+'">\n      <span class="x-mark"><span class="line left"></span><span class="line right"></span></span>\n    </div>\n    <div class="'+n.icon+" "+i.question+'">?</div>\n    <div class="'+n.icon+" "+i.warning+'">!</div>\n    <div class="'+n.icon+" "+i.info+'">i</div>\n    <div class="'+n.icon+" "+i.success+'">\n      <span class="line tip"></span> <span class="line long"></span>\n      <div class="placeholder"></div> <div class="fix"></div>\n    </div>\n    <img class="'+n.image+'">\n    <h2 class="'+n.title+'"></h2>\n    <div class="'+n.content+'"></div>\n    <input class="'+n.input+'">\n    <input type="file" class="'+n.file+'">\n    <div class="'+n.range+'">\n      <output></output>\n      <input type="range">\n    </div>\n    <select class="'+n.select+'"></select>\n    <div class="'+n.radio+'"></div>\n    <label for="'+n.checkbox+'" class="'+n.checkbox+'">\n      <input type="checkbox">\n    </label>\n    <textarea class="'+n.textarea+'"></textarea>\n    <div class="'+n.validationerror+'"></div>\n    <hr class="'+n.spacer+'">\n    <button type="button" class="'+n.confirm+'">OK</button>\n    <button type="button" class="'+n.cancel+'">Cancel</button>\n    <span class="'+n.close+'">&times;</span>\n  </div>\n').replace(/(^|\n)\s*/g,""),s=void 0,a=document.getElementsByClassName(n.container);a.length?s=a[0]:(s=document.createElement("div"),s.className=n.container,s.innerHTML=o);var l=function(e,t){e=String(e).replace(/[^0-9a-f]/gi,""),e.length<6&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),t=t||0;for(var n="#",i=0;i<3;i++){var r=parseInt(e.substr(2*i,2),16);r=Math.round(Math.min(Math.max(0,r+r*t),255)).toString(16),n+=("00"+r).substr(r.length)}return n},u={previousWindowKeyDown:null,previousActiveElement:null,previousBodyPadding:null},c=function(){if("undefined"==typeof document)return void console.error("SweetAlert2 requires document to initialize");if(!document.getElementsByClassName(n.container).length){document.body.appendChild(s);var e=d(),t=S(e,n.input),i=S(e,n.file),r=e.querySelector("."+n.range+" input"),o=e.querySelector("."+n.range+" output"),a=S(e,n.select),l=e.querySelector("."+n.checkbox+" input"),u=S(e,n.textarea);return t.oninput=function(){K.resetValidationError()},t.onkeydown=function(e){setTimeout(function(){13===e.keyCode&&(e.stopPropagation(),K.clickConfirm())},0)},i.onchange=function(){K.resetValidationError()},r.oninput=function(){K.resetValidationError(),o.value=r.value},r.onchange=function(){K.resetValidationError(),r.previousSibling.value=r.value},a.onchange=function(){K.resetValidationError()},l.onchange=function(){K.resetValidationError()},u.oninput=function(){K.resetValidationError()},e}},f=function(e){return s.querySelector("."+e)},d=function(){return document.body.querySelector("."+n.modal)||c()},h=function(){var e=d();return e.querySelectorAll("."+n.icon)},p=function(){return f(n.title)},v=function(){return f(n.content)},m=function(){return f(n.image)},g=function(){return f(n.spacer)},y=function(){return f(n.progresssteps)},b=function(){return f(n.validationerror)},w=function(){return f(n.confirm)},x=function(){return f(n.cancel)},C=function(){return f(n.close)},_=function(t){var n=[w(),x()];return t&&n.reverse(),n.concat(Array.prototype.slice.call(d().querySelectorAll("button:not([class^="+e+"]), input:not([type=hidden]), textarea, select")))},k=function(e,t){return!!e.classList&&e.classList.contains(t)},E=function(e){if(e.focus(),"file"!==e.type){var t=e.value;e.value="",e.value=t}},T=function(e,t){if(e&&t){var n=t.split(/\s+/).filter(Boolean);n.forEach(function(t){e.classList.add(t)})}},A=function(e,t){if(e&&t){var n=t.split(/\s+/).filter(Boolean);n.forEach(function(t){e.classList.remove(t)})}},S=function(e,t){for(var n=0;n<e.childNodes.length;n++)if(k(e.childNodes[n],t))return e.childNodes[n]},N=function(e,t){t||(t="block"),e.style.opacity="",e.style.display=t},$=function(e){e.style.opacity="",e.style.display="none"},O=function(e){for(;e.firstChild;)e.removeChild(e.firstChild)},j=function(e){return e.offsetWidth||e.offsetHeight||e.getClientRects().length},D=function(e,t){e.style.removeProperty?e.style.removeProperty(t):e.style.removeAttribute(t)},L=function(e){if(!j(e))return!1;if("function"==typeof MouseEvent){var t=new MouseEvent("click",{view:window,bubbles:!1,cancelable:!0});e.dispatchEvent(t)}else if(document.createEvent){var n=document.createEvent("MouseEvents");n.initEvent("click",!1,!1),e.dispatchEvent(n)}else document.createEventObject?e.fireEvent("onclick"):"function"==typeof e.onclick&&e.onclick()},P=function(){var e=document.createElement("div"),t={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd oanimationend",msAnimation:"MSAnimationEnd",animation:"animationend"};for(var n in t)if(t.hasOwnProperty(n)&&void 0!==e.style[n])return t[n];return!1}(),M=function(){var e=d();window.onkeydown=u.previousWindowKeyDown,u.previousActiveElement&&u.previousActiveElement.focus&&u.previousActiveElement.focus(),clearTimeout(e.timeout)},H=function(){var e=document.createElement("div");e.style.width="50px",e.style.height="50px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t},F=function(e,t){var n=void 0;return function(){var i=function(){n=null,e()};clearTimeout(n),n=setTimeout(i,t)}},R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B=(function(){function e(e){this.value=e}function t(t){function n(e,t){return new Promise(function(n,r){var a={key:e,arg:t,resolve:n,reject:r,next:null};s?s=s.next=a:(o=s=a,i(e,t))})}function i(n,o){try{var s=t[n](o),a=s.value;a instanceof e?Promise.resolve(a.value).then(function(e){i("next",e)},function(e){i("throw",e)}):r(s.done?"return":"normal",s.value)}catch(e){r("throw",e)}}function r(e,t){switch(e){case"return":o.resolve({value:t,done:!0});break;case"throw":o.reject(t);break;default:o.resolve({value:t,done:!1})}o=o.next,o?i(o.key,o.arg):s=null}var o,s;this._invoke=n,"function"!=typeof t.return&&(this.return=void 0)}return"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)},{wrap:function(e){return function(){return new t(e.apply(this,arguments))}},await:function(t){return new e(t)}}}(),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}),q=B({},r),I=[],W=void 0,z=function(e){var t=d();for(var o in e)r.hasOwnProperty(o)||"extraParams"===o||console.warn('SweetAlert2: Unknown parameter "'+o+'"');t.style.width="number"==typeof e.width?e.width+"px":e.width,t.style.padding=e.padding+"px",t.style.background=e.background;var s=p(),a=v(),l=w(),u=x(),c=C();if(e.titleText?s.innerText=e.titleText:s.innerHTML=e.title.split("\n").join("<br>"),e.text||e.html){if("object"===R(e.html))if(a.innerHTML="",0 in e.html)for(var f=0;f in e.html;f++)a.appendChild(e.html[f].cloneNode(!0));else a.appendChild(e.html.cloneNode(!0));else e.html?a.innerHTML=e.html:e.text&&(a.textContent=e.text);N(a)}else $(a);e.showCloseButton?N(c):$(c),t.className=n.modal,e.customClass&&T(t,e.customClass);var b=y(),_=parseInt(null===e.currentProgressStep?K.getQueueStep():e.currentProgressStep,10);e.progressSteps.length?(N(b),O(b),_>=e.progressSteps.length&&console.warn("SweetAlert2: Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"),e.progressSteps.forEach(function(t,i){var r=document.createElement("li");if(T(r,n.progresscircle),r.innerHTML=t,i===_&&T(r,n.activeprogressstep),b.appendChild(r),i!==e.progressSteps.length-1){var o=document.createElement("li");T(o,n.progressline),o.style.width=e.progressStepsDistance,b.appendChild(o)}})):$(b);for(var k=h(),E=0;E<k.length;E++)$(k[E]);if(e.type){var S=!1;for(var j in i)if(e.type===j){S=!0;break}if(!S)return console.error("SweetAlert2: Unknown alert type: "+e.type),!1;var L=t.querySelector("."+n.icon+"."+i[e.type]);switch(N(L),e.type){case"success":T(L,"animate"),T(L.querySelector(".tip"),"animate-success-tip"),T(L.querySelector(".long"),"animate-success-long");break;case"error":T(L,"animate-error-icon"),T(L.querySelector(".x-mark"),"animate-x-mark");break;case"warning":T(L,"pulse-warning")}}var P=m();e.imageUrl?(P.setAttribute("src",e.imageUrl),N(P),e.imageWidth?P.setAttribute("width",e.imageWidth):P.removeAttribute("width"),e.imageHeight?P.setAttribute("height",e.imageHeight):P.removeAttribute("height"),P.className=n.image,e.imageClass&&T(P,e.imageClass)):$(P),e.showCancelButton?u.style.display="inline-block":$(u),e.showConfirmButton?D(l,"display"):$(l);var M=g();
e.showConfirmButton||e.showCancelButton?N(M):$(M),l.innerHTML=e.confirmButtonText,u.innerHTML=e.cancelButtonText,e.buttonsStyling&&(l.style.backgroundColor=e.confirmButtonColor,u.style.backgroundColor=e.cancelButtonColor),l.className=n.confirm,T(l,e.confirmButtonClass),u.className=n.cancel,T(u,e.cancelButtonClass),e.buttonsStyling?(T(l,n.styled),T(u,n.styled)):(A(l,n.styled),A(u,n.styled),l.style.backgroundColor=l.style.borderLeftColor=l.style.borderRightColor="",u.style.backgroundColor=u.style.borderLeftColor=u.style.borderRightColor=""),e.animation===!0?A(t,n.noanimation):T(t,n.noanimation)},U=function(e,t){var i=d();e?(T(i,n.show),T(s,n.fade),A(i,n.hide)):A(i,n.fade),N(i),s.style.overflowY="hidden",P&&!k(i,n.noanimation)?i.addEventListener(P,function e(){i.removeEventListener(P,e),s.style.overflowY="auto"}):s.style.overflowY="auto",T(s,n.in),T(document.body,n.in),V(),G(),u.previousActiveElement=document.activeElement,null!==t&&"function"==typeof t&&t(i)},V=function(){null===u.previousBodyPadding&&document.body.scrollHeight>window.innerHeight&&(u.previousBodyPadding=document.body.style.paddingRight,document.body.style.paddingRight=H()+"px")},X=function(){null!==u.previousBodyPadding&&(document.body.style.paddingRight=u.previousBodyPadding,u.previousBodyPadding=null)},G=function(){var e=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream;if(e&&!k(document.body,n.iosfix)){var t=document.body.scrollTop;document.body.style.top=t*-1+"px",T(document.body,n.iosfix)}},J=function(){if(k(document.body,n.iosfix)){var e=parseInt(document.body.style.top,10);A(document.body,n.iosfix),document.body.style.top="",document.body.scrollTop=e*-1}},Y=function(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];if(void 0===t[0])return console.error("SweetAlert2 expects at least 1 attribute!"),!1;var r=B({},q);switch(R(t[0])){case"string":r.title=t[0],r.html=t[1],r.type=t[2];break;case"object":B(r,t[0]),r.extraParams=t[0].extraParams,"email"===r.input&&null===r.inputValidator&&(r.inputValidator=function(e){return new Promise(function(t,n){var i=/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;i.test(e)?t():n("Invalid email address")})});break;default:return console.error('SweetAlert2: Unexpected type of argument! Expected "string" or "object", got '+R(t[0])),!1}z(r);var o=d();return new Promise(function(e,t){r.timer&&(o.timeout=setTimeout(function(){K.closeModal(r.onClose),t("timer")},r.timer));var i=function(e){switch(e=e||r.input){case"select":case"textarea":case"file":return S(o,n[e]);case"checkbox":return o.querySelector("."+n.checkbox+" input");case"radio":return o.querySelector("."+n.radio+" input:checked")||o.querySelector("."+n.radio+" input:first-child");case"range":return o.querySelector("."+n.range+" input");default:return S(o,n.input)}},a=function(){var e=i();if(!e)return null;switch(r.input){case"checkbox":return e.checked?1:0;case"radio":return e.checked?e.value:null;case"file":return e.files.length?e.files[0]:null;default:return r.inputAutoTrim?e.value.trim():e.value}};r.input&&setTimeout(function(){var e=i();e&&E(e)},0);for(var c=function(t){r.showLoaderOnConfirm&&K.showLoading(),r.preConfirm?r.preConfirm(t,r.extraParams).then(function(n){K.closeModal(r.onClose),e(n||t)},function(e){K.hideLoading(),e&&K.showValidationError(e)}):(K.closeModal(r.onClose),e(t))},f=function(e){var n=e||window.event,i=n.target||n.srcElement,o=w(),s=x(),u=o===i||o.contains(i),f=s===i||s.contains(i);switch(n.type){case"mouseover":case"mouseup":r.buttonsStyling&&(u?o.style.backgroundColor=l(r.confirmButtonColor,-.1):f&&(s.style.backgroundColor=l(r.cancelButtonColor,-.1)));break;case"mouseout":r.buttonsStyling&&(u?o.style.backgroundColor=r.confirmButtonColor:f&&(s.style.backgroundColor=r.cancelButtonColor));break;case"mousedown":r.buttonsStyling&&(u?o.style.backgroundColor=l(r.confirmButtonColor,-.2):f&&(s.style.backgroundColor=l(r.cancelButtonColor,-.2)));break;case"click":u&&K.isVisible()?r.input?!function(){var e=a();r.inputValidator?(K.disableInput(),r.inputValidator(e,r.extraParams).then(function(){K.enableInput(),c(e)},function(e){K.enableInput(),e&&K.showValidationError(e)})):c(e)}():c(!0):f&&K.isVisible()&&(K.closeModal(r.onClose),t("cancel"))}},h=o.querySelectorAll("button"),p=0;p<h.length;p++)h[p].onclick=f,h[p].onmouseover=f,h[p].onmouseout=f,h[p].onmousedown=f;C().onclick=function(){K.closeModal(r.onClose),t("close")},s.onclick=function(e){e.target===s&&r.allowOutsideClick&&(K.closeModal(r.onClose),t("overlay"))};var v=w(),m=x();r.reverseButtons?v.parentNode.insertBefore(m,v):v.parentNode.insertBefore(v,m);var k=function(e,t){for(var n=_(r.focusCancel),i=0;i<n.length;i++){e+=t,e===n.length?e=0:e===-1&&(e=n.length-1);var o=n[e];if(j(o))return o.focus()}},O=function(e){var n=e||window.event,i=n.keyCode||n.which;if([9,13,32,27].indexOf(i)!==-1){for(var o=n.target||n.srcElement,s=_(r.focusCancel),a=-1,l=0;l<s.length;l++)if(o===s[l]){a=l;break}9===i?(n.shiftKey?k(a,-1):k(a,1),n.stopPropagation(),n.preventDefault()):13===i||32===i?a===-1&&(r.focusCancel?L(m,n):L(v,n)):27===i&&r.allowEscapeKey===!0&&(K.closeModal(r.onClose),t("esc"))}};u.previousWindowKeyDown=window.onkeydown,window.onkeydown=O,r.buttonsStyling&&(v.style.borderLeftColor=r.confirmButtonColor,v.style.borderRightColor=r.confirmButtonColor),K.showLoading=K.enableLoading=function(){N(g()),N(v,"inline-block"),T(v,n.loading),T(o,n.loading),v.disabled=!0,m.disabled=!0},K.hideLoading=K.disableLoading=function(){r.showConfirmButton||($(v),r.showCancelButton||$(g())),A(v,n.loading),A(o,n.loading),v.disabled=!1,m.disabled=!1},K.enableButtons=function(){v.disabled=!1,m.disabled=!1},K.disableButtons=function(){v.disabled=!0,m.disabled=!0},K.enableConfirmButton=function(){v.disabled=!1},K.disableConfirmButton=function(){v.disabled=!0},K.enableInput=function(){var e=i();if(!e)return!1;if("radio"===e.type)for(var t=e.parentNode.parentNode,n=t.querySelectorAll("input"),r=0;r<n.length;r++)n[r].disabled=!1;else e.disabled=!1},K.disableInput=function(){var e=i();if(!e)return!1;if(e&&"radio"===e.type)for(var t=e.parentNode.parentNode,n=t.querySelectorAll("input"),r=0;r<n.length;r++)n[r].disabled=!0;else e.disabled=!0},K.recalculateHeight=F(function(){var e=d(),t=e.style.display;e.style.minHeight="",N(e),e.style.minHeight=e.scrollHeight+1+"px",e.style.display=t},50),K.showValidationError=function(e){var t=b();t.innerHTML=e,N(t);var r=i();E(r),T(r,n.inputerror)},K.resetValidationError=function(){var e=b();$(e),K.recalculateHeight();var t=i();t&&A(t,n.inputerror)},K.getProgressSteps=function(){return r.progressSteps},K.setProgressSteps=function(e){r.progressSteps=e,z(r)},K.showProgressSteps=function(){N(y())},K.hideProgressSteps=function(){$(y())},K.enableButtons(),K.hideLoading(),K.resetValidationError();for(var D=["input","file","range","select","radio","checkbox","textarea"],P=void 0,M=0;M<D.length;M++){var H=n[D[M]],B=S(o,H);if(P=i(D[M])){for(var q in P.attributes)if(P.attributes.hasOwnProperty(q)){var I=P.attributes[q].name;"type"!==I&&"value"!==I&&P.removeAttribute(I)}for(var V in r.inputAttributes)P.setAttribute(V,r.inputAttributes[V])}B.className=H,r.inputClass&&T(B,r.inputClass),$(B)}var X=void 0;!function(){switch(r.input){case"text":case"email":case"password":case"number":case"tel":P=S(o,n.input),P.value=r.inputValue,P.placeholder=r.inputPlaceholder,P.type=r.input,N(P);break;case"file":P=S(o,n.file),P.placeholder=r.inputPlaceholder,P.type=r.input,N(P);break;case"range":var e=S(o,n.range),t=e.querySelector("input"),s=e.querySelector("output");t.value=r.inputValue,t.type=r.input,s.value=r.inputValue,N(e);break;case"select":var a=S(o,n.select);if(a.innerHTML="",r.inputPlaceholder){var l=document.createElement("option");l.innerHTML=r.inputPlaceholder,l.value="",l.disabled=!0,l.selected=!0,a.appendChild(l)}X=function(e){for(var t in e){var n=document.createElement("option");n.value=t,n.innerHTML=e[t],r.inputValue===t&&(n.selected=!0),a.appendChild(n)}N(a),a.focus()};break;case"radio":var u=S(o,n.radio);u.innerHTML="",X=function(e){for(var t in e){var i=1,o=document.createElement("input"),s=document.createElement("label"),a=document.createElement("span");o.type="radio",o.name=n.radio,o.value=t,o.id=n.radio+"-"+i++,r.inputValue===t&&(o.checked=!0),a.innerHTML=e[t],s.appendChild(o),s.appendChild(a),s.for=o.id,u.appendChild(s)}N(u);var l=u.querySelectorAll("input");l.length&&l[0].focus()};break;case"checkbox":var c=S(o,n.checkbox),f=i("checkbox");f.type="checkbox",f.value=1,f.id=n.checkbox,f.checked=Boolean(r.inputValue);var d=c.getElementsByTagName("span");d.length&&c.removeChild(d[0]),d=document.createElement("span"),d.innerHTML=r.inputPlaceholder,c.appendChild(d),N(c);break;case"textarea":var h=S(o,n.textarea);h.value=r.inputValue,h.placeholder=r.inputPlaceholder,N(h);break;case null:break;default:console.error('SweetAlert2: Unexpected type of input! Expected "text", "email", "password", "select", "checkbox", "textarea" or "file", got "'+r.input+'"')}}(),"select"!==r.input&&"radio"!==r.input||(r.inputOptions instanceof Promise?(K.showLoading(),r.inputOptions.then(function(e){K.hideLoading(),X(e)})):"object"===R(r.inputOptions)?X(r.inputOptions):console.error("SweetAlert2: Unexpected type of inputOptions! Expected object or Promise, got "+R(r.inputOptions))),U(r.animation,r.onOpen),k(-1,1),s.scrollTop=0,"undefined"==typeof MutationObserver||W||(W=new MutationObserver(K.recalculateHeight),W.observe(o,{childList:!0,characterData:!0,subtree:!0}))})},K=function e(){for(var t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];return e.isVisible()&&e.close(),Y.apply(void 0,n)};return K.isVisible=function(){var e=d();return j(e)},K.queue=function(e){I=e;var t=d(),n=function(){I=[],t.removeAttribute("data-queue-step")},i=[];return new Promise(function(e,r){!function o(s,a){s<I.length?(t.setAttribute("data-queue-step",s),K(I[s]).then(function(e){i.push(e),o(s+1,a)},function(e){n(),r(e)})):(n(),e(i))}(0)})},K.getQueueStep=function(){return d().getAttribute("data-queue-step")},K.insertQueueStep=function(e,t){return t&&t<I.length?I.splice(t,0,e):I.push(e)},K.deleteQueueStep=function(e){"undefined"!=typeof I[e]&&I.splice(e,1)},K.close=K.closeModal=function(e){var t=d();A(t,n.show),T(t,n.hide);var r=t.querySelector("."+n.icon+"."+i.success);A(r,"animate"),A(r.querySelector(".tip"),"animate-success-tip"),A(r.querySelector(".long"),"animate-success-long");var o=t.querySelector("."+n.icon+"."+i.error);A(o,"animate-error-icon"),A(o.querySelector(".x-mark"),"animate-x-mark");var a=t.querySelector("."+n.icon+"."+i.warning);A(a,"pulse-warning"),M();var l=function(){$(t),t.style.minHeight="",A(s,n.in),A(document.body,n.in),X(),J()};P&&!k(t,n.noanimation)?t.addEventListener(P,function e(){t.removeEventListener(P,e),k(t,n.hide)&&l()}):l(),null!==e&&"function"==typeof e&&e(t)},K.clickConfirm=function(){return w().click()},K.clickCancel=function(){return x().click()},K.setDefaults=function(e){if(!e||"object"!==("undefined"==typeof e?"undefined":R(e)))return console.error("SweetAlert2: the argument for setDefaults() is required and has to be a object");for(var t in e)r.hasOwnProperty(t)||"extraParams"===t||(console.warn('SweetAlert2: Unknown parameter "'+t+'"'),delete e[t]);B(q,e)},K.resetDefaults=function(){q=B({},r)},K.noop=function(){},K.version="6.2.8",K}),window.Sweetalert2&&(window.sweetAlert=window.swal=window.Sweetalert2),function(e,t){"use strict";var n="0.7.12",i="",r="?",o="function",s="undefined",a="object",l="string",u="major",c="model",f="name",d="type",h="vendor",p="version",v="architecture",m="console",g="mobile",y="tablet",b="smarttv",w="wearable",x="embedded",C={extend:function(e,t){var n={};for(var i in e)t[i]&&t[i].length%2===0?n[i]=t[i].concat(e[i]):n[i]=e[i];return n},has:function(e,t){return"string"==typeof e&&t.toLowerCase().indexOf(e.toLowerCase())!==-1},lowerize:function(e){return e.toLowerCase()},major:function(e){return typeof e===l?e.replace(/[^\d\.]/g,"").split(".")[0]:t},trim:function(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}},_={rgx:function(){for(var e,n,i,r,l,u,c,f=0,d=arguments;f<d.length&&!u;){var h=d[f],p=d[f+1];if(typeof e===s){e={};for(r in p)p.hasOwnProperty(r)&&(l=p[r],typeof l===a?e[l[0]]=t:e[l]=t)}for(n=i=0;n<h.length&&!u;)if(u=h[n++].exec(this.getUA()))for(r=0;r<p.length;r++)c=u[++i],l=p[r],typeof l===a&&l.length>0?2==l.length?typeof l[1]==o?e[l[0]]=l[1].call(this,c):e[l[0]]=l[1]:3==l.length?typeof l[1]!==o||l[1].exec&&l[1].test?e[l[0]]=c?c.replace(l[1],l[2]):t:e[l[0]]=c?l[1].call(this,c,l[2]):t:4==l.length&&(e[l[0]]=c?l[3].call(this,c.replace(l[1],l[2])):t):e[l]=c?c:t;f+=2}return e},str:function(e,n){for(var i in n)if(typeof n[i]===a&&n[i].length>0){for(var o=0;o<n[i].length;o++)if(C.has(n[i][o],e))return i===r?t:i}else if(C.has(n[i],e))return i===r?t:i;return e}},k={browser:{oldsafari:{version:{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}}},device:{amazon:{model:{"Fire Phone":["SD","KF"]}},sprint:{model:{"Evo Shift 4G":"7373KT"},vendor:{HTC:"APA",Sprint:"Sprint"}}},os:{windows:{version:{ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"}}}},E={browser:[[/(opera\smini)\/([\w\.-]+)/i,/(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,/(opera).+version\/([\w\.]+)/i,/(opera)[\/\s]+([\w\.]+)/i],[f,p],[/(opios)[\/\s]+([\w\.]+)/i],[[f,"Opera Mini"],p],[/\s(opr)\/([\w\.]+)/i],[[f,"Opera"],p],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]+)*/i,/(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,/(?:ms|\()(ie)\s([\w\.]+)/i,/(rekonq)\/([\w\.]+)*/i,/(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs)\/([\w\.-]+)/i],[f,p],[/(trident).+rv[:\s]([\w\.]+).+like\sgecko/i],[[f,"IE"],p],[/(edge)\/((\d+)?[\w\.]+)/i],[f,p],[/(yabrowser)\/([\w\.]+)/i],[[f,"Yandex"],p],[/(comodo_dragon)\/([\w\.]+)/i],[[f,/_/g," "],p],[/(micromessenger)\/([\w\.]+)/i],[[f,"WeChat"],p],[/xiaomi\/miuibrowser\/([\w\.]+)/i],[p,[f,"MIUI Browser"]],[/\swv\).+(chrome)\/([\w\.]+)/i],[[f,/(.+)/,"$1 WebView"],p],[/android.+samsungbrowser\/([\w\.]+)/i,/android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i],[p,[f,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i,/(qqbrowser)[\/\s]?([\w\.]+)/i],[f,p],[/(uc\s?browser)[\/\s]?([\w\.]+)/i,/ucweb.+(ucbrowser)[\/\s]?([\w\.]+)/i,/juc.+(ucweb)[\/\s]?([\w\.]+)/i],[[f,"UCBrowser"],p],[/(dolfin)\/([\w\.]+)/i],[[f,"Dolphin"],p],[/((?:android.+)crmo|crios)\/([\w\.]+)/i],[[f,"Chrome"],p],[/;fbav\/([\w\.]+);/i],[p,[f,"Facebook"]],[/fxios\/([\w\.-]+)/i],[p,[f,"Firefox"]],[/version\/([\w\.]+).+?mobile\/\w+\s(safari)/i],[p,[f,"Mobile Safari"]],[/version\/([\w\.]+).+?(mobile\s?safari|safari)/i],[p,f],[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],[f,[p,_.str,k.browser.oldsafari.version]],[/(konqueror)\/([\w\.]+)/i,/(webkit|khtml)\/([\w\.]+)/i],[f,p],[/(navigator|netscape)\/([\w\.-]+)/i],[[f,"Netscape"],p],[/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,/(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/([\w\.-]+)/i,/(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,/(links)\s\(([\w\.]+)/i,/(gobrowser)\/?([\w\.]+)*/i,/(ice\s?browser)\/v?([\w\._]+)/i,/(mosaic)[\/\s]([\w\.]+)/i],[f,p]],cpu:[[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],[[v,"amd64"]],[/(ia32(?=;))/i],[[v,C.lowerize]],[/((?:i[346]|x)86)[;\)]/i],[[v,"ia32"]],[/windows\s(ce|mobile);\sppc;/i],[[v,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],[[v,/ower/,"",C.lowerize]],[/(sun4\w)[;\)]/i],[[v,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i],[[v,C.lowerize]]],device:[[/\((ipad|playbook);[\w\s\);-]+(rim|apple)/i],[c,h,[d,y]],[/applecoremedia\/[\w\.]+ \((ipad)/],[c,[h,"Apple"],[d,y]],[/(apple\s{0,1}tv)/i],[[c,"Apple TV"],[h,"Apple"]],[/(archos)\s(gamepad2?)/i,/(hp).+(touchpad)/i,/(hp).+(tablet)/i,/(kindle)\/([\w\.]+)/i,/\s(nook)[\w\s]+build\/(\w+)/i,/(dell)\s(strea[kpr\s\d]*[\dko])/i],[h,c,[d,y]],[/(kf[A-z]+)\sbuild\/[\w\.]+.*silk\//i],[c,[h,"Amazon"],[d,y]],[/(sd|kf)[0349hijorstuw]+\sbuild\/[\w\.]+.*silk\//i],[[c,_.str,k.device.amazon.model],[h,"Amazon"],[d,g]],[/\((ip[honed|\s\w*]+);.+(apple)/i],[c,h,[d,g]],[/\((ip[honed|\s\w*]+);/i],[c,[h,"Apple"],[d,g]],[/(blackberry)[\s-]?(\w+)/i,/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|huawei|meizu|motorola|polytron)[\s_-]?([\w-]+)*/i,/(hp)\s([\w\s]+\w)/i,/(asus)-?(\w+)/i],[h,c,[d,g]],[/\(bb10;\s(\w+)/i],[c,[h,"BlackBerry"],[d,g]],[/android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i],[c,[h,"Asus"],[d,y]],[/(sony)\s(tablet\s[ps])\sbuild\//i,/(sony)?(?:sgp.+)\sbuild\//i],[[h,"Sony"],[c,"Xperia Tablet"],[d,y]],[/(?:sony)?(?:(?:(?:c|d)\d{4})|(?:so[-l].+))\sbuild\//i],[[h,"Sony"],[c,"Xperia Phone"],[d,g]],[/\s(ouya)\s/i,/(nintendo)\s([wids3u]+)/i],[h,c,[d,m]],[/android.+;\s(shield)\sbuild/i],[c,[h,"Nvidia"],[d,m]],[/(playstation\s[34portablevi]+)/i],[c,[h,"Sony"],[d,m]],[/(sprint\s(\w+))/i],[[h,_.str,k.device.sprint.vendor],[c,_.str,k.device.sprint.model],[d,g]],[/(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i],[h,c,[d,y]],[/(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,/(zte)-(\w+)*/i,/(alcatel|geeksphone|huawei|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i],[h,[c,/_/g," "],[d,g]],[/(nexus\s9)/i],[c,[h,"HTC"],[d,y]],[/(nexus\s6p)/i],[c,[h,"Huawei"],[d,g]],[/(microsoft);\s(lumia[\s\w]+)/i],[h,c,[d,g]],[/[\s\(;](xbox(?:\sone)?)[\s\);]/i],[c,[h,"Microsoft"],[d,m]],[/(kin\.[onetw]{3})/i],[[c,/\./g," "],[h,"Microsoft"],[d,g]],[/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?(:?\s4g)?)[\w\s]+build\//i,/mot[\s-]?(\w+)*/i,/(XT\d{3,4}) build\//i,/(nexus\s6)/i],[c,[h,"Motorola"],[d,g]],[/android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],[c,[h,"Motorola"],[d,y]],[/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i],[[h,C.trim],[c,C.trim],[d,b]],[/hbbtv.+maple;(\d+)/i],[[c,/^/,"SmartTV"],[h,"Samsung"],[d,b]],[/\(dtv[\);].+(aquos)/i],[c,[h,"Sharp"],[d,b]],[/android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,/((SM-T\w+))/i],[[h,"Samsung"],c,[d,y]],[/smart-tv.+(samsung)/i],[h,[d,b],c],[/((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,/(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i,/sec-((sgh\w+))/i],[[h,"Samsung"],c,[d,g]],[/sie-(\w+)*/i],[c,[h,"Siemens"],[d,g]],[/(maemo|nokia).*(n900|lumia\s\d+)/i,/(nokia)[\s_-]?([\w-]+)*/i],[[h,"Nokia"],c,[d,g]],[/android\s3\.[\s\w;-]{10}(a\d{3})/i],[c,[h,"Acer"],[d,y]],[/android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i],[[h,"LG"],c,[d,y]],[/(lg) netcast\.tv/i],[h,c,[d,b]],[/(nexus\s[45])/i,/lg[e;\s\/-]+(\w+)*/i],[c,[h,"LG"],[d,g]],[/android.+(ideatab[a-z0-9\-\s]+)/i],[c,[h,"Lenovo"],[d,y]],[/linux;.+((jolla));/i],[h,c,[d,g]],[/((pebble))app\/[\d\.]+\s/i],[h,c,[d,w]],[/android.+;\s(glass)\s\d/i],[c,[h,"Google"],[d,w]],[/android.+(\w+)\s+build\/hm\1/i,/android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,/android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d\w)?)\s+build/i],[[c,/_/g," "],[h,"Xiaomi"],[d,g]],[/android.+a000(1)\s+build/i],[c,[h,"OnePlus"],[d,g]],[/\s(tablet)[;\/]/i,/\s(mobile)(?:[;\/]|\ssafari)/i],[[d,C.lowerize],h,c]],engine:[[/windows.+\sedge\/([\w\.]+)/i],[p,[f,"EdgeHTML"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,/(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,/(icab)[\/\s]([23]\.[\d\.]+)/i],[f,p],[/rv\:([\w\.]+).*(gecko)/i],[p,f]],os:[[/microsoft\s(windows)\s(vista|xp)/i],[f,p],[/(windows)\snt\s6\.2;\s(arm)/i,/(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s]+\w)*/i,/(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i],[f,[p,_.str,k.os.windows.version]],[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],[[f,"Windows"],[p,_.str,k.os.windows.version]],[/\((bb)(10);/i],[[f,"BlackBerry"],p],[/(blackberry)\w*\/?([\w\.]+)*/i,/(tizen)[\/\s]([\w\.]+)/i,/(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]+)*/i,/linux;.+(sailfish);/i],[f,p],[/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i],[[f,"Symbian"],p],[/\((series40);/i],[f],[/mozilla.+\(mobile;.+gecko.+firefox/i],[[f,"Firefox OS"],p],[/(nintendo|playstation)\s([wids34portablevu]+)/i,/(mint)[\/\s\(]?(\w+)*/i,/(mageia|vectorlinux)[;\s]/i,/(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]+)*/i,/(hurd|linux)\s?([\w\.]+)*/i,/(gnu)\s?([\w\.]+)*/i],[f,p],[/(cros)\s[\w]+\s([\w\.]+\w)/i],[[f,"Chromium OS"],p],[/(sunos)\s?([\w\.]+\d)*/i],[[f,"Solaris"],p],[/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i],[f,p],[/(haiku)\s(\w+)/i],[f,p],[/(ip[honead]+)(?:.*os\s([\w]+)*\slike\smac|;\sopera)/i],[[f,"iOS"],[p,/_/g,"."]],[/(mac\sos\sx)\s?([\w\s\.]+\w)*/i,/(macintosh|mac(?=_powerpc)\s)/i],[[f,"Mac OS"],[p,/_/g,"."]],[/((?:open)?solaris)[\/\s-]?([\w\.]+)*/i,/(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i,/(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,/(unix)\s?([\w\.]+)*/i],[f,p]]},T=function(t,n){if(this instanceof T){var r=t||(e&&e.navigator&&e.navigator.userAgent?e.navigator.userAgent:i),o=n?C.extend(E,n):E;return this.getBrowser=function(){var e=_.rgx.apply(this,o.browser);return e.major=C.major(e.version),e},this.getCPU=function(){return _.rgx.apply(this,o.cpu)},this.getDevice=function(){return _.rgx.apply(this,o.device)},this.getEngine=function(){return _.rgx.apply(this,o.engine)},this.getOS=function(){return _.rgx.apply(this,o.os)},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return r},this.setUA=function(e){return r=e,this},this}return new T(t,n).getResult()};T.VERSION=n,T.BROWSER={NAME:f,MAJOR:u,VERSION:p},T.CPU={ARCHITECTURE:v},T.DEVICE={MODEL:c,VENDOR:h,TYPE:d,CONSOLE:m,MOBILE:g,SMARTTV:b,TABLET:y,WEARABLE:w,EMBEDDED:x},T.ENGINE={NAME:f,VERSION:p},T.OS={NAME:f,VERSION:p},typeof exports!==s?(typeof module!==s&&module.exports&&(exports=module.exports=T),exports.UAParser=T):typeof define===o&&define.amd?define(function(){return T}):e.UAParser=T;var A=e.jQuery||e.Zepto;if(typeof A!==s){var S=new T;A.ua=S.getResult(),A.ua.get=function(){return S.getUA()},A.ua.set=function(e){S.setUA(e);var t=S.getResult();for(var n in t)A.ua[n]=t[n]}}}("object"==typeof window?window:this);var URLSearchParams=URLSearchParams||function(){"use strict";function e(e){return encodeURIComponent(e).replace(o,l)}function t(e){return decodeURIComponent(e.replace(s," "))}function n(e){if(this[c]=Object.create(null),e){"?"===e.charAt(0)&&(e=e.slice(1));for(var n,i,r=(e||"").split("&"),o=0,s=r.length;o<s;o++)i=r[o],n=i.indexOf("="),-1<n?this.append(t(i.slice(0,n)),t(i.slice(n+1))):i.length&&this.append(t(i),"")}}function i(){try{return!!Symbol.iterator}catch(e){return!1}}var r=n.prototype,o=/[!'\(\)~]|%20|%00/g,s=/\+/g,a={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"},l=function(e){return a[e]},u=i(),c="__URLSearchParams__:"+Math.random();r.append=function(e,t){var n=this[c];e in n?n[e].push(""+t):n[e]=[""+t]},r.delete=function(e){delete this[c][e]},r.get=function(e){var t=this[c];return e in t?t[e][0]:null},r.getAll=function(e){var t=this[c];return e in t?t[e].slice(0):[]},r.has=function(e){return e in this[c]},r.set=function(e,t){this[c][e]=[""+t]},r.forEach=function(e,t){var n=this[c];Object.getOwnPropertyNames(n).forEach(function(i){n[i].forEach(function(n){e.call(t,n,i,this)},this)},this)},r.keys=function(){var e=[];this.forEach(function(t,n){e.push(n)});var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return u&&(t[Symbol.iterator]=function(){return t}),t},r.values=function(){var e=[];this.forEach(function(t){e.push(t)});var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return u&&(t[Symbol.iterator]=function(){return t}),t},r.entries=function(){var e=[];this.forEach(function(t,n){e.push([n,t])});var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return u&&(t[Symbol.iterator]=function(){return t}),t},u&&(r[Symbol.iterator]=r.entries),r.toJSON=function(){return{}},r.toString=function(){var t,n,i,r,o=this[c],s=[];for(n in o)for(i=e(n),t=0,r=o[n];t<r.length;t++)s.push(i+"="+e(r[t]));return s.join("&")};var f=Object.defineProperty,d=Object.getOwnPropertyDescriptor,h=function(e){function t(t,n){r.append.call(this,t,n),t=this.toString(),e.set.call(this._usp,t?"?"+t:"")}function n(t){r.delete.call(this,t),t=this.toString(),e.set.call(this._usp,t?"?"+t:"")}function i(t,n){r.set.call(this,t,n),t=this.toString(),e.set.call(this._usp,t?"?"+t:"")}return function(e,r){return e.append=t,e.delete=n,e.set=i,f(e,"_usp",{configurable:!0,writable:!0,value:r})}},p=function(e){return function(t,n){return f(t,"_searchParams",{configurable:!0,writable:!0,value:e(n,t)}),n}},v=function(e){var t=e.append;e.append=r.append,n.call(e,e._usp.search.slice(1)),e.append=t},m=function(e,t){if(!(e instanceof t))throw new TypeError("'searchParams' accessed on an object that does not implement interface "+t.name)},g=function(e){var t,i=e.prototype,r=d(i,"searchParams"),o=d(i,"href"),s=d(i,"search");!r&&s&&s.set&&(t=p(h(s)),Object.defineProperties(i,{href:{get:function(){return o.get.call(this)},set:function(e){var t=this._searchParams;o.set.call(this,e),t&&v(t)}},search:{get:function(){return s.get.call(this)},set:function(e){var t=this._searchParams;s.set.call(this,e),t&&v(t)}},searchParams:{get:function(){return m(this,e),this._searchParams||t(this,new n(this.search.slice(1)))},set:function(n){m(this,e),t(this,n)}}}))};return g(HTMLAnchorElement),/^function|object$/.test(typeof URL)&&URL.prototype&&g(URL),n}();!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Vue=t()}(this,function(){"use strict";function e(t,i,r){if(n(t,i))return void(t[i]=r);if(t._isVue)return void e(t._data,i,r);var o=t.__ob__;if(!o)return void(t[i]=r);if(o.convert(i,r),o.dep.notify(),o.vms)for(var s=o.vms.length;s--;){var a=o.vms[s];a._proxy(i),a._digest()}return r}function t(e,t){if(n(e,t)){delete e[t];var i=e.__ob__;if(!i)return void(e._isVue&&(delete e._data[t],e._digest()));if(i.dep.notify(),i.vms)for(var r=i.vms.length;r--;){var o=i.vms[r];o._unproxy(t),o._digest()}}}function n(e,t){return $n.call(e,t)}function i(e){return On.test(e)}function r(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function o(e){return null==e?"":e.toString()}function s(e){if("string"!=typeof e)return e;var t=Number(e);return isNaN(t)?e:t}function a(e){return"true"===e||"false"!==e&&e}function l(e){var t=e.charCodeAt(0),n=e.charCodeAt(e.length-1);return t!==n||34!==t&&39!==t?e:e.slice(1,-1)}function u(e){return e.replace(jn,c)}function c(e,t){return t?t.toUpperCase():""}function f(e){return e.replace(Dn,"$1-$2").toLowerCase()}function d(e){return e.replace(Ln,c)}function h(e,t){return function(n){var i=arguments.length;return i?i>1?e.apply(t,arguments):e.call(t,n):e.call(t)}}function p(e,t){t=t||0;for(var n=e.length-t,i=new Array(n);n--;)i[n]=e[n+t];return i}function v(e,t){for(var n=Object.keys(t),i=n.length;i--;)e[n[i]]=t[n[i]];return e}function m(e){return null!==e&&"object"==typeof e}function g(e){return Pn.call(e)===Mn}function y(e,t,n,i){Object.defineProperty(e,t,{value:n,enumerable:!!i,writable:!0,configurable:!0})}function b(e,t){var n,i,r,o,s,a=function a(){var l=Date.now()-o;l<t&&l>=0?n=setTimeout(a,t-l):(n=null,s=e.apply(r,i),n||(r=i=null))};return function(){return r=this,i=arguments,o=Date.now(),n||(n=setTimeout(a,t)),s}}function w(e,t){for(var n=e.length;n--;)if(e[n]===t)return n;return-1}function x(e){var t=function t(){if(!t.cancelled)return e.apply(this,arguments)};return t.cancel=function(){t.cancelled=!0},t}function C(e,t){return e==t||!(!m(e)||!m(t))&&JSON.stringify(e)===JSON.stringify(t)}function _(e){this.size=0,this.limit=e,this.head=this.tail=void 0,this._keymap=Object.create(null)}function k(){var e,t=ri.slice(ci,li).trim();if(t){e={};var n=t.match(gi);e.name=n[0],n.length>1&&(e.args=n.slice(1).map(E))}e&&(oi.filters=oi.filters||[]).push(e),ci=li+1}function E(e){if(yi.test(e))return{value:s(e),dynamic:!1};var t=l(e),n=t===e;return{value:n?e:t,dynamic:n}}function T(e){var t=mi.get(e);if(t)return t;for(ri=e,fi=di=!1,hi=pi=vi=0,ci=0,oi={},li=0,ui=ri.length;li<ui;li++)if(ai=si,si=ri.charCodeAt(li),fi)39===si&&92!==ai&&(fi=!fi);else if(di)34===si&&92!==ai&&(di=!di);else if(124===si&&124!==ri.charCodeAt(li+1)&&124!==ri.charCodeAt(li-1))null==oi.expression?(ci=li+1,oi.expression=ri.slice(0,li).trim()):k();else switch(si){case 34:di=!0;break;case 39:fi=!0;break;case 40:vi++;break;case 41:vi--;break;case 91:pi++;break;case 93:pi--;break;case 123:hi++;break;case 125:hi--}return null==oi.expression?oi.expression=ri.slice(0,li).trim():0!==ci&&k(),mi.put(e,oi),oi}function A(e){return e.replace(wi,"\\$&")}function S(){var e=A(Si.delimiters[0]),t=A(Si.delimiters[1]),n=A(Si.unsafeDelimiters[0]),i=A(Si.unsafeDelimiters[1]);Ci=new RegExp(n+"((?:.|\\n)+?)"+i+"|"+e+"((?:.|\\n)+?)"+t,"g"),_i=new RegExp("^"+n+"((?:.|\\n)+?)"+i+"$"),xi=new _(1e3)}function N(e){xi||S();var t=xi.get(e);if(t)return t;if(!Ci.test(e))return null;for(var n,i,r,o,s,a,l=[],u=Ci.lastIndex=0;n=Ci.exec(e);)i=n.index,i>u&&l.push({value:e.slice(u,i)}),r=_i.test(n[0]),o=r?n[1]:n[2],s=o.charCodeAt(0),a=42===s,o=a?o.slice(1):o,l.push({tag:!0,value:o.trim(),html:r,oneTime:a}),u=i+n[0].length;return u<e.length&&l.push({value:e.slice(u)}),xi.put(e,l),l}function $(e,t){return e.length>1?e.map(function(e){return O(e,t)}).join("+"):O(e[0],t,!0)}function O(e,t,n){return e.tag?e.oneTime&&t?'"'+t.$eval(e.value)+'"':j(e.value,n):'"'+e.value+'"'}function j(e,t){if(ki.test(e)){var n=T(e);return n.filters?"this._applyFilters("+n.expression+",null,"+JSON.stringify(n.filters)+",false)":"("+e+")"}return t?e:"("+e+")"}function D(e,t,n,i){M(e,1,function(){t.appendChild(e)},n,i)}function L(e,t,n,i){M(e,1,function(){I(e,t)},n,i)}function P(e,t,n){M(e,-1,function(){z(e)},t,n)}function M(e,t,n,i,r){var o=e.__v_trans;if(!o||!o.hooks&&!Yn||!i._isCompiled||i.$parent&&!i.$parent._isCompiled)return n(),void(r&&r());var s=t>0?"enter":"leave";o[s](n,r)}function H(e){if("string"==typeof e){var t=e;e=document.querySelector(e),e||Ni("Cannot find element: "+t)}return e}function F(e){if(!e)return!1;var t=e.ownerDocument.documentElement,n=e.parentNode;return t===e||t===n||!(!n||1!==n.nodeType||!t.contains(n))}function R(e,t){var n=e.getAttribute(t);return null!==n&&e.removeAttribute(t),n}function B(e,t){var n=R(e,":"+t);return null===n&&(n=R(e,"v-bind:"+t)),n}function q(e,t){return e.hasAttribute(t)||e.hasAttribute(":"+t)||e.hasAttribute("v-bind:"+t)}function I(e,t){t.parentNode.insertBefore(e,t)}function W(e,t){t.nextSibling?I(e,t.nextSibling):t.parentNode.appendChild(e)}function z(e){e.parentNode.removeChild(e)}function U(e,t){t.firstChild?I(e,t.firstChild):t.appendChild(e)}function V(e,t){var n=e.parentNode;n&&n.replaceChild(t,e)}function X(e,t,n,i){e.addEventListener(t,n,i)}function G(e,t,n){e.removeEventListener(t,n)}function J(e){var t=e.className;return"object"==typeof t&&(t=t.baseVal||""),t}function Y(e,t){Wn&&!/svg$/.test(e.namespaceURI)?e.className=t:e.setAttribute("class",t)}function K(e,t){if(e.classList)e.classList.add(t);else{var n=" "+J(e)+" ";n.indexOf(" "+t+" ")<0&&Y(e,(n+t).trim())}}function Q(e,t){if(e.classList)e.classList.remove(t);else{for(var n=" "+J(e)+" ",i=" "+t+" ";n.indexOf(i)>=0;)n=n.replace(i," ");Y(e,n.trim())}e.className||e.removeAttribute("class")}function Z(e,t){var n,i;if(ne(e)&&ae(e.content)&&(e=e.content),e.hasChildNodes())for(ee(e),i=t?document.createDocumentFragment():document.createElement("div");n=e.firstChild;)i.appendChild(n);return i}function ee(e){for(var t;t=e.firstChild,te(t);)e.removeChild(t);for(;t=e.lastChild,te(t);)e.removeChild(t);
}function te(e){return e&&(3===e.nodeType&&!e.data.trim()||8===e.nodeType)}function ne(e){return e.tagName&&"template"===e.tagName.toLowerCase()}function ie(e,t){var n=Si.debug?document.createComment(e):document.createTextNode(t?" ":"");return n.__v_anchor=!0,n}function re(e){if(e.hasAttributes())for(var t=e.attributes,n=0,i=t.length;n<i;n++){var r=t[n].name;if(ji.test(r))return u(r.replace(ji,""))}}function oe(e,t,n){for(var i;e!==t;)i=e.nextSibling,n(e),e=i;n(t)}function se(e,t,n,i,r){function o(){if(a++,s&&a>=l.length){for(var e=0;e<l.length;e++)i.appendChild(l[e]);r&&r()}}var s=!1,a=0,l=[];oe(e,t,function(e){e===t&&(s=!0),l.push(e),P(e,n,o)})}function ae(e){return e&&11===e.nodeType}function le(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}function ue(e,t){var n=e.tagName.toLowerCase(),i=e.hasAttributes();if(Di.test(n)||Li.test(n)){if(i)return ce(e,t)}else{if(ge(t,"components",n))return{id:n};var r=i&&ce(e,t);if(r)return r;var o=t._componentNameMap&&t._componentNameMap[n];o?Ni("Unknown custom element: <"+n+"> - did you mean <"+o+">? HTML is case-insensitive, remember to use kebab-case in templates."):Pi(e,n)&&Ni("Unknown custom element: <"+n+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.')}}function ce(e,t){var n=e.getAttribute("is");if(null!=n){if(ge(t,"components",n))return e.removeAttribute("is"),{id:n}}else if(n=B(e,"is"),null!=n)return{id:n,dynamic:!0}}function fe(t,i){var r,o,s;for(r in i)o=t[r],s=i[r],n(t,r)?m(o)&&m(s)&&fe(o,s):e(t,r,s);return t}function de(e,t){var n=Object.create(e||null);return t?v(n,ve(t)):n}function he(e){if(e.components)for(var t,n=e.components=ve(e.components),i=Object.keys(n),r=e._componentNameMap={},o=0,s=i.length;o<s;o++){var a=i[o];Di.test(a)||Li.test(a)?Ni("Do not use built-in or reserved HTML elements as component id: "+a):(r[a.replace(/-/g,"").toLowerCase()]=f(a),t=n[a],g(t)&&(n[a]=kn.extend(t)))}}function pe(e){var t,n,i=e.props;if(Hn(i))for(e.props={},t=i.length;t--;)n=i[t],"string"==typeof n?e.props[n]=null:n.name&&(e.props[n.name]=n);else if(g(i)){var r=Object.keys(i);for(t=r.length;t--;)n=i[r[t]],"function"==typeof n&&(i[r[t]]={type:n})}}function ve(e){if(Hn(e)){for(var t,n={},i=e.length;i--;){t=e[i];var r="function"==typeof t?t.options&&t.options.name||t.id:t.name||t.id;r?n[r]=t:Ni('Array-syntax assets must provide a "name" or "id" field.')}return n}return e}function me(e,t,i){function r(n){var r=Mi[n]||Hi;s[n]=r(e[n],t[n],i,n)}he(t),pe(t),t.propsData&&!i&&Ni("propsData can only be used as an instantiation option.");var o,s={};if(t.extends&&(e="function"==typeof t.extends?me(e,t.extends.options,i):me(e,t.extends,i)),t.mixins)for(var a=0,l=t.mixins.length;a<l;a++){var u=t.mixins[a],c=u.prototype instanceof kn?u.options:u;e=me(e,c,i)}for(o in e)r(o);for(o in t)n(e,o)||r(o);return s}function ge(e,t,n,i){if("string"==typeof n){var r,o=e[t],s=o[n]||o[r=u(n)]||o[r.charAt(0).toUpperCase()+r.slice(1)];return i&&!s&&Ni("Failed to resolve "+t.slice(0,-1)+": "+n,e),s}}function ye(){this.id=Fi++,this.subs=[]}function be(e){Ii=!1,e(),Ii=!0}function we(e){if(this.value=e,this.dep=new ye,y(e,"__ob__",this),Hn(e)){var t=Fn?xe:Ce;t(e,Bi,qi),this.observeArray(e)}else this.walk(e)}function xe(e,t){e.__proto__=t}function Ce(e,t,n){for(var i=0,r=n.length;i<r;i++){var o=n[i];y(e,o,t[o])}}function _e(e,t){if(e&&"object"==typeof e){var i;return n(e,"__ob__")&&e.__ob__ instanceof we?i=e.__ob__:Ii&&(Hn(e)||g(e))&&Object.isExtensible(e)&&!e._isVue&&(i=new we(e)),i&&t&&i.addVm(t),i}}function ke(e,t,n){var i=new ye,r=Object.getOwnPropertyDescriptor(e,t);if(!r||r.configurable!==!1){var o=r&&r.get,s=r&&r.set,a=_e(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=o?o.call(e):n;if(ye.target&&(i.depend(),a&&a.dep.depend(),Hn(t)))for(var r,s=0,l=t.length;s<l;s++)r=t[s],r&&r.__ob__&&r.__ob__.dep.depend();return t},set:function(t){var r=o?o.call(e):n;t!==r&&(s?s.call(e,t):n=t,a=_e(t),i.notify())}})}}function Ee(e){e.prototype._init=function(e){e=e||{},this.$el=null,this.$parent=e.parent,this.$root=this.$parent?this.$parent.$root:this,this.$children=[],this.$refs={},this.$els={},this._watchers=[],this._directives=[],this._uid=zi++,this._isVue=!0,this._events={},this._eventsCount={},this._isFragment=!1,this._fragment=this._fragmentStart=this._fragmentEnd=null,this._isCompiled=this._isDestroyed=this._isReady=this._isAttached=this._isBeingDestroyed=this._vForRemoving=!1,this._unlinkFn=null,this._context=e._context||this.$parent,this._scope=e._scope,this._frag=e._frag,this._frag&&this._frag.children.push(this),this.$parent&&this.$parent.$children.push(this),e=this.$options=me(this.constructor.options,e,this),this._updateRef(),this._data={},this._callHook("init"),this._initState(),this._initEvents(),this._callHook("created"),e.el&&this.$mount(e.el)}}function Te(e){if(void 0===e)return"eof";var t=e.charCodeAt(0);switch(t){case 91:case 93:case 46:case 34:case 39:case 48:return e;case 95:case 36:return"ident";case 32:case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return t>=97&&t<=122||t>=65&&t<=90?"ident":t>=49&&t<=57?"number":"else"}function Ae(e){var t=e.trim();return("0"!==e.charAt(0)||!isNaN(e))&&(i(t)?l(t):"*"+t)}function Se(e){function t(){var t=e[c+1];if(f===tr&&"'"===t||f===nr&&'"'===t)return c++,i="\\"+t,h[Vi](),!0}var n,i,r,o,s,a,l,u=[],c=-1,f=Yi,d=0,h=[];for(h[Xi]=function(){void 0!==r&&(u.push(r),r=void 0)},h[Vi]=function(){void 0===r?r=i:r+=i},h[Gi]=function(){h[Vi](),d++},h[Ji]=function(){if(d>0)d--,f=er,h[Vi]();else{if(d=0,r=Ae(r),r===!1)return!1;h[Xi]()}};null!=f;)if(c++,n=e[c],"\\"!==n||!t()){if(o=Te(n),l=or[f],s=l[o]||l.else||rr,s===rr)return;if(f=s[0],a=h[s[1]],a&&(i=s[2],i=void 0===i?n:i,a()===!1))return;if(f===ir)return u.raw=e,u}}function Ne(e){var t=Ui.get(e);return t||(t=Se(e),t&&Ui.put(e,t)),t}function $e(e,t){return Re(t).get(e)}function Oe(t,n,i){var r=t;if("string"==typeof n&&(n=Se(n)),!n||!m(t))return!1;for(var o,s,a=0,l=n.length;a<l;a++)o=t,s=n[a],"*"===s.charAt(0)&&(s=Re(s.slice(1)).get.call(r,r)),a<l-1?(t=t[s],m(t)||(t={},o._isVue&&sr(n,o),e(o,s,t))):Hn(t)?t.$set(s,i):s in t?t[s]=i:(t._isVue&&sr(n,t),e(t,s,i));return!0}function je(){}function De(e,t){var n=wr.length;return wr[n]=t?e.replace(pr,"\\n"):e,'"'+n+'"'}function Le(e){var t=e.charAt(0),n=e.slice(1);return cr.test(n)?e:(n=n.indexOf('"')>-1?n.replace(mr,Pe):n,t+"scope."+n)}function Pe(e,t){return wr[t]}function Me(e){dr.test(e)&&Ni("Avoid using reserved keywords in expression: "+e),wr.length=0;var t=e.replace(vr,De).replace(hr,"");return t=(" "+t).replace(yr,Le).replace(mr,Pe),He(t)}function He(e){try{return new Function("scope","return "+e+";")}catch(t){return Ni(t.toString().match(/unsafe-eval|CSP/)?"It seems you are using the default build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. Use the CSP-compliant build instead: http://vuejs.org/guide/installation.html#CSP-compliant-build":"Invalid expression. Generated function body: "+e),je}}function Fe(e){var t=Ne(e);return t?function(e,n){Oe(e,t,n)}:void Ni("Invalid setter expression: "+e)}function Re(e,t){e=e.trim();var n=lr.get(e);if(n)return t&&!n.set&&(n.set=Fe(n.exp)),n;var i={exp:e};return i.get=Be(e)&&e.indexOf("[")<0?He("scope."+e):Me(e),t&&(i.set=Fe(e)),lr.put(e,i),i}function Be(e){return gr.test(e)&&!br.test(e)&&"Math."!==e.slice(0,5)}function qe(){Cr.length=0,_r.length=0,kr={},Er={},Tr=!1}function Ie(){for(var e=!0;e;)e=!1,We(Cr),We(_r),Cr.length?e=!0:(Bn&&Si.devtools&&Bn.emit("flush"),qe())}function We(e){for(var t=0;t<e.length;t++){var n=e[t],i=n.id;if(kr[i]=null,n.run(),null!=kr[i]&&(Er[i]=(Er[i]||0)+1,Er[i]>Si._maxUpdateCount)){Ni('You may have an infinite update loop for watcher with expression "'+n.expression+'"',n.vm);break}}e.length=0}function ze(e){var t=e.id;if(null==kr[t]){var n=e.user?_r:Cr;kr[t]=n.length,n.push(e),Tr||(Tr=!0,ti(Ie))}}function Ue(e,t,n,i){i&&v(this,i);var r="function"==typeof t;if(this.vm=e,e._watchers.push(this),this.expression=t,this.cb=n,this.id=++Ar,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ni,this.newDepIds=new ni,this.prevError=null,r)this.getter=t,this.setter=void 0;else{var o=Re(t,this.twoWay);this.getter=o.get,this.setter=o.set}this.value=this.lazy?void 0:this.get(),this.queued=this.shallow=!1}function Ve(e,t){var n=void 0,i=void 0;t||(t=Sr,t.clear());var r=Hn(e),o=m(e);if((r||o)&&Object.isExtensible(e)){if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(r)for(n=e.length;n--;)Ve(e[n],t);else if(o)for(i=Object.keys(e),n=i.length;n--;)Ve(e[i[n]],t)}}function Xe(e){return ne(e)&&ae(e.content)}function Ge(e,t){var n=t?e:e.trim(),i=$r.get(n);if(i)return i;var r=document.createDocumentFragment(),o=e.match(Dr),s=Lr.test(e),a=Pr.test(e);if(o||s||a){var l=o&&o[1],u=jr[l]||jr.efault,c=u[0],f=u[1],d=u[2],h=document.createElement("div");for(h.innerHTML=f+e+d;c--;)h=h.lastChild;for(var p;p=h.firstChild;)r.appendChild(p)}else r.appendChild(document.createTextNode(e));return t||ee(r),$r.put(n,r),r}function Je(e){if(Xe(e))return Ge(e.innerHTML);if("SCRIPT"===e.tagName)return Ge(e.textContent);for(var t,n=Ye(e),i=document.createDocumentFragment();t=n.firstChild;)i.appendChild(t);return ee(i),i}function Ye(e){if(!e.querySelectorAll)return e.cloneNode();var t,n,i,r=e.cloneNode(!0);if(Mr){var o=r;if(Xe(e)&&(e=e.content,o=r.content),n=e.querySelectorAll("template"),n.length)for(i=o.querySelectorAll("template"),t=i.length;t--;)i[t].parentNode.replaceChild(Ye(n[t]),i[t])}if(Hr)if("TEXTAREA"===e.tagName)r.value=e.value;else if(n=e.querySelectorAll("textarea"),n.length)for(i=r.querySelectorAll("textarea"),t=i.length;t--;)i[t].value=n[t].value;return r}function Ke(e,t,n){var i,r;return ae(e)?(ee(e),t?Ye(e):e):("string"==typeof e?n||"#"!==e.charAt(0)?r=Ge(e,n):(r=Or.get(e),r||(i=document.getElementById(e.slice(1)),i&&(r=Je(i),Or.put(e,r)))):e.nodeType&&(r=Je(e)),r&&t?Ye(r):r)}function Qe(e,t,n,i,r,o){this.children=[],this.childFrags=[],this.vm=t,this.scope=r,this.inserted=!1,this.parentFrag=o,o&&o.childFrags.push(this),this.unlink=e(t,n,i,r,this);var s=this.single=1===n.childNodes.length&&!n.childNodes[0].__v_anchor;s?(this.node=n.childNodes[0],this.before=Ze,this.remove=et):(this.node=ie("fragment-start"),this.end=ie("fragment-end"),this.frag=n,U(this.node,n),n.appendChild(this.end),this.before=tt,this.remove=nt),this.node.__v_frag=this}function Ze(e,t){this.inserted=!0;var n=t!==!1?L:I;n(this.node,e,this.vm),F(this.node)&&this.callHook(it)}function et(){this.inserted=!1;var e=F(this.node),t=this;this.beforeRemove(),P(this.node,this.vm,function(){e&&t.callHook(rt),t.destroy()})}function tt(e,t){this.inserted=!0;var n=this.vm,i=t!==!1?L:I;oe(this.node,this.end,function(t){i(t,e,n)}),F(this.node)&&this.callHook(it)}function nt(){this.inserted=!1;var e=this,t=F(this.node);this.beforeRemove(),se(this.node,this.end,this.vm,this.frag,function(){t&&e.callHook(rt),e.destroy()})}function it(e){!e._isAttached&&F(e.$el)&&e._callHook("attached")}function rt(e){e._isAttached&&!F(e.$el)&&e._callHook("detached")}function ot(e,t){this.vm=e;var n,i="string"==typeof t;i||ne(t)&&!t.hasAttribute("v-if")?n=Ke(t,!0):(n=document.createDocumentFragment(),n.appendChild(t)),this.template=n;var r,o=e.constructor.cid;if(o>0){var s=o+(i?t:le(t));r=Br.get(s),r||(r=Mt(n,e.$options,!0),Br.put(s,r))}else r=Mt(n,e.$options,!0);this.linker=r}function st(e,t,n){var i=e.node.previousSibling;if(i){for(e=i.__v_frag;!(e&&e.forId===n&&e.inserted||i===t);){if(i=i.previousSibling,!i)return;e=i.__v_frag}return e}}function at(e){var t=e.node;if(e.end)for(;!t.__vue__&&t!==e.end&&t.nextSibling;)t=t.nextSibling;return t.__vue__}function lt(e){for(var t=-1,n=new Array(Math.floor(e));++t<e;)n[t]=t;return n}function ut(e,t,n,i){return i?"$index"===i?e:i.charAt(0).match(/\w/)?$e(n,i):n[i]:t||n}function ct(e,t,n){for(var i,r,o,s=t?[]:null,a=0,l=e.options.length;a<l;a++)if(i=e.options[a],o=n?i.hasAttribute("selected"):i.selected){if(r=i.hasOwnProperty("_value")?i._value:i.value,!t)return r;s.push(r)}return s}function ft(e,t){for(var n=e.length;n--;)if(C(e[n],t))return n;return-1}function dt(e,t){var n=t.map(function(e){var t=e.charCodeAt(0);return t>47&&t<58?parseInt(e,10):1===e.length&&(t=e.toUpperCase().charCodeAt(0),t>64&&t<91)?t:ao[e]});return n=[].concat.apply([],n),function(t){if(n.indexOf(t.keyCode)>-1)return e.call(this,t)}}function ht(e){return function(t){return t.stopPropagation(),e.call(this,t)}}function pt(e){return function(t){return t.preventDefault(),e.call(this,t)}}function vt(e){return function(t){if(t.target===t.currentTarget)return e.call(this,t)}}function mt(e){if(ho[e])return ho[e];var t=gt(e);return ho[e]=ho[t]=t,t}function gt(e){e=f(e);var t=u(e),n=t.charAt(0).toUpperCase()+t.slice(1);po||(po=document.createElement("div"));var i,r=uo.length;if("filter"!==t&&t in po.style)return{kebab:e,camel:t};for(;r--;)if(i=co[r]+n,i in po.style)return{kebab:uo[r]+e,camel:i}}function yt(e){var t=[];if(Hn(e))for(var n=0,i=e.length;n<i;n++){var r=e[n];if(r)if("string"==typeof r)t.push(r);else for(var o in r)r[o]&&t.push(o)}else if(m(e))for(var s in e)e[s]&&t.push(s);return t}function bt(e,t,n){if(t=t.trim(),t.indexOf(" ")===-1)return void n(e,t);for(var i=t.split(/\s+/),r=0,o=i.length;r<o;r++)n(e,i[r])}function wt(e,t,n){function i(){++o>=r?n():e[o].call(t,i)}var r=e.length,o=0;e[0].call(t,i)}function xt(e,t,n){for(var r,o,s,a,l,c,d,h=[],p=Object.keys(t),v=p.length;v--;)if(o=p[v],r=t[o]||$o,"$data"!==o)if(l=u(o),Oo.test(l)){if(d={name:o,path:l,options:r,mode:No.ONE_WAY,raw:null},s=f(o),null===(a=B(e,s))&&(null!==(a=B(e,s+".sync"))?d.mode=No.TWO_WAY:null!==(a=B(e,s+".once"))&&(d.mode=No.ONE_TIME)),null!==a)d.raw=a,c=T(a),a=c.expression,d.filters=c.filters,i(a)&&!c.filters?d.optimizedLiteral=!0:(d.dynamic=!0,d.mode!==No.TWO_WAY||jo.test(a)||(d.mode=No.ONE_WAY,Ni("Cannot bind two-way prop with non-settable parent path: "+a,n))),d.parentPath=a,r.twoWay&&d.mode!==No.TWO_WAY&&Ni('Prop "'+o+'" expects a two-way binding type.',n);else if(null!==(a=R(e,s)))d.raw=a;else{var m=l.toLowerCase();a=/[A-Z\-]/.test(o)&&(e.getAttribute(m)||e.getAttribute(":"+m)||e.getAttribute("v-bind:"+m)||e.getAttribute(":"+m+".once")||e.getAttribute("v-bind:"+m+".once")||e.getAttribute(":"+m+".sync")||e.getAttribute("v-bind:"+m+".sync")),a?Ni("Possible usage error for prop `"+m+"` - did you mean `"+s+"`? HTML is case-insensitive, remember to use kebab-case for props in templates.",n):r.required&&Ni("Missing required prop: "+o,n)}h.push(d)}else Ni('Invalid prop key: "'+o+'". Prop keys must be valid identifiers.',n);else Ni("Do not use $data as prop.",n);return Ct(h)}function Ct(e){return function(t,i){t._props={};for(var r,o,u,c,d,h=t.$options.propsData,p=e.length;p--;)if(r=e[p],d=r.raw,o=r.path,u=r.options,t._props[o]=r,h&&n(h,o)&&kt(t,r,h[o]),null===d)kt(t,r,void 0);else if(r.dynamic)r.mode===No.ONE_TIME?(c=(i||t._context||t).$get(r.parentPath),kt(t,r,c)):t._context?t._bindDir({name:"prop",def:Lo,prop:r},null,null,i):kt(t,r,t.$get(r.parentPath));else if(r.optimizedLiteral){var v=l(d);c=v===d?a(s(d)):v,kt(t,r,c)}else c=u.type===Boolean&&(""===d||d===f(r.name))||d,kt(t,r,c)}}function _t(e,t,n,i){var r=t.dynamic&&Be(t.parentPath),o=n;void 0===o&&(o=Tt(e,t)),o=St(t,o,e);var s=o!==n;At(t,o,e)||(o=void 0),r&&!s?be(function(){i(o)}):i(o)}function kt(e,t,n){_t(e,t,n,function(n){ke(e,t.path,n)})}function Et(e,t,n){_t(e,t,n,function(n){e[t.path]=n})}function Tt(e,t){var i=t.options;if(!n(i,"default"))return i.type!==Boolean&&void 0;var r=i.default;return m(r)&&Ni('Invalid default value for prop "'+t.name+'": Props with type Object/Array must use a factory function to return the default value.',e),"function"==typeof r&&i.type!==Function?r.call(e):r}function At(e,t,n){if(!e.options.required&&(null===e.raw||null==t))return!0;var i=e.options,r=i.type,o=!r,s=[];if(r){Hn(r)||(r=[r]);for(var a=0;a<r.length&&!o;a++){var l=Nt(t,r[a]);s.push(l.expectedType),o=l.valid}}if(!o)return Ni('Invalid prop: type check failed for prop "'+e.name+'". Expected '+s.map($t).join(", ")+", got "+Ot(t)+".",n),!1;var u=i.validator;return!(u&&!u(t))||(Ni('Invalid prop: custom validator check failed for prop "'+e.name+'".',n),!1)}function St(e,t,n){var i=e.options.coerce;return i?"function"==typeof i?i(t):(Ni('Invalid coerce for prop "'+e.name+'": expected function, got '+typeof i+".",n),t):t}function Nt(e,t){var n,i;return t===String?(i="string",n=typeof e===i):t===Number?(i="number",n=typeof e===i):t===Boolean?(i="boolean",n=typeof e===i):t===Function?(i="function",n=typeof e===i):t===Object?(i="object",n=g(e)):t===Array?(i="array",n=Hn(e)):n=e instanceof t,{valid:n,expectedType:i}}function $t(e){return e?e.charAt(0).toUpperCase()+e.slice(1):"custom type"}function Ot(e){return Object.prototype.toString.call(e).slice(8,-1)}function jt(e){Po.push(e),Mo||(Mo=!0,ti(Dt))}function Dt(){for(var e=document.documentElement.offsetHeight,t=0;t<Po.length;t++)Po[t]();return Po=[],Mo=!1,e}function Lt(e,t,n,i){this.id=t,this.el=e,this.enterClass=n&&n.enterClass||t+"-enter",this.leaveClass=n&&n.leaveClass||t+"-leave",this.hooks=n,this.vm=i,this.pendingCssEvent=this.pendingCssCb=this.cancel=this.pendingJsCb=this.op=this.cb=null,this.justEntered=!1,this.entered=this.left=!1,this.typeCache={},this.type=n&&n.type,this.type&&this.type!==Ho&&this.type!==Fo&&Ni('invalid CSS transition type for transition="'+this.id+'": '+this.type,i);var r=this;["enterNextTick","enterDone","leaveNextTick","leaveDone"].forEach(function(e){r[e]=h(r[e],r)})}function Pt(e){if(/svg$/.test(e.namespaceURI)){var t=e.getBoundingClientRect();return!(t.width||t.height)}return!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}function Mt(e,t,n){var i=n||!t._asComponent?Wt(e,t):null,r=i&&i.terminal||an(e)||!e.hasChildNodes()?null:Jt(e.childNodes,t);return function(e,t,n,o,s){var a=p(t.childNodes),l=Ht(function(){i&&i(e,t,n,o,s),r&&r(e,a,n,o,s)},e);return Rt(e,l)}}function Ht(e,t){var n=t._directives.length;e();var i=t._directives.slice(n);i.sort(Ft);for(var r=0,o=i.length;r<o;r++)i[r]._bind();return i}function Ft(e,t){return e=e.descriptor.def.priority||Ko,t=t.descriptor.def.priority||Ko,e>t?-1:e===t?0:1}function Rt(e,t,n,i){function r(r){Bt(e,t,r),n&&i&&Bt(n,i)}return r.dirs=t,r}function Bt(e,t,n){for(var i=t.length;i--;)t[i]._teardown(),n||e._directives.$remove(t[i])}function qt(e,t,n,i){var r=xt(t,n,e),o=Ht(function(){r(e,i)},e);return Rt(e,o)}function It(e,t,n){var i,r,o=t._containerAttrs,s=t._replacerAttrs;if(11!==e.nodeType)t._asComponent?(o&&n&&(i=nn(o,n)),s&&(r=nn(s,t))):r=nn(e.attributes,t);else if(o){var a=o.filter(function(e){return e.name.indexOf("_v-")<0&&!Xo.test(e.name)&&"slot"!==e.name}).map(function(e){return'"'+e.name+'"'});if(a.length){var l=a.length>1;Ni("Attribute"+(l?"s ":" ")+a.join(", ")+(l?" are":" is")+" ignored on component <"+t.el.tagName.toLowerCase()+"> because the component is a fragment instance: http://vuejs.org/guide/components.html#Fragment-Instance")}}return t._containerAttrs=t._replacerAttrs=null,function(e,t,n){var o,s=e._context;s&&i&&(o=Ht(function(){i(s,t,null,n)},s));var a=Ht(function(){r&&r(e,t)},e);return Rt(e,a,s,o)}}function Wt(e,t){var n=e.nodeType;return 1!==n||an(e)?3===n&&e.data.trim()?Ut(e,t):null:zt(e,t)}function zt(e,t){if("TEXTAREA"===e.tagName){var n=N(e.value);n&&(e.setAttribute(":value",$(n)),e.value="")}var i,r=e.hasAttributes(),o=r&&p(e.attributes);return r&&(i=Zt(e,o,t)),i||(i=Kt(e,t)),i||(i=Qt(e,t)),!i&&r&&(i=nn(o,t)),i}function Ut(e,t){if(e._skip)return Vt;var n=N(e.wholeText);if(!n)return null;for(var i=e.nextSibling;i&&3===i.nodeType;)i._skip=!0,i=i.nextSibling;for(var r,o,s=document.createDocumentFragment(),a=0,l=n.length;a<l;a++)o=n[a],r=o.tag?Xt(o,t):document.createTextNode(o.value),s.appendChild(r);return Gt(n,s,t)}function Vt(e,t){z(t)}function Xt(e,t){function n(t){if(!e.descriptor){var n=T(e.value);e.descriptor={name:t,def:To[t],expression:n.expression,filters:n.filters}}}var i;return e.oneTime?i=document.createTextNode(e.value):e.html?(i=document.createComment("v-html"),n("html")):(i=document.createTextNode(" "),n("text")),i}function Gt(e,t){return function(n,i,r,s){for(var a,l,u,c=t.cloneNode(!0),f=p(c.childNodes),d=0,h=e.length;d<h;d++)a=e[d],l=a.value,a.tag&&(u=f[d],a.oneTime?(l=(s||n).$eval(l),a.html?V(u,Ke(l,!0)):u.data=o(l)):n._bindDir(a.descriptor,u,r,s));V(i,c)}}function Jt(e,t){for(var n,i,r,o=[],s=0,a=e.length;s<a;s++)r=e[s],n=Wt(r,t),i=n&&n.terminal||"SCRIPT"===r.tagName||!r.hasChildNodes()?null:Jt(r.childNodes,t),o.push(n,i);return o.length?Yt(o):null}function Yt(e){return function(t,n,i,r,o){for(var s,a,l,u=0,c=0,f=e.length;u<f;c++){s=n[c],a=e[u++],l=e[u++];var d=p(s.childNodes);a&&a(t,s,i,r,o),l&&l(t,d,i,r,o)}}}function Kt(e,t){var n=e.tagName.toLowerCase();if(!Di.test(n)){var i=ge(t,"elementDirectives",n);return i?tn(e,n,"",t,i):void 0}}function Qt(e,t){var n=ue(e,t);if(n){var i=re(e),r={name:"component",ref:i,expression:n.id,def:Uo.component,modifiers:{literal:!n.dynamic}},o=function(e,t,n,o,s){i&&ke((o||e).$refs,i,null),e._bindDir(r,t,n,o,s)};return o.terminal=!0,o}}function Zt(e,t,n){if(null!==R(e,"v-pre"))return en;if(e.hasAttribute("v-else")){var i=e.previousElementSibling;if(i&&i.hasAttribute("v-if"))return en}for(var r,o,s,a,l,u,c,f,d,h,p=0,v=t.length;p<v;p++)r=t[p],o=r.name.replace(Jo,""),(l=o.match(Go))&&(d=ge(n,"directives",l[1]),d&&d.terminal&&(!h||(d.priority||Qo)>h.priority)&&(h=d,c=r.name,a=rn(r.name),s=r.value,u=l[1],f=l[2]));return h?tn(e,u,s,n,h,c,f,a):void 0}function en(){}function tn(e,t,n,i,r,o,s,a){var l=T(n),u={name:t,arg:s,expression:l.expression,filters:l.filters,raw:n,attr:o,modifiers:a,def:r};"for"!==t&&"router-view"!==t||(u.ref=re(e));var c=function(e,t,n,i,r){u.ref&&ke((i||e).$refs,u.ref,null),e._bindDir(u,t,n,i,r)};return c.terminal=!0,c}function nn(e,t){function n(e,t,n){var i=n&&sn(n),r=!i&&T(o);v.push({name:e,attr:s,raw:a,def:t,arg:u,modifiers:c,expression:r&&r.expression,filters:r&&r.filters,interp:n,hasOneTime:i})}for(var i,r,o,s,a,l,u,c,f,d,h,p=e.length,v=[];p--;)if(i=e[p],r=s=i.name,o=a=i.value,d=N(o),u=null,c=rn(r),r=r.replace(Jo,""),d)o=$(d),u=r,n("bind",To.bind,d),"class"===r&&Array.prototype.some.call(e,function(e){return":class"===e.name||"v-bind:class"===e.name})&&Ni('class="'+a+'": Do not mix mustache interpolation and v-bind for "class" on the same element. Use one or the other.',t);else if(Yo.test(r))c.literal=!Vo.test(r),n("transition",Uo.transition);else if(Xo.test(r))u=r.replace(Xo,""),n("on",To.on);else if(Vo.test(r))l=r.replace(Vo,""),"style"===l||"class"===l?n(l,Uo[l]):(u=l,n("bind",To.bind));else if(h=r.match(Go)){if(l=h[1],u=h[2],"else"===l)continue;f=ge(t,"directives",l,!0),f&&n(l,f)}if(v.length)return on(v)}function rn(e){var t=Object.create(null),n=e.match(Jo);if(n)for(var i=n.length;i--;)t[n[i].slice(1)]=!0;return t}function on(e){return function(t,n,i,r,o){for(var s=e.length;s--;)t._bindDir(e[s],n,i,r,o)}}function sn(e){for(var t=e.length;t--;)if(e[t].oneTime)return!0}function an(e){return"SCRIPT"===e.tagName&&(!e.hasAttribute("type")||"text/javascript"===e.getAttribute("type"))}function ln(e,t){return t&&(t._containerAttrs=cn(e)),ne(e)&&(e=Ke(e)),t&&(t._asComponent&&!t.template&&(t.template="<slot></slot>"),t.template&&(t._content=Z(e),e=un(e,t))),ae(e)&&(U(ie("v-start",!0),e),e.appendChild(ie("v-end",!0))),e}function un(e,t){var n=t.template,i=Ke(n,!0);if(i){var r=i.firstChild,o=r.tagName&&r.tagName.toLowerCase();return t.replace?(e===document.body&&Ni("You are mounting an instance with a template to <body>. This will replace <body> entirely. You should probably use `replace: false` here."),i.childNodes.length>1||1!==r.nodeType||"component"===o||ge(t,"components",o)||q(r,"is")||ge(t,"elementDirectives",o)||r.hasAttribute("v-for")||r.hasAttribute("v-if")?i:(t._replacerAttrs=cn(r),fn(e,r),r)):(e.appendChild(i),e)}Ni("Invalid template option: "+n)}function cn(e){if(1===e.nodeType&&e.hasAttributes())return p(e.attributes)}function fn(e,t){for(var n,i,r=e.attributes,o=r.length;o--;)n=r[o].name,i=r[o].value,t.hasAttribute(n)||Zo.test(n)?"class"===n&&!N(i)&&(i=i.trim())&&i.split(/\s+/).forEach(function(e){K(t,e)}):t.setAttribute(n,i)}function dn(e,t){if(t){for(var n,i,r=e._slotContents=Object.create(null),o=0,s=t.children.length;o<s;o++)n=t.children[o],(i=n.getAttribute("slot"))&&(r[i]||(r[i]=[])).push(n),B(n,"slot")&&Ni('The "slot" attribute must be static.',e.$parent);for(i in r)r[i]=hn(r[i],t);if(t.hasChildNodes()){var a=t.childNodes;if(1===a.length&&3===a[0].nodeType&&!a[0].data.trim())return;r.default=hn(t.childNodes,t)}}}function hn(e,t){var n=document.createDocumentFragment();e=p(e);for(var i=0,r=e.length;i<r;i++){var o=e[i];!ne(o)||o.hasAttribute("v-if")||o.hasAttribute("v-for")||(t.removeChild(o),o=Ke(o,!0)),n.appendChild(o)}return n}function pn(e){function t(){}function i(e,t){var n=new Ue(t,e,null,{lazy:!0});return function(){return n.dirty&&n.evaluate(),ye.target&&n.depend(),n.value}}Object.defineProperty(e.prototype,"$data",{get:function(){return this._data},set:function(e){e!==this._data&&this._setData(e)}}),e.prototype._initState=function(){this._initProps(),this._initMeta(),this._initMethods(),this._initData(),this._initComputed()},e.prototype._initProps=function(){var e=this.$options,t=e.el,n=e.props;n&&!t&&Ni("Props will not be compiled if no `el` option is provided at instantiation.",this),t=e.el=H(t),this._propsUnlinkFn=t&&1===t.nodeType&&n?qt(this,t,n,this._scope):null},e.prototype._initData=function(){var e=this.$options.data,t=this._data=e?e():{};g(t)||(t={},Ni("data functions should return an object.",this));var i,r,o=this._props,s=Object.keys(t);for(i=s.length;i--;)r=s[i],o&&n(o,r)?Ni('Data field "'+r+'" is already defined as a prop. To provide default value for a prop, use the "default" prop option; if you want to pass prop values to an instantiation call, use the "propsData" option.',this):this._proxy(r);_e(t,this)},e.prototype._setData=function(e){e=e||{};var t=this._data;this._data=e;var i,r,o;for(i=Object.keys(t),o=i.length;o--;)r=i[o],r in e||this._unproxy(r);for(i=Object.keys(e),o=i.length;o--;)r=i[o],n(this,r)||this._proxy(r);t.__ob__.removeVm(this),_e(e,this),this._digest()},e.prototype._proxy=function(e){if(!r(e)){var t=this;Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:function(){return t._data[e]},set:function(n){t._data[e]=n}})}},e.prototype._unproxy=function(e){r(e)||delete this[e]},e.prototype._digest=function(){for(var e=0,t=this._watchers.length;e<t;e++)this._watchers[e].update(!0)},e.prototype._initComputed=function(){var e=this.$options.computed;if(e)for(var n in e){var r=e[n],o={enumerable:!0,configurable:!0};"function"==typeof r?(o.get=i(r,this),o.set=t):(o.get=r.get?r.cache!==!1?i(r.get,this):h(r.get,this):t,o.set=r.set?h(r.set,this):t),Object.defineProperty(this,n,o)}},e.prototype._initMethods=function(){var e=this.$options.methods;if(e)for(var t in e)this[t]=h(e[t],this)},e.prototype._initMeta=function(){var e=this.$options._meta;if(e)for(var t in e)ke(this,t,e[t])}}function vn(e){function t(e,t){for(var n,i,r,o=t.attributes,s=0,a=o.length;s<a;s++)n=o[s].name,ts.test(n)&&(n=n.replace(ts,""),i=o[s].value,Be(i)&&(i+=".apply(this, $arguments)"),r=(e._scope||e._context).$eval(i,!0),r._fromParent=!0,e.$on(n.replace(ts),r))}function n(e,t,n){if(n){var r,o,s,a;for(o in n)if(r=n[o],Hn(r))for(s=0,a=r.length;s<a;s++)i(e,t,o,r[s]);else i(e,t,o,r)}}function i(e,t,n,r,o){var s=typeof r;if("function"===s)e[t](n,r,o);else if("string"===s){var a=e.$options.methods,l=a&&a[r];l?e[t](n,l,o):Ni('Unknown method: "'+r+'" when registering callback for '+t+': "'+n+'".',e)}else r&&"object"===s&&i(e,t,n,r.handler,r)}function r(){this._isAttached||(this._isAttached=!0,this.$children.forEach(o))}function o(e){!e._isAttached&&F(e.$el)&&e._callHook("attached")}function s(){this._isAttached&&(this._isAttached=!1,this.$children.forEach(a))}function a(e){e._isAttached&&!F(e.$el)&&e._callHook("detached")}e.prototype._initEvents=function(){var e=this.$options;e._asComponent&&t(this,e.el),n(this,"$on",e.events),n(this,"$watch",e.watch)},e.prototype._initDOMHooks=function(){this.$on("hook:attached",r),this.$on("hook:detached",s)},e.prototype._callHook=function(e){this.$emit("pre-hook:"+e);var t=this.$options[e];if(t)for(var n=0,i=t.length;n<i;n++)t[n].call(this);this.$emit("hook:"+e)}}function mn(){}function gn(e,t,n,i,r,o){this.vm=t,this.el=n,this.descriptor=e,this.name=e.name,this.expression=e.expression,this.arg=e.arg,this.modifiers=e.modifiers,this.filters=e.filters,this.literal=this.modifiers&&this.modifiers.literal,this._locked=!1,this._bound=!1,this._listeners=null,this._host=i,this._scope=r,this._frag=o,this.el&&(this.el._vue_directives=this.el._vue_directives||[],this.el._vue_directives.push(this))}function yn(e){e.prototype._updateRef=function(e){var t=this.$options._ref;if(t){var n=(this._scope||this._context).$refs;e?n[t]===this&&(n[t]=null):n[t]=this}},e.prototype._compile=function(e){var t=this.$options,n=e;if(e=ln(e,t),this._initElement(e),1!==e.nodeType||null===R(e,"v-pre")){var i=this._context&&this._context.$options,r=It(e,t,i);dn(this,t._content);var o,s=this.constructor;t._linkerCachable&&(o=s.linker,o||(o=s.linker=Mt(e,t)));var a=r(this,e,this._scope),l=o?o(this,e):Mt(e,t)(this,e);this._unlinkFn=function(){a(),l(!0)},t.replace&&V(n,e),this._isCompiled=!0,this._callHook("compiled")}},e.prototype._initElement=function(e){ae(e)?(this._isFragment=!0,this.$el=this._fragmentStart=e.firstChild,this._fragmentEnd=e.lastChild,3===this._fragmentStart.nodeType&&(this._fragmentStart.data=this._fragmentEnd.data=""),this._fragment=e):this.$el=e,this.$el.__vue__=this,this._callHook("beforeCompile")},e.prototype._bindDir=function(e,t,n,i,r){this._directives.push(new gn(e,this,t,n,i,r))},e.prototype._destroy=function(e,t){if(this._isBeingDestroyed)return void(t||this._cleanup());var n,i,r=this,o=function(){!n||i||t||r._cleanup()};e&&this.$el&&(i=!0,this.$remove(function(){i=!1,o()})),this._callHook("beforeDestroy"),this._isBeingDestroyed=!0;var s,a=this.$parent;for(a&&!a._isBeingDestroyed&&(a.$children.$remove(this),this._updateRef(!0)),s=this.$children.length;s--;)this.$children[s].$destroy();for(this._propsUnlinkFn&&this._propsUnlinkFn(),this._unlinkFn&&this._unlinkFn(),s=this._watchers.length;s--;)this._watchers[s].teardown();this.$el&&(this.$el.__vue__=null),n=!0,o()},e.prototype._cleanup=function(){this._isDestroyed||(this._frag&&this._frag.children.$remove(this),this._data&&this._data.__ob__&&this._data.__ob__.removeVm(this),this.$el=this.$parent=this.$root=this.$children=this._watchers=this._context=this._scope=this._directives=null,this._isDestroyed=!0,this._callHook("destroyed"),this.$off())}}function bn(e){e.prototype._applyFilters=function(e,t,n,i){var r,o,s,a,l,u,c,f,d;for(u=0,c=n.length;u<c;u++)if(r=n[i?c-u-1:u],o=ge(this.$options,"filters",r.name,!0),o&&(o=i?o.write:o.read||o,"function"==typeof o)){if(s=i?[e,t]:[e],l=i?2:1,r.args)for(f=0,d=r.args.length;f<d;f++)a=r.args[f],s[f+l]=a.dynamic?this.$get(a.value):a.value;e=o.apply(this,s)}return e},e.prototype._resolveComponent=function(t,n){var i;if(i="function"==typeof t?t:ge(this.$options,"components",t,!0))if(i.options)n(i);else if(i.resolved)n(i.resolved);else if(i.requested)i.pendingCallbacks.push(n);else{i.requested=!0;var r=i.pendingCallbacks=[n];i.call(this,function(t){g(t)&&(t=e.extend(t)),i.resolved=t;for(var n=0,o=r.length;n<o;n++)r[n](t)},function(e){Ni("Failed to resolve async component"+("string"==typeof t?": "+t:"")+". "+(e?"\nReason: "+e:""))})}}}function wn(e){function n(e){return JSON.parse(JSON.stringify(e))}e.prototype.$get=function(e,t){var n=Re(e);if(n){if(t){var i=this;return function(){i.$arguments=p(arguments);var e=n.get.call(i,i);return i.$arguments=null,e}}try{return n.get.call(this,this)}catch(e){}}},e.prototype.$set=function(e,t){var n=Re(e,!0);n&&n.set&&n.set.call(this,this,t)},e.prototype.$delete=function(e){t(this._data,e)},e.prototype.$watch=function(e,t,n){
var i,r=this;"string"==typeof e&&(i=T(e),e=i.expression);var o=new Ue(r,e,t,{deep:n&&n.deep,sync:n&&n.sync,filters:i&&i.filters,user:!n||n.user!==!1});return n&&n.immediate&&t.call(r,o.value),function(){o.teardown()}},e.prototype.$eval=function(e,t){if(ns.test(e)){var n=T(e),i=this.$get(n.expression,t);return n.filters?this._applyFilters(i,null,n.filters):i}return this.$get(e,t)},e.prototype.$interpolate=function(e){var t=N(e),n=this;return t?1===t.length?n.$eval(t[0].value)+"":t.map(function(e){return e.tag?n.$eval(e.value):e.value}).join(""):e},e.prototype.$log=function(e){var t=e?$e(this._data,e):this._data;if(t&&(t=n(t)),!e){var i;for(i in this.$options.computed)t[i]=n(this[i]);if(this._props)for(i in this._props)t[i]=n(this[i])}console.log(t)}}function xn(e){function t(e,t,i,r,o,s){t=n(t);var a=!F(t),l=r===!1||a?o:s,u=!a&&!e._isAttached&&!F(e.$el);return e._isFragment?(oe(e._fragmentStart,e._fragmentEnd,function(n){l(n,t,e)}),i&&i()):l(e.$el,t,e,i),u&&e._callHook("attached"),e}function n(e){return"string"==typeof e?document.querySelector(e):e}function i(e,t,n,i){t.appendChild(e),i&&i()}function r(e,t,n,i){I(e,t),i&&i()}function o(e,t,n){z(e),n&&n()}e.prototype.$nextTick=function(e){ti(e,this)},e.prototype.$appendTo=function(e,n,r){return t(this,e,n,r,i,D)},e.prototype.$prependTo=function(e,t,i){return e=n(e),e.hasChildNodes()?this.$before(e.firstChild,t,i):this.$appendTo(e,t,i),this},e.prototype.$before=function(e,n,i){return t(this,e,n,i,r,L)},e.prototype.$after=function(e,t,i){return e=n(e),e.nextSibling?this.$before(e.nextSibling,t,i):this.$appendTo(e.parentNode,t,i),this},e.prototype.$remove=function(e,t){if(!this.$el.parentNode)return e&&e();var n=this._isAttached&&F(this.$el);n||(t=!1);var i=this,r=function(){n&&i._callHook("detached"),e&&e()};if(this._isFragment)se(this._fragmentStart,this._fragmentEnd,this,this._fragment,r);else{var s=t===!1?o:P;s(this.$el,this,r)}return this}}function Cn(e){function t(e,t,i){var r=e.$parent;if(r&&i&&!n.test(t))for(;r;)r._eventsCount[t]=(r._eventsCount[t]||0)+i,r=r.$parent}e.prototype.$on=function(e,n){return(this._events[e]||(this._events[e]=[])).push(n),t(this,e,1),this},e.prototype.$once=function(e,t){function n(){i.$off(e,n),t.apply(this,arguments)}var i=this;return n.fn=t,this.$on(e,n),this},e.prototype.$off=function(e,n){var i;if(!arguments.length){if(this.$parent)for(e in this._events)i=this._events[e],i&&t(this,e,-i.length);return this._events={},this}if(i=this._events[e],!i)return this;if(1===arguments.length)return t(this,e,-i.length),this._events[e]=null,this;for(var r,o=i.length;o--;)if(r=i[o],r===n||r.fn===n){t(this,e,-1),i.splice(o,1);break}return this},e.prototype.$emit=function(e){var t="string"==typeof e;e=t?e:e.name;var n=this._events[e],i=t||!n;if(n){n=n.length>1?p(n):n;var r=t&&n.some(function(e){return e._fromParent});r&&(i=!1);for(var o=p(arguments,1),s=0,a=n.length;s<a;s++){var l=n[s],u=l.apply(this,o);u!==!0||r&&!l._fromParent||(i=!0)}}return i},e.prototype.$broadcast=function(e){var t="string"==typeof e;if(e=t?e:e.name,this._eventsCount[e]){var n=this.$children,i=p(arguments);t&&(i[0]={name:e,source:this});for(var r=0,o=n.length;r<o;r++){var s=n[r],a=s.$emit.apply(s,i);a&&s.$broadcast.apply(s,i)}return this}},e.prototype.$dispatch=function(e){var t=this.$emit.apply(this,arguments);if(t){var n=this.$parent,i=p(arguments);for(i[0]={name:e,source:this};n;)t=n.$emit.apply(n,i),n=t?n.$parent:null;return this}};var n=/^hook:/}function _n(e){function t(){this._isAttached=!0,this._isReady=!0,this._callHook("ready")}e.prototype.$mount=function(e){return this._isCompiled?void Ni("$mount() should be called only once.",this):(e=H(e),e||(e=document.createElement("div")),this._compile(e),this._initDOMHooks(),F(this.$el)?(this._callHook("attached"),t.call(this)):this.$once("hook:attached",t),this)},e.prototype.$destroy=function(e,t){this._destroy(e,t)},e.prototype.$compile=function(e,t,n,i){return Mt(e,this.$options,!0)(this,e,t,n,i)}}function kn(e){this._init(e)}function En(e,t,n){return n=n?parseInt(n,10):0,t=s(t),"number"==typeof t?e.slice(n,n+t):e}function Tn(e,t,n){if(e=ss(e),null==t)return e;if("function"==typeof t)return e.filter(t);t=(""+t).toLowerCase();for(var i,r,o,s,a="in"===n?3:2,l=Array.prototype.concat.apply([],p(arguments,a)),u=[],c=0,f=e.length;c<f;c++)if(i=e[c],o=i&&i.$value||i,s=l.length){for(;s--;)if(r=l[s],"$key"===r&&Sn(i.$key,t)||Sn($e(o,r),t)){u.push(i);break}}else Sn(i,t)&&u.push(i);return u}function An(e){function t(e,t,n){var r=i[n];return r&&("$key"!==r&&(m(e)&&"$value"in e&&(e=e.$value),m(t)&&"$value"in t&&(t=t.$value)),e=m(e)?$e(e,r):e,t=m(t)?$e(t,r):t),e===t?0:e>t?o:-o}var n=null,i=void 0;e=ss(e);var r=p(arguments,1),o=r[r.length-1];"number"==typeof o?(o=o<0?-1:1,r=r.length>1?r.slice(0,-1):r):o=1;var s=r[0];return s?("function"==typeof s?n=function(e,t){return s(e,t)*o}:(i=Array.prototype.concat.apply([],r),n=function(e,r,o){return o=o||0,o>=i.length-1?t(e,r,o):t(e,r,o)||n(e,r,o+1)}),e.slice().sort(n)):e}function Sn(e,t){var n;if(g(e)){var i=Object.keys(e);for(n=i.length;n--;)if(Sn(e[i[n]],t))return!0}else if(Hn(e)){for(n=e.length;n--;)if(Sn(e[n],t))return!0}else if(null!=e)return e.toString().toLowerCase().indexOf(t)>-1}function Nn(n){function i(e){return new Function("return function "+d(e)+" (options) { this._init(options) }")()}n.options={directives:To,elementDirectives:os,filters:ls,transitions:{},components:{},partials:{},replace:!0},n.util=Wi,n.config=Si,n.set=e,n.delete=t,n.nextTick=ti,n.compiler=es,n.FragmentFactory=ot,n.internalDirectives=Uo,n.parsers={path:ar,text:Ei,template:Fr,directive:bi,expression:xr},n.cid=0;var r=1;n.extend=function(e){e=e||{};var t=this,n=0===t.cid;if(n&&e._Ctor)return e._Ctor;var o=e.name||t.options.name;/^[a-zA-Z][\w-]*$/.test(o)||(Ni('Invalid component name: "'+o+'". Component names can only contain alphanumeric characaters and the hyphen.'),o=null);var s=i(o||"VueComponent");return s.prototype=Object.create(t.prototype),s.prototype.constructor=s,s.cid=r++,s.options=me(t.options,e),s.super=t,s.extend=t.extend,Si._assetTypes.forEach(function(e){s[e]=t[e]}),o&&(s.options.components[o]=s),n&&(e._Ctor=s),s},n.use=function(e){if(!e.installed){var t=p(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):e.apply(null,t),e.installed=!0,this}},n.mixin=function(e){n.options=me(n.options,e)},Si._assetTypes.forEach(function(e){n[e]=function(t,i){return i?("component"===e&&(Di.test(t)||Li.test(t))&&Ni("Do not use built-in or reserved HTML elements as component id: "+t),"component"===e&&g(i)&&(i.name||(i.name=t),i=n.extend(i)),this.options[e+"s"][t]=i,i):this.options[e+"s"][t]}}),v(n.transition,Oi)}var $n=Object.prototype.hasOwnProperty,On=/^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/,jn=/-(\w)/g,Dn=/([a-z\d])([A-Z])/g,Ln=/(?:^|[-_\/])(\w)/g,Pn=Object.prototype.toString,Mn="[object Object]",Hn=Array.isArray,Fn="__proto__"in{},Rn="undefined"!=typeof window&&"[object Object]"!==Object.prototype.toString.call(window),Bn=Rn&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,qn=Rn&&window.navigator.userAgent.toLowerCase(),In=qn&&qn.indexOf("trident")>0,Wn=qn&&qn.indexOf("msie 9.0")>0,zn=qn&&qn.indexOf("android")>0,Un=qn&&/(iphone|ipad|ipod|ios)/i.test(qn),Vn=Un&&qn.match(/os ([\d_]+)/),Xn=Vn&&Vn[1].split("_"),Gn=Xn&&Number(Xn[0])>=9&&Number(Xn[1])>=3&&!window.indexedDB,Jn=void 0,Yn=void 0,Kn=void 0,Qn=void 0;if(Rn&&!Wn){var Zn=void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend,ei=void 0===window.onanimationend&&void 0!==window.onwebkitanimationend;Jn=Zn?"WebkitTransition":"transition",Yn=Zn?"webkitTransitionEnd":"transitionend",Kn=ei?"WebkitAnimation":"animation",Qn=ei?"webkitAnimationEnd":"animationend"}var ti=function(){function e(){i=!1;var e=n.slice(0);n=[];for(var t=0;t<e.length;t++)e[t]()}var t,n=[],i=!1;if("undefined"==typeof MutationObserver||Gn){var r=Rn?window:"undefined"!=typeof global?global:{};t=r.setImmediate||setTimeout}else{var o=1,s=new MutationObserver(e),a=document.createTextNode(o);s.observe(a,{characterData:!0}),t=function(){o=(o+1)%2,a.data=o}}return function(r,o){var s=o?function(){r.call(o)}:r;n.push(s),i||(i=!0,t(e,0))}}(),ni=void 0;"undefined"!=typeof Set&&Set.toString().match(/native code/)?ni=Set:(ni=function(){this.set=Object.create(null)},ni.prototype.has=function(e){return void 0!==this.set[e]},ni.prototype.add=function(e){this.set[e]=1},ni.prototype.clear=function(){this.set=Object.create(null)});var ii=_.prototype;ii.put=function(e,t){var n,i=this.get(e,!0);return i||(this.size===this.limit&&(n=this.shift()),i={key:e},this._keymap[e]=i,this.tail?(this.tail.newer=i,i.older=this.tail):this.head=i,this.tail=i,this.size++),i.value=t,n},ii.shift=function(){var e=this.head;return e&&(this.head=this.head.newer,this.head.older=void 0,e.newer=e.older=void 0,this._keymap[e.key]=void 0,this.size--),e},ii.get=function(e,t){var n=this._keymap[e];if(void 0!==n)return n===this.tail?t?n:n.value:(n.newer&&(n===this.head&&(this.head=n.newer),n.newer.older=n.older),n.older&&(n.older.newer=n.newer),n.newer=void 0,n.older=this.tail,this.tail&&(this.tail.newer=n),this.tail=n,t?n:n.value)};var ri,oi,si,ai,li,ui,ci,fi,di,hi,pi,vi,mi=new _(1e3),gi=/[^\s'"]+|'[^']*'|"[^"]*"/g,yi=/^in$|^-?\d+/,bi=Object.freeze({parseDirective:T}),wi=/[-.*+?^${}()|[\]\/\\]/g,xi=void 0,Ci=void 0,_i=void 0,ki=/[^|]\|[^|]/,Ei=Object.freeze({compileRegex:S,parseText:N,tokensToExp:$}),Ti=["{{","}}"],Ai=["{{{","}}}"],Si=Object.defineProperties({debug:!1,silent:!1,async:!0,warnExpressionErrors:!0,devtools:!0,_delimitersChanged:!0,_assetTypes:["component","directive","elementDirective","filter","transition","partial"],_propBindingModes:{ONE_WAY:0,TWO_WAY:1,ONE_TIME:2},_maxUpdateCount:100},{delimiters:{get:function(){return Ti},set:function(e){Ti=e,S()},configurable:!0,enumerable:!0},unsafeDelimiters:{get:function(){return Ai},set:function(e){Ai=e,S()},configurable:!0,enumerable:!0}}),Ni=void 0,$i=void 0;!function(){var e="undefined"!=typeof console;Ni=function(t,n){e&&!Si.silent&&console.error("[Vue warn]: "+t+(n?$i(n):""))},$i=function(e){var t=e._isVue?e.$options.name:e.name;return t?" (found in component: <"+f(t)+">)":""}}();var Oi=Object.freeze({appendWithTransition:D,beforeWithTransition:L,removeWithTransition:P,applyTransition:M}),ji=/^v-ref:/,Di=/^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i,Li=/^(slot|partial|component)$/i,Pi=void 0;Pi=function(e,t){return t.indexOf("-")>-1?e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:/HTMLUnknownElement/.test(e.toString())&&!/^(data|time|rtc|rb|details|dialog|summary)$/.test(t)};var Mi=Si.optionMergeStrategies=Object.create(null);Mi.data=function(e,t,n){return n?e||t?function(){var i="function"==typeof t?t.call(n):t,r="function"==typeof e?e.call(n):void 0;return i?fe(i,r):r}:void 0:t?"function"!=typeof t?(Ni('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):e?function(){return fe(t.call(this),e.call(this))}:t:e},Mi.el=function(e,t,n){if(!n&&t&&"function"!=typeof t)return void Ni('The "el" option should be a function that returns a per-instance value in component definitions.',n);var i=t||e;return n&&"function"==typeof i?i.call(n):i},Mi.init=Mi.created=Mi.ready=Mi.attached=Mi.detached=Mi.beforeCompile=Mi.compiled=Mi.beforeDestroy=Mi.destroyed=Mi.activate=function(e,t){return t?e?e.concat(t):Hn(t)?t:[t]:e},Si._assetTypes.forEach(function(e){Mi[e+"s"]=de}),Mi.watch=Mi.events=function(e,t){if(!t)return e;if(!e)return t;var n={};v(n,e);for(var i in t){var r=n[i],o=t[i];r&&!Hn(r)&&(r=[r]),n[i]=r?r.concat(o):[o]}return n},Mi.props=Mi.methods=Mi.computed=function(e,t){if(!t)return e;if(!e)return t;var n=Object.create(null);return v(n,e),v(n,t),n};var Hi=function(e,t){return void 0===t?e:t},Fi=0;ye.target=null,ye.prototype.addSub=function(e){this.subs.push(e)},ye.prototype.removeSub=function(e){this.subs.$remove(e)},ye.prototype.depend=function(){ye.target.addDep(this)},ye.prototype.notify=function(){for(var e=p(this.subs),t=0,n=e.length;t<n;t++)e[t].update()};var Ri=Array.prototype,Bi=Object.create(Ri);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=Ri[e];y(Bi,e,function(){for(var n=arguments.length,i=new Array(n);n--;)i[n]=arguments[n];var r,o=t.apply(this,i),s=this.__ob__;switch(e){case"push":r=i;break;case"unshift":r=i;break;case"splice":r=i.slice(2)}return r&&s.observeArray(r),s.dep.notify(),o})}),y(Ri,"$set",function(e,t){return e>=this.length&&(this.length=Number(e)+1),this.splice(e,1,t)[0]}),y(Ri,"$remove",function(e){if(this.length){var t=w(this,e);return t>-1?this.splice(t,1):void 0}});var qi=Object.getOwnPropertyNames(Bi),Ii=!0;we.prototype.walk=function(e){for(var t=Object.keys(e),n=0,i=t.length;n<i;n++)this.convert(t[n],e[t[n]])},we.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)_e(e[t])},we.prototype.convert=function(e,t){ke(this.value,e,t)},we.prototype.addVm=function(e){(this.vms||(this.vms=[])).push(e)},we.prototype.removeVm=function(e){this.vms.$remove(e)};var Wi=Object.freeze({defineReactive:ke,set:e,del:t,hasOwn:n,isLiteral:i,isReserved:r,_toString:o,toNumber:s,toBoolean:a,stripQuotes:l,camelize:u,hyphenate:f,classify:d,bind:h,toArray:p,extend:v,isObject:m,isPlainObject:g,def:y,debounce:b,indexOf:w,cancellable:x,looseEqual:C,isArray:Hn,hasProto:Fn,inBrowser:Rn,devtools:Bn,isIE:In,isIE9:Wn,isAndroid:zn,isIos:Un,iosVersionMatch:Vn,iosVersion:Xn,hasMutationObserverBug:Gn,get transitionProp(){return Jn},get transitionEndEvent(){return Yn},get animationProp(){return Kn},get animationEndEvent(){return Qn},nextTick:ti,get _Set(){return ni},query:H,inDoc:F,getAttr:R,getBindAttr:B,hasBindAttr:q,before:I,after:W,remove:z,prepend:U,replace:V,on:X,off:G,setClass:Y,addClass:K,removeClass:Q,extractContent:Z,trimNode:ee,isTemplate:ne,createAnchor:ie,findRef:re,mapNodeRange:oe,removeNodeRange:se,isFragment:ae,getOuterHTML:le,mergeOptions:me,resolveAsset:ge,checkComponentAttr:ue,commonTagRE:Di,reservedTagRE:Li,get warn(){return Ni}}),zi=0,Ui=new _(1e3),Vi=0,Xi=1,Gi=2,Ji=3,Yi=0,Ki=1,Qi=2,Zi=3,er=4,tr=5,nr=6,ir=7,rr=8,or=[];or[Yi]={ws:[Yi],ident:[Zi,Vi],"[":[er],eof:[ir]},or[Ki]={ws:[Ki],".":[Qi],"[":[er],eof:[ir]},or[Qi]={ws:[Qi],ident:[Zi,Vi]},or[Zi]={ident:[Zi,Vi],0:[Zi,Vi],number:[Zi,Vi],ws:[Ki,Xi],".":[Qi,Xi],"[":[er,Xi],eof:[ir,Xi]},or[er]={"'":[tr,Vi],'"':[nr,Vi],"[":[er,Gi],"]":[Ki,Ji],eof:rr,else:[er,Vi]},or[tr]={"'":[er,Vi],eof:rr,else:[tr,Vi]},or[nr]={'"':[er,Vi],eof:rr,else:[nr,Vi]};var sr;sr=function(e,t){Ni('You are setting a non-existent path "'+e.raw+'" on a vm instance. Consider pre-initializing the property with the "data" option for more reliable reactivity and better performance.',t)};var ar=Object.freeze({parsePath:Ne,getPath:$e,setPath:Oe}),lr=new _(1e3),ur="Math,Date,this,true,false,null,undefined,Infinity,NaN,isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,parseInt,parseFloat",cr=new RegExp("^("+ur.replace(/,/g,"\\b|")+"\\b)"),fr="break,case,class,catch,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,let,return,super,switch,throw,try,var,while,with,yield,enum,await,implements,package,protected,static,interface,private,public",dr=new RegExp("^("+fr.replace(/,/g,"\\b|")+"\\b)"),hr=/\s/g,pr=/\n/g,vr=/[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g,mr=/"(\d+)"/g,gr=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/,yr=/[^\w$\.](?:[A-Za-z_$][\w$]*)/g,br=/^(?:true|false|null|undefined|Infinity|NaN)$/,wr=[],xr=Object.freeze({parseExpression:Re,isSimplePath:Be}),Cr=[],_r=[],kr={},Er={},Tr=!1,Ar=0;Ue.prototype.get=function(){this.beforeGet();var e,t=this.scope||this.vm;try{e=this.getter.call(t,t)}catch(e){Si.warnExpressionErrors&&Ni('Error when evaluating expression "'+this.expression+'": '+e.toString(),this.vm)}return this.deep&&Ve(e),this.preProcess&&(e=this.preProcess(e)),this.filters&&(e=t._applyFilters(e,null,this.filters,!1)),this.postProcess&&(e=this.postProcess(e)),this.afterGet(),e},Ue.prototype.set=function(e){var t=this.scope||this.vm;this.filters&&(e=t._applyFilters(e,this.value,this.filters,!0));try{this.setter.call(t,t,e)}catch(e){Si.warnExpressionErrors&&Ni('Error when evaluating setter "'+this.expression+'": '+e.toString(),this.vm)}var n=t.$forContext;if(n&&n.alias===this.expression){if(n.filters)return void Ni("It seems you are using two-way binding on a v-for alias ("+this.expression+"), and the v-for has filters. This will not work properly. Either remove the filters or use an array of objects and bind to object properties instead.",this.vm);n._withLock(function(){t.$key?n.rawValue[t.$key]=e:n.rawValue.$set(t.$index,e)})}},Ue.prototype.beforeGet=function(){ye.target=this},Ue.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Ue.prototype.afterGet=function(){ye.target=null;for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Ue.prototype.update=function(e){this.lazy?this.dirty=!0:this.sync||!Si.async?this.run():(this.shallow=this.queued?!!e&&this.shallow:!!e,this.queued=!0,Si.debug&&(this.prevError=new Error("[vue] async stack trace")),ze(this))},Ue.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||(m(e)||this.deep)&&!this.shallow){var t=this.value;this.value=e;var n=this.prevError;if(Si.debug&&n){this.prevError=null;try{this.cb.call(this.vm,e,t)}catch(e){throw ti(function(){throw n},0),e}}else this.cb.call(this.vm,e,t)}this.queued=this.shallow=!1}},Ue.prototype.evaluate=function(){var e=ye.target;this.value=this.get(),this.dirty=!1,ye.target=e},Ue.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Ue.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||this.vm._vForRemoving||this.vm._watchers.$remove(this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.vm=this.cb=this.value=null}};var Sr=new ni,Nr={bind:function(){this.attr=3===this.el.nodeType?"data":"textContent"},update:function(e){this.el[this.attr]=o(e)}},$r=new _(1e3),Or=new _(1e3),jr={efault:[0,"",""],legend:[1,"<fieldset>","</fieldset>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"]};jr.td=jr.th=[3,"<table><tbody><tr>","</tr></tbody></table>"],jr.option=jr.optgroup=[1,'<select multiple="multiple">',"</select>"],jr.thead=jr.tbody=jr.colgroup=jr.caption=jr.tfoot=[1,"<table>","</table>"],jr.g=jr.defs=jr.symbol=jr.use=jr.image=jr.text=jr.circle=jr.ellipse=jr.line=jr.path=jr.polygon=jr.polyline=jr.rect=[1,'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events"version="1.1">',"</svg>"];var Dr=/<([\w:-]+)/,Lr=/&#?\w+?;/,Pr=/<!--/,Mr=function(){if(Rn){var e=document.createElement("div");return e.innerHTML="<template>1</template>",!e.cloneNode(!0).firstChild.innerHTML}return!1}(),Hr=function(){if(Rn){var e=document.createElement("textarea");return e.placeholder="t","t"===e.cloneNode(!0).value}return!1}(),Fr=Object.freeze({cloneNode:Ye,parseTemplate:Ke}),Rr={bind:function(){8===this.el.nodeType&&(this.nodes=[],this.anchor=ie("v-html"),V(this.el,this.anchor))},update:function(e){e=o(e),this.nodes?this.swap(e):this.el.innerHTML=e},swap:function(e){for(var t=this.nodes.length;t--;)z(this.nodes[t]);var n=Ke(e,!0,!0);this.nodes=p(n.childNodes),I(n,this.anchor)}};Qe.prototype.callHook=function(e){var t,n;for(t=0,n=this.childFrags.length;t<n;t++)this.childFrags[t].callHook(e);for(t=0,n=this.children.length;t<n;t++)e(this.children[t])},Qe.prototype.beforeRemove=function(){var e,t;for(e=0,t=this.childFrags.length;e<t;e++)this.childFrags[e].beforeRemove(!1);for(e=0,t=this.children.length;e<t;e++)this.children[e].$destroy(!1,!0);var n=this.unlink.dirs;for(e=0,t=n.length;e<t;e++)n[e]._watcher&&n[e]._watcher.teardown()},Qe.prototype.destroy=function(){this.parentFrag&&this.parentFrag.childFrags.$remove(this),this.node.__v_frag=null,this.unlink()};var Br=new _(5e3);ot.prototype.create=function(e,t,n){var i=Ye(this.template);return new Qe(this.linker,this.vm,i,e,t,n)};var qr=700,Ir=800,Wr=850,zr=1100,Ur=1500,Vr=1500,Xr=1750,Gr=2100,Jr=2200,Yr=2300,Kr=0,Qr={priority:Jr,terminal:!0,params:["track-by","stagger","enter-stagger","leave-stagger"],bind:function(){var e=this.expression.match(/(.*) (?:in|of) (.*)/);if(e){var t=e[1].match(/\((.*),(.*)\)/);t?(this.iterator=t[1].trim(),this.alias=t[2].trim()):this.alias=e[1].trim(),this.expression=e[2]}if(!this.alias)return void Ni('Invalid v-for expression "'+this.descriptor.raw+'": alias is required.',this.vm);this.id="__v-for__"+ ++Kr;var n=this.el.tagName;this.isOption=("OPTION"===n||"OPTGROUP"===n)&&"SELECT"===this.el.parentNode.tagName,this.start=ie("v-for-start"),this.end=ie("v-for-end"),V(this.el,this.end),I(this.start,this.end),this.cache=Object.create(null),this.factory=new ot(this.vm,this.el)},update:function(e){this.diff(e),this.updateRef(),this.updateModel()},diff:function(e){var t,i,r,o,s,a,l=e[0],u=this.fromObject=m(l)&&n(l,"$key")&&n(l,"$value"),c=this.params.trackBy,f=this.frags,d=this.frags=new Array(e.length),h=this.alias,p=this.iterator,v=this.start,g=this.end,y=F(v),b=!f;for(t=0,i=e.length;t<i;t++)l=e[t],o=u?l.$key:null,s=u?l.$value:l,a=!m(s),r=!b&&this.getCachedFrag(s,t,o),r?(r.reused=!0,r.scope.$index=t,o&&(r.scope.$key=o),p&&(r.scope[p]=null!==o?o:t),(c||u||a)&&be(function(){r.scope[h]=s})):(r=this.create(s,h,t,o),r.fresh=!b),d[t]=r,b&&r.before(g);if(!b){var w=0,x=f.length-d.length;for(this.vm._vForRemoving=!0,t=0,i=f.length;t<i;t++)r=f[t],r.reused||(this.deleteCachedFrag(r),this.remove(r,w++,x,y));this.vm._vForRemoving=!1,w&&(this.vm._watchers=this.vm._watchers.filter(function(e){return e.active}));var C,_,k,E=0;for(t=0,i=d.length;t<i;t++)r=d[t],C=d[t-1],_=C?C.staggerCb?C.staggerAnchor:C.end||C.node:v,r.reused&&!r.staggerCb?(k=st(r,v,this.id),k===C||k&&st(k,v,this.id)===C||this.move(r,_)):this.insert(r,E++,_,y),r.reused=r.fresh=!1}},create:function(e,t,n,i){var r=this._host,o=this._scope||this.vm,s=Object.create(o);s.$refs=Object.create(o.$refs),s.$els=Object.create(o.$els),s.$parent=o,s.$forContext=this,be(function(){ke(s,t,e)}),ke(s,"$index",n),i?ke(s,"$key",i):s.$key&&y(s,"$key",null),this.iterator&&ke(s,this.iterator,null!==i?i:n);var a=this.factory.create(r,s,this._frag);return a.forId=this.id,this.cacheFrag(e,a,n,i),a},updateRef:function(){var e=this.descriptor.ref;if(e){var t,n=(this._scope||this.vm).$refs;this.fromObject?(t={},this.frags.forEach(function(e){t[e.scope.$key]=at(e)})):t=this.frags.map(at),n[e]=t}},updateModel:function(){if(this.isOption){var e=this.start.parentNode,t=e&&e.__v_model;t&&t.forceUpdate()}},insert:function(e,t,n,i){e.staggerCb&&(e.staggerCb.cancel(),e.staggerCb=null);var r=this.getStagger(e,t,null,"enter");if(i&&r){var o=e.staggerAnchor;o||(o=e.staggerAnchor=ie("stagger-anchor"),o.__v_frag=e),W(o,n);var s=e.staggerCb=x(function(){e.staggerCb=null,e.before(o),z(o)});setTimeout(s,r)}else{var a=n.nextSibling;a||(W(this.end,n),a=this.end),e.before(a)}},remove:function(e,t,n,i){if(e.staggerCb)return e.staggerCb.cancel(),void(e.staggerCb=null);var r=this.getStagger(e,t,n,"leave");if(i&&r){var o=e.staggerCb=x(function(){e.staggerCb=null,e.remove()});setTimeout(o,r)}else e.remove()},move:function(e,t){t.nextSibling||this.end.parentNode.appendChild(this.end),e.before(t.nextSibling,!1)},cacheFrag:function(e,t,i,r){var o,s=this.params.trackBy,a=this.cache,l=!m(e);r||s||l?(o=ut(i,r,e,s),a[o]?"$index"!==s&&this.warnDuplicate(e):a[o]=t):(o=this.id,n(e,o)?null===e[o]?e[o]=t:this.warnDuplicate(e):Object.isExtensible(e)?y(e,o,t):Ni("Frozen v-for objects cannot be automatically tracked, make sure to provide a track-by key.")),t.raw=e},getCachedFrag:function(e,t,n){var i,r=this.params.trackBy,o=!m(e);if(n||r||o){var s=ut(t,n,e,r);i=this.cache[s]}else i=e[this.id];return i&&(i.reused||i.fresh)&&this.warnDuplicate(e),i},deleteCachedFrag:function(e){var t=e.raw,i=this.params.trackBy,r=e.scope,o=r.$index,s=n(r,"$key")&&r.$key,a=!m(t);if(i||s||a){var l=ut(o,s,t,i);this.cache[l]=null}else t[this.id]=null,e.raw=null},getStagger:function(e,t,n,i){i+="Stagger";var r=e.node.__v_trans,o=r&&r.hooks,s=o&&(o[i]||o.stagger);return s?s.call(e,t,n):t*parseInt(this.params[i]||this.params.stagger,10)},_preProcess:function(e){return this.rawValue=e,e},_postProcess:function(e){if(Hn(e))return e;if(g(e)){for(var t,n=Object.keys(e),i=n.length,r=new Array(i);i--;)t=n[i],r[i]={$key:t,$value:e[t]};return r}return"number"!=typeof e||isNaN(e)||(e=lt(e)),e||[]},unbind:function(){if(this.descriptor.ref&&((this._scope||this.vm).$refs[this.descriptor.ref]=null),this.frags)for(var e,t=this.frags.length;t--;)e=this.frags[t],this.deleteCachedFrag(e),e.destroy()}};Qr.warnDuplicate=function(e){Ni('Duplicate value found in v-for="'+this.descriptor.raw+'": '+JSON.stringify(e)+'. Use track-by="$index" if you are expecting duplicate values.',this.vm)};var Zr={priority:Gr,terminal:!0,bind:function(){var e=this.el;if(e.__vue__)Ni('v-if="'+this.expression+'" cannot be used on an instance root element.',this.vm),this.invalid=!0;else{var t=e.nextElementSibling;t&&null!==R(t,"v-else")&&(z(t),this.elseEl=t),this.anchor=ie("v-if"),V(e,this.anchor)}},update:function(e){this.invalid||(e?this.frag||this.insert():this.remove())},insert:function(){this.elseFrag&&(this.elseFrag.remove(),this.elseFrag=null),this.factory||(this.factory=new ot(this.vm,this.el)),this.frag=this.factory.create(this._host,this._scope,this._frag),this.frag.before(this.anchor)},remove:function(){this.frag&&(this.frag.remove(),this.frag=null),this.elseEl&&!this.elseFrag&&(this.elseFactory||(this.elseFactory=new ot(this.elseEl._context||this.vm,this.elseEl)),this.elseFrag=this.elseFactory.create(this._host,this._scope,this._frag),this.elseFrag.before(this.anchor))},unbind:function(){this.frag&&this.frag.destroy(),this.elseFrag&&this.elseFrag.destroy()}},eo={bind:function(){var e=this.el.nextElementSibling;e&&null!==R(e,"v-else")&&(this.elseEl=e)},update:function(e){this.apply(this.el,e),this.elseEl&&this.apply(this.elseEl,!e)},apply:function(e,t){function n(){e.style.display=t?"":"none"}F(e)?M(e,t?1:-1,n,this.vm):n()}},to={bind:function(){var e=this,t=this.el,n="range"===t.type,i=this.params.lazy,r=this.params.number,o=this.params.debounce,a=!1;if(zn||n||(this.on("compositionstart",function(){a=!0}),this.on("compositionend",function(){a=!1,i||e.listener()})),this.focused=!1,n||i||(this.on("focus",function(){e.focused=!0}),this.on("blur",function(){e.focused=!1,e._frag&&!e._frag.inserted||e.rawListener()})),this.listener=this.rawListener=function(){if(!a&&e._bound){var i=r||n?s(t.value):t.value;e.set(i),ti(function(){e._bound&&!e.focused&&e.update(e._watcher.value)})}},o&&(this.listener=b(this.listener,o)),this.hasjQuery="function"==typeof jQuery,this.hasjQuery){var l=jQuery.fn.on?"on":"bind";jQuery(t)[l]("change",this.rawListener),i||jQuery(t)[l]("input",this.listener)}else this.on("change",this.rawListener),i||this.on("input",this.listener);!i&&Wn&&(this.on("cut",function(){ti(e.listener)}),this.on("keyup",function(t){46!==t.keyCode&&8!==t.keyCode||e.listener()})),(t.hasAttribute("value")||"TEXTAREA"===t.tagName&&t.value.trim())&&(this.afterBind=this.listener)},update:function(e){e=o(e),e!==this.el.value&&(this.el.value=e)},unbind:function(){var e=this.el;if(this.hasjQuery){var t=jQuery.fn.off?"off":"unbind";jQuery(e)[t]("change",this.listener),jQuery(e)[t]("input",this.listener)}}},no={bind:function(){var e=this,t=this.el;this.getValue=function(){if(t.hasOwnProperty("_value"))return t._value;var n=t.value;return e.params.number&&(n=s(n)),n},this.listener=function(){e.set(e.getValue())},this.on("change",this.listener),t.hasAttribute("checked")&&(this.afterBind=this.listener)},update:function(e){this.el.checked=C(e,this.getValue())}},io={bind:function(){var e=this,t=this,n=this.el;this.forceUpdate=function(){t._watcher&&t.update(t._watcher.get())};var i=this.multiple=n.hasAttribute("multiple");this.listener=function(){var e=ct(n,i);e=t.params.number?Hn(e)?e.map(s):s(e):e,t.set(e)},this.on("change",this.listener);var r=ct(n,i,!0);(i&&r.length||!i&&null!==r)&&(this.afterBind=this.listener),this.vm.$on("hook:attached",function(){ti(e.forceUpdate)}),F(n)||ti(this.forceUpdate)},update:function(e){var t=this.el;t.selectedIndex=-1;for(var n,i,r=this.multiple&&Hn(e),o=t.options,s=o.length;s--;)n=o[s],i=n.hasOwnProperty("_value")?n._value:n.value,n.selected=r?ft(e,i)>-1:C(e,i)},unbind:function(){this.vm.$off("hook:attached",this.forceUpdate)}},ro={bind:function(){function e(){var e=n.checked;return e&&n.hasOwnProperty("_trueValue")?n._trueValue:!e&&n.hasOwnProperty("_falseValue")?n._falseValue:e}var t=this,n=this.el;this.getValue=function(){return n.hasOwnProperty("_value")?n._value:t.params.number?s(n.value):n.value},this.listener=function(){var i=t._watcher.value;if(Hn(i)){var r=t.getValue();n.checked?w(i,r)<0&&i.push(r):i.$remove(r)}else t.set(e())},this.on("change",this.listener),n.hasAttribute("checked")&&(this.afterBind=this.listener)},update:function(e){var t=this.el;Hn(e)?t.checked=w(e,this.getValue())>-1:t.hasOwnProperty("_trueValue")?t.checked=C(e,t._trueValue):t.checked=!!e}},oo={text:to,radio:no,select:io,checkbox:ro},so={priority:Ir,twoWay:!0,handlers:oo,params:["lazy","number","debounce"],bind:function(){this.checkFilters(),this.hasRead&&!this.hasWrite&&Ni('It seems you are using a read-only filter with v-model="'+this.descriptor.raw+'". You might want to use a two-way filter to ensure correct behavior.',this.vm);var e,t=this.el,n=t.tagName;if("INPUT"===n)e=oo[t.type]||oo.text;else if("SELECT"===n)e=oo.select;else{if("TEXTAREA"!==n)return void Ni("v-model does not support element type: "+n,this.vm);e=oo.text}t.__v_model=this,e.bind.call(this),this.update=e.update,this._unbind=e.unbind},checkFilters:function(){var e=this.filters;if(e)for(var t=e.length;t--;){var n=ge(this.vm.$options,"filters",e[t].name);("function"==typeof n||n.read)&&(this.hasRead=!0),n.write&&(this.hasWrite=!0)}},unbind:function(){this.el.__v_model=null,this._unbind&&this._unbind()}},ao={esc:27,tab:9,enter:13,space:32,delete:[8,46],up:38,left:37,right:39,down:40},lo={priority:qr,acceptStatement:!0,keyCodes:ao,bind:function(){if("IFRAME"===this.el.tagName&&"load"!==this.arg){var e=this;this.iframeBind=function(){X(e.el.contentWindow,e.arg,e.handler,e.modifiers.capture)},this.on("load",this.iframeBind)}},update:function(e){if(this.descriptor.raw||(e=function(){}),"function"!=typeof e)return void Ni("v-on:"+this.arg+'="'+this.expression+'" expects a function value, got '+e,this.vm);this.modifiers.stop&&(e=ht(e)),this.modifiers.prevent&&(e=pt(e)),this.modifiers.self&&(e=vt(e));var t=Object.keys(this.modifiers).filter(function(e){return"stop"!==e&&"prevent"!==e&&"self"!==e&&"capture"!==e});t.length&&(e=dt(e,t)),this.reset(),this.handler=e,this.iframeBind?this.iframeBind():X(this.el,this.arg,this.handler,this.modifiers.capture)},reset:function(){var e=this.iframeBind?this.el.contentWindow:this.el;this.handler&&G(e,this.arg,this.handler)},unbind:function(){this.reset()}},uo=["-webkit-","-moz-","-ms-"],co=["Webkit","Moz","ms"],fo=/!important;?$/,ho=Object.create(null),po=null,vo={deep:!0,update:function(e){"string"==typeof e?this.el.style.cssText=e:Hn(e)?this.handleObject(e.reduce(v,{})):this.handleObject(e||{})},handleObject:function(e){var t,n,i=this.cache||(this.cache={});for(t in i)t in e||(this.handleSingle(t,null),delete i[t]);for(t in e)n=e[t],n!==i[t]&&(i[t]=n,this.handleSingle(t,n))},handleSingle:function(e,t){
if(e=mt(e))if(null!=t&&(t+=""),t){var n=fo.test(t)?"important":"";n?(Ni("It's probably a bad idea to use !important with inline rules. This feature will be deprecated in a future version of Vue."),t=t.replace(fo,"").trim(),this.el.style.setProperty(e.kebab,t,n)):this.el.style[e.camel]=t}else this.el.style[e.camel]=""}},mo="http://www.w3.org/1999/xlink",go=/^xlink:/,yo=/^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/,bo=/^(?:value|checked|selected|muted)$/,wo=/^(?:draggable|contenteditable|spellcheck)$/,xo={value:"_value","true-value":"_trueValue","false-value":"_falseValue"},Co={priority:Wr,bind:function(){var e=this.arg,t=this.el.tagName;e||(this.deep=!0);var n=this.descriptor,i=n.interp;if(i){n.hasOneTime&&(this.expression=$(i,this._scope||this.vm)),(yo.test(e)||"name"===e&&("PARTIAL"===t||"SLOT"===t))&&(Ni(e+'="'+n.raw+'": attribute interpolation is not allowed in Vue.js directives and special attributes.',this.vm),this.el.removeAttribute(e),this.invalid=!0);var r=e+'="'+n.raw+'": ';"src"===e&&Ni(r+'interpolation in "src" attribute will cause a 404 request. Use v-bind:src instead.',this.vm),"style"===e&&Ni(r+'interpolation in "style" attribute will cause the attribute to be discarded in Internet Explorer. Use v-bind:style instead.',this.vm)}},update:function(e){if(!this.invalid){var t=this.arg;this.arg?this.handleSingle(t,e):this.handleObject(e||{})}},handleObject:vo.handleObject,handleSingle:function(e,t){var n=this.el,i=this.descriptor.interp;if(this.modifiers.camel&&(e=u(e)),!i&&bo.test(e)&&e in n){var r="value"===e&&null==t?"":t;n[e]!==r&&(n[e]=r)}var o=xo[e];if(!i&&o){n[o]=t;var s=n.__v_model;s&&s.listener()}return"value"===e&&"TEXTAREA"===n.tagName?void n.removeAttribute(e):void(wo.test(e)?n.setAttribute(e,t?"true":"false"):null!=t&&t!==!1?"class"===e?(n.__v_trans&&(t+=" "+n.__v_trans.id+"-transition"),Y(n,t)):go.test(e)?n.setAttributeNS(mo,e,t===!0?"":t):n.setAttribute(e,t===!0?"":t):n.removeAttribute(e))}},_o={priority:Ur,bind:function(){if(this.arg){var e=this.id=u(this.arg),t=(this._scope||this.vm).$els;n(t,e)?t[e]=this.el:ke(t,e,this.el)}},unbind:function(){var e=(this._scope||this.vm).$els;e[this.id]===this.el&&(e[this.id]=null)}},ko={bind:function(){Ni("v-ref:"+this.arg+" must be used on a child component. Found on <"+this.el.tagName.toLowerCase()+">.",this.vm)}},Eo={bind:function(){var e=this.el;this.vm.$once("pre-hook:compiled",function(){e.removeAttribute("v-cloak")})}},To={text:Nr,html:Rr,for:Qr,if:Zr,show:eo,model:so,on:lo,bind:Co,el:_o,ref:ko,cloak:Eo},Ao={deep:!0,update:function(e){e?"string"==typeof e?this.setClass(e.trim().split(/\s+/)):this.setClass(yt(e)):this.cleanup()},setClass:function(e){this.cleanup(e);for(var t=0,n=e.length;t<n;t++){var i=e[t];i&&bt(this.el,i,K)}this.prevKeys=e},cleanup:function(e){var t=this.prevKeys;if(t)for(var n=t.length;n--;){var i=t[n];(!e||e.indexOf(i)<0)&&bt(this.el,i,Q)}}},So={priority:Vr,params:["keep-alive","transition-mode","inline-template"],bind:function(){this.el.__vue__?Ni('cannot mount component "'+this.expression+'" on already mounted element: '+this.el):(this.keepAlive=this.params.keepAlive,this.keepAlive&&(this.cache={}),this.params.inlineTemplate&&(this.inlineTemplate=Z(this.el,!0)),this.pendingComponentCb=this.Component=null,this.pendingRemovals=0,this.pendingRemovalCb=null,this.anchor=ie("v-component"),V(this.el,this.anchor),this.el.removeAttribute("is"),this.el.removeAttribute(":is"),this.descriptor.ref&&this.el.removeAttribute("v-ref:"+f(this.descriptor.ref)),this.literal&&this.setComponent(this.expression))},update:function(e){this.literal||this.setComponent(e)},setComponent:function(e,t){if(this.invalidatePending(),e){var n=this;this.resolveComponent(e,function(){n.mountComponent(t)})}else this.unbuild(!0),this.remove(this.childVM,t),this.childVM=null},resolveComponent:function(e,t){var n=this;this.pendingComponentCb=x(function(i){n.ComponentName=i.options.name||("string"==typeof e?e:null),n.Component=i,t()}),this.vm._resolveComponent(e,this.pendingComponentCb)},mountComponent:function(e){this.unbuild(!0);var t=this,n=this.Component.options.activate,i=this.getCached(),r=this.build();n&&!i?(this.waitingFor=r,wt(n,r,function(){t.waitingFor===r&&(t.waitingFor=null,t.transition(r,e))})):(i&&r._updateRef(),this.transition(r,e))},invalidatePending:function(){this.pendingComponentCb&&(this.pendingComponentCb.cancel(),this.pendingComponentCb=null)},build:function(e){var t=this.getCached();if(t)return t;if(this.Component){var n={name:this.ComponentName,el:Ye(this.el),template:this.inlineTemplate,parent:this._host||this.vm,_linkerCachable:!this.inlineTemplate,_ref:this.descriptor.ref,_asComponent:!0,_isRouterView:this._isRouterView,_context:this.vm,_scope:this._scope,_frag:this._frag};e&&v(n,e);var i=new this.Component(n);return this.keepAlive&&(this.cache[this.Component.cid]=i),this.el.hasAttribute("transition")&&i._isFragment&&Ni("Transitions will not work on a fragment instance. Template: "+i.$options.template,i),i}},getCached:function(){return this.keepAlive&&this.cache[this.Component.cid]},unbuild:function(e){this.waitingFor&&(this.keepAlive||this.waitingFor.$destroy(),this.waitingFor=null);var t=this.childVM;return!t||this.keepAlive?void(t&&(t._inactive=!0,t._updateRef(!0))):void t.$destroy(!1,e)},remove:function(e,t){var n=this.keepAlive;if(e){this.pendingRemovals++,this.pendingRemovalCb=t;var i=this;e.$remove(function(){i.pendingRemovals--,n||e._cleanup(),!i.pendingRemovals&&i.pendingRemovalCb&&(i.pendingRemovalCb(),i.pendingRemovalCb=null)})}else t&&t()},transition:function(e,t){var n=this,i=this.childVM;switch(i&&(i._inactive=!0),e._inactive=!1,this.childVM=e,n.params.transitionMode){case"in-out":e.$before(n.anchor,function(){n.remove(i,t)});break;case"out-in":n.remove(i,function(){e.$before(n.anchor,t)});break;default:n.remove(i),e.$before(n.anchor,t)}},unbind:function(){if(this.invalidatePending(),this.unbuild(),this.cache){for(var e in this.cache)this.cache[e].$destroy();this.cache=null}}},No=Si._propBindingModes,$o={},Oo=/^[$_a-zA-Z]+[\w$]*$/,jo=/^[A-Za-z_$][\w$]*(\.[A-Za-z_$][\w$]*|\[[^\[\]]+\])*$/,Do=Si._propBindingModes,Lo={bind:function(){var e=this.vm,t=e._context,n=this.descriptor.prop,i=n.path,r=n.parentPath,o=n.mode===Do.TWO_WAY,s=this.parentWatcher=new Ue(t,r,function(t){Et(e,n,t)},{twoWay:o,filters:n.filters,scope:this._scope});if(kt(e,n,s.value),o){var a=this;e.$once("pre-hook:created",function(){a.childWatcher=new Ue(e,i,function(e){s.set(e)},{sync:!0})})}},unbind:function(){this.parentWatcher.teardown(),this.childWatcher&&this.childWatcher.teardown()}},Po=[],Mo=!1,Ho="transition",Fo="animation",Ro=Jn+"Duration",Bo=Kn+"Duration",qo=Rn&&window.requestAnimationFrame,Io=qo?function(e){qo(function(){qo(e)})}:function(e){setTimeout(e,50)},Wo=Lt.prototype;Wo.enter=function(e,t){this.cancelPending(),this.callHook("beforeEnter"),this.cb=t,K(this.el,this.enterClass),e(),this.entered=!1,this.callHookWithCb("enter"),this.entered||(this.cancel=this.hooks&&this.hooks.enterCancelled,jt(this.enterNextTick))},Wo.enterNextTick=function(){var e=this;this.justEntered=!0,Io(function(){e.justEntered=!1});var t=this.enterDone,n=this.getCssTransitionType(this.enterClass);this.pendingJsCb?n===Ho&&Q(this.el,this.enterClass):n===Ho?(Q(this.el,this.enterClass),this.setupCssCb(Yn,t)):n===Fo?this.setupCssCb(Qn,t):t()},Wo.enterDone=function(){this.entered=!0,this.cancel=this.pendingJsCb=null,Q(this.el,this.enterClass),this.callHook("afterEnter"),this.cb&&this.cb()},Wo.leave=function(e,t){this.cancelPending(),this.callHook("beforeLeave"),this.op=e,this.cb=t,K(this.el,this.leaveClass),this.left=!1,this.callHookWithCb("leave"),this.left||(this.cancel=this.hooks&&this.hooks.leaveCancelled,this.op&&!this.pendingJsCb&&(this.justEntered?this.leaveDone():jt(this.leaveNextTick)))},Wo.leaveNextTick=function(){var e=this.getCssTransitionType(this.leaveClass);if(e){var t=e===Ho?Yn:Qn;this.setupCssCb(t,this.leaveDone)}else this.leaveDone()},Wo.leaveDone=function(){this.left=!0,this.cancel=this.pendingJsCb=null,this.op(),Q(this.el,this.leaveClass),this.callHook("afterLeave"),this.cb&&this.cb(),this.op=null},Wo.cancelPending=function(){this.op=this.cb=null;var e=!1;this.pendingCssCb&&(e=!0,G(this.el,this.pendingCssEvent,this.pendingCssCb),this.pendingCssEvent=this.pendingCssCb=null),this.pendingJsCb&&(e=!0,this.pendingJsCb.cancel(),this.pendingJsCb=null),e&&(Q(this.el,this.enterClass),Q(this.el,this.leaveClass)),this.cancel&&(this.cancel.call(this.vm,this.el),this.cancel=null)},Wo.callHook=function(e){this.hooks&&this.hooks[e]&&this.hooks[e].call(this.vm,this.el)},Wo.callHookWithCb=function(e){var t=this.hooks&&this.hooks[e];t&&(t.length>1&&(this.pendingJsCb=x(this[e+"Done"])),t.call(this.vm,this.el,this.pendingJsCb))},Wo.getCssTransitionType=function(e){if(!(!Yn||document.hidden||this.hooks&&this.hooks.css===!1||Pt(this.el))){var t=this.type||this.typeCache[e];if(t)return t;var n=this.el.style,i=window.getComputedStyle(this.el),r=n[Ro]||i[Ro];if(r&&"0s"!==r)t=Ho;else{var o=n[Bo]||i[Bo];o&&"0s"!==o&&(t=Fo)}return t&&(this.typeCache[e]=t),t}},Wo.setupCssCb=function(e,t){this.pendingCssEvent=e;var n=this,i=this.el,r=this.pendingCssCb=function(o){o.target===i&&(G(i,e,r),n.pendingCssEvent=n.pendingCssCb=null,!n.pendingJsCb&&t&&t())};X(i,e,r)};var zo={priority:zr,update:function(e,t){var n=this.el,i=ge(this.vm.$options,"transitions",e);e=e||"v",t=t||"v",n.__v_trans=new Lt(n,e,i,this.vm),Q(n,t+"-transition"),K(n,e+"-transition")}},Uo={style:vo,class:Ao,component:So,prop:Lo,transition:zo},Vo=/^v-bind:|^:/,Xo=/^v-on:|^@/,Go=/^v-([^:]+)(?:$|:(.*)$)/,Jo=/\.[^\.]+/g,Yo=/^(v-bind:|:)?transition$/,Ko=1e3,Qo=2e3;en.terminal=!0;var Zo=/[^\w\-:\.]/,es=Object.freeze({compile:Mt,compileAndLinkProps:qt,compileRoot:It,transclude:ln,resolveSlots:dn}),ts=/^v-on:|^@/;gn.prototype._bind=function(){var e=this.name,t=this.descriptor;if(("cloak"!==e||this.vm._isCompiled)&&this.el&&this.el.removeAttribute){var n=t.attr||"v-"+e;this.el.removeAttribute(n)}var i=t.def;if("function"==typeof i?this.update=i:v(this,i),this._setupParams(),this.bind&&this.bind(),this._bound=!0,this.literal)this.update&&this.update(t.raw);else if((this.expression||this.modifiers)&&(this.update||this.twoWay)&&!this._checkStatement()){var r=this;this.update?this._update=function(e,t){r._locked||r.update(e,t)}:this._update=mn;var o=this._preProcess?h(this._preProcess,this):null,s=this._postProcess?h(this._postProcess,this):null,a=this._watcher=new Ue(this.vm,this.expression,this._update,{filters:this.filters,twoWay:this.twoWay,deep:this.deep,preProcess:o,postProcess:s,scope:this._scope});this.afterBind?this.afterBind():this.update&&this.update(a.value)}},gn.prototype._setupParams=function(){if(this.params){var e=this.params;this.params=Object.create(null);for(var t,n,i,r=e.length;r--;)t=f(e[r]),i=u(t),n=B(this.el,t),null!=n?this._setupParamWatcher(i,n):(n=R(this.el,t),null!=n&&(this.params[i]=""===n||n))}},gn.prototype._setupParamWatcher=function(e,t){var n=this,i=!1,r=(this._scope||this.vm).$watch(t,function(t,r){if(n.params[e]=t,i){var o=n.paramWatchers&&n.paramWatchers[e];o&&o.call(n,t,r)}else i=!0},{immediate:!0,user:!1});(this._paramUnwatchFns||(this._paramUnwatchFns=[])).push(r)},gn.prototype._checkStatement=function(){var e=this.expression;if(e&&this.acceptStatement&&!Be(e)){var t=Re(e).get,n=this._scope||this.vm,i=function(e){n.$event=e,t.call(n,n),n.$event=null};return this.filters&&(i=n._applyFilters(i,null,this.filters)),this.update(i),!0}},gn.prototype.set=function(e){this.twoWay?this._withLock(function(){this._watcher.set(e)}):Ni("Directive.set() can only be used inside twoWaydirectives.")},gn.prototype._withLock=function(e){var t=this;t._locked=!0,e.call(t),ti(function(){t._locked=!1})},gn.prototype.on=function(e,t,n){X(this.el,e,t,n),(this._listeners||(this._listeners=[])).push([e,t])},gn.prototype._teardown=function(){if(this._bound){this._bound=!1,this.unbind&&this.unbind(),this._watcher&&this._watcher.teardown();var e,t=this._listeners;if(t)for(e=t.length;e--;)G(this.el,t[e][0],t[e][1]);var n=this._paramUnwatchFns;if(n)for(e=n.length;e--;)n[e]();this.el&&this.el._vue_directives.$remove(this),this.vm=this.el=this._watcher=this._listeners=null}};var ns=/[^|]\|[^|]/;Ee(kn),pn(kn),vn(kn),yn(kn),bn(kn),wn(kn),xn(kn),Cn(kn),_n(kn);var is={priority:Yr,params:["name"],bind:function(){var e=this.params.name||"default",t=this.vm._slotContents&&this.vm._slotContents[e];t&&t.hasChildNodes()?this.compile(t.cloneNode(!0),this.vm._context,this.vm):this.fallback()},compile:function(e,t,n){if(e&&t){if(this.el.hasChildNodes()&&1===e.childNodes.length&&1===e.childNodes[0].nodeType&&e.childNodes[0].hasAttribute("v-if")){var i=document.createElement("template");i.setAttribute("v-else",""),i.innerHTML=this.el.innerHTML,i._context=this.vm,e.appendChild(i)}var r=n?n._scope:this._scope;this.unlink=t.$compile(e,n,r,this._frag)}e?V(this.el,e):z(this.el)},fallback:function(){this.compile(Z(this.el,!0),this.vm)},unbind:function(){this.unlink&&this.unlink()}},rs={priority:Xr,params:["name"],paramWatchers:{name:function(e){Zr.remove.call(this),e&&this.insert(e)}},bind:function(){this.anchor=ie("v-partial"),V(this.el,this.anchor),this.insert(this.params.name)},insert:function(e){var t=ge(this.vm.$options,"partials",e,!0);t&&(this.factory=new ot(this.vm,t),Zr.insert.call(this))},unbind:function(){this.frag&&this.frag.destroy()}},os={slot:is,partial:rs},ss=Qr._postProcess,as=/(\d{3})(?=\d)/g,ls={orderBy:An,filterBy:Tn,limitBy:En,json:{read:function(e,t){return"string"==typeof e?e:JSON.stringify(e,null,arguments.length>1?t:2)},write:function(e){try{return JSON.parse(e)}catch(t){return e}}},capitalize:function(e){return e||0===e?(e=e.toString(),e.charAt(0).toUpperCase()+e.slice(1)):""},uppercase:function(e){return e||0===e?e.toString().toUpperCase():""},lowercase:function(e){return e||0===e?e.toString().toLowerCase():""},currency:function(e,t,n){if(e=parseFloat(e),!isFinite(e)||!e&&0!==e)return"";t=null!=t?t:"$",n=null!=n?n:2;var i=Math.abs(e).toFixed(n),r=n?i.slice(0,-1-n):i,o=r.length%3,s=o>0?r.slice(0,o)+(r.length>3?",":""):"",a=n?i.slice(-1-n):"",l=e<0?"-":"";return l+t+s+r.slice(o).replace(as,"$1,")+a},pluralize:function(e){var t=p(arguments,1),n=t.length;if(n>1){var i=e%10-1;return i in t?t[i]:t[n-1]}return t[0]+(1===e?"":"s")},debounce:function(e,t){if(e)return t||(t=300),b(e,t)}};return Nn(kn),kn.version="1.0.26",setTimeout(function(){Si.devtools&&(Bn?Bn.emit("init",kn):Rn&&/Chrome\/\d+/.test(window.navigator.userAgent)&&console.log("Download the Vue Devtools for a better development experience:\nhttps://github.com/vuejs/vue-devtools"))},0),kn});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJheGlvcy5taW4uanMiLCJlczYtcHJvbWlzZS5hdXRvLm1pbi5qcyIsImpxdWVyeS0xLjExLjIubWluLmpzIiwibW9kZXJuaXpyLTIuOC4zLm1pbi5qcyIsInBsdWdpbnMuanMiLCJyZW1vZGFsLm1pbi5qcyIsInN3ZWV0YWxlcnQyLTYuMi44Lm1pbi5qcyIsInVhLXBhcnNlci5taW4uanMiLCJ1cmwtc2VhcmNoLXBhcmFtcy5qcyIsInZ1ZS5qcyJdLCJuYW1lcyI6WyJpc0FuZHJvaWQiLCIkIiwidWEiLCJvcyIsIm5hbWUiLCJpc2lPUyIsImlzV2VjaGF0IiwiYnJvd3NlciIsImlzV2VpYm8iLCJ0ZXN0IiwiZGlnZ2VyIiwiZSIsInIiLCJ1bmVzY2FwZSIsIlIiLCJ0IiwibiIsImkiLCJhIiwiU3RyaW5nIiwibyIsInRlIiwibGVuZ3RoIiwidSIsInMiLCJEYXRlIiwic2V0VGltZSIsImdldFRpbWUiLCJJIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJmIiwiUmVnRXhwIiwiZXhlYyIsIl8iLCJjIiwiRiIsImNvb2tpZUVuYWJsZWQiLCJnZXRDb29raWVOYW1lIiwibCIsInBkZiIsInF0IiwicmVhbHAiLCJ3bWEiLCJkaXIiLCJmbGEiLCJqYXZhIiwiZ2VhcnMiLCJhZyIsIkwiLCJkZXZpY2VQaXhlbFJhdGlvIiwidXNlckFnZW50IiwibWltZVR5cGVzIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiTyIsImVuYWJsZWRQbHVnaW4iLCJuYXZpZ2F0b3IiLCJqYXZhRW5hYmxlZCIsIkdlYXJzRmFjdG9yeSIsInBhcnNlSW50IiwiVSIsIndpZHRoIiwiaGVpZ2h0IiwicmVzIiwiZCIsIkIiLCJwbGF0Zm9ybSIsIkpTT04iLCJzdHJpbmdpZnkiLCJNYXRoIiwicmFuZG9tIiwic2xpY2UiLCJnIiwiaCIsInRvU3RyaW5nIiwidiIsIm0iLCJwIiwiQSIsInkiLCJiIiwiY2hhckNvZGVBdCIsInB1c2giLCJ0b0xvd2VyQ2FzZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInR5cGUiLCJFIiwidG9wIiwiZG9jdW1lbnQiLCJyZWZlcnJlciIsInBhcmVudCIsIlEiLCJYIiwiTSIsImdldEl0ZW0iLCJ3Iiwic3Vic3RyaW5nIiwiayIsIkltYWdlIiwib25sb2FkIiwiUyIsInNyYyIsImluZGV4T2YiLCJDIiwid2luZG93IiwiRG1hbGxBbmFseXNpcyIsImNvbmZpZyIsIm92ZXJyaWRlUGFyYW1zIiwiTiIsInEiLCJ6IiwiWSIsIkoiLCJHIiwibG9jYXRpb24iLCJocmVmIiwibm93Iiwic3Vic3RyIiwiY29va2llX2lkIiwidXJsIiwiVVJMIiwicmVmZXJfdXJsIiwicGFnZVRpdGxlIiwieCIsInJlIiwicGFyYW1PcmRlciIsImRpc2FibGVEZWZhdWx0UGFyYW1zIiwiRCIsIlQiLCJQIiwiYWN0aW9uIiwiaiIsInBhZ2VWaWUiLCJaIiwiY3VycmVudFRhcmdldCIsInRhcmdldCIsImVlIiwiZXh0ZW5kUGFyYW1zIiwiY2xpY2siLCJWIiwiZXZlbnRUeXBlIiwic2VsZWN0b3JzIiwiY29uY2F0IiwibmUiLCJmaW5kIiwiY3VycmVudFRhcmdldHMiLCJwYWdlVmlldyIsImRvd25sb2FkIiwibGluayIsIkgiLCJzY3JlZW4iLCJsb2NhbFN0b3JhZ2UiLCJwZXJmb3JtYW5jZSIsIm1velBlcmZvcm1hbmNlIiwibXNQZXJmb3JtYW5jZSIsIndlYmtpdFBlcmZvcm1hbmNlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiSyIsImRpc2FibGVVVUlEIiwiZGlzYWJsZVBhZ2VWaWV3VHJhY2siLCJXIiwiZGlzYWJsZUF1dG9SZXBvcnQiLCJjb29raWVEb21haW4iLCJleHBpcmVEYXkiLCJjb29raWVQYXRoIiwidHJhY2tDb29raWVLZXlzIiwidHJhY2tMb2NhbFN0b3JhZ2VLZXlzIiwidHJhY2tlclVybE1hcCIsInRyYWNrZXJUaXRsZSIsInRpdGxlIiwiZXZlbnRDb25maWdBcnIiLCJzdHJpY3RNb2RlIiwiQXJyYXkiLCJpc0FycmF5IiwiaHRtbENvbGxlY3Rpb25Ub0FycmF5IiwicXVlcnlTZWxlY3RvckFsbCIsInRoaXMiLCJmaW5kTXVsdGlwbGUiLCJtYWtlTm9kZXNVbmlxdWUiLCJmaW5kTm9kZXNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNvcnQiLCJpbmRleE9mQXJyYXkiLCJzcGxpY2UiLCJnZXRBdHRyaWJ1dGVWYWx1ZUZyb21Ob2RlIiwiaGFzTm9kZUF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsImF0dHJpYnV0ZXMiLCJ2YWx1ZSIsIm5vZGVWYWx1ZSIsIm5vZGVOYW1lIiwiaGFzTm9kZUF0dHJpYnV0ZVdpdGhWYWx1ZSIsImhhc0F0dHJpYnV0ZSIsImhhc05vZGVDc3NDbGFzcyIsImNsYXNzTmFtZSIsInNwbGl0IiwiZmluZE5vZGVzSGF2aW5nQXR0cmlidXRlIiwiZ2V0Q2hpbGRyZW5Gcm9tTm9kZSIsImZpbmRGaXJzdE5vZGVIYXZpbmdBdHRyaWJ1dGUiLCJmaW5kRmlyc3ROb2RlSGF2aW5nQXR0cmlidXRlV2l0aFZhbHVlIiwiZmluZE5vZGVzSGF2aW5nQ3NzQ2xhc3MiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZmluZEZpcnN0Tm9kZUhhdmluZ0NsYXNzIiwiaXNMaW5rRWxlbWVudCIsInNldEFueUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImFzc2lnbiIsInNlbmRQYWdlVmlld1RyYWNrZXIiLCJzZXRPdmVycmlkZVBhcmFtcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJheGlvcyIsImlkIiwibG9hZGVkIiwicmVxdWVzdCIsImV4dGVuZCIsIkF4aW9zIiwiY3JlYXRlIiwibWVyZ2UiLCJDYW5jZWwiLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwiUHJvbWlzZSIsInNwcmVhZCIsImRlZmF1bHQiLCJGb3JtRGF0YSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwicGlwZSIsIlVSTFNlYXJjaFBhcmFtcyIsInJlcGxhY2UiLCJjcmVhdGVFbGVtZW50IiwiYXJndW1lbnRzIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGdW5jdGlvbiIsImlzU3RyZWFtIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsImZvckVhY2giLCJ0cmltIiwiYXBwbHkiLCJkZWZhdWx0cyIsImludGVyY2VwdG9ycyIsInJlc3BvbnNlIiwibWV0aG9kIiwiYmFzZVVSTCIsInJlc29sdmUiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJ0aGVuIiwic2hpZnQiLCJkYXRhIiwiWE1MSHR0cFJlcXVlc3QiLCJwcm9jZXNzIiwiQ29udGVudC1UeXBlIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwidGltZW91dCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJoZWFkZXJzIiwiY29tbW9uIiwiQWNjZXB0IiwidG9VcHBlckNhc2UiLCJidG9hIiwiYmluZCIsIlhEb21haW5SZXF1ZXN0Iiwib25wcm9ncmVzcyIsIm9udGltZW91dCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsIm9wZW4iLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVVJMIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJhYm9ydCIsInNlbmQiLCJFcnJvciIsImNvZGUiLCJ0b0lTT1N0cmluZyIsImpvaW4iLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJtZXNzYWdlIiwid3JpdGUiLCJtYXRjaCIsInJlbW92ZSIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJ0aHJvd0lmUmVxdWVzdGVkIiwicmVqZWN0IiwiX19DQU5DRUxfXyIsIlR5cGVFcnJvciIsInJlYXNvbiIsInNvdXJjZSIsInRva2VuIiwiY2FuY2VsIiwiRVM2UHJvbWlzZSIsIm5leHRUaWNrIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInBvc3RNZXNzYWdlIiwic2V0VGltZW91dCIsInJlcXVpcmUiLCJydW5Pbkxvb3AiLCJydW5PbkNvbnRleHQiLCJjb25zdHJ1Y3RvciIsImV0IiwiX3N0YXRlIiwiX3Jlc3VsdCIsIml0IiwiZXJyb3IiLCJfbGFiZWwiLCJydCIsIm90IiwiX29uZXJyb3IiLCJudCIsIl9zdWJzY3JpYmVycyIsInN0IiwidXQiLCJfaW5zdGFuY2VDb25zdHJ1Y3RvciIsIl9pbnB1dCIsIl9yZW1haW5pbmciLCJfZW51bWVyYXRlIiwiZ2xvYmFsIiwic2VsZiIsIkZ1bmN0aW9uIiwiY2FzdCIsInR0IiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJVaW50OENsYW1wZWRBcnJheSIsImltcG9ydFNjcmlwdHMiLCJfZWFjaEVudHJ5IiwiX3NldHRsZWRBdCIsIl93aWxsU2V0dGxlQXQiLCJyYWNlIiwiX3NldFNjaGVkdWxlciIsIl9zZXRBc2FwIiwiX2FzYXAiLCJjYXRjaCIsInBvbHlmaWxsIiwiaXNXaW5kb3ciLCJub2RlVHlwZSIsImdyZXAiLCJmaWx0ZXIiLCJpbkFycmF5IiwiZWFjaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImV2ZW50IiwicmVhZHkiLCJwYXJzZUpTT04iLCJpc0VtcHR5T2JqZWN0IiwiYWNjZXB0RGF0YSIsImV4cGFuZG8iLCJjYWNoZSIsInBvcCIsImd1aWQiLCJ0b0pTT04iLCJub29wIiwiY2FtZWxDYXNlIiwibWFwIiwiY2xlYW5EYXRhIiwiZGVsZXRlRXhwYW5kbyIsImFiIiwiYmIiLCJjYiIsImFjdGl2ZUVsZW1lbnQiLCJkYiIsImViIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInViIiwiY2hpbGROb2RlcyIsInZiIiwiZGVmYXVsdENoZWNrZWQiLCJjaGVja2VkIiwid2IiLCJmaXJzdENoaWxkIiwiYXBwZW5kQ2hpbGQiLCJvd25lckRvY3VtZW50IiwieGIiLCJhdHRyIiwieWIiLCJwYiIsInJlbW92ZUF0dHJpYnV0ZSIsInpiIiwiX2RhdGEiLCJBYiIsImhhc0RhdGEiLCJldmVudHMiLCJoYW5kbGUiLCJhZGQiLCJCYiIsIm5vQ2xvbmVFdmVudCIsInJlbW92ZUV2ZW50IiwidGV4dCIsInBhcmVudE5vZGUiLCJvdXRlckhUTUwiLCJodG1sNUNsb25lIiwiaW5uZXJIVE1MIiwiZGVmYXVsdFNlbGVjdGVkIiwic2VsZWN0ZWQiLCJkZWZhdWx0VmFsdWUiLCJFYiIsImFwcGVuZFRvIiwiYm9keSIsImdldERlZmF1bHRDb21wdXRlZFN0eWxlIiwiZGlzcGxheSIsImNzcyIsImRldGFjaCIsIkZiIiwiRGIiLCJDYiIsImRvY3VtZW50RWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJjb250ZW50RG9jdW1lbnQiLCJjbG9zZSIsIkxiIiwiZ2V0IiwiVWIiLCJUYiIsIlZiIiwic3R5bGUiLCJXYiIsIlBiIiwibWF4IiwiWGIiLCJZYiIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiSWIiLCJib3hTaXppbmciLCJKYiIsIkhiIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwYXJzZUZsb2F0IiwiWmIiLCJpbml0IiwiZmMiLCIkYiIsImdjIiwib3BhY2l0eSIsImhjIiwiZWMiLCJpYyIsInF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJ1bnF1ZXVlZCIsImVtcHR5IiwiZmlyZSIsImFsd2F5cyIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiaW5saW5lQmxvY2tOZWVkc0xheW91dCIsInpvb20iLCJzaHJpbmtXcmFwQmxvY2tzIiwiYWMiLCJoaWRkZW4iLCJzaG93IiwiZG9uZSIsImhpZGUiLCJfcmVtb3ZlRGF0YSIsInN0YXJ0IiwiZW5kIiwiamMiLCJjc3NIb29rcyIsImV4cGFuZCIsImtjIiwiZGMiLCJEZWZlcnJlZCIsImVsZW0iLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInR3ZWVucyIsInJ1biIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb3BzIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJjcmVhdGVUd2VlbiIsIlR3ZWVuIiwiZWFzaW5nIiwic3RvcCIsInJlamVjdFdpdGgiLCJmeCIsInRpbWVyIiwiYW5pbSIsInByb2dyZXNzIiwiY29tcGxldGUiLCJmYWlsIiwiTGMiLCJNYyIsImRhdGFUeXBlcyIsIkljIiwiTmMiLCJhamF4U2V0dGluZ3MiLCJmbGF0T3B0aW9ucyIsIk9jIiwiY29udGVudHMiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsIlBjIiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwiZGF0YVR5cGUiLCJzdGF0ZSIsIlZjIiwiUmMiLCJaYyIsIiRjIiwiQWN0aXZlWE9iamVjdCIsImRkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJmbiIsImpxdWVyeSIsInNlbGVjdG9yIiwidG9BcnJheSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJjb250ZXh0IiwiZmlyc3QiLCJlcSIsImxhc3QiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWFkeSIsImlzTnVtZXJpYyIsIm93bkxhc3QiLCJnbG9iYWxFdmFsIiwiZXhlY1NjcmlwdCIsImV2YWwiLCJtYWtlQXJyYXkiLCJwcm94eSIsInN1cHBvcnQiLCJnYiIsImdldEVsZW1lbnRCeUlkIiwicXNhIiwicmIiLCJoYiIsImNhY2hlTGVuZ3RoIiwiaWIiLCJqYiIsInJlbW92ZUNoaWxkIiwia2IiLCJhdHRySGFuZGxlIiwibGIiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwibWIiLCJuYiIsIm9iIiwicWIiLCJzYiIsInRiIiwicmVsYXRpdmUiLCJtYXRjaGVzIiwiVEFHIiwidW5pcXVlU29ydCIsIklEIiwiQ0xBU1MiLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwiZnJvbUNoYXJDb2RlIiwiZmIiLCJpc1hNTCIsInNldERvY3VtZW50IiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImdldEF0dHJpYnV0ZU5vZGUiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY29udGFpbnMiLCJzb3J0RGV0YWNoZWQiLCJzcGVjaWZpZWQiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsImdldFRleHQiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZVBzZXVkbyIsIj4iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJsYXN0Q2hpbGQiLCJwc2V1ZG9zIiwic2V0RmlsdGVycyIsIm5vdCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJyb290IiwiZm9jdXMiLCJoYXNGb2N1cyIsInRhYkluZGV4IiwiZW5hYmxlZCIsImRpc2FibGVkIiwic2VsZWN0ZWRJbmRleCIsImhlYWRlciIsImlucHV0IiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJudGgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0IiwiZXhwciIsInVuaXF1ZSIsImlzWE1MRG9jIiwiaXMiLCJwYXJzZUhUTUwiLCJjaGlsZHJlbiIsIm5leHQiLCJwcmV2Iiwic2libGluZyIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJzaWJsaW5ncyIsInJldmVyc2UiLCJDYWxsYmFja3MiLCJvbmNlIiwibWVtb3J5Iiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwiZmlyZWQiLCJub3RpZnkiLCJ3aGVuIiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwidHJpZ2dlckhhbmRsZXIiLCJvZmYiLCJmcmFtZUVsZW1lbnQiLCJkb1Njcm9sbCIsImNzc1RleHQiLCJub0RhdGEiLCJhcHBsZXQgIiwiZW1iZWQgIiwib2JqZWN0ICIsInJlbW92ZURhdGEiLCJkZXF1ZXVlIiwiY2xlYXJRdWV1ZSIsImFjY2VzcyIsImxlYWRpbmdXaGl0ZXNwYWNlIiwidGJvZHkiLCJodG1sU2VyaWFsaXplIiwiY2xvbmVOb2RlIiwiYXBwZW5kQ2hlY2tlZCIsIm5vQ2xvbmVDaGVja2VkIiwiY2hlY2tDbG9uZSIsImNoYW5nZSIsImZvY3VzaW4iLCJoYW5kbGVyIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJzcGVjaWFsIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJvcmlnVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsInRlYXJkb3duIiwidHJpZ2dlciIsIkV2ZW50IiwiaXNUcmlnZ2VyIiwibmFtZXNwYWNlX3JlIiwicmVzdWx0Iiwibm9CdWJibGUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiX2RlZmF1bHQiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJoYW5kbGVPYmoiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJmaXhIb29rcyIsIm1vdXNlSG9va3MiLCJrZXlIb29rcyIsInNyY0VsZW1lbnQiLCJtZXRhS2V5Iiwid2hpY2giLCJjaGFyQ29kZSIsImtleUNvZGUiLCJmcm9tRWxlbWVudCIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwicmVsYXRlZFRhcmdldCIsInRvRWxlbWVudCIsImxvYWQiLCJibHVyIiwiYmVmb3JldW5sb2FkIiwib3JpZ2luYWxFdmVudCIsInJldHVyblZhbHVlIiwic2ltdWxhdGUiLCJpc1NpbXVsYXRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJjYW5jZWxCdWJibGUiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInN1Ym1pdEJ1YmJsZXMiLCJmb3JtIiwiX3N1Ym1pdF9idWJibGUiLCJjaGFuZ2VCdWJibGVzIiwicHJvcGVydHlOYW1lIiwiX2p1c3RfY2hhbmdlZCIsImZvY3VzaW5CdWJibGVzIiwib24iLCJvbmUiLCJvcHRpb24iLCJsZWdlbmQiLCJhcmVhIiwicGFyYW0iLCJ0aGVhZCIsInRyIiwiY29sIiwidGQiLCJvcHRncm91cCIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJjbG9uZSIsImJ1aWxkRnJhZ21lbnQiLCJhcHBlbmQiLCJkb21NYW5pcCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsIm9wdGlvbnMiLCJodG1sIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJfZXZhbFVybCIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIkdiIiwiS2IiLCJnZXRDb21wdXRlZFN0eWxlIiwib3BlbmVyIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJjdXJyZW50U3R5bGUiLCJsZWZ0IiwicnVudGltZVN0eWxlIiwicGl4ZWxMZWZ0IiwibWFyZ2luUmlnaHQiLCJjc3NGbG9hdCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiTW96Qm94U2l6aW5nIiwiV2Via2l0Qm94U2l6aW5nIiwicmVsaWFibGVIaWRkZW5PZmZzZXRzIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luUmlnaHQiLCJzd2FwIiwiTWIiLCJOYiIsIk9iIiwiUWIiLCJSYiIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsIlNiIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NOdW1iZXIiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsImNzc1Byb3BzIiwiZmxvYXQiLCJzZXQiLCIkMSIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJ0b2dnbGUiLCJwcm9wIiwiY3VyIiwidW5pdCIsInByb3BIb29rcyIsInBvcyIsInN0ZXAiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiX2IiLCJiYyIsImNjIiwiKiIsIkFuaW1hdGlvbiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsInNwZWVkcyIsIm9sZCIsImZhZGVUbyIsImFuaW1hdGUiLCJmaW5pc2giLCJ0aW1lcnMiLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInRpY2siLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJjbGVhclRpbWVvdXQiLCJnZXRTZXRBdHRyaWJ1dGUiLCJocmVmTm9ybWFsaXplZCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsImVuY3R5cGUiLCJvcHREaXNhYmxlZCIsInJhZGlvVmFsdWUiLCJsYyIsInZhbCIsInZhbEhvb2tzIiwic2Nyb2xsSGVpZ2h0IiwibWMiLCJuYyIsIm9jIiwicGMiLCJxYyIsInJjIiwicmVtb3ZlQXR0ciIsImF0dHJIb29rcyIsInByb3BGaXgiLCJzZXRBdHRyaWJ1dGVOb2RlIiwiY3JlYXRlQXR0cmlidXRlIiwiY29vcmRzIiwiY29udGVudGVkaXRhYmxlIiwic2MiLCJ0YyIsInJlbW92ZVByb3AiLCJmb3IiLCJjbGFzcyIsInVjIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiaGFzQ2xhc3MiLCJob3ZlciIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsInZjIiwid2MiLCJ4YyIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiYXN5bmMiLCJsb2FkWE1MIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJKYyIsIktjIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsInhtbCIsImpzb24iLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsImlmTW9kaWZpZWQiLCJzdGF0dXNDb2RlIiwib3ZlcnJpZGVNaW1lVHlwZSIsInN1Y2Nlc3MiLCJjcm9zc0RvbWFpbiIsInRyYWRpdGlvbmFsIiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsIndyYXBJbm5lciIsIndyYXAiLCJ1bndyYXAiLCJ2aXNpYmxlIiwiUWMiLCJTYyIsIlRjIiwiVWMiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInhociIsIldjIiwiWGMiLCJZYyIsImNvcnMiLCJ4aHJGaWVsZHMiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJzY3JpcHQiLCJ0ZXh0IHNjcmlwdCIsImhlYWQiLCJzY3JpcHRDaGFyc2V0IiwiY2hhcnNldCIsIl9jIiwiYWQiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJiZCIsImFuaW1hdGVkIiwiY2QiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJ1c2luZyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiY29udGVudCIsIiIsInNpemUiLCJhbmRTZWxmIiwiZWQiLCJqUXVlcnkiLCJmZCIsIm5vQ29uZmxpY3QiLCJzbmlkIiwiZ2FtZWlkIiwiX2htdCIsInNlYXJjaFBhcmFtcyIsImNoYW5uZWxzIiwiZG93bmxvYWRVcmwiLCJjaGFubmVsSWQiLCJsZW4iLCJjaGFubmVsIiwiYW5kcm9pZFVybCIsIlZ1ZSIsImVsIiwiaW9zVXJsIiwiYmdPYmplY3QiLCJjcmVhdGVkIiwidGhhdCIsImhtIiwiYmFpZHVBbmFseXRpYyIsImJhY2tncm91bmQiLCJiZ0ltZyIsIm1ldGhvZHMiLCJhbmRyb2lkQ2xpY2siLCJpb3NDbGljayIsImNsb3NlVGlwIiwiX2RpZ2dlcl8iLCIvL2JpY29sbGVjdC5odWxhaS5jb206ODE4Mi9hcGkiLCJtZXRyaWMiLCJyZWZlcmVyIiwiYWN0IiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJldmVudF9mbGFnIiwiTW9kZXJuaXpyIiwibGlzdCIsIkhUTUxEYXRhTGlzdEVsZW1lbnQiLCJpbnB1dHR5cGVzIiwiV2Via2l0QXBwZWFyYW5jZSIsImNoZWNrVmFsaWRpdHkiLCJzdmciLCJtYXRjaE1lZGlhIiwibXNNYXRjaE1lZGlhIiwiZmxleGJveCIsImNhbnZhcyIsImdldENvbnRleHQiLCJjYW52YXN0ZXh0IiwiZmlsbFRleHQiLCJ3ZWJnbCIsIldlYkdMUmVuZGVyaW5nQ29udGV4dCIsInRvdWNoIiwiRG9jdW1lbnRUb3VjaCIsIm9mZnNldFRvcCIsImdlb2xvY2F0aW9uIiwicG9zdG1lc3NhZ2UiLCJ3ZWJzcWxkYXRhYmFzZSIsIm9wZW5EYXRhYmFzZSIsImluZGV4ZWREQiIsImhhc2hjaGFuZ2UiLCJkb2N1bWVudE1vZGUiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiZHJhZ2FuZGRyb3AiLCJ3ZWJzb2NrZXRzIiwicmdiYSIsImJhY2tncm91bmRDb2xvciIsImhzbGEiLCJtdWx0aXBsZWJncyIsImJhY2tncm91bmRzaXplIiwiYm9yZGVyaW1hZ2UiLCJib3JkZXJyYWRpdXMiLCJib3hzaGFkb3ciLCJ0ZXh0c2hhZG93IiwidGV4dFNoYWRvdyIsImNzc2FuaW1hdGlvbnMiLCJjc3Njb2x1bW5zIiwiY3NzZ3JhZGllbnRzIiwiYmFja2dyb3VuZEltYWdlIiwiY3NzcmVmbGVjdGlvbnMiLCJjc3N0cmFuc2Zvcm1zIiwiY3NzdHJhbnNmb3JtczNkIiwib2Zmc2V0TGVmdCIsImNzc3RyYW5zaXRpb25zIiwiZm9udGZhY2UiLCJzaGVldCIsInN0eWxlU2hlZXQiLCJjc3NSdWxlcyIsImdlbmVyYXRlZGNvbnRlbnQiLCJ2aWRlbyIsImNhblBsYXlUeXBlIiwiQm9vbGVhbiIsIm9nZyIsImgyNjQiLCJ3ZWJtIiwiYXVkaW8iLCJtcDMiLCJ3YXYiLCJtNGEiLCJsb2NhbHN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsInNlc3Npb25zdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2UiLCJ3ZWJ3b3JrZXJzIiwiV29ya2VyIiwiYXBwbGljYXRpb25jYWNoZSIsImFwcGxpY2F0aW9uQ2FjaGUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVTVkdSZWN0IiwiaW5saW5lc3ZnIiwibmFtZXNwYWNlVVJJIiwic21pbCIsInN2Z2NsaXBwYXRocyIsImFkZFRlc3QiLCJlbGVtZW50cyIsImNyZWF0ZUVsZW0iLCJjYW5IYXZlQ2hpbGRyZW4iLCJ0YWdVcm4iLCJmcmFnIiwiY3JlYXRlRnJhZyIsInNoaXZNZXRob2RzIiwic2hpdkNTUyIsImhhc0NTUyIsImh0bWw1IiwidmVyc2lvbiIsInN1cHBvcnRzVW5rbm93bkVsZW1lbnRzIiwic2hpdkRvY3VtZW50IiwiX3ZlcnNpb24iLCJfcHJlZml4ZXMiLCJfZG9tUHJlZml4ZXMiLCJfY3Nzb21QcmVmaXhlcyIsIm1xIiwiaGFzRXZlbnQiLCJ0ZXN0UHJvcCIsInRlc3RBbGxQcm9wcyIsInRlc3RTdHlsZXMiLCJwcmVmaXhlZCIsImluamVjdENzcyIsImluamVjdEpzIiwiZXJyb3JUaW1lb3V0IiwibG9hZGVyIiwiY3JlYXRlUmFuZ2UiLCJjb21wYXJlTm9kZSIsIm9wZXJhIiwib3JpZ1VybCIsInByZWZpeGVzIiwiYXV0b0NhbGxiYWNrIiwiYnlwYXNzIiwiaW5zdGVhZCIsIm5vZXhlYyIsImZvcmNlQ1NTIiwiZm9yY2VKUyIsImF0dHJzIiwiYm90aCIsImNhbGxiYWNrIiwieWVwIiwibm9wZSIsInllcG5vcGUiLCJhZGRQcmVmaXgiLCJhZGRGaWx0ZXIiLCJleGVjdXRlU3RhY2siLCJyZWwiLCJjb25zb2xlIiwiWmVwdG8iLCJOdW1iZXIiLCJORUdBVElWRV9JTkZJTklUWSIsIkNMT1NJTkciLCJPUEVOSU5HIiwiQ0xPU0VEIiwiT1BFTkVEIiwiJGJnIiwiJG92ZXJsYXkiLCIkd3JhcHBlciIsIiRtb2RhbCIsInNldHRpbmdzIiwibW9kaWZpZXIiLCJpc05hTiIsImxvb2t1cCIsImhhc2hUcmFja2luZyIsIkNBTkNFTExBVElPTiIsImNsb3NlT25DYW5jZWwiLCJDT05GSVJNQVRJT04iLCJjbG9zZU9uQ29uZmlybSIsImNsb3NlT25PdXRzaWRlQ2xpY2siLCJSRU1PREFMX0dMT0JBTFMiLCJOQU1FU1BBQ0UiLCJjbG9zZU9uRXNjYXBlIiwiREVGQVVMVFMiLCJhbmltYXRpb25OYW1lIiwiV2Via2l0QW5pbWF0aW9uTmFtZSIsIk1vekFuaW1hdGlvbk5hbWUiLCJtc0FuaW1hdGlvbk5hbWUiLCJPQW5pbWF0aW9uTmFtZSIsImdldFN0YXRlIiwiZGVzdHJveSIsIlN3ZWV0YWxlcnQyIiwidGl0bGVUZXh0IiwiY3VzdG9tQ2xhc3MiLCJhbmltYXRpb24iLCJhbGxvd091dHNpZGVDbGljayIsImFsbG93RXNjYXBlS2V5Iiwic2hvd0NvbmZpcm1CdXR0b24iLCJzaG93Q2FuY2VsQnV0dG9uIiwicHJlQ29uZmlybSIsImNvbmZpcm1CdXR0b25UZXh0IiwiY29uZmlybUJ1dHRvbkNvbG9yIiwiY29uZmlybUJ1dHRvbkNsYXNzIiwiY2FuY2VsQnV0dG9uVGV4dCIsImNhbmNlbEJ1dHRvbkNvbG9yIiwiY2FuY2VsQnV0dG9uQ2xhc3MiLCJidXR0b25zU3R5bGluZyIsInJldmVyc2VCdXR0b25zIiwiZm9jdXNDYW5jZWwiLCJzaG93Q2xvc2VCdXR0b24iLCJzaG93TG9hZGVyT25Db25maXJtIiwiaW1hZ2VVcmwiLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJpbWFnZUNsYXNzIiwiaW5wdXRQbGFjZWhvbGRlciIsImlucHV0VmFsdWUiLCJpbnB1dE9wdGlvbnMiLCJpbnB1dEF1dG9UcmltIiwiaW5wdXRDbGFzcyIsImlucHV0QXR0cmlidXRlcyIsImlucHV0VmFsaWRhdG9yIiwicHJvZ3Jlc3NTdGVwcyIsImN1cnJlbnRQcm9ncmVzc1N0ZXAiLCJwcm9ncmVzc1N0ZXBzRGlzdGFuY2UiLCJvbk9wZW4iLCJvbkNsb3NlIiwibW9kYWwiLCJwcm9ncmVzc3N0ZXBzIiwiaWNvbiIsInF1ZXN0aW9uIiwid2FybmluZyIsImluZm8iLCJyYW5nZSIsInRleHRhcmVhIiwidmFsaWRhdGlvbmVycm9yIiwic3BhY2VyIiwiY29uZmlybSIsImNvbnRhaW5lciIsInJvdW5kIiwibWluIiwicHJldmlvdXNXaW5kb3dLZXlEb3duIiwicHJldmlvdXNBY3RpdmVFbGVtZW50IiwicHJldmlvdXNCb2R5UGFkZGluZyIsInF1ZXJ5U2VsZWN0b3IiLCJvbmlucHV0IiwicmVzZXRWYWxpZGF0aW9uRXJyb3IiLCJvbmtleWRvd24iLCJjbGlja0NvbmZpcm0iLCJvbmNoYW5nZSIsInByZXZpb3VzU2libGluZyIsImNsYXNzTGlzdCIsImdldENsaWVudFJlY3RzIiwicmVtb3ZlUHJvcGVydHkiLCJNb3VzZUV2ZW50IiwidmlldyIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRXZlbnRPYmplY3QiLCJmaXJlRXZlbnQiLCJvbmNsaWNrIiwiV2Via2l0QW5pbWF0aW9uIiwiT0FuaW1hdGlvbiIsIm1zQW5pbWF0aW9uIiwiY2xpZW50V2lkdGgiLCJTeW1ib2wiLCJpdGVyYXRvciIsImtleSIsImFyZyIsIl9pbnZva2UiLCJyZXR1cm4iLCJhc3luY0l0ZXJhdG9yIiwidGhyb3ciLCJhd2FpdCIsIndhcm4iLCJnZXRRdWV1ZVN0ZXAiLCJwcm9ncmVzc2NpcmNsZSIsImFjdGl2ZXByb2dyZXNzc3RlcCIsInByb2dyZXNzbGluZSIsInN0eWxlZCIsImJvcmRlckxlZnRDb2xvciIsImJvcmRlclJpZ2h0Q29sb3IiLCJub2FuaW1hdGlvbiIsImZhZGUiLCJpbiIsImlubmVySGVpZ2h0IiwicGFkZGluZ1JpZ2h0IiwiTVNTdHJlYW0iLCJpb3NmaXgiLCJleHRyYVBhcmFtcyIsImNsb3NlTW9kYWwiLCJmaWxlcyIsInNob3dMb2FkaW5nIiwiaGlkZUxvYWRpbmciLCJzaG93VmFsaWRhdGlvbkVycm9yIiwiaXNWaXNpYmxlIiwiZGlzYWJsZUlucHV0IiwiZW5hYmxlSW5wdXQiLCJvbm1vdXNlb3ZlciIsIm9ubW91c2VvdXQiLCJvbm1vdXNlZG93biIsInNoaWZ0S2V5IiwiZW5hYmxlTG9hZGluZyIsImxvYWRpbmciLCJkaXNhYmxlTG9hZGluZyIsImVuYWJsZUJ1dHRvbnMiLCJkaXNhYmxlQnV0dG9ucyIsImVuYWJsZUNvbmZpcm1CdXR0b24iLCJkaXNhYmxlQ29uZmlybUJ1dHRvbiIsInJlY2FsY3VsYXRlSGVpZ2h0IiwibWluSGVpZ2h0IiwiaW5wdXRlcnJvciIsImdldFByb2dyZXNzU3RlcHMiLCJzZXRQcm9ncmVzc1N0ZXBzIiwic2hvd1Byb2dyZXNzU3RlcHMiLCJoaWRlUHJvZ3Jlc3NTdGVwcyIsInBsYWNlaG9sZGVyIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImluc2VydFF1ZXVlU3RlcCIsImRlbGV0ZVF1ZXVlU3RlcCIsImNsaWNrQ2FuY2VsIiwic2V0RGVmYXVsdHMiLCJyZXNldERlZmF1bHRzIiwic3dlZXRBbGVydCIsInN3YWwiLCJsb3dlcml6ZSIsIm1ham9yIiwicmd4IiwiZ2V0VUEiLCJzdHIiLCJvbGRzYWZhcmkiLCIxLjAiLCIxLjIiLCIxLjMiLCIyLjAiLCIyLjAuMiIsIjIuMC4zIiwiMi4wLjQiLCI/IiwiZGV2aWNlIiwiYW1hem9uIiwibW9kZWwiLCJGaXJlIFBob25lIiwic3ByaW50IiwiRXZvIFNoaWZ0IDRHIiwidmVuZG9yIiwiSFRDIiwiU3ByaW50Iiwid2luZG93cyIsIk1FIiwiTlQgMy4xMSIsIk5UIDQuMCIsIjIwMDAiLCJYUCIsIlZpc3RhIiwiNyIsIjgiLCI4LjEiLCIxMCIsIlJUIiwiY3B1IiwiZW5naW5lIiwiZ2V0QnJvd3NlciIsImdldENQVSIsImdldERldmljZSIsImdldEVuZ2luZSIsImdldE9TIiwiZ2V0UmVzdWx0Iiwic2V0VUEiLCJWRVJTSU9OIiwiQlJPV1NFUiIsIk5BTUUiLCJNQUpPUiIsIkNQVSIsIkFSQ0hJVEVDVFVSRSIsIkRFVklDRSIsIk1PREVMIiwiVkVORE9SIiwiVFlQRSIsIkNPTlNPTEUiLCJNT0JJTEUiLCJTTUFSVFRWIiwiVEFCTEVUIiwiV0VBUkFCTEUiLCJFTUJFRERFRCIsIkVOR0lORSIsIk9TIiwiVUFQYXJzZXIiLCIhIiwiJyIsIigiLCIpIiwiJTIwIiwiJTAwIiwiZGVsZXRlIiwiZ2V0QWxsIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImtleXMiLCJ1bmRlZmluZWQiLCJ2YWx1ZXMiLCJlbnRyaWVzIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfdXNwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3NlYXJjaFBhcmFtcyIsIkhUTUxBbmNob3JFbGVtZW50IiwiZmFjdG9yeSIsIm9iaiIsImhhc093biIsIl9pc1Z1ZSIsIl9fb2JfXyIsImNvbnZlcnQiLCJkZXAiLCJ2bXMiLCJ2bSIsIl9wcm94eSIsIl9kaWdlc3QiLCJkZWwiLCJfdW5wcm94eSIsImlzTGl0ZXJhbCIsImV4cCIsImxpdGVyYWxWYWx1ZVJFIiwiaXNSZXNlcnZlZCIsIl90b1N0cmluZyIsInRvTnVtYmVyIiwicGFyc2VkIiwidG9Cb29sZWFuIiwic3RyaXBRdW90ZXMiLCJjYW1lbGl6ZSIsImNhbWVsaXplUkUiLCJ0b1VwcGVyIiwiaHlwaGVuYXRlIiwiaHlwaGVuYXRlUkUiLCJjbGFzc2lmeSIsImNsYXNzaWZ5UkUiLCJjdHgiLCJyZXQiLCJ0byIsImZyb20iLCJPQkpFQ1RfU1RSSU5HIiwiZGVmIiwiZW51bWVyYWJsZSIsIl9kZWJvdW5jZSIsImZ1bmMiLCJ3YWl0IiwiYXJncyIsInRpbWVzdGFtcCIsImxhdGVyIiwiYXJyIiwiY2FuY2VsbGFibGUiLCJjYW5jZWxsZWQiLCJsb29zZUVxdWFsIiwiQ2FjaGUiLCJsaW1pdCIsInRhaWwiLCJfa2V5bWFwIiwicHVzaEZpbHRlciIsImxhc3RGaWx0ZXJJbmRleCIsInRva2VucyIsImZpbHRlclRva2VuUkUiLCJwcm9jZXNzRmlsdGVyQXJnIiwicmVzZXJ2ZWRBcmdSRSIsImR5bmFtaWMiLCJzdHJpcHBlZCIsInBhcnNlRGlyZWN0aXZlIiwiaGl0IiwiY2FjaGUkMSIsImluU2luZ2xlIiwiaW5Eb3VibGUiLCJjdXJseSIsInNxdWFyZSIsInBhcmVuIiwiZXhwcmVzc2lvbiIsInB1dCIsImVzY2FwZVJlZ2V4IiwicmVnZXhFc2NhcGVSRSIsImNvbXBpbGVSZWdleCIsImRlbGltaXRlcnMiLCJ1bnNhZmVPcGVuIiwidW5zYWZlRGVsaW1pdGVycyIsInVuc2FmZUNsb3NlIiwidGFnUkUiLCJodG1sUkUiLCJwYXJzZVRleHQiLCJvbmVUaW1lIiwibGFzdEluZGV4IiwidGFnIiwidG9rZW5zVG9FeHAiLCJmb3JtYXRUb2tlbiIsInNpbmdsZSIsIiRldmFsIiwiaW5saW5lRmlsdGVycyIsImZpbHRlclJFIiwiYXBwZW5kV2l0aFRyYW5zaXRpb24iLCJhcHBseVRyYW5zaXRpb24iLCJiZWZvcmVXaXRoVHJhbnNpdGlvbiIsInJlbW92ZVdpdGhUcmFuc2l0aW9uIiwiZGlyZWN0aW9uIiwib3AiLCJ0cmFuc2l0aW9uIiwiX192X3RyYW5zIiwiaG9va3MiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJfaXNDb21waWxlZCIsIiRwYXJlbnQiLCJxdWVyeSIsImluRG9jIiwibm9kZSIsImRvYyIsImdldEF0dHIiLCJfYXR0ciIsImdldEJpbmRBdHRyIiwiaGFzQmluZEF0dHIiLCJ1c2VDYXB0dXJlIiwiZ2V0Q2xhc3MiLCJjbGFzc25hbWUiLCJiYXNlVmFsIiwic2V0Q2xhc3MiLCJjbHMiLCJpc0lFOSIsInRhciIsImV4dHJhY3RDb250ZW50IiwiYXNGcmFnbWVudCIsImNoaWxkIiwicmF3Q29udGVudCIsImlzVGVtcGxhdGUiLCJpc0ZyYWdtZW50IiwiaGFzQ2hpbGROb2RlcyIsInRyaW1Ob2RlIiwiaXNUcmltbWFibGUiLCJ0YWdOYW1lIiwiY3JlYXRlQW5jaG9yIiwicGVyc2lzdCIsImFuY2hvciIsImRlYnVnIiwiX192X2FuY2hvciIsImZpbmRSZWYiLCJoYXNBdHRyaWJ1dGVzIiwicmVmUkUiLCJtYXBOb2RlUmFuZ2UiLCJyZW1vdmVOb2RlUmFuZ2UiLCJvblJlbW92ZWQiLCJyZW1vdmVkIiwibm9kZXMiLCJnZXRPdXRlckhUTUwiLCJjaGVja0NvbXBvbmVudEF0dHIiLCJoYXNBdHRycyIsImNvbW1vblRhZ1JFIiwicmVzZXJ2ZWRUYWdSRSIsImdldElzQmluZGluZyIsInJlc29sdmVBc3NldCIsImV4cGVjdGVkVGFnIiwiX2NvbXBvbmVudE5hbWVNYXAiLCJpc1Vua25vd25FbGVtZW50IiwibWVyZ2VEYXRhIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VBc3NldHMiLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsImd1YXJkQXJyYXlBc3NldHMiLCJndWFyZENvbXBvbmVudHMiLCJjb21wb25lbnRzIiwiaWRzIiwiZ3VhcmRQcm9wcyIsImFzc2V0cyIsImFzc2V0IiwibWVyZ2VPcHRpb25zIiwibWVyZ2VGaWVsZCIsInN0cmF0Iiwic3RyYXRzIiwiZGVmYXVsdFN0cmF0IiwicHJvcHNEYXRhIiwibWl4aW5zIiwibWl4aW4iLCJtaXhpbk9wdGlvbnMiLCJ3YXJuTWlzc2luZyIsImNhbWVsaXplZElkIiwiRGVwIiwidWlkJDEiLCJzdWJzIiwid2l0aG91dENvbnZlcnNpb24iLCJzaG91bGRDb252ZXJ0IiwiT2JzZXJ2ZXIiLCJhdWdtZW50IiwiaGFzUHJvdG8iLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsImFycmF5TWV0aG9kcyIsImFycmF5S2V5cyIsIm9ic2VydmVBcnJheSIsIndhbGsiLCJfX3Byb3RvX18iLCJpc0V4dGVuc2libGUiLCJhZGRWbSIsImRlZmluZVJlYWN0aXZlIiwicHJvcGVydHkiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kIiwibmV3VmFsIiwiaW5pdE1peGluIiwiX2luaXQiLCIkZWwiLCIkcm9vdCIsIiRjaGlsZHJlbiIsIiRyZWZzIiwiJGVscyIsIl93YXRjaGVycyIsIl9kaXJlY3RpdmVzIiwiX3VpZCIsInVpZCIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfaXNGcmFnbWVudCIsIl9mcmFnbWVudCIsIl9mcmFnbWVudFN0YXJ0IiwiX2ZyYWdtZW50RW5kIiwiX2lzRGVzdHJveWVkIiwiX2lzUmVhZHkiLCJfaXNBdHRhY2hlZCIsIl9pc0JlaW5nRGVzdHJveWVkIiwiX3ZGb3JSZW1vdmluZyIsIl91bmxpbmtGbiIsIl9jb250ZXh0IiwiX3Njb3BlIiwiX2ZyYWciLCIkb3B0aW9ucyIsIl91cGRhdGVSZWYiLCJfY2FsbEhvb2siLCJfaW5pdFN0YXRlIiwiX2luaXRFdmVudHMiLCIkbW91bnQiLCJnZXRQYXRoQ2hhclR5cGUiLCJjaCIsImZvcm1hdFN1YlBhdGgiLCJwYXRoIiwidHJpbW1lZCIsIm1heWJlVW5lc2NhcGVRdW90ZSIsIm5leHRDaGFyIiwibW9kZSIsIklOX1NJTkdMRV9RVU9URSIsIklOX0RPVUJMRV9RVU9URSIsIm5ld0NoYXIiLCJhY3Rpb25zIiwiQVBQRU5EIiwidHlwZU1hcCIsIkJFRk9SRV9QQVRIIiwic3ViUGF0aERlcHRoIiwiUFVTSCIsIklOQ19TVUJfUEFUSF9ERVBUSCIsIlBVU0hfU1VCX1BBVEgiLCJJTl9TVUJfUEFUSCIsInBhdGhTdGF0ZU1hY2hpbmUiLCJFUlJPUiIsIkFGVEVSX1BBVEgiLCJyYXciLCJwYXJzZVBhdGgiLCJwYXRoQ2FjaGUiLCJnZXRQYXRoIiwicGFyc2VFeHByZXNzaW9uIiwic2V0UGF0aCIsIm9yaWdpbmFsIiwid2Fybk5vbkV4aXN0ZW50IiwiJHNldCIsInNhdmUiLCJzYXZlZCIsIm5ld2xpbmVSRSIsInJld3JpdGUiLCJhbGxvd2VkS2V5d29yZHNSRSIsInJlc3RvcmVSRSIsInJlc3RvcmUiLCJjb21waWxlR2V0dGVyIiwiaW1wcm9wZXJLZXl3b3Jkc1JFIiwic2F2ZVJFIiwid3NSRSIsImlkZW50UkUiLCJtYWtlR2V0dGVyRm4iLCJjb21waWxlU2V0dGVyIiwic2NvcGUiLCJuZWVkU2V0IiwiZXhwcmVzc2lvbkNhY2hlIiwiaXNTaW1wbGVQYXRoIiwicGF0aFRlc3RSRSIsImxpdGVyYWxWYWx1ZVJFJDEiLCJyZXNldEJhdGNoZXJTdGF0ZSIsInVzZXJRdWV1ZSIsImNpcmN1bGFyIiwid2FpdGluZyIsImZsdXNoQmF0Y2hlclF1ZXVlIiwiX2FnYWluIiwicnVuQmF0Y2hlclF1ZXVlIiwiZGV2dG9vbHMiLCJlbWl0Iiwid2F0Y2hlciIsIl9tYXhVcGRhdGVDb3VudCIsInB1c2hXYXRjaGVyIiwidXNlciIsIldhdGNoZXIiLCJleHBPckZuIiwiaXNGbiIsInVpZCQyIiwiZGlydHkiLCJsYXp5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJfU2V0IiwibmV3RGVwSWRzIiwicHJldkVycm9yIiwidHdvV2F5IiwicXVldWVkIiwic2hhbGxvdyIsInRyYXZlcnNlIiwic2VlbiIsInNlZW5PYmplY3RzIiwiY2xlYXIiLCJpc0EiLCJpc08iLCJkZXBJZCIsImlzUmVhbFRlbXBsYXRlIiwic3RyaW5nVG9GcmFnbWVudCIsInRlbXBsYXRlU3RyaW5nIiwiY2FjaGVLZXkiLCJ0ZW1wbGF0ZUNhY2hlIiwidGFnTWF0Y2giLCJ0YWdSRSQxIiwiZW50aXR5TWF0Y2giLCJlbnRpdHlSRSIsImNvbW1lbnRNYXRjaCIsImNvbW1lbnRSRSIsImVmYXVsdCIsImRlcHRoIiwicHJlZml4Iiwic3VmZml4Iiwibm9kZVRvRnJhZ21lbnQiLCJjbG9uZWROb2RlIiwiY2xvbmVkIiwiaGFzQnJva2VuVGVtcGxhdGUiLCJ0ZW1wQ2xvbmUiLCJoYXNUZXh0YXJlYUNsb25lQnVnIiwicGFyc2VUZW1wbGF0ZSIsInRlbXBsYXRlIiwic2hvdWxkQ2xvbmUiLCJpZFNlbGVjdG9yQ2FjaGUiLCJGcmFnbWVudCIsImxpbmtlciIsInBhcmVudEZyYWciLCJjaGlsZEZyYWdzIiwiaW5zZXJ0ZWQiLCJ1bmxpbmsiLCJzaW5nbGVCZWZvcmUiLCJzaW5nbGVSZW1vdmUiLCJtdWx0aUJlZm9yZSIsIm11bHRpUmVtb3ZlIiwiX192X2ZyYWciLCJ3aXRoVHJhbnNpdGlvbiIsImNhbGxIb29rIiwiYXR0YWNoIiwic2hvdWxkQ2FsbFJlbW92ZSIsImJlZm9yZVJlbW92ZSIsIkZyYWdtZW50RmFjdG9yeSIsImNpZCIsImNhY2hlSWQiLCJsaW5rZXJDYWNoZSIsImZpbmRQcmV2RnJhZyIsImZvcklkIiwiZmluZFZtRnJvbUZyYWciLCJfX3Z1ZV9fIiwiZmxvb3IiLCJnZXRUcmFja0J5S2V5IiwidHJhY2tCeUtleSIsImdldFZhbHVlIiwibXVsdGkiLCJfdmFsdWUiLCJpbmRleE9mJDEiLCJrZXlGaWx0ZXIiLCJjb2RlcyIsImtleUNvZGVzIiwic3RvcEZpbHRlciIsInByZXZlbnRGaWx0ZXIiLCJzZWxmRmlsdGVyIiwibm9ybWFsaXplIiwicHJvcENhY2hlIiwiY2FtZWwiLCJ1cHBlciIsInRlc3RFbCIsImtlYmFiIiwiY2FtZWxQcmVmaXhlcyIsIm5vcm1hbGl6ZSQxIiwiX2tleSIsImNhbGxBY3RpdmF0ZUhvb2tzIiwiY2FsbGVkIiwidG90YWwiLCJjb21waWxlUHJvcHMiLCJwcm9wT3B0aW9ucyIsIm5hbWVzIiwiaWRlbnRSRSQxIiwicHJvcEJpbmRpbmdNb2RlcyIsIk9ORV9XQVkiLCJUV09fV0FZIiwiT05FX1RJTUUiLCJvcHRpbWl6ZWRMaXRlcmFsIiwic2V0dGFibGVQYXRoUkUiLCJwYXJlbnRQYXRoIiwibG93ZXJDYXNlTmFtZSIsInJlcXVpcmVkIiwibWFrZVByb3BzTGlua0ZuIiwiX3Byb3BzIiwiaW5saW5lUHJvcHMiLCJpbml0UHJvcCIsIiRnZXQiLCJfYmluZERpciIsInByb3BEZWYiLCJwcm9jZXNzUHJvcFZhbHVlIiwicmF3VmFsdWUiLCJpc1NpbXBsZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJjb2VyY2VQcm9wIiwiY29lcmNlZCIsImFzc2VydFByb3AiLCJ1cGRhdGVQcm9wIiwidmFsaWQiLCJleHBlY3RlZFR5cGVzIiwiYXNzZXJ0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsImV4cGVjdGVkVHlwZSIsImZvcm1hdFR5cGUiLCJmb3JtYXRWYWx1ZSIsInZhbGlkYXRvciIsImNvZXJjZSIsInB1c2hKb2IiLCJqb2IiLCJxdWV1ZSQxIiwiZmx1c2giLCJUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImxlYXZlQ2xhc3MiLCJwZW5kaW5nQ3NzRXZlbnQiLCJwZW5kaW5nQ3NzQ2IiLCJwZW5kaW5nSnNDYiIsImp1c3RFbnRlcmVkIiwiZW50ZXJlZCIsInR5cGVDYWNoZSIsIlRZUEVfVFJBTlNJVElPTiIsIlRZUEVfQU5JTUFUSU9OIiwiaXNIaWRkZW4iLCJyZWN0IiwicGFydGlhbCIsIm5vZGVMaW5rRm4iLCJfYXNDb21wb25lbnQiLCJjb21waWxlTm9kZSIsImNoaWxkTGlua0ZuIiwidGVybWluYWwiLCJpc1NjcmlwdCIsImNvbXBpbGVOb2RlTGlzdCIsImRpcnMiLCJsaW5rQW5kQ2FwdHVyZSIsIm1ha2VVbmxpbmtGbiIsIm9yaWdpbmFsRGlyQ291bnQiLCJkaXJlY3RpdmVDb21wYXJhdG9yIiwiX2JpbmQiLCJkZXNjcmlwdG9yIiwicHJpb3JpdHkiLCJERUZBVUxUX1BSSU9SSVRZIiwiY29udGV4dERpcnMiLCJkZXN0cm95aW5nIiwidGVhcmRvd25EaXJzIiwiX3RlYXJkb3duIiwiJHJlbW92ZSIsImNvbXBpbGVBbmRMaW5rUHJvcHMiLCJwcm9wc0xpbmtGbiIsInByb3BEaXJzIiwiY29tcGlsZVJvb3QiLCJjb250ZXh0T3B0aW9ucyIsImNvbnRleHRMaW5rRm4iLCJyZXBsYWNlckxpbmtGbiIsImNvbnRhaW5lckF0dHJzIiwiX2NvbnRhaW5lckF0dHJzIiwicmVwbGFjZXJBdHRycyIsIl9yZXBsYWNlckF0dHJzIiwiY29tcGlsZURpcmVjdGl2ZXMiLCJvblJFIiwicGx1cmFsIiwic2VsZkRpcnMiLCJjb21waWxlVGV4dE5vZGUiLCJjb21waWxlRWxlbWVudCIsImxpbmtGbiIsImNoZWNrVGVybWluYWxEaXJlY3RpdmVzIiwiY2hlY2tFbGVtZW50RGlyZWN0aXZlcyIsImNoZWNrQ29tcG9uZW50IiwiX3NraXAiLCJyZW1vdmVUZXh0Iiwid2hvbGVUZXh0IiwicHJvY2Vzc1RleHRUb2tlbiIsIm1ha2VUZXh0Tm9kZUxpbmtGbiIsInNldFRva2VuVHlwZSIsImRpcmVjdGl2ZXMiLCJmcmFnQ2xvbmUiLCJub2RlTGlzdCIsImxpbmtGbnMiLCJtYWtlQ2hpbGRMaW5rRm4iLCJjaGlsZHJlbkxpbmtGbiIsIm1ha2VUZXJtaW5hbE5vZGVMaW5rRm4iLCJjb21wb25lbnQiLCJyZWYiLCJpbnRlcm5hbERpcmVjdGl2ZXMiLCJtb2RpZmllcnMiLCJsaXRlcmFsIiwiY29tcG9uZW50TGlua0ZuIiwic2tpcCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJtYXRjaGVkIiwiZGlyTmFtZSIsInJhd05hbWUiLCJ0ZXJtRGVmIiwibW9kaWZpZXJSRSIsImRpckF0dHJSRSIsIkRFRkFVTFRfVEVSTUlOQUxfUFJJT1JJVFkiLCJwYXJzZU1vZGlmaWVycyIsInB1c2hEaXIiLCJpbnRlcnBUb2tlbnMiLCJoYXNPbmVUaW1lVG9rZW4iLCJoYXNPbmVUaW1lIiwiaW50ZXJwIiwiZGlyRGVmIiwic29tZSIsInRyYW5zaXRpb25SRSIsImJpbmRSRSIsIm1ha2VOb2RlTGlua0ZuIiwidHJhbnNjbHVkZSIsImV4dHJhY3RBdHRycyIsIl9jb250ZW50IiwidHJhbnNjbHVkZVRlbXBsYXRlIiwicmVwbGFjZXIiLCJtZXJnZUF0dHJzIiwic3BlY2lhbENoYXJSRSIsInJlc29sdmVTbG90cyIsIl9zbG90Q29udGVudHMiLCJleHRyYWN0RnJhZ21lbnQiLCJzdGF0ZU1peGluIiwibWFrZUNvbXB1dGVkR2V0dGVyIiwib3duZXIiLCJldmFsdWF0ZSIsIm5ld0RhdGEiLCJfc2V0RGF0YSIsIl9pbml0UHJvcHMiLCJfaW5pdE1ldGEiLCJfaW5pdE1ldGhvZHMiLCJfaW5pdERhdGEiLCJfaW5pdENvbXB1dGVkIiwiX3Byb3BzVW5saW5rRm4iLCJkYXRhRm4iLCJvbGREYXRhIiwicmVtb3ZlVm0iLCJ1cGRhdGUiLCJjb21wdXRlZCIsInVzZXJEZWYiLCJtZXRhcyIsIl9tZXRhIiwiZXZlbnRzTWl4aW4iLCJyZWdpc3RlckNvbXBvbmVudEV2ZW50cyIsImV2ZW50UkUiLCJfZnJvbVBhcmVudCIsIiRvbiIsInJlZ2lzdGVyQ2FsbGJhY2tzIiwicmVnaXN0ZXIiLCJvbkF0dGFjaGVkIiwiY2FsbEF0dGFjaCIsIm9uRGV0YWNoZWQiLCJjYWxsRGV0YWNoIiwid2F0Y2giLCJfaW5pdERPTUhvb2tzIiwiaG9vayIsIiRlbWl0Iiwibm9vcCQxIiwiRGlyZWN0aXZlIiwiX2xvY2tlZCIsIl9ib3VuZCIsIl9saXN0ZW5lcnMiLCJfaG9zdCIsIl92dWVfZGlyZWN0aXZlcyIsImxpZmVjeWNsZU1peGluIiwiX3JlZiIsInJlZnMiLCJfY29tcGlsZSIsIl9pbml0RWxlbWVudCIsInJvb3RMaW5rZXIiLCJjb250ZW50TGlua0ZuIiwiY3RvciIsIl9saW5rZXJDYWNoYWJsZSIsInJvb3RVbmxpbmtGbiIsImNvbnRlbnRVbmxpbmtGbiIsIl9kZXN0cm95IiwiZGVmZXJDbGVhbnVwIiwiX2NsZWFudXAiLCJkZXN0cm95UmVhZHkiLCJwZW5kaW5nUmVtb3ZhbCIsImNsZWFudXBJZlBvc3NpYmxlIiwiJGRlc3Ryb3kiLCIkb2ZmIiwibWlzY01peGluIiwiX2FwcGx5RmlsdGVycyIsIm9sZFZhbHVlIiwiX3Jlc29sdmVDb21wb25lbnQiLCJyZXNvbHZlZCIsInJlcXVlc3RlZCIsInBlbmRpbmdDYWxsYmFja3MiLCJjYnMiLCJkYXRhQVBJIiwiY2xlYW4iLCJhc1N0YXRlbWVudCIsIiRhcmd1bWVudHMiLCIkZGVsZXRlIiwiJHdhdGNoIiwiZGVlcCIsInN5bmMiLCJpbW1lZGlhdGUiLCJmaWx0ZXJSRSQxIiwiJGludGVycG9sYXRlIiwiJGxvZyIsImxvZyIsImRvbUFQSSIsImluc2VydCIsIm9wMSIsIm9wMiIsInRhcmdldElzRGV0YWNoZWQiLCJzaG91bGRDYWxsSG9vayIsImJlZm9yZVdpdGhDYiIsInJlbW92ZVdpdGhDYiIsIiRuZXh0VGljayIsIiRhcHBlbmRUbyIsIiRwcmVwZW5kVG8iLCIkYmVmb3JlIiwiJGFmdGVyIiwiaW5Eb2N1bWVudCIsInJlYWxDYiIsImV2ZW50c0FQSSIsIm1vZGlmeUxpc3RlbmVyQ291bnQiLCJjb3VudCIsImhvb2tSRSIsIiRvbmNlIiwiaXNTb3VyY2UiLCJzaG91bGRQcm9wYWdhdGUiLCJoYXNQYXJlbnRDYnMiLCIkYnJvYWRjYXN0IiwiJGRpc3BhdGNoIiwibGlmZWN5Y2xlQVBJIiwiJGNvbXBpbGUiLCJsaW1pdEJ5IiwiZmlsdGVyQnkiLCJkZWxpbWl0ZXIiLCJjb252ZXJ0QXJyYXkiLCJpdGVtIiwiJHZhbHVlIiwiJGtleSIsIm9yZGVyQnkiLCJiYXNlQ29tcGFyZSIsInNvcnRLZXlJbmRleCIsInNvcnRLZXkiLCJzb3J0S2V5cyIsImNvbXBhcmF0b3IiLCJmaXJzdEFyZyIsImluc3RhbGxHbG9iYWxBUEkiLCJjcmVhdGVDbGFzcyIsImVsZW1lbnREaXJlY3RpdmVzIiwidHJhbnNpdGlvbnMiLCJwYXJ0aWFscyIsInV0aWwiLCJjb21waWxlciIsInBhcnNlcnMiLCJkaXJlY3RpdmUiLCJleHRlbmRPcHRpb25zIiwiU3VwZXIiLCJpc0ZpcnN0RXh0ZW5kIiwiX0N0b3IiLCJTdWIiLCJfYXNzZXRUeXBlcyIsInBsdWdpbiIsImluc3RhbGxlZCIsImluc3RhbGwiLCJkZWZpbml0aW9uIiwiaW5Ccm93c2VyIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIlVBIiwiaXNJRSIsImlzSW9zIiwiaW9zVmVyc2lvbk1hdGNoIiwiaW9zVmVyc2lvbiIsImhhc011dGF0aW9uT2JzZXJ2ZXJCdWciLCJ0cmFuc2l0aW9uUHJvcCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsImlzV2Via2l0VHJhbnMiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJpc1dlYmtpdEFuaW0iLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwibmV4dFRpY2tIYW5kbGVyIiwicGVuZGluZyIsImNvcGllcyIsImNhbGxiYWNrcyIsInRpbWVyRnVuYyIsInNldEltbWVkaWF0ZSIsImNvdW50ZXIiLCJvYnNlcnZlciIsInRleHROb2RlIiwiU2V0IiwiZW50cnkiLCJuZXdlciIsIm9sZGVyIiwicmV0dXJuRW50cnkiLCJmcmVlemUiLCJzaWxlbnQiLCJ3YXJuRXhwcmVzc2lvbkVycm9ycyIsIl9kZWxpbWl0ZXJzQ2hhbmdlZCIsIl9wcm9wQmluZGluZ01vZGVzIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsImhhc0NvbnNvbGUiLCJtc2ciLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwiYXR0YWNoZWQiLCJkZXRhY2hlZCIsImJlZm9yZUNvbXBpbGUiLCJjb21waWxlZCIsImJlZm9yZURlc3Ryb3kiLCJkZXN0cm95ZWQiLCJhY3RpdmF0ZSIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImFkZERlcCIsImFycmF5UHJvdG8iLCJpdGVtcyIsImRlYm91bmNlIiwiSU5fUEFUSCIsIkJFRk9SRV9JREVOVCIsIklOX0lERU5UIiwid3MiLCJpZGVudCIsIlsiLCJlb2YiLCIuIiwiMCIsIm51bWJlciIsIlwiIiwiXSIsImVsc2UiLCJhbGxvd2VkS2V5d29yZHMiLCJpbXByb3BlcktleXdvcmRzIiwiYmVmb3JlR2V0IiwicHJlUHJvY2VzcyIsInBvc3RQcm9jZXNzIiwiYWZ0ZXJHZXQiLCJmb3JDb250ZXh0IiwiJGZvckNvbnRleHQiLCJhbGlhcyIsIl93aXRoTG9jayIsIiRpbmRleCIsInRtcCIsImN1cnJlbnQiLCJ0ZXh0JDEiLCJkZWZzIiwic3ltYm9sIiwiY2lyY2xlIiwiZWxsaXBzZSIsImxpbmUiLCJwb2x5Z29uIiwicG9seWxpbmUiLCJfd2F0Y2hlciIsIk9OIiwiQklORCIsIlRSQU5TSVRJT04iLCJFTCIsIkNPTVBPTkVOVCIsIlBBUlRJQUwiLCJJRiIsIkZPUiIsIlNMT1QiLCJ1aWQkMyIsInZGb3IiLCJpbk1hdGNoIiwiaXRNYXRjaCIsImlzT3B0aW9uIiwiZGlmZiIsInVwZGF0ZVJlZiIsInVwZGF0ZU1vZGVsIiwicHJpbWl0aXZlIiwiY29udmVydGVkRnJvbU9iamVjdCIsImZyb21PYmplY3QiLCJ0cmFja0J5Iiwib2xkRnJhZ3MiLCJmcmFncyIsImdldENhY2hlZEZyYWciLCJyZXVzZWQiLCJmcmVzaCIsInJlbW92YWxJbmRleCIsInRvdGFsUmVtb3ZlZCIsImRlbGV0ZUNhY2hlZEZyYWciLCJ0YXJnZXRQcmV2IiwicHJldkVsIiwiY3VycmVudFByZXYiLCJpbnNlcnRpb25JbmRleCIsInN0YWdnZXJDYiIsInN0YWdnZXJBbmNob3IiLCJtb3ZlIiwicGFyZW50U2NvcGUiLCJjYWNoZUZyYWciLCJfX3ZfbW9kZWwiLCJmb3JjZVVwZGF0ZSIsInN0YWdnZXJBbW91bnQiLCJnZXRTdGFnZ2VyIiwid2FybkR1cGxpY2F0ZSIsInRyYW5zIiwic3RhZ2dlciIsIl9wcmVQcm9jZXNzIiwiX3Bvc3RQcm9jZXNzIiwidklmIiwiaW52YWxpZCIsIm5leHRFbGVtZW50U2libGluZyIsImVsc2VFbCIsImVsc2VGcmFnIiwiZWxzZUZhY3RvcnkiLCJ0ZXh0JDIiLCJpc1JhbmdlIiwiY29tcG9zaW5nIiwibGlzdGVuZXIiLCJmb2N1c2VkIiwicmF3TGlzdGVuZXIiLCJoYXNqUXVlcnkiLCJhZnRlckJpbmQiLCJfdGhpcyIsIm11bHRpcGxlIiwiaW5pdFZhbHVlIiwiZ2V0Qm9vbGVhblZhbHVlIiwiX3RydWVWYWx1ZSIsIl9mYWxzZVZhbHVlIiwiY2hlY2tGaWx0ZXJzIiwiaGFzUmVhZCIsImhhc1dyaXRlIiwiX3VuYmluZCIsImVzYyIsInRhYiIsImVudGVyIiwic3BhY2UiLCJ1cCIsInJpZ2h0IiwiZG93biIsIm9uJDEiLCJhY2NlcHRTdGF0ZW1lbnQiLCJpZnJhbWVCaW5kIiwiY2FwdHVyZSIsInByZXZlbnQiLCJpbXBvcnRhbnRSRSIsImhhbmRsZU9iamVjdCIsInJlZHVjZSIsImhhbmRsZVNpbmdsZSIsImlzSW1wb3J0YW50Iiwic2V0UHJvcGVydHkiLCJ4bGlua05TIiwieGxpbmtSRSIsImRpc2FsbG93ZWRJbnRlcnBBdHRyUkUiLCJhdHRyV2l0aFByb3BzUkUiLCJlbnVtZXJhdGVkQXR0clJFIiwibW9kZWxQcm9wcyIsInRydWUtdmFsdWUiLCJmYWxzZS12YWx1ZSIsImJpbmQkMSIsImF0dHJWYWx1ZSIsIm1vZGVsUHJvcCIsInNldEF0dHJpYnV0ZU5TIiwiY2xvYWsiLCJpZiIsInZDbGFzcyIsImNsZWFudXAiLCJwcmV2S2V5cyIsImtlZXBBbGl2ZSIsImlubGluZVRlbXBsYXRlIiwicGVuZGluZ0NvbXBvbmVudENiIiwiQ29tcG9uZW50IiwicGVuZGluZ1JlbW92YWxzIiwicGVuZGluZ1JlbW92YWxDYiIsInNldENvbXBvbmVudCIsImludmFsaWRhdGVQZW5kaW5nIiwicmVzb2x2ZUNvbXBvbmVudCIsIm1vdW50Q29tcG9uZW50IiwidW5idWlsZCIsImNoaWxkVk0iLCJDb21wb25lbnROYW1lIiwiYWN0aXZhdGVIb29rcyIsImNhY2hlZCIsImdldENhY2hlZCIsIm5ld0NvbXBvbmVudCIsImJ1aWxkIiwid2FpdGluZ0ZvciIsImV4dHJhT3B0aW9ucyIsIl9pc1JvdXRlclZpZXciLCJkZWZlciIsIl9pbmFjdGl2ZSIsInRyYW5zaXRpb25Nb2RlIiwiYmluZGluZ01vZGVzIiwiY2hpbGRLZXkiLCJwYXJlbnRLZXkiLCJwYXJlbnRXYXRjaGVyIiwiY2hpbGRXYXRjaGVyIiwidHJhbnNEdXJhdGlvblByb3AiLCJhbmltRHVyYXRpb25Qcm9wIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2FpdEZvclRyYW5zaXRpb25TdGFydCIsInAkMSIsImNhbmNlbFBlbmRpbmciLCJjYWxsSG9va1dpdGhDYiIsImVudGVyQ2FuY2VsbGVkIiwiZW50ZXJOZXh0VGljayIsImVudGVyRG9uZSIsImdldENzc1RyYW5zaXRpb25UeXBlIiwic2V0dXBDc3NDYiIsImxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJsZWF2ZURvbmUiLCJsZWF2ZU5leHRUaWNrIiwiaGFzUGVuZGluZyIsImlubGluZVN0eWxlcyIsImNvbXB1dGVkU3R5bGVzIiwidHJhbnNEdXJhdGlvbiIsImFuaW1EdXJhdGlvbiIsIm9uRW5kIiwidHJhbnNpdGlvbiQxIiwib2xkSWQiLCJfc2V0dXBQYXJhbXMiLCJfY2hlY2tTdGF0ZW1lbnQiLCJfdXBkYXRlIiwib2xkVmFsIiwibWFwcGVkS2V5IiwiX3NldHVwUGFyYW1XYXRjaGVyIiwidW53YXRjaCIsInBhcmFtV2F0Y2hlcnMiLCJfcGFyYW1VbndhdGNoRm5zIiwiJGV2ZW50IiwibGlzdGVuZXJzIiwidW53YXRjaEZucyIsInNsb3QiLCJmYWxsYmFjayIsImVsc2VCbG9jayIsImRpZ2l0c1JFIiwiaW5kZW50IiwiY2FwaXRhbGl6ZSIsInVwcGVyY2FzZSIsImxvd2VyY2FzZSIsImN1cnJlbmN5IiwiX2N1cnJlbmN5IiwiZGVjaW1hbHMiLCJpc0Zpbml0ZSIsInN0cmluZ2lmaWVkIiwiYWJzIiwidG9GaXhlZCIsIl9pbnQiLCJfZmxvYXQiLCJzaWduIiwicGx1cmFsaXplIl0sIm1hcHBpbmdzIjoiQUFXQSxRQUFBQSxhQUNBLE1BQUEsWUFBQUMsRUFBQUMsR0FBQUMsR0FBQUMsS0FHQSxRQUFBQyxTQUNBLE1BQUEsUUFBQUosRUFBQUMsR0FBQUMsR0FBQUMsS0FHQSxRQUFBRSxZQUNBLE1BQUEsV0FBQUwsRUFBQUMsR0FBQUssUUFBQUgsS0FHQSxRQUFBSSxXQUNBLE1BQUEsU0FBQUMsS0FBQVIsRUFBQUMsR0FBQUEsSUFrSUEsUUFBQVEsUUFBQUMsR0FDQSxRQUFBQyxHQUFBRCxHQUNBLE1BQUFFLFVBQUFDLEVBQUFILElBR0EsUUFBQUksR0FBQUosR0FDQSxHQUFBQyxTQUFBRCxFQUNBLE9BQUEsY0FBQUMsRUFHQSxRQUFBSSxHQUFBTCxHQUNBLE1BQUEsa0JBQUFBLEdBR0EsUUFBQU0sR0FBQU4sR0FDQSxNQUFBLGdCQUFBQSxHQUdBLFFBQUFPLEdBQUFQLEdBQ0EsTUFBQSxnQkFBQUEsSUFBQUEsWUFBQVEsUUFHQSxRQUFBQyxHQUFBVCxFQUFBQyxHQUNBLE1BQUEsUUFBQUQsR0FBQSxTQUFBQSxJQUFBQyxHQUFBLEtBQUFELEdBQUFVLEdBQUFWLElBQUEsSUFBQUEsRUFBQVcsT0FHQSxRQUFBQyxHQUFBWixFQUFBQyxHQUNBLEdBQUFELEdBQUFDLEdBQUEsZ0JBQUFBLEdBQUEsQ0FDQSxHQUFBRyxFQUNBLEtBQUFBLElBQUFILEdBQUFELEVBQUFJLEdBQUFILEVBQUFHLEdBRUEsTUFBQUosR0FHQSxRQUFBYSxHQUFBYixFQUFBQyxFQUFBRyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLEdBQUFFLEVBQ0FMLEtBQUFLLEVBQUEsR0FBQUssTUFBQUwsRUFBQU0sUUFBQU4sRUFBQU8sVUFBQVosSUFBQWEsRUFBQUMsT0FBQWxCLEVBQUEsSUFBQUcsRUFBQUYsSUFBQUcsRUFBQSxZQUFBSyxFQUFBVSxjQUFBLElBQUEsVUFBQWQsR0FBQSxNQUFBQyxFQUFBLFdBQUFBLEVBQUEsS0FBQUMsRUFBQSxVQUFBLElBR0EsUUFBQWEsR0FBQXBCLEdBQ0EsR0FBQUMsR0FBQSxHQUFBb0IsUUFBQSxZQUFBckIsRUFBQSxZQUNBSSxFQUFBSCxFQUFBcUIsS0FBQUwsRUFBQUMsT0FDQSxPQUFBZCxHQUFBbUIsRUFBQW5CLEVBQUEsSUFBQSxLQUdBLFFBQUFvQixLQUNBLElBQUFwQixFQUFBcUIsRUFBQUMsZUFBQSxDQUNBLEdBQUExQixHQUFBMkIsY0FBQSxhQUNBLE9BQUFkLEdBQUFiLEVBQUEsS0FBQSxNQUFBb0IsRUFBQXBCLEdBQUEsSUFBQSxJQUVBLE1BQUF5QixHQUFBQyxjQUFBLElBQUEsSUFHQSxRQUFBRSxLQUNBLEdBQUE1QixHQUFBQyxFQUFBSyxHQUNBdUIsSUFBQSxrQkFDQUMsR0FBQSxrQkFDQUMsTUFBQSw4QkFDQUMsSUFBQSx5QkFDQUMsSUFBQSx5QkFDQUMsSUFBQSxnQ0FDQUMsS0FBQSx3QkFDQUMsTUFBQSw0QkFDQUMsR0FBQSw2QkFFQTlCLEVBQUErQixFQUFBQyxrQkFBQSxDQUNBLEtBQUEsR0FBQWxCLFFBQUEsUUFBQXZCLEtBQUEyQixFQUFBZSxXQUFBLENBQ0EsR0FBQWYsRUFBQWdCLFdBQUFoQixFQUFBZ0IsVUFBQTlCLE9BQ0EsSUFBQVgsSUFBQU0sR0FBQW9DLE9BQUFDLFVBQUFDLGVBQUFDLEtBQUF2QyxFQUFBTixLQUFBQyxFQUFBd0IsRUFBQWdCLFVBQUFuQyxFQUFBTixJQUFBOEMsRUFBQTlDLEdBQUFDLEdBQUFBLEVBQUE4QyxjQUFBLElBQUEsSUFDQSxrQkFBQUMsV0FBQUMsYUFBQTdDLEVBQUFxQixFQUFBd0IsY0FBQXhCLEVBQUF3QixnQkFBQUgsRUFBQVgsS0FBQSxLQUFBOUIsRUFBQWlDLEVBQUFZLGdCQUFBSixFQUFBVixNQUFBLEtBQUFVLEVBQUE1QixPQUFBTSxJQUVBLEdBQUFmLEdBQUEwQyxTQUFBQyxFQUFBQyxNQUFBLElBQUE5QyxFQUNBSyxFQUFBdUMsU0FBQUMsRUFBQUUsT0FBQSxJQUFBL0MsQ0FDQXVDLEdBQUFTLElBQUFKLFNBQUExQyxFQUFBLElBQUEsSUFBQTBDLFNBQUF2QyxFQUFBLElBR0EsUUFBQTRDLEtBQ0EsTUFBQUMsSUFBQWhDLEVBQUFlLFdBQUEsS0FBQWYsRUFBQWlDLFVBQUEsSUFBQUMsS0FBQUMsVUFBQWQsSUFBQSxHQUFBaEMsT0FBQUUsVUFBQTZDLEtBQUFDLFVBQUFDLE1BQUEsRUFBQSxJQUdBLFFBQUFDLEdBQUFoRSxHQUNBLEdBQUFDLEdBQUEsR0FBQW9CLFFBQUEsOENBQ0FqQixFQUFBSCxFQUFBcUIsS0FBQXRCLEVBQ0EsT0FBQUksR0FBQUEsRUFBQSxHQUFBSixFQUdBLFFBQUFpRSxHQUFBakUsR0FDQSxHQUFBSSxHQUFBQyxFQUFBQyxFQUFBQyxFQUFBRSxFQUFBRyxFQUFBQyxFQUFBTyxFQUFBSSxFQUFBSSxFQUFBNEIsRUFBQSxTQUFBeEQsRUFBQUMsR0FDQSxNQUFBRCxJQUFBQyxFQUFBRCxJQUFBLEdBQUFDLEdBRUErRCxFQUFBLFNBQUFoRSxHQUNBLEdBQUFDLEdBQUFHLEVBQUFDLEVBQUEsRUFDQSxLQUFBSixFQUFBLEVBQUFBLEdBQUEsRUFBQUEsSUFBQUcsRUFBQUosSUFBQSxFQUFBQyxFQUFBLEdBQUFJLEdBQUFELEVBQUE4RCxTQUFBLEdBQ0EsT0FBQTdELElBRUE0RCxLQUNBRSxFQUFBLFdBQ0FDLEVBQUEsV0FDQUMsRUFBQSxXQUNBQyxFQUFBLFVBQ0FDLEVBQUEsV0FDQUMsSUFDQSxLQUFBeEUsRUFBQUMsRUFBQUQsR0FBQTRCLEVBQUE1QixFQUFBVyxPQUFBTixFQUFBLEVBQUFBLEVBQUF1QixFQUFBLEVBQUF2QixHQUFBLEVBQUFDLEVBQUFOLEVBQUF5RSxXQUFBcEUsSUFBQSxHQUFBTCxFQUFBeUUsV0FBQXBFLEVBQUEsSUFBQSxHQUFBTCxFQUFBeUUsV0FBQXBFLEVBQUEsSUFBQSxFQUFBTCxFQUFBeUUsV0FBQXBFLEVBQUEsR0FBQW1FLEVBQUFFLEtBQUFwRSxFQUNBLFFBQUEsRUFBQXNCLEdBQ0EsSUFBQSxHQUNBdkIsRUFBQSxVQUNBLE1BQ0EsS0FBQSxHQUNBQSxFQUFBTCxFQUFBeUUsV0FBQTdDLEVBQUEsSUFBQSxHQUFBLE9BQ0EsTUFDQSxLQUFBLEdBQ0F2QixFQUFBTCxFQUFBeUUsV0FBQTdDLEVBQUEsSUFBQSxHQUFBNUIsRUFBQXlFLFdBQUE3QyxFQUFBLElBQUEsR0FBQSxLQUNBLE1BQ0EsS0FBQSxHQUNBdkIsRUFBQUwsRUFBQXlFLFdBQUE3QyxFQUFBLElBQUEsR0FBQTVCLEVBQUF5RSxXQUFBN0MsRUFBQSxJQUFBLEdBQUE1QixFQUFBeUUsV0FBQTdDLEVBQUEsSUFBQSxFQUFBLElBRUEsSUFBQTRDLEVBQUFFLEtBQUFyRSxHQUFBLE1BQUEsR0FBQW1FLEVBQUE3RCxTQUFBNkQsRUFBQUUsS0FBQSxFQUNBLEtBQUFGLEVBQUFFLEtBQUE5QyxJQUFBLElBQUE0QyxFQUFBRSxLQUFBOUMsR0FBQSxFQUFBLFlBQUF4QixFQUFBLEVBQUFBLEVBQUFvRSxFQUFBN0QsT0FBQVAsR0FBQSxHQUFBLENBQ0EsSUFBQUMsRUFBQSxFQUFBQSxFQUFBLEdBQUFBLElBQUE0RCxFQUFBNUQsR0FBQW1FLEVBQUFwRSxFQUFBQyxFQUNBLEtBQUFBLEVBQUEsR0FBQUEsR0FBQSxHQUFBQSxJQUFBNEQsRUFBQTVELEdBQUFtRCxFQUFBUyxFQUFBNUQsRUFBQSxHQUFBNEQsRUFBQTVELEVBQUEsR0FBQTRELEVBQUE1RCxFQUFBLElBQUE0RCxFQUFBNUQsRUFBQSxJQUFBLEVBQ0EsS0FBQUUsRUFBQTRELEVBQUExRCxFQUFBMkQsRUFBQXhELEVBQUF5RCxFQUFBeEQsRUFBQXlELEVBQUFsRCxFQUFBbUQsRUFBQWxFLEVBQUEsRUFBQUEsR0FBQSxHQUFBQSxJQUFBbUIsRUFBQWdDLEVBQUFqRCxFQUFBLElBQUFFLEVBQUFHLEdBQUFILEVBQUFJLEdBQUFPLEVBQUE2QyxFQUFBNUQsR0FBQSxXQUFBLFdBQUFlLEVBQUFQLEVBQUFBLEVBQUFELEVBQUFBLEVBQUE0QyxFQUFBL0MsRUFBQSxJQUFBQSxFQUFBRixFQUFBQSxFQUFBaUIsQ0FDQSxLQUFBbkIsRUFBQSxHQUFBQSxHQUFBLEdBQUFBLElBQUFtQixFQUFBZ0MsRUFBQWpELEVBQUEsSUFBQUUsRUFBQUcsRUFBQUMsR0FBQU8sRUFBQTZDLEVBQUE1RCxHQUFBLFdBQUEsV0FBQWUsRUFBQVAsRUFBQUEsRUFBQUQsRUFBQUEsRUFBQTRDLEVBQUEvQyxFQUFBLElBQUFBLEVBQUFGLEVBQUFBLEVBQUFpQixDQUNBLEtBQUFuQixFQUFBLEdBQUFBLEdBQUEsR0FBQUEsSUFBQW1CLEVBQUFnQyxFQUFBakQsRUFBQSxJQUFBRSxFQUFBRyxFQUFBSCxFQUFBSSxFQUFBRCxFQUFBQyxHQUFBTyxFQUFBNkMsRUFBQTVELEdBQUEsV0FBQSxXQUFBZSxFQUFBUCxFQUFBQSxFQUFBRCxFQUFBQSxFQUFBNEMsRUFBQS9DLEVBQUEsSUFBQUEsRUFBQUYsRUFBQUEsRUFBQWlCLENBQ0EsS0FBQW5CLEVBQUEsR0FBQUEsR0FBQSxHQUFBQSxJQUFBbUIsRUFBQWdDLEVBQUFqRCxFQUFBLElBQUFFLEVBQUFHLEVBQUFDLEdBQUFPLEVBQUE2QyxFQUFBNUQsR0FBQSxXQUFBLFdBQUFlLEVBQUFQLEVBQUFBLEVBQUFELEVBQUFBLEVBQUE0QyxFQUFBL0MsRUFBQSxJQUFBQSxFQUFBRixFQUFBQSxFQUFBaUIsQ0FDQTJDLEdBQUFBLEVBQUE1RCxFQUFBLFdBQUE2RCxFQUFBQSxFQUFBM0QsRUFBQSxXQUFBNEQsRUFBQUEsRUFBQXpELEVBQUEsV0FBQTBELEVBQUFBLEVBQUF6RCxFQUFBLFdBQUEwRCxFQUFBQSxFQUFBbkQsRUFBQSxXQUVBLE1BQUFJLEdBQUF3QyxFQUFBRyxHQUFBSCxFQUFBSSxHQUFBSixFQUFBSyxHQUFBTCxFQUFBTSxHQUFBTixFQUFBTyxHQUFBL0MsRUFBQW1ELGNBR0EsUUFBQVIsR0FBQW5FLEVBQUFDLEVBQUFHLEVBQUFDLEdBQ0EsTUFBQUwsR0FBQTRFLGtCQUFBNUUsRUFBQTRFLGlCQUFBM0UsRUFBQUcsRUFBQUMsSUFBQSxHQUFBTCxFQUFBNkUsWUFBQTdFLEVBQUE2RSxZQUFBLEtBQUE1RSxFQUFBRyxRQUFBSixFQUFBLEtBQUFDLEdBQUFHLEdBR0EsUUFBQWdFLEdBQUFwRSxHQUNBLE9BQUFBLEVBQUE4RSxNQUNBLElBQUEsUUFDQUMsRUFBQS9FLElBSUEsUUFBQXFFLEtBQ0EsR0FBQXJFLEdBQUEsRUFDQSxLQUNBQSxFQUFBc0MsRUFBQTBDLElBQUFDLFNBQUFDLFNBQ0EsTUFBQWpGLEdBQ0EsR0FBQXFDLEVBQUE2QyxPQUFBLElBQ0FuRixFQUFBc0MsRUFBQTZDLE9BQUFGLFNBQUFDLFNBQ0EsTUFBQWpGLEdBQ0FELEVBQUEsSUFHQSxNQUFBLEtBQUFBLElBQUFBLEVBQUFpQixFQUFBaUUsVUFBQWxGLEVBR0EsUUFBQXNFLEtBQ0EsR0FBQXRFLEtBQ0EsS0FBQSxHQUFBQyxLQUFBbUYsR0FBQXBGLEVBQUFDLEdBQUFFLEVBQUFpQixFQUFBZ0UsRUFBQW5GLElBQ0EsT0FBQUQsR0FHQSxRQUFBdUUsS0FDQSxHQUFBdkUsS0FDQSxLQUFBLEdBQUFDLEtBQUFvRixHQUFBckYsRUFBQUMsR0FBQUUsRUFBQW1GLEVBQUFDLFFBQUFGLEVBQUFwRixJQUNBLE9BQUFELEdBR0EsUUFBQXdGLEdBQUF4RixHQUNBLElBQUFBLEVBQUEsTUFBQSxFQUNBLElBQUFDLEdBQUEsRUFDQSxLQUFBLEdBQUFHLEtBQUFKLEdBQUFDLEdBQUFHLEVBQUEsSUFBQUQsRUFBQUgsRUFBQUksSUFBQSxHQUNBLE9BQUFILEdBQUFVLE9BQUEsRUFBQVYsRUFBQXdGLFVBQUEsRUFBQXhGLEVBQUFVLE9BQUEsR0FBQVYsRUFHQSxRQUFBeUYsR0FBQTFGLEVBQUFDLEVBQUFHLEdBQ0EsR0FBQUMsR0FBQSxHQUFBc0YsT0FBQSxFQUFBLEVBQ0F0RixHQUFBdUYsT0FBQSxXQUNBQyxFQUFBLEVBQUEsa0JBQUF6RixJQUFBQSxLQUNBQyxFQUFBeUYsSUFBQTlGLEdBQUFBLEVBQUErRixRQUFBLEtBQUEsRUFBQSxJQUFBLElBQUE5RixFQUdBLFFBQUErRixHQUFBaEcsR0FDQSxJQUFBaUcsT0FBQUMsY0FBQW5HLE9BQUFvRyxPQUFBQyxpQkFBQTlGLEVBQUEyRixPQUFBQyxjQUFBbkcsT0FBQW9HLE9BQUFDLGdCQUFBLE1BQUFwRyxFQUNBLEtBQUEsR0FBQUMsS0FBQWdHLFFBQUFDLGNBQUFuRyxPQUFBb0csT0FBQUMsZUFBQSxTQUFBcEcsRUFBQUMsS0FBQUQsRUFBQUMsR0FBQWdHLE9BQUFDLGNBQUFuRyxPQUFBb0csT0FBQUMsZUFBQW5HLEdBQ0EsT0FBQUQsR0FHQSxRQUFBcUcsS0FDQSxHQUFBckcsTUFDQUMsRUFBQW1CLEVBQUFrRixFQUFBLFFBQ0FsRyxFQUFBLEdBQUFtRyxFQUFBLEdBQUEsR0FDQWxHLEVBQUFlLEVBQUEsWUFDQSxPQUFBcEIsR0FBQVksRUFBQVosRUFBQXNFLEtBQUF0RSxFQUFBWSxFQUFBWixFQUFBd0csR0FBQWxCLElBQUF0RixFQUFBWSxFQUFBWixFQUFBdUUsTUFBQTlELEVBQUFSLEtBQUFZLEVBQUF5RixFQUFBLE9BQUE5QyxJQUFBcEQsRUFBQXFHLEVBQUFDLEdBQUExQyxFQUFBMUIsRUFBQXFFLFNBQUFDLE9BQUEzRyxFQUFBbUIsRUFBQWtGLEVBQUEsU0FBQTdGLEVBQUFKLEtBQUFBLEVBQUFTLEtBQUErRixNQUFBckcsT0FBQVAsR0FBQTZHLE9BQUEsRUFBQSxHQUFBakcsRUFBQSxZQUFBUixFQUFBRCxFQUFBcUcsRUFBQUMsR0FBQTFDLEVBQUExQixFQUFBcUUsU0FBQUMsUUFBQTVHLEVBQUFzRyxFQUFBLFFBQUFsRixFQUFBa0YsRUFBQSxRQUFBdEcsRUFBQStHLFVBQUExRyxFQUFBTCxFQUFBZ0gsSUFBQS9GLEVBQUFnRyxJQUFBakgsRUFBQWtILFVBQUE3QyxJQUFBckUsRUFBQW1ILFVBQUE3SCxFQUFBVSxFQUdBLFFBQUFvSCxHQUFBcEgsRUFBQUMsR0FDQSxJQUFBb0gsR0FBQSxNQUFBckIsR0FBQWhHLEVBQ0EsSUFBQUksTUFDQUMsRUFBQWdILEdBQUFDLFdBQUFySCxFQUNBLEtBQUFJLEVBQUEsTUFBQTJGLEdBQUFoRyxFQUNBLEtBQUEsR0FBQU0sR0FBQSxFQUFBQSxFQUFBRCxFQUFBTSxPQUFBTCxJQUFBRixFQUFBQyxFQUFBQyxJQUFBTixFQUFBSyxFQUFBQyxHQUNBLElBQUErRyxJQUFBQSxHQUFBRSxxQkFBQSxNQUFBdkIsR0FBQTVGLEVBQ0EsS0FBQSxHQUFBRyxLQUFBUCxHQUFBLFNBQUFJLEVBQUFHLEtBQUFILEVBQUFHLEdBQUFQLEVBQUFPLEdBQ0EsT0FBQXlGLEdBQUE1RixHQUdBLFFBQUFvSCxLQUNBdkIsT0FBQUMsZ0JBQUFELE9BQUFDLGtCQUFBRCxPQUFBQyxjQUFBbkcsU0FBQWtHLE9BQUFDLGNBQUFuRyxXQUFBa0csT0FBQUMsY0FBQW5HLE9BQUFvRyxTQUFBRixPQUFBQyxjQUFBbkcsT0FBQW9HLFdBR0EsUUFBQXNCLEdBQUF6SCxHQUNBd0gsSUFBQXZCLE9BQUFDLGNBQUFuRyxPQUFBb0csT0FBQUMsZUFBQXBHLEVBR0EsUUFBQTBILEtBQ0FGLEdBQ0EsSUFBQXhILEdBQUFxRyxJQUNBcEcsSUFDQUQsR0FBQTJILE9BQUFDLEVBQUFDLE9BQ0EsS0FBQSxHQUFBekgsS0FBQTBILEdBQ0EsR0FBQSxhQUFBMUgsRUFDQSxHQUFBTSxHQUFBb0gsRUFBQTFILElBQ0EsSUFBQSxHQUFBQyxLQUFBeUgsR0FBQTFILEdBQUFILEVBQUFtSCxFQUFBcEgsRUFBQThILEVBQUExSCxHQUFBQyxJQUFBcUYsRUFBQW9DLEVBQUExSCxHQUFBQyxHQUFBbUYsRUFBQXZGLFFBQ0FNLEdBQUF1SCxFQUFBMUgsTUFBQUgsRUFBQW1ILEVBQUFwSCxFQUFBOEgsRUFBQTFILElBQUFzRixFQUFBb0MsRUFBQTFILEdBQUFvRixFQUFBdkYsS0FHQSxRQUFBOEUsR0FBQS9FLEdBQ0EsSUFBQSxHQUFBQyxJQUFBRCxFQUFBK0gsZUFBQS9ILEVBQUFnSSxXQUFBNUgsRUFBQWlHLElBQUFoRyxLQUFBQyxFQUFBLEVBQUFBLEVBQUEySCxHQUFBdEgsT0FBQUwsSUFDQSxHQUFBLFVBQUFOLEVBQUE4RSxLQUFBLENBQ0E3RSxFQUFBZ0ksR0FBQTNILEVBQ0EsT0FFQSxHQUFBTCxFQUNBLEdBQUFBLEVBQUFpSSxlQUFBOUgsRUFBQVEsRUFBQVIsRUFBQUgsRUFBQWlJLGVBQUE5SCxFQUFBdUgsT0FBQUMsRUFBQU8sTUFBQTlILEVBQUErRyxFQUFBaEgsRUFBQTBILEVBQUFLLE9BQUF6SCxHQUFBb0gsRUFBQUssT0FDQSxJQUFBLEdBQUExSCxLQUFBcUgsR0FBQUssTUFBQXpDLEVBQUFvQyxFQUFBSyxNQUFBMUgsR0FBQStFLEVBQUFuRixRQUNBRSxHQUFBdUgsRUFBQXRELEtBQUFrQixFQUFBb0MsRUFBQUssTUFBQTNDLEVBQUFuRixJQUdBLFFBQUErSCxLQUNBLEdBQUFILE1BQUFBLEdBQUF0SCxPQUFBLEdBQ0EsSUFBQSxHQUFBWCxHQUFBLEVBQUFBLEVBQUFpSSxHQUFBdEgsT0FBQVgsSUFBQSxDQUNBLEdBQUFDLEdBQUFnSSxHQUFBakksR0FBQXFJLFVBQ0FqSSxFQUFBNkgsR0FBQWpJLEdBQUFzSSxVQUNBakksSUFDQSxLQUFBRCxFQUFBLEtBQ0EsSUFBQUcsRUFBQUgsS0FBQUMsRUFBQUEsRUFBQWtJLE9BQUFDLEdBQUFDLEtBQUFySSxLQUFBTSxHQUFBTixHQUNBLElBQUEsR0FBQUUsR0FBQSxFQUFBQSxFQUFBRixFQUFBTyxPQUFBTCxJQUFBRCxFQUFBQSxFQUFBa0ksT0FBQUMsR0FBQUMsS0FBQXJJLEVBQUFFLElBQ0EySCxJQUFBakksR0FBQTBJLGVBQUFySSxDQUNBLEtBQUEsR0FBQUksR0FBQSxFQUFBQSxFQUFBSixFQUFBTSxPQUFBRixJQUFBMEQsRUFBQTlELEVBQUFJLEdBQUFSLEVBQUFtRSxHQUFBLElBR0EsR0FBQXlCLEdBQUErQixHQUNBZSxTQUFBLElBQ0FDLFNBQUEsSUFDQVQsTUFBQSxJQUNBVSxLQUFBLEtBRUEvRixLQUNBZ0csS0FDQTdILEVBQUFnRSxTQUNBeEQsRUFBQXVCLFVBQ0FJLEVBQUEyRixPQUNBekcsRUFBQTJELE9BQ0FYLEVBQUEwRCxhQUNBN0ksR0FBQW1DLEVBQUEyRyxhQUFBM0csRUFBQTRHLGdCQUFBNUcsRUFBQTZHLGVBQUE3RyxFQUFBOEcsa0JBQUE5RyxFQUFBK0csb0JBQ0E5SCxFQUFBZSxFQUFBZ0gsbUJBQ0FoRCxHQUFBcEcsU0FBQSxZQUNBdUQsRUFBQVEsRUFDQXNGLEdBQUF2SixHQUFBQSxFQUFBd0osWUFBQXhKLEdBQUFBLEVBQUF5SixzQkFDQUMsRUFBQTFKLEdBQUFBLEVBQUEySixrQkFDQWpELEVBQUExRyxHQUFBQSxFQUFBNEosYUFBQTVKLEVBQUE0SixhQUFBLEdBQ0FyRCxFQUFBdkcsR0FBQUEsRUFBQTZKLFVBQUE3SixFQUFBNkosVUFBQSxJQUNBcEQsRUFBQXpHLEdBQUFBLEVBQUE4SixXQUFBOUosRUFBQThKLFdBQUEsSUFDQTFFLEVBQUFwRixHQUFBQSxFQUFBK0osZ0JBQUEvSixFQUFBK0osbUJBQ0ExRSxFQUFBckYsR0FBQUEsRUFBQWdLLHNCQUFBaEssRUFBQWdLLHlCQUNBeEQsRUFBQXhHLEdBQUFBLEVBQUFrSSxhQUFBbEksRUFBQWtJLGdCQUNBSixFQUFBOUgsR0FBQUEsRUFBQWlLLGNBQUFySixFQUFBa0ksRUFBQTlJLEVBQUFpSyxlQUFBbkIsRUFDQXhKLEVBQUFVLEdBQUFBLEVBQUFrSyxhQUFBbEssRUFBQWtLLGFBQUFqSixFQUFBa0osTUFDQWxDLEdBQUFqSSxHQUFBQSxFQUFBb0ssZUFBQXBLLEVBQUFvSyxrQkFDQS9DLE1BQUFySCxJQUFBQSxFQUFBcUssYUFBQXJLLEVBQUFxSyxXQUNBM0osR0FBQSxXQUFBNEosT0FBQUEsTUFBQUMsUUFBQSxTQUFBdkssR0FDQSxNQUFBLG1CQUFBa0UsU0FBQXJCLEtBQUE3QyxJQUVBd0ksSUFDQWdDLHNCQUFBLFNBQUF4SyxHQUNBLEdBQUFDLEdBQUFHLElBQ0EsS0FBQUosSUFBQUEsRUFBQVcsT0FBQSxNQUFBUCxFQUNBLEtBQUFILEVBQUEsRUFBQUEsRUFBQUQsRUFBQVcsT0FBQVYsSUFBQUcsRUFBQXNFLEtBQUExRSxFQUFBQyxHQUNBLE9BQUFHLElBRUFxSSxLQUFBLFNBQUF6SSxHQUNBLElBQUFpRixTQUFBd0YsbUJBQUF6SyxFQUFBLFFBQ0EsSUFBQUMsR0FBQWdGLFNBQUF3RixpQkFBQXpLLEVBQ0EsT0FBQTBLLE1BQUFGLHNCQUFBdkssSUFFQTBLLGFBQUEsU0FBQTNLLEdBQ0EsSUFBQUEsSUFBQUEsRUFBQVcsT0FBQSxRQUNBLElBQUFWLEdBQUFHLEVBQUFDLElBQ0EsS0FBQUosRUFBQSxFQUFBQSxFQUFBRCxFQUFBVyxPQUFBVixJQUFBRyxFQUFBc0ssS0FBQWpDLEtBQUF6SSxFQUFBQyxJQUFBSSxFQUFBQSxFQUFBa0ksT0FBQW5JLEVBQ0EsT0FBQUMsR0FBQXFLLEtBQUFFLGdCQUFBdkssSUFFQXdLLG1CQUFBLFNBQUE3SyxFQUFBQyxHQUNBLElBQUFELElBQUFDLElBQUFELEVBQUE4SyxxQkFBQSxRQUNBLElBQUExSyxHQUFBSixFQUFBOEsscUJBQUE3SyxFQUNBLE9BQUF5SyxNQUFBRixzQkFBQXBLLElBRUF3SyxnQkFBQSxTQUFBNUssR0FDQSxHQUFBQyxNQUFBc0ksT0FBQXZJLEVBQ0EsSUFBQUEsRUFBQStLLEtBQUEsU0FBQS9LLEVBQUFJLEdBQ0EsR0FBQUosSUFBQUksRUFBQSxNQUFBLEVBQ0EsSUFBQUMsR0FBQTJLLGFBQUEvSyxFQUFBRCxHQUNBTSxFQUFBMEssYUFBQS9LLEVBQUFHLEVBQ0EsT0FBQUMsS0FBQUMsRUFBQSxFQUFBRCxFQUFBQyxHQUFBLEVBQUEsSUFDQU4sRUFBQVcsUUFBQSxFQUFBLE1BQUFYLEVBQ0EsSUFBQUksR0FBQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLElBQ0EsS0FBQUgsRUFBQUosRUFBQUssS0FBQUQsR0FBQUEsSUFBQUosRUFBQUssS0FBQUMsRUFBQUMsRUFBQW1FLEtBQUFyRSxJQUFBRCxFQUFBSixFQUFBSyxNQUFBLElBQ0EsTUFBQUMsS0FBQU4sRUFBQWlMLE9BQUExSyxFQUFBRCxHQUFBLEVBQ0EsT0FBQU4sSUFFQWtMLDBCQUFBLFNBQUFsTCxFQUFBQyxHQUNBLEdBQUF5SyxLQUFBUyxpQkFBQW5MLEVBQUFDLEdBQUEsQ0FDQSxHQUFBRCxHQUFBQSxFQUFBb0wsYUFBQSxNQUFBcEwsR0FBQW9MLGFBQUFuTCxFQUNBLElBQUFELEdBQUFBLEVBQUFxTCxXQUFBLENBQ0EsR0FBQWpMLFNBQUFKLEdBQUFxTCxXQUFBcEwsRUFDQSxJQUFBLGNBQUFHLEVBQUEsQ0FDQSxHQUFBSixFQUFBcUwsV0FBQXBMLEdBQUFxTCxNQUFBLE1BQUF0TCxHQUFBcUwsV0FBQXBMLEdBQUFxTCxLQUNBLElBQUF0TCxFQUFBcUwsV0FBQXBMLEdBQUFzTCxVQUFBLE1BQUF2TCxHQUFBcUwsV0FBQXBMLEdBQUFzTCxTQUNBLElBQUFsTCxHQUFBQyxFQUFBTixFQUFBcUwsVUFDQSxJQUFBL0ssRUFBQSxDQUNBLElBQUFELEVBQUEsRUFBQUEsRUFBQUMsRUFBQUssT0FBQU4sSUFDQSxHQUFBQyxFQUFBRCxHQUFBbUwsV0FBQXZMLEVBQUEsTUFBQUssR0FBQUQsR0FBQWtMLFNBQ0EsT0FBQSxXQU1BRSwwQkFBQSxTQUFBekwsRUFBQUMsR0FDQSxHQUFBRyxHQUFBc0ssS0FBQVEsMEJBQUFsTCxFQUFBQyxFQUNBLFNBQUFHLEdBRUErSyxpQkFBQSxTQUFBbkwsRUFBQUMsR0FDQSxHQUFBRCxHQUFBQSxFQUFBMEwsYUFBQSxNQUFBMUwsR0FBQTBMLGFBQUF6TCxFQUNBLElBQUFELEdBQUFBLEVBQUFxTCxXQUFBLENBQ0EsR0FBQWpMLFNBQUFKLEdBQUFxTCxXQUFBcEwsRUFDQSxPQUFBLGNBQUFHLEVBRUEsT0FBQSxHQUVBdUwsZ0JBQUEsU0FBQTNMLEVBQUFDLEdBQ0EsR0FBQUQsR0FBQUMsR0FBQUQsRUFBQTRMLFVBQUEsQ0FDQSxHQUFBeEwsR0FBQSxnQkFBQUosR0FBQTRMLFVBQUE1TCxFQUFBNEwsVUFBQUMsTUFBQSxPQUNBLEtBQUEsSUFBQWIsYUFBQTVLLEVBQUFILEdBQUEsT0FBQSxFQUVBLE9BQUEsR0FFQTZMLHlCQUFBLFNBQUE5TCxFQUFBQyxFQUFBRyxHQUNBLEdBQUFBLElBQUFBLE9BQUFKLElBQUFDLEVBQUEsTUFBQUcsRUFDQSxJQUFBQyxHQUFBMEwsb0JBQUEvTCxFQUNBLEtBQUFLLElBQUFBLEVBQUFNLE9BQUEsTUFBQVAsRUFDQSxJQUFBRSxHQUFBQyxDQUNBLEtBQUFELEVBQUEsRUFBQUEsRUFBQUQsRUFBQU0sT0FBQUwsSUFBQUMsRUFBQUYsRUFBQUMsR0FBQW9LLEtBQUFTLGlCQUFBNUssRUFBQU4sSUFBQUcsRUFBQXNFLEtBQUFuRSxHQUFBSCxFQUFBc0ssS0FBQW9CLHlCQUFBdkwsRUFBQU4sRUFBQUcsRUFDQSxPQUFBQSxJQUVBNEwsNkJBQUEsU0FBQWhNLEVBQUFDLEdBQ0EsR0FBQUQsR0FBQUMsRUFBQSxDQUNBLEdBQUF5SyxLQUFBUyxpQkFBQW5MLEVBQUFDLEdBQUEsTUFBQUQsRUFDQSxJQUFBSSxHQUFBc0ssS0FBQW9CLHlCQUFBOUwsRUFBQUMsRUFDQSxPQUFBRyxJQUFBQSxFQUFBTyxPQUFBUCxFQUFBLEdBQUEsU0FHQTZMLHNDQUFBLFNBQUFqTSxFQUFBQyxHQUNBLEdBQUFELEdBQUFDLEVBQUEsQ0FDQSxHQUFBeUssS0FBQWUsMEJBQUF6TCxFQUFBQyxHQUFBLE1BQUFELEVBQ0EsSUFBQUksR0FBQXNLLEtBQUFvQix5QkFBQTlMLEVBQUFDLEVBQ0EsSUFBQUcsR0FBQUEsRUFBQU8sT0FBQSxDQUNBLEdBQUFOLEVBQ0EsS0FBQUEsRUFBQSxFQUFBQSxFQUFBRCxFQUFBTyxPQUFBTixJQUNBLEdBQUFxSyxLQUFBUSwwQkFBQTlLLEVBQUFDLEdBQUFKLEdBQUEsTUFBQUcsR0FBQUMsTUFJQTZMLHdCQUFBLFNBQUFsTSxFQUFBQyxFQUFBRyxHQUNBLEdBQUFBLElBQUFBLE9BQUFKLElBQUFDLEVBQUEsTUFBQUcsRUFDQSxJQUFBSixFQUFBbU0sdUJBQUEsQ0FDQSxHQUFBOUwsR0FBQUwsRUFBQW1NLHVCQUFBbE0sRUFDQSxPQUFBeUssTUFBQUYsc0JBQUFuSyxHQUVBLEdBQUFDLEdBQUF5TCxvQkFBQS9MLEVBQ0EsS0FBQU0sSUFBQUEsRUFBQUssT0FBQSxRQUNBLElBQUFKLEdBQUFFLENBQ0EsS0FBQUYsRUFBQSxFQUFBQSxFQUFBRCxFQUFBSyxPQUFBSixJQUFBRSxFQUFBSCxFQUFBQyxHQUFBbUssS0FBQWlCLGdCQUFBbEwsRUFBQVIsSUFBQUcsRUFBQXNFLEtBQUFqRSxHQUFBTCxFQUFBc0ssS0FBQXdCLHdCQUFBekwsRUFBQVIsRUFBQUcsRUFDQSxPQUFBQSxJQUVBZ00seUJBQUEsU0FBQXBNLEVBQUFDLEdBQ0EsR0FBQUQsR0FBQUMsRUFBQSxDQUNBLEdBQUF5SyxLQUFBaUIsZ0JBQUEzTCxFQUFBQyxHQUFBLE1BQUFELEVBQ0EsSUFBQUksR0FBQXNLLEtBQUF3Qix3QkFBQWxNLEVBQUFDLEVBQ0EsT0FBQUcsSUFBQUEsRUFBQU8sT0FBQVAsRUFBQSxHQUFBLFNBR0FpTSxjQUFBLFNBQUFyTSxHQUNBLElBQUFBLEVBQUEsT0FBQSxDQUNBLElBQUFDLEdBQUFPLE9BQUFSLEVBQUF3TCxVQUFBN0csY0FDQXZFLEdBQUEsSUFBQSxRQUNBQyxFQUFBMkssYUFBQTVLLEVBQUFILEVBQ0EsT0FBQUksTUFBQSxHQUVBaU0sZ0JBQUEsU0FBQXRNLEVBQUFDLEVBQUFHLEdBQ0FKLEdBQUFDLElBQUFELEVBQUF1TSxhQUFBdk0sRUFBQXVNLGFBQUF0TSxFQUFBRyxHQUFBSixFQUFBQyxHQUFBRyxJQUdBLE9BQUFvSCxLQUFBNUYsSUFBQXdHLElBQUFtQixHQUFBRyxHQUFBaEMsSUFBQXpCLE9BQUFDLGNBQUFuRyxPQUFBMkMsT0FBQThKLE9BQUF2RyxPQUFBQyxjQUFBbkcsUUFDQTBNLG9CQUFBL0UsRUFDQWdGLGtCQUFBakYsSUFDQXhCLE9BQUFDLGVDempCQSxTQUFBbEcsRUFBQUksR0FBQSxnQkFBQXVNLFVBQUEsZ0JBQUFDLFFBQUFBLE9BQUFELFFBQUF2TSxJQUFBLGtCQUFBeU0sU0FBQUEsT0FBQUMsSUFBQUQsVUFBQXpNLEdBQUEsZ0JBQUF1TSxTQUFBQSxRQUFBSSxNQUFBM00sSUFBQUosRUFBQStNLE1BQUEzTSxLQUFBc0ssS0FBQSxXQUFBLE1BQUEsVUFBQTFLLEdBQUEsUUFBQUksR0FBQUgsR0FBQSxHQUFBSSxFQUFBSixHQUFBLE1BQUFJLEdBQUFKLEdBQUEwTSxPQUFBLElBQUFsTSxHQUFBSixFQUFBSixJQUFBME0sV0FBQUssR0FBQS9NLEVBQUFnTixRQUFBLEVBQUEsT0FBQWpOLEdBQUFDLEdBQUE0QyxLQUFBcEMsRUFBQWtNLFFBQUFsTSxFQUFBQSxFQUFBa00sUUFBQXZNLEdBQUFLLEVBQUF3TSxRQUFBLEVBQUF4TSxFQUFBa00sUUFBQSxHQUFBdE0sS0FBQSxPQUFBRCxHQUFBZ0UsRUFBQXBFLEVBQUFJLEVBQUFvQixFQUFBbkIsRUFBQUQsRUFBQWlFLEVBQUEsR0FBQWpFLEVBQUEsS0FBQSxTQUFBSixFQUFBSSxFQUFBQyxHQUFBTCxFQUFBMk0sUUFBQXRNLEVBQUEsSUFBQSxTQUFBTCxFQUFBSSxFQUFBQyxHQUFBLFlBQUEsU0FBQUosR0FBQUQsR0FBQSxHQUFBSSxHQUFBLEdBQUFFLEdBQUFOLEdBQUFLLEVBQUFRLEVBQUFQLEVBQUFxQyxVQUFBdUssUUFBQTlNLEVBQUEsT0FBQUssR0FBQTBNLE9BQUE5TSxFQUFBQyxFQUFBcUMsVUFBQXZDLEdBQUFLLEVBQUEwTSxPQUFBOU0sRUFBQUQsR0FBQUMsRUFBQSxHQUFBSSxHQUFBSixFQUFBLEdBQUFRLEVBQUFSLEVBQUEsR0FBQUMsRUFBQUQsRUFBQSxHQUFBRSxFQUFBRixFQUFBLEdBQUFPLEVBQUFYLEVBQUFNLEVBQUFLLEdBQUF3TSxNQUFBOU0sRUFBQU0sRUFBQXlNLE9BQUEsU0FBQXJOLEdBQUEsTUFBQUMsR0FBQVEsRUFBQTZNLE1BQUEvTSxFQUFBUCxLQUFBWSxFQUFBMk0sT0FBQWxOLEVBQUEsSUFBQU8sRUFBQTRNLFlBQUFuTixFQUFBLElBQUFPLEVBQUE2TSxTQUFBcE4sRUFBQSxJQUFBTyxFQUFBOE0sSUFBQSxTQUFBMU4sR0FBQSxNQUFBMk4sU0FBQUQsSUFBQTFOLElBQUFZLEVBQUFnTixPQUFBdk4sRUFBQSxJQUFBTCxFQUFBMk0sUUFBQS9MLEVBQUFaLEVBQUEyTSxRQUFBa0IsUUFBQWpOLEdBQUEsU0FBQVosRUFBQUksRUFBQUMsR0FBQSxZQUFBLFNBQUFKLEdBQUFELEdBQUEsTUFBQSxtQkFBQWdHLEVBQUFuRCxLQUFBN0MsR0FBQSxRQUFBUyxHQUFBVCxHQUFBLE1BQUEseUJBQUFnRyxFQUFBbkQsS0FBQTdDLEdBQUEsUUFBQWEsR0FBQWIsR0FBQSxNQUFBLG1CQUFBOE4sV0FBQTlOLFlBQUE4TixVQUFBLFFBQUF4TixHQUFBTixHQUFBLEdBQUFJLEVBQUEsT0FBQUEsR0FBQSxtQkFBQTJOLGNBQUFBLFlBQUFDLE9BQUFELFlBQUFDLE9BQUFoTyxHQUFBQSxHQUFBQSxFQUFBaU8sUUFBQWpPLEVBQUFpTyxpQkFBQUYsYUFBQSxRQUFBeE4sR0FBQVAsR0FBQSxNQUFBLGdCQUFBQSxHQUFBLFFBQUFZLEdBQUFaLEdBQUEsTUFBQSxnQkFBQUEsR0FBQSxRQUFBd0IsR0FBQXhCLEdBQUEsTUFBQSxtQkFBQUEsR0FBQSxRQUFBb0IsR0FBQXBCLEdBQUEsTUFBQSxRQUFBQSxHQUFBLGdCQUFBQSxHQUFBLFFBQUFxRSxHQUFBckUsR0FBQSxNQUFBLGtCQUFBZ0csRUFBQW5ELEtBQUE3QyxHQUFBLFFBQUF3RCxHQUFBeEQsR0FBQSxNQUFBLGtCQUFBZ0csRUFBQW5ELEtBQUE3QyxHQUFBLFFBQUE0QixHQUFBNUIsR0FBQSxNQUFBLGtCQUFBZ0csRUFBQW5ELEtBQUE3QyxHQUFBLFFBQUFpRSxHQUFBakUsR0FBQSxNQUFBLHNCQUFBZ0csRUFBQW5ELEtBQUE3QyxHQUFBLFFBQUFvRSxHQUFBcEUsR0FBQSxNQUFBb0IsR0FBQXBCLElBQUFpRSxFQUFBakUsRUFBQWtPLE1BQUEsUUFBQTNKLEdBQUF2RSxHQUFBLE1BQUEsbUJBQUFtTyxrQkFBQW5PLFlBQUFtTyxpQkFBQSxRQUFBM0ksR0FBQXhGLEdBQUEsTUFBQUEsR0FBQW9PLFFBQUEsT0FBQSxJQUFBQSxRQUFBLE9BQUEsSUFBQSxRQUFBcEssS0FBQSxNQUFBLG1CQUFBaUMsU0FBQSxtQkFBQWhCLFdBQUEsa0JBQUFBLFVBQUFvSixjQUFBLFFBQUFsSyxHQUFBbkUsRUFBQUksR0FBQSxHQUFBLE9BQUFKLEdBQUEsbUJBQUFBLEdBQUEsR0FBQSxnQkFBQUEsSUFBQUMsRUFBQUQsS0FBQUEsR0FBQUEsSUFBQUMsRUFBQUQsR0FBQSxJQUFBLEdBQUFLLEdBQUEsRUFBQUksRUFBQVQsRUFBQVcsT0FBQU4sRUFBQUksRUFBQUosSUFBQUQsRUFBQXlDLEtBQUEsS0FBQTdDLEVBQUFLLEdBQUFBLEVBQUFMLE9BQUEsS0FBQSxHQUFBYSxLQUFBYixHQUFBMEMsT0FBQUMsVUFBQUMsZUFBQUMsS0FBQTdDLEVBQUFhLElBQUFULEVBQUF5QyxLQUFBLEtBQUE3QyxFQUFBYSxHQUFBQSxFQUFBYixHQUFBLFFBQUFvSCxLQUFBLFFBQUFwSCxHQUFBQSxFQUFBSyxHQUFBLGdCQUFBRCxHQUFBQyxJQUFBLGdCQUFBTCxHQUFBSSxFQUFBQyxHQUFBK0csRUFBQWhILEVBQUFDLEdBQUFMLEdBQUFJLEVBQUFDLEdBQUFMLEVBQUEsSUFBQSxHQUFBSSxNQUFBQyxFQUFBLEVBQUFKLEVBQUFxTyxVQUFBM04sT0FBQU4sRUFBQUosRUFBQUksSUFBQThELEVBQUFtSyxVQUFBak8sR0FBQUwsRUFBQSxPQUFBSSxHQUFBLFFBQUFvRSxHQUFBeEUsRUFBQUksRUFBQUMsR0FBQSxNQUFBOEQsR0FBQS9ELEVBQUEsU0FBQUEsRUFBQUgsR0FBQUksR0FBQSxrQkFBQUQsR0FBQUosRUFBQUMsR0FBQThFLEVBQUEzRSxFQUFBQyxHQUFBTCxFQUFBQyxHQUFBRyxJQUFBSixFQUFBLEdBQUErRSxHQUFBMUUsRUFBQSxHQUFBMkYsRUFBQXRELE9BQUFDLFVBQUF1QixRQUFBbEUsR0FBQTJNLFNBQUFwQyxRQUFBdEssRUFBQXNPLGNBQUE5TixFQUFBK04sV0FBQTNOLEVBQUE0TixrQkFBQW5PLEVBQUFvTyxTQUFBbk8sRUFBQW9PLFNBQUEvTixFQUFBZ08sU0FBQXhOLEVBQUF5TixZQUFBck4sRUFBQXNOLE9BQUF6SyxFQUFBMEssT0FBQXZMLEVBQUF3TCxPQUFBcE4sRUFBQXFOLFdBQUFoTCxFQUFBaUwsU0FBQTlLLEVBQUErSyxrQkFBQTVLLEVBQUE2SyxxQkFBQXBMLEVBQUFxTCxRQUFBbEwsRUFBQW1KLE1BQUFsRyxFQUFBK0YsT0FBQTNJLEVBQUE4SyxLQUFBOUosSUFBQSxTQUFBeEYsRUFBQUksR0FBQSxZQUFBSixHQUFBMk0sUUFBQSxTQUFBM00sRUFBQUksR0FBQSxNQUFBLFlBQUEsSUFBQSxHQUFBQyxHQUFBLEdBQUFpSyxPQUFBZ0UsVUFBQTNOLFFBQUFWLEVBQUEsRUFBQUEsRUFBQUksRUFBQU0sT0FBQVYsSUFBQUksRUFBQUosR0FBQXFPLFVBQUFyTyxFQUFBLE9BQUFELEdBQUF1UCxNQUFBblAsRUFBQUMsTUFBQSxTQUFBTCxFQUFBSSxFQUFBQyxHQUFBLFlBQUEsU0FBQUosR0FBQUQsR0FBQTBLLEtBQUE4RSxTQUFBeFAsRUFBQTBLLEtBQUErRSxjQUFBdkMsUUFBQSxHQUFBNU0sR0FBQW9QLFNBQUEsR0FBQXBQLElBQUEsR0FBQUcsR0FBQUosRUFBQSxHQUFBUSxFQUFBUixFQUFBLEdBQUFDLEVBQUFELEVBQUEsSUFBQUUsRUFBQUYsRUFBQSxJQUFBTyxFQUFBUCxFQUFBLElBQUFtQixFQUFBbkIsRUFBQSxHQUFBSixHQUFBMEMsVUFBQXVLLFFBQUEsU0FBQWxOLEdBQUEsZ0JBQUFBLEtBQUFBLEVBQUFhLEVBQUF5TSxPQUFBdEcsSUFBQXNILFVBQUEsSUFBQUEsVUFBQSxLQUFBdE8sRUFBQWEsRUFBQXlNLE1BQUE3TSxFQUFBaUssS0FBQThFLFVBQUFHLE9BQUEsT0FBQTNQLEdBQUFBLEVBQUE0UCxVQUFBaFAsRUFBQVosRUFBQWdILE9BQUFoSCxFQUFBZ0gsSUFBQXhGLEVBQUF4QixFQUFBNFAsUUFBQTVQLEVBQUFnSCxLQUFBLElBQUE1RyxJQUFBRyxFQUFBLFFBQUFGLEVBQUFzTixRQUFBa0MsUUFBQTdQLEVBQUEsS0FBQTBLLEtBQUErRSxhQUFBdkMsUUFBQW1DLFFBQUEsU0FBQXJQLEdBQUFJLEVBQUEwUCxRQUFBOVAsRUFBQStQLFVBQUEvUCxFQUFBZ1EsWUFBQXRGLEtBQUErRSxhQUFBQyxTQUFBTCxRQUFBLFNBQUFyUCxHQUFBSSxFQUFBc0UsS0FBQTFFLEVBQUErUCxVQUFBL1AsRUFBQWdRLFlBQUE1UCxFQUFBTyxRQUFBTixFQUFBQSxFQUFBNFAsS0FBQTdQLEVBQUE4UCxRQUFBOVAsRUFBQThQLFFBQUEsT0FBQTdQLElBQUFRLEVBQUF3TyxTQUFBLFNBQUEsTUFBQSxRQUFBLFNBQUFyUCxHQUFBQyxFQUFBMEMsVUFBQTNDLEdBQUEsU0FBQUksRUFBQUMsR0FBQSxNQUFBcUssTUFBQXdDLFFBQUFyTSxFQUFBeU0sTUFBQWpOLE9BQUFzUCxPQUFBM1AsRUFBQWdILElBQUE1RyxRQUFBUyxFQUFBd08sU0FBQSxPQUFBLE1BQUEsU0FBQSxTQUFBclAsR0FBQUMsRUFBQTBDLFVBQUEzQyxHQUFBLFNBQUFJLEVBQUFDLEVBQUFKLEdBQUEsTUFBQXlLLE1BQUF3QyxRQUFBck0sRUFBQXlNLE1BQUFyTixPQUFBMFAsT0FBQTNQLEVBQUFnSCxJQUFBNUcsRUFBQStQLEtBQUE5UCxRQUFBTCxFQUFBMk0sUUFBQTFNLEdBQUEsU0FBQUQsRUFBQUksRUFBQUMsR0FBQSxZQUFBLFNBQUFKLEdBQUFELEVBQUFJLElBQUFTLEVBQUFnTyxZQUFBN08sSUFBQWEsRUFBQWdPLFlBQUE3TyxFQUFBLG1CQUFBQSxFQUFBLGdCQUFBSSxHQUFBLFFBQUFLLEtBQUEsR0FBQVQsRUFBQSxPQUFBLG1CQUFBb1EsZ0JBQUFwUSxFQUFBSyxFQUFBLEdBQUEsbUJBQUFnUSxXQUFBclEsRUFBQUssRUFBQSxJQUFBTCxFQUFBLEdBQUFhLEdBQUFSLEVBQUEsR0FBQUMsRUFBQUQsRUFBQSxHQUFBRSxFQUFBLGVBQUFLLEdBQUEwUCxlQUFBLHFDQUFBOU8sR0FBQStPLFFBQUE5UCxJQUFBK1Asa0JBQUEsU0FBQXhRLEVBQUFJLEdBQUEsTUFBQUUsR0FBQUYsRUFBQSxnQkFBQVMsRUFBQTJOLFdBQUF4TyxJQUFBYSxFQUFBME4sY0FBQXZPLElBQUFhLEVBQUFxTyxTQUFBbFAsSUFBQWEsRUFBQWtPLE9BQUEvTyxJQUFBYSxFQUFBbU8sT0FBQWhQLEdBQUFBLEVBQUFhLEVBQUE0TixrQkFBQXpPLEdBQUFBLEVBQUFpTyxPQUFBcE4sRUFBQXNPLGtCQUFBblAsSUFBQUMsRUFBQUcsRUFBQSxtREFBQUosRUFBQWtFLFlBQUFyRCxFQUFBK04sU0FBQTVPLElBQUFDLEVBQUFHLEVBQUEsa0NBQUF1RCxLQUFBQyxVQUFBNUQsSUFBQUEsSUFBQXlRLG1CQUFBLFNBQUF6USxHQUFBLEdBQUEsZ0JBQUFBLEdBQUEsQ0FBQUEsRUFBQUEsRUFBQW9PLFFBQUE3TixFQUFBLEdBQUEsS0FBQVAsRUFBQTJELEtBQUErTSxNQUFBMVEsR0FBQSxNQUFBQSxLQUFBLE1BQUFBLEtBQUEyUSxRQUFBLEVBQUFDLGVBQUEsYUFBQUMsZUFBQSxlQUFBQyxrQkFBQSxFQUFBQyxlQUFBLFNBQUEvUSxHQUFBLE1BQUFBLElBQUEsS0FBQUEsRUFBQSxLQUFBd0IsR0FBQXdQLFNBQUFDLFFBQUFDLE9BQUEsc0NBQUFyUSxFQUFBd08sU0FBQSxTQUFBLE1BQUEsUUFBQSxTQUFBclAsR0FBQXdCLEVBQUF3UCxRQUFBaFIsUUFBQWEsRUFBQXdPLFNBQUEsT0FBQSxNQUFBLFNBQUEsU0FBQXJQLEdBQUF3QixFQUFBd1AsUUFBQWhSLEdBQUFhLEVBQUF5TSxNQUFBMU0sS0FBQVosRUFBQTJNLFFBQUFuTCxHQUFBLFNBQUF4QixFQUFBSSxFQUFBQyxHQUFBLFlBQUEsSUFBQUosR0FBQUksRUFBQSxFQUFBTCxHQUFBMk0sUUFBQSxTQUFBM00sRUFBQUksR0FBQUgsRUFBQW9QLFFBQUFyUCxFQUFBLFNBQUFLLEVBQUFKLEdBQUFBLElBQUFHLEdBQUFILEVBQUFrUixnQkFBQS9RLEVBQUErUSxnQkFBQW5SLEVBQUFJLEdBQUFDLFFBQUFMLEdBQUFDLFFBQUEsU0FBQUQsRUFBQUksRUFBQUMsR0FBQSxZQUFBLElBQUFKLEdBQUFJLEVBQUEsR0FBQUksRUFBQUosRUFBQSxHQUFBUSxFQUFBUixFQUFBLElBQUFDLEVBQUFELEVBQUEsSUFBQUUsRUFBQUYsRUFBQSxJQUFBTyxFQUFBUCxFQUFBLEdBQUFtQixFQUFBLG1CQUFBeUUsU0FBQUEsT0FBQW1MLE1BQUFuTCxPQUFBbUwsS0FBQUMsS0FBQXBMLFNBQUE1RixFQUFBLEdBQUFMLEdBQUEyTSxRQUFBLFNBQUEzTSxHQUFBLE1BQUEsSUFBQTJOLFNBQUEsU0FBQXZOLEVBQUFnQixHQUFBLEdBQUFpRCxHQUFBckUsRUFBQW1RLEtBQUEzTSxFQUFBeEQsRUFBQWdSLE9BQUEvUSxHQUFBdU8sV0FBQW5LLFVBQUFiLEdBQUEsZUFBQSxJQUFBNUIsR0FBQSxHQUFBd08sZ0JBQUFuTSxFQUFBLHFCQUFBRyxHQUFBLENBQUEsSUFBQSxtQkFBQTZCLFVBQUFBLE9BQUFxTCxnQkFBQSxtQkFBQTFQLElBQUFyQixFQUFBUCxFQUFBZ0gsT0FBQXBGLEVBQUEsR0FBQXFFLFFBQUFxTCxlQUFBck4sRUFBQSxTQUFBRyxHQUFBLEVBQUF4QyxFQUFBMlAsV0FBQSxhQUFBM1AsRUFBQTRQLFVBQUEsY0FBQXhSLEVBQUF5UixLQUFBLENBQUEsR0FBQWxOLEdBQUF2RSxFQUFBeVIsS0FBQUMsVUFBQSxHQUFBbE0sRUFBQXhGLEVBQUF5UixLQUFBRSxVQUFBLEVBQUFuTyxHQUFBb08sY0FBQSxTQUFBcFEsRUFBQStDLEVBQUEsSUFBQWlCLEdBQUEsR0FBQTVELEVBQUFpUSxLQUFBN1IsRUFBQTJQLE9BQUF3QixjQUFBdFEsRUFBQWIsRUFBQWdILElBQUFoSCxFQUFBOFIsT0FBQTlSLEVBQUErUixtQkFBQSxHQUFBblEsRUFBQStPLFFBQUEzUSxFQUFBMlEsUUFBQS9PLEVBQUFxQyxHQUFBLFdBQUEsR0FBQXJDLElBQUEsSUFBQUEsRUFBQW9RLFlBQUE1TixLQUFBLElBQUF4QyxFQUFBcVEsUUFBQXJRLEVBQUFzUSxhQUFBLElBQUF0USxFQUFBc1EsWUFBQW5NLFFBQUEsVUFBQSxDQUFBLEdBQUExRixHQUFBLHlCQUFBdUIsR0FBQXRCLEVBQUFzQixFQUFBdVEseUJBQUEsS0FBQWxTLEVBQUFELEVBQUFvUyxjQUFBLFNBQUFwUyxFQUFBb1MsYUFBQXhRLEVBQUE4TixTQUFBOU4sRUFBQXlRLGFBQUF4UixHQUFBc1AsS0FBQWxRLEVBQUFnUyxPQUFBLE9BQUFyUSxFQUFBcVEsT0FBQSxJQUFBclEsRUFBQXFRLE9BQUFLLFdBQUEsT0FBQTFRLEVBQUFxUSxPQUFBLGFBQUFyUSxFQUFBMFEsV0FBQXRCLFFBQUEzUSxFQUFBOEYsT0FBQW5HLEVBQUFrTixRQUFBdEwsRUFBQW5CLEdBQUFMLEVBQUFnQixFQUFBUCxHQUFBZSxFQUFBLE9BQUFBLEVBQUEyUSxRQUFBLFdBQUFuUixFQUFBUixFQUFBLGdCQUFBWixJQUFBNEIsRUFBQSxNQUFBQSxFQUFBNFAsVUFBQSxXQUFBcFEsRUFBQVIsRUFBQSxjQUFBWixFQUFBMlEsUUFBQSxjQUFBM1EsRUFBQSxpQkFBQTRCLEVBQUEsTUFBQTNCLEVBQUFtUCx1QkFBQSxDQUFBLEdBQUFwTCxHQUFBM0QsRUFBQSxJQUFBOEQsR0FBQW5FLEVBQUF3UyxpQkFBQWpTLEVBQUFQLEVBQUFnSCxPQUFBaEgsRUFBQTRRLGVBQUE1TSxFQUFBeU8sS0FBQXpTLEVBQUE0USxnQkFBQSxNQUFBek0sS0FBQVgsRUFBQXhELEVBQUE2USxnQkFBQTFNLEdBQUEsR0FBQSxvQkFBQXZDLElBQUEzQixFQUFBb1AsUUFBQTdMLEVBQUEsU0FBQXhELEVBQUFJLEdBQUEsbUJBQUFpRSxJQUFBLGlCQUFBakUsRUFBQXVFLG9CQUFBbkIsR0FBQXBELEdBQUF3QixFQUFBOFEsaUJBQUF0UyxFQUFBSixLQUFBQSxFQUFBd1Msa0JBQUE1USxFQUFBNFEsaUJBQUEsR0FBQXhTLEVBQUFvUyxhQUFBLElBQUF4USxFQUFBd1EsYUFBQXBTLEVBQUFvUyxhQUFBLE1BQUFwUyxHQUFBLEdBQUEsU0FBQTRCLEVBQUF3USxhQUFBLEtBQUFwUyxHQUFBLGtCQUFBQSxHQUFBMlMsb0JBQUEvUSxFQUFBZ0QsaUJBQUEsV0FBQTVFLEVBQUEyUyxvQkFBQSxrQkFBQTNTLEdBQUE0UyxrQkFBQWhSLEVBQUFpUixRQUFBalIsRUFBQWlSLE9BQUFqTyxpQkFBQSxXQUFBNUUsRUFBQTRTLGtCQUFBNVMsRUFBQThTLGFBQUE5UyxFQUFBOFMsWUFBQUMsUUFBQTlDLEtBQUEsU0FBQWpRLEdBQUE0QixJQUFBQSxFQUFBb1IsUUFBQTVSLEVBQUFwQixHQUFBNEIsRUFBQSxRQUFBLFNBQUF5QyxJQUFBQSxFQUFBLE1BQUF6QyxFQUFBcVIsS0FBQTVPLE9BQUEsU0FBQXJFLEVBQUFJLEVBQUFDLEdBQUEsWUFBQSxJQUFBSixHQUFBSSxFQUFBLEVBQUFMLEdBQUEyTSxRQUFBLFNBQUEzTSxFQUFBSSxFQUFBQyxHQUFBLEdBQUFJLEdBQUFKLEVBQUE4RixPQUFBNEssY0FBQTFRLEdBQUE0UixRQUFBeFIsSUFBQUEsRUFBQUosRUFBQTRSLFFBQUE3UixFQUFBSCxFQUFBLG1DQUFBSSxFQUFBNFIsT0FBQTVSLEVBQUE4RixPQUFBLEtBQUE5RixJQUFBTCxFQUFBSyxLQUFBLFNBQUFMLEVBQUFJLEVBQUFDLEdBQUEsWUFBQSxJQUFBSixHQUFBSSxFQUFBLEdBQUFMLEdBQUEyTSxRQUFBLFNBQUEzTSxFQUFBSSxFQUFBQyxFQUFBSSxHQUFBLEdBQUFJLEdBQUEsR0FBQXFTLE9BQUFsVCxFQUFBLE9BQUFDLEdBQUFZLEVBQUFULEVBQUFDLEVBQUFJLEtBQUEsU0FBQVQsRUFBQUksR0FBQSxZQUFBSixHQUFBMk0sUUFBQSxTQUFBM00sRUFBQUksRUFBQUMsRUFBQUosR0FBQSxNQUFBRCxHQUFBbUcsT0FBQS9GLEVBQUFDLElBQUFMLEVBQUFtVCxLQUFBOVMsR0FBQUwsRUFBQTBQLFNBQUF6UCxFQUFBRCxJQUFBLFNBQUFBLEVBQUFJLEVBQUFDLEdBQUEsWUFBQSxTQUFBSixHQUFBRCxHQUFBLE1BQUFxSixvQkFBQXJKLEdBQUFvTyxRQUFBLFFBQUEsS0FBQUEsUUFBQSxRQUFBLEtBQUFBLFFBQUEsT0FBQSxLQUFBQSxRQUFBLFFBQUEsS0FBQUEsUUFBQSxPQUFBLEtBQUFBLFFBQUEsUUFBQSxLQUFBQSxRQUFBLFFBQUEsS0FBQSxHQUFBM04sR0FBQUosRUFBQSxFQUFBTCxHQUFBMk0sUUFBQSxTQUFBM00sRUFBQUksRUFBQUMsR0FBQSxJQUFBRCxFQUFBLE1BQUFKLEVBQUEsSUFBQWEsRUFBQSxJQUFBUixFQUFBUSxFQUFBUixFQUFBRCxPQUFBLElBQUFLLEVBQUEwTyxrQkFBQS9PLEdBQUFTLEVBQUFULEVBQUE4RCxlQUFBLENBQUEsR0FBQTVELEtBQUFHLEdBQUE0TyxRQUFBalAsRUFBQSxTQUFBSixFQUFBSSxHQUFBLE9BQUFKLEdBQUEsbUJBQUFBLEtBQUFTLEVBQUE4SixRQUFBdkssS0FBQUksR0FBQSxNQUFBSyxFQUFBOEosUUFBQXZLLEtBQUFBLEdBQUFBLElBQUFTLEVBQUE0TyxRQUFBclAsRUFBQSxTQUFBQSxHQUFBUyxFQUFBcU8sT0FBQTlPLEdBQUFBLEVBQUFBLEVBQUFvVCxjQUFBM1MsRUFBQW1PLFNBQUE1TyxLQUFBQSxFQUFBMkQsS0FBQUMsVUFBQTVELElBQUFNLEVBQUFvRSxLQUFBekUsRUFBQUcsR0FBQSxJQUFBSCxFQUFBRCxTQUFBYSxFQUFBUCxFQUFBK1MsS0FBQSxLQUFBLE1BQUF4UyxLQUFBYixJQUFBQSxFQUFBK0YsUUFBQSxRQUFBLEVBQUEsSUFBQSxLQUFBbEYsR0FBQWIsSUFBQSxTQUFBQSxFQUFBSSxFQUFBQyxHQUFBLFlBQUEsSUFBQUosR0FBQUksRUFBQSxFQUFBTCxHQUFBMk0sUUFBQSxTQUFBM00sR0FBQSxHQUFBSSxHQUFBQyxFQUFBSSxFQUFBSSxJQUFBLE9BQUFiLElBQUFDLEVBQUFvUCxRQUFBclAsRUFBQTZMLE1BQUEsTUFBQSxTQUFBN0wsR0FBQVMsRUFBQVQsRUFBQStGLFFBQUEsS0FBQTNGLEVBQUFILEVBQUFxUCxLQUFBdFAsRUFBQThHLE9BQUEsRUFBQXJHLElBQUFrRSxjQUFBdEUsRUFBQUosRUFBQXFQLEtBQUF0UCxFQUFBOEcsT0FBQXJHLEVBQUEsSUFBQUwsSUFBQVMsRUFBQVQsR0FBQVMsRUFBQVQsR0FBQVMsRUFBQVQsR0FBQSxLQUFBQyxFQUFBQSxLQUFBUSxHQUFBQSxJQUFBLFNBQUFiLEVBQUFJLEVBQUFDLEdBQUEsWUFBQSxJQUFBSixHQUFBSSxFQUFBLEVBQUFMLEdBQUEyTSxRQUFBMU0sRUFBQW1QLHVCQUFBLFdBQUEsUUFBQXBQLEdBQUFBLEdBQUEsR0FBQUksR0FBQUosQ0FBQSxPQUFBSyxLQUFBSSxFQUFBOEwsYUFBQSxPQUFBbk0sR0FBQUEsRUFBQUssRUFBQW1HLE1BQUFuRyxFQUFBOEwsYUFBQSxPQUFBbk0sSUFBQXdHLEtBQUFuRyxFQUFBbUcsS0FBQTBNLFNBQUE3UyxFQUFBNlMsU0FBQTdTLEVBQUE2UyxTQUFBbEYsUUFBQSxLQUFBLElBQUEsR0FBQW1GLEtBQUE5UyxFQUFBOFMsS0FBQUMsT0FBQS9TLEVBQUErUyxPQUFBL1MsRUFBQStTLE9BQUFwRixRQUFBLE1BQUEsSUFBQSxHQUFBcUYsS0FBQWhULEVBQUFnVCxLQUFBaFQsRUFBQWdULEtBQUFyRixRQUFBLEtBQUEsSUFBQSxHQUFBc0YsU0FBQWpULEVBQUFpVCxTQUFBQyxLQUFBbFQsRUFBQWtULEtBQUFDLFNBQUEsTUFBQW5ULEVBQUFtVCxTQUFBQyxPQUFBLEdBQUFwVCxFQUFBbVQsU0FBQSxJQUFBblQsRUFBQW1ULFVBQUEsR0FBQXhULEdBQUFDLEVBQUEsa0JBQUFQLEtBQUFrRCxVQUFBUixXQUFBL0IsRUFBQXdFLFNBQUFvSixjQUFBLElBQUEsT0FBQWpPLEdBQUFKLEVBQUFpRyxPQUFBVSxTQUFBQyxNQUFBLFNBQUF2RyxHQUFBLEdBQUFJLEdBQUFSLEVBQUF5TyxTQUFBck8sR0FBQUwsRUFBQUssR0FBQUEsQ0FBQSxPQUFBSSxHQUFBNlMsV0FBQWxULEVBQUFrVCxVQUFBN1MsRUFBQThTLE9BQUFuVCxFQUFBbVQsU0FBQSxXQUFBLE1BQUEsWUFBQSxPQUFBLE9BQUEsU0FBQXZULEVBQUFJLEdBQUEsWUFBQSxTQUFBQyxLQUFBcUssS0FBQW9KLFFBQUEsdUNBQUEsUUFBQTdULEdBQUFELEdBQUEsSUFBQSxHQUFBSSxHQUFBSCxFQUFBWSxFQUFBTCxPQUFBUixHQUFBTSxFQUFBLEdBQUFDLEVBQUEsRUFBQUssRUFBQUgsRUFBQUksRUFBQWdULE9BQUEsRUFBQXRULEtBQUFLLEVBQUEsSUFBQUwsRUFBQSxHQUFBRCxHQUFBTSxFQUFBaVQsT0FBQSxHQUFBelQsR0FBQSxFQUFBRyxFQUFBLEVBQUEsR0FBQSxDQUFBLEdBQUFOLEVBQUFZLEVBQUE0RCxXQUFBbEUsR0FBQSxLQUFBTixFQUFBLElBQUEsS0FBQSxJQUFBSSxFQUFBRCxHQUFBQSxHQUFBLEVBQUFILEVBQUEsTUFBQUssR0FBQSxHQUFBRyxHQUFBLG1FQUFBSixHQUFBc0MsVUFBQSxHQUFBdVEsT0FBQTdTLEVBQUFzQyxVQUFBd1EsS0FBQSxFQUFBOVMsRUFBQXNDLFVBQUFsRCxLQUFBLHdCQUFBTyxFQUFBMk0sUUFBQTFNLEdBQUEsU0FBQUQsRUFBQUksRUFBQUMsR0FBQSxZQUFBLElBQUFKLEdBQUFJLEVBQUEsRUFBQUwsR0FBQTJNLFFBQUExTSxFQUFBbVAsdUJBQUEsV0FBQSxPQUFBMkUsTUFBQSxTQUFBL1QsRUFBQUksRUFBQUMsRUFBQUksRUFBQUksRUFBQVAsR0FBQSxHQUFBQyxLQUFBQSxHQUFBbUUsS0FBQTFFLEVBQUEsSUFBQXFKLG1CQUFBakosSUFBQUgsRUFBQTBPLFNBQUF0TyxJQUFBRSxFQUFBbUUsS0FBQSxXQUFBLEdBQUE1RCxNQUFBVCxHQUFBYyxlQUFBbEIsRUFBQXlPLFNBQUFqTyxJQUFBRixFQUFBbUUsS0FBQSxRQUFBakUsR0FBQVIsRUFBQXlPLFNBQUE3TixJQUFBTixFQUFBbUUsS0FBQSxVQUFBN0QsR0FBQVAsS0FBQSxHQUFBQyxFQUFBbUUsS0FBQSxVQUFBTyxTQUFBL0QsT0FBQVgsRUFBQThTLEtBQUEsT0FBQVosS0FBQSxTQUFBelMsR0FBQSxHQUFBSSxHQUFBNkUsU0FBQS9ELE9BQUE4UyxNQUFBLEdBQUEzUyxRQUFBLGFBQUFyQixFQUFBLGFBQUEsT0FBQUksR0FBQWtKLG1CQUFBbEosRUFBQSxJQUFBLE1BQUE2VCxPQUFBLFNBQUFqVSxHQUFBMEssS0FBQXFKLE1BQUEvVCxFQUFBLEdBQUFjLEtBQUErRixNQUFBLFlBQUEsV0FBQSxPQUFBa04sTUFBQSxhQUFBdEIsS0FBQSxXQUFBLE1BQUEsT0FBQXdCLE9BQUEsa0JBQUEsU0FBQWpVLEVBQUFJLEVBQUFDLEdBQUEsWUFBQSxTQUFBSixLQUFBeUssS0FBQXdKLFlBQUEsR0FBQXpULEdBQUFKLEVBQUEsRUFBQUosR0FBQTBDLFVBQUF3UixJQUFBLFNBQUFuVSxFQUFBSSxHQUFBLE1BQUFzSyxNQUFBd0osU0FBQXhQLE1BQUFxTCxVQUFBL1AsRUFBQWdRLFNBQUE1UCxJQUFBc0ssS0FBQXdKLFNBQUF2VCxPQUFBLEdBQUFWLEVBQUEwQyxVQUFBeVIsTUFBQSxTQUFBcFUsR0FBQTBLLEtBQUF3SixTQUFBbFUsS0FBQTBLLEtBQUF3SixTQUFBbFUsR0FBQSxPQUFBQyxFQUFBMEMsVUFBQTBNLFFBQUEsU0FBQXJQLEdBQUFTLEVBQUE0TyxRQUFBM0UsS0FBQXdKLFNBQUEsU0FBQTlULEdBQUEsT0FBQUEsR0FBQUosRUFBQUksTUFBQUosRUFBQTJNLFFBQUExTSxHQUFBLFNBQUFELEVBQUFJLEVBQUFDLEdBQUEsWUFBQSxTQUFBSixHQUFBRCxHQUFBQSxFQUFBOFMsYUFBQTlTLEVBQUE4UyxZQUFBdUIsbUJBQUEsR0FBQTVULEdBQUFKLEVBQUEsR0FBQVEsRUFBQVIsRUFBQSxJQUFBQyxFQUFBRCxFQUFBLElBQUFFLEVBQUFGLEVBQUEsRUFBQUwsR0FBQTJNLFFBQUEsU0FBQTNNLEdBQUFDLEVBQUFELEdBQUFBLEVBQUFnUixRQUFBaFIsRUFBQWdSLFlBQUFoUixFQUFBbVEsS0FBQXRQLEVBQUFiLEVBQUFtUSxLQUFBblEsRUFBQWdSLFFBQUFoUixFQUFBd1Esa0JBQUF4USxFQUFBZ1IsUUFBQXZRLEVBQUE2TSxNQUFBdE4sRUFBQWdSLFFBQUFDLFdBQUFqUixFQUFBZ1IsUUFBQWhSLEVBQUEyUCxZQUFBM1AsRUFBQWdSLGFBQUF2USxFQUFBNE8sU0FBQSxTQUFBLE1BQUEsT0FBQSxPQUFBLE1BQUEsUUFBQSxVQUFBLFNBQUFqUCxTQUFBSixHQUFBZ1IsUUFBQTVRLElBQUEsSUFBQUEsR0FBQUosRUFBQXVRLFNBQUFoUSxFQUFBZ1EsT0FBQSxPQUFBblEsR0FBQUosR0FBQWlRLEtBQUEsU0FBQTdQLEdBQUEsTUFBQUgsR0FBQUQsR0FBQUksRUFBQStQLEtBQUF0UCxFQUFBVCxFQUFBK1AsS0FBQS9QLEVBQUE0USxRQUFBaFIsRUFBQXlRLG1CQUFBclEsR0FBQSxTQUFBQSxHQUFBLE1BQUFFLEdBQUFGLEtBQUFILEVBQUFELEdBQUFJLEdBQUFBLEVBQUFzUCxXQUFBdFAsRUFBQXNQLFNBQUFTLEtBQUF0UCxFQUFBVCxFQUFBc1AsU0FBQVMsS0FBQS9QLEVBQUFzUCxTQUFBc0IsUUFBQWhSLEVBQUF5USxxQkFBQTlDLFFBQUEyRyxPQUFBbFUsT0FBQSxTQUFBSixFQUFBSSxFQUFBQyxHQUFBLFlBQUEsSUFBQUosR0FBQUksRUFBQSxFQUFBTCxHQUFBMk0sUUFBQSxTQUFBM00sRUFBQUksRUFBQUMsR0FBQSxNQUFBSixHQUFBb1AsUUFBQWhQLEVBQUEsU0FBQUEsR0FBQUwsRUFBQUssRUFBQUwsRUFBQUksS0FBQUosSUFBQSxTQUFBQSxFQUFBSSxHQUFBLFlBQUFKLEdBQUEyTSxRQUFBLFNBQUEzTSxHQUFBLFNBQUFBLElBQUFBLEVBQUF1VSxjQUFBLFNBQUF2VSxFQUFBSSxHQUFBLFlBQUFKLEdBQUEyTSxRQUFBLFNBQUEzTSxHQUFBLE1BQUEsZ0NBQUFGLEtBQUFFLEtBQUEsU0FBQUEsRUFBQUksR0FBQSxZQUFBSixHQUFBMk0sUUFBQSxTQUFBM00sRUFBQUksR0FBQSxNQUFBSixHQUFBb08sUUFBQSxPQUFBLElBQUEsSUFBQWhPLEVBQUFnTyxRQUFBLE9BQUEsTUFBQSxTQUFBcE8sRUFBQUksR0FBQSxZQUFBLFNBQUFDLEdBQUFMLEdBQUEwSyxLQUFBb0osUUFBQTlULEVBQUFLLEVBQUFzQyxVQUFBdUIsU0FBQSxXQUFBLE1BQUEsVUFBQXdHLEtBQUFvSixRQUFBLEtBQUFwSixLQUFBb0osUUFBQSxLQUFBelQsRUFBQXNDLFVBQUE0UixZQUFBLEVBQUF2VSxFQUFBMk0sUUFBQXRNLEdBQUEsU0FBQUwsRUFBQUksRUFBQUMsR0FBQSxZQUFBLFNBQUFKLEdBQUFELEdBQUEsR0FBQSxrQkFBQUEsR0FBQSxLQUFBLElBQUF3VSxXQUFBLCtCQUFBLElBQUFwVSxFQUFBc0ssTUFBQXFJLFFBQUEsR0FBQXBGLFNBQUEsU0FBQTNOLEdBQUFJLEVBQUFKLEdBQUEsSUFBQUssR0FBQXFLLElBQUExSyxHQUFBLFNBQUFBLEdBQUFLLEVBQUFvVSxTQUFBcFUsRUFBQW9VLE9BQUEsR0FBQWhVLEdBQUFULEdBQUFJLEVBQUFDLEVBQUFvVSxXQUFBLEdBQUFoVSxHQUFBSixFQUFBLEdBQUFKLEdBQUEwQyxVQUFBMFIsaUJBQUEsV0FBQSxHQUFBM0osS0FBQStKLE9BQUEsS0FBQS9KLE1BQUErSixRQUFBeFUsRUFBQXlVLE9BQUEsV0FBQSxHQUFBMVUsR0FBQUksRUFBQSxHQUFBSCxHQUFBLFNBQUFHLEdBQUFKLEVBQUFJLEdBQUEsUUFBQXVVLE1BQUF2VSxFQUFBd1UsT0FBQTVVLElBQUFBLEVBQUEyTSxRQUFBMU0sR0FBQSxTQUFBRCxFQUFBSSxHQUFBLFlBQUFKLEdBQUEyTSxRQUFBLFNBQUEzTSxHQUFBLE1BQUEsVUFBQUksR0FBQSxNQUFBSixHQUFBdVAsTUFBQSxLQUFBblAsV0NEQSxTQUFBQSxFQUFBSixHQUFBLGdCQUFBMk0sVUFBQSxtQkFBQUMsUUFBQUEsT0FBQUQsUUFBQTNNLElBQUEsa0JBQUE2TSxTQUFBQSxPQUFBQyxJQUFBRCxPQUFBN00sR0FBQUksRUFBQXlVLFdBQUE3VSxLQUFBMEssS0FBQSxXQUFBLFlBQUEsU0FBQXRLLEdBQUFBLEdBQUEsTUFBQSxrQkFBQUEsSUFBQSxnQkFBQUEsSUFBQSxPQUFBQSxFQUFBLFFBQUFKLEdBQUFJLEdBQUEsTUFBQSxrQkFBQUEsR0FBQSxRQUFBQyxHQUFBRCxHQUFBYSxFQUFBYixFQUFBLFFBQUFILEdBQUFHLEdBQUFxRyxFQUFBckcsRUFBQSxRQUFBSyxLQUFBLE1BQUEsWUFBQSxNQUFBNFAsU0FBQXlFLFNBQUF2VSxJQUFBLFFBQUFELEtBQUEsTUFBQSxtQkFBQXdJLEdBQUEsV0FBQUEsRUFBQXZJLElBQUFpQixJQUFBLFFBQUFYLEtBQUEsR0FBQVQsR0FBQSxFQUFBSixFQUFBLEdBQUFvSSxHQUFBN0gsR0FBQUYsRUFBQTRFLFNBQUE4UCxlQUFBLEdBQUEsT0FBQS9VLEdBQUFnVixRQUFBM1UsR0FBQTRVLGVBQUEsSUFBQSxXQUFBNVUsRUFBQThQLEtBQUEvUCxJQUFBQSxFQUFBLEdBQUEsUUFBQVEsS0FBQSxHQUFBUixHQUFBLEdBQUE4VSxlQUFBLE9BQUE5VSxHQUFBK1UsTUFBQUMsVUFBQTdVLEVBQUEsV0FBQSxNQUFBSCxHQUFBaVYsTUFBQUMsWUFBQSxJQUFBLFFBQUE5VCxLQUFBLEdBQUFwQixHQUFBbVYsVUFBQSxPQUFBLFlBQUEsTUFBQW5WLEdBQUFHLEVBQUEsSUFBQSxRQUFBQSxLQUFBLElBQUEsR0FBQUgsR0FBQSxFQUFBQSxFQUFBc0csRUFBQXRHLEdBQUEsRUFBQSxDQUFBLEdBQUFKLEdBQUFWLEVBQUFjLEdBQUFDLEVBQUFmLEVBQUFjLEVBQUEsRUFBQUosR0FBQUssR0FBQWYsRUFBQWMsR0FBQSxPQUFBZCxFQUFBYyxFQUFBLEdBQUEsT0FBQXNHLEVBQUEsRUFBQSxRQUFBdEYsS0FBQSxJQUFBLEdBQUFoQixHQUFBb1YsUUFBQXhWLEVBQUFJLEVBQUEsUUFBQSxPQUFBMEksR0FBQTlJLEVBQUF5VixXQUFBelYsRUFBQTBWLGFBQUFwVixJQUFBLE1BQUFELEdBQUEsTUFBQW1CLE1BQUEsUUFBQUksR0FBQXhCLEVBQUFKLEdBQUEsR0FBQUssR0FBQWlPLFVBQUFyTyxFQUFBeUssS0FBQWpLLEVBQUEsR0FBQWlLLE1BQUFpTCxZQUFBdFIsRUFBQSxVQUFBNUQsRUFBQW1WLEtBQUFsUSxFQUFBakYsRUFBQSxJQUFBSCxHQUFBTCxFQUFBNFYsTUFBQSxPQUFBdlYsSUFBQSxXQUFBLEdBQUFGLEdBQUFDLEVBQUFDLEVBQUEsRUFBQW1HLEdBQUEsV0FBQSxNQUFBVyxHQUFBOUcsRUFBQUcsRUFBQUwsRUFBQUgsRUFBQTZWLGNBQUEvUSxFQUFBOUUsRUFBQVEsRUFBQUwsRUFBQUosR0FBQVMsRUFBQSxRQUFBd0QsR0FBQTdELEdBQUEsR0FBQUosR0FBQTBLLElBQUEsSUFBQXRLLEdBQUEsZ0JBQUFBLElBQUFBLEVBQUF1VixjQUFBM1YsRUFBQSxNQUFBSSxFQUFBLElBQUFDLEdBQUEsR0FBQUwsR0FBQXFFLEVBQUEsT0FBQUwsR0FBQTNELEVBQUFELEdBQUFDLEVBQUEsUUFBQWdFLE1BQUEsUUFBQUYsS0FBQSxNQUFBLElBQUFxUSxXQUFBLDRDQUFBLFFBQUFoUixLQUFBLE1BQUEsSUFBQWdSLFdBQUEsd0RBQUEsUUFBQWpULEdBQUFuQixHQUFBLElBQUEsTUFBQUEsR0FBQTZQLEtBQUEsTUFBQWpRLEdBQUEsTUFBQStWLElBQUFDLE1BQUFoVyxFQUFBK1YsSUFBQSxRQUFBeFIsR0FBQW5FLEVBQUFKLEVBQUFLLEVBQUFKLEdBQUEsSUFBQUcsRUFBQXlDLEtBQUE3QyxFQUFBSyxFQUFBSixHQUFBLE1BQUFRLEdBQUEsTUFBQUEsSUFBQSxRQUFBMkQsR0FBQWhFLEVBQUFKLEVBQUFLLEdBQUFvRyxFQUFBLFNBQUFyRyxHQUFBLEdBQUFILElBQUEsRUFBQVEsRUFBQThELEVBQUFsRSxFQUFBTCxFQUFBLFNBQUFLLEdBQUFKLElBQUFBLEdBQUEsRUFBQUQsSUFBQUssRUFBQTJELEVBQUE1RCxFQUFBQyxHQUFBd0YsRUFBQXpGLEVBQUFDLEtBQUEsU0FBQUwsR0FBQUMsSUFBQUEsR0FBQSxFQUFBMkgsRUFBQXhILEVBQUFKLEtBQUEsWUFBQUksRUFBQTZWLFFBQUEsc0JBQUFoVyxHQUFBUSxJQUFBUixHQUFBLEVBQUEySCxFQUFBeEgsRUFBQUssS0FBQUwsR0FBQSxRQUFBb0UsR0FBQXBFLEVBQUFKLEdBQUFBLEVBQUE2VixTQUFBSyxHQUFBclEsRUFBQXpGLEVBQUFKLEVBQUE4VixTQUFBOVYsRUFBQTZWLFNBQUFNLEdBQUF2TyxFQUFBeEgsRUFBQUosRUFBQThWLFNBQUEvUSxFQUFBL0UsRUFBQSxPQUFBLFNBQUFBLEdBQUEsTUFBQWdFLEdBQUE1RCxFQUFBSixJQUFBLFNBQUFBLEdBQUEsTUFBQTRILEdBQUF4SCxFQUFBSixLQUFBLFFBQUF3RixHQUFBcEYsRUFBQUMsRUFBQUosR0FBQUksRUFBQXNWLGNBQUF2VixFQUFBdVYsYUFBQTFWLElBQUEyQixHQUFBdkIsRUFBQXNWLFlBQUE5RixVQUFBNUwsRUFBQU8sRUFBQXBFLEVBQUFDLEdBQUFKLElBQUE4VixHQUFBbk8sRUFBQXhILEVBQUEyVixHQUFBQyxPQUFBLFNBQUEvVixFQUFBNEYsRUFBQXpGLEVBQUFDLEdBQUFMLEVBQUFDLEdBQUFtRSxFQUFBaEUsRUFBQUMsRUFBQUosR0FBQTRGLEVBQUF6RixFQUFBQyxHQUFBLFFBQUEyRCxHQUFBaEUsRUFBQUssR0FBQUwsSUFBQUssRUFBQXVILEVBQUE1SCxFQUFBbUUsS0FBQS9ELEVBQUFDLEdBQUFtRixFQUFBeEYsRUFBQUssRUFBQWtCLEVBQUFsQixJQUFBd0YsRUFBQTdGLEVBQUFLLEdBQUEsUUFBQWlFLEdBQUFsRSxHQUFBQSxFQUFBZ1csVUFBQWhXLEVBQUFnVyxTQUFBaFcsRUFBQTBWLFNBQUFwTyxFQUFBdEgsR0FBQSxRQUFBeUYsR0FBQXpGLEVBQUFKLEdBQUFJLEVBQUF5VixTQUFBUSxLQUFBalcsRUFBQTBWLFFBQUE5VixFQUFBSSxFQUFBeVYsT0FBQUssR0FBQSxJQUFBOVYsRUFBQWtXLGFBQUEzVixRQUFBOEYsRUFBQWlCLEVBQUF0SCxJQUFBLFFBQUF3SCxHQUFBeEgsRUFBQUosR0FBQUksRUFBQXlWLFNBQUFRLEtBQUFqVyxFQUFBeVYsT0FBQU0sR0FBQS9WLEVBQUEwVixRQUFBOVYsRUFBQXlHLEVBQUFuQyxFQUFBbEUsSUFBQSxRQUFBMkUsR0FBQTNFLEVBQUFKLEVBQUFLLEVBQUFKLEdBQUEsR0FBQVEsR0FBQUwsRUFBQWtXLGFBQUFoVyxFQUFBRyxFQUFBRSxNQUFBUCxHQUFBZ1csU0FBQSxLQUFBM1YsRUFBQUgsR0FBQU4sRUFBQVMsRUFBQUgsRUFBQTRWLElBQUE3VixFQUFBSSxFQUFBSCxFQUFBNlYsSUFBQWxXLEVBQUEsSUFBQUssR0FBQUYsRUFBQXlWLFFBQUFwUCxFQUFBaUIsRUFBQXRILEdBQUEsUUFBQXNILEdBQUF0SCxHQUFBLEdBQUFKLEdBQUFJLEVBQUFrVyxhQUFBalcsRUFBQUQsRUFBQXlWLE1BQUEsSUFBQSxJQUFBN1YsRUFBQVcsT0FBQSxDQUFBLElBQUEsR0FBQVYsR0FBQSxPQUFBUSxFQUFBLE9BQUFILEVBQUFGLEVBQUEwVixRQUFBalYsRUFBQSxFQUFBQSxFQUFBYixFQUFBVyxPQUFBRSxHQUFBLEVBQUFaLEVBQUFELEVBQUFhLEdBQUFKLEVBQUFULEVBQUFhLEVBQUFSLEdBQUFKLEVBQUFtSCxFQUFBL0csRUFBQUosRUFBQVEsRUFBQUgsR0FBQUcsRUFBQUgsRUFBQUYsR0FBQWtXLGFBQUEzVixPQUFBLEdBQUEsUUFBQThHLEtBQUFpRCxLQUFBc0wsTUFBQSxLQUFBLFFBQUExUSxHQUFBbEYsRUFBQUosR0FBQSxJQUFBLE1BQUFJLEdBQUFKLEdBQUEsTUFBQUssR0FBQSxNQUFBa1csSUFBQVAsTUFBQTNWLEVBQUFrVyxJQUFBLFFBQUFuUCxHQUFBaEgsRUFBQUMsRUFBQUosRUFBQVEsR0FBQSxHQUFBSCxHQUFBTixFQUFBQyxHQUFBWSxFQUFBLE9BQUFELEVBQUEsT0FBQVksRUFBQSxPQUFBakIsRUFBQSxNQUFBLElBQUFELEdBQUEsR0FBQU8sRUFBQXlFLEVBQUFyRixFQUFBUSxHQUFBSSxJQUFBMFYsSUFBQWhXLEdBQUEsRUFBQUssRUFBQUMsRUFBQW1WLE1BQUFuVixFQUFBLE1BQUFXLEdBQUEsRUFBQW5CLElBQUFRLEVBQUEsV0FBQStHLEdBQUF2SCxFQUFBbUQsU0FBQTNDLEdBQUFKLEVBQUFlLEdBQUEsQ0FBQW5CLEdBQUF3VixTQUFBUSxLQUFBL1YsR0FBQWtCLEVBQUF3QyxFQUFBM0QsRUFBQVEsR0FBQU4sRUFBQXFILEVBQUF2SCxFQUFBTyxHQUFBUixJQUFBOFYsR0FBQXJRLEVBQUF4RixFQUFBUSxHQUFBVCxJQUFBK1YsSUFBQXZPLEVBQUF2SCxFQUFBUSxJQUFBLFFBQUFtRixHQUFBNUYsRUFBQUosR0FBQSxJQUFBQSxFQUFBLFNBQUFBLEdBQUFnRSxFQUFBNUQsRUFBQUosSUFBQSxTQUFBQSxHQUFBNEgsRUFBQXhILEVBQUFKLEtBQUEsTUFBQUssR0FBQXVILEVBQUF4SCxFQUFBQyxJQUFBLFFBQUF5QyxLQUFBLE1BQUEwVCxNQUFBLFFBQUE5USxHQUFBdEYsR0FBQUEsRUFBQXdWLElBQUFZLEtBQUFwVyxFQUFBeVYsT0FBQSxPQUFBelYsRUFBQTBWLFFBQUEsT0FBQTFWLEVBQUFrVyxnQkFBQSxRQUFBOVAsR0FBQXBHLEVBQUFKLEdBQUEwSyxLQUFBK0wscUJBQUFyVyxFQUFBc0ssS0FBQXFJLFFBQUEsR0FBQTNTLEdBQUFpRSxHQUFBcUcsS0FBQXFJLFFBQUE2QyxLQUFBbFEsRUFBQWdGLEtBQUFxSSxTQUFBdFAsRUFBQXpELElBQUEwSyxLQUFBZ00sT0FBQTFXLEVBQUEwSyxLQUFBL0osT0FBQVgsRUFBQVcsT0FBQStKLEtBQUFpTSxXQUFBM1csRUFBQVcsT0FBQStKLEtBQUFvTCxRQUFBLEdBQUF4TCxPQUFBSSxLQUFBL0osUUFBQSxJQUFBK0osS0FBQS9KLE9BQUFrRixFQUFBNkUsS0FBQXFJLFFBQUFySSxLQUFBb0wsVUFBQXBMLEtBQUEvSixPQUFBK0osS0FBQS9KLFFBQUEsRUFBQStKLEtBQUFrTSxhQUFBLElBQUFsTSxLQUFBaU0sWUFBQTlRLEVBQUE2RSxLQUFBcUksUUFBQXJJLEtBQUFvTCxXQUFBbE8sRUFBQThDLEtBQUFxSSxRQUFBek0sS0FBQSxRQUFBQSxLQUFBLE1BQUEsSUFBQTRNLE9BQUEsMkNBQUEsUUFBQXpSLEdBQUFyQixHQUFBLE1BQUEsSUFBQW9HLEdBQUFrRSxLQUFBdEssR0FBQTJTLFFBQUEsUUFBQXZMLEdBQUFwSCxHQUFBLEdBQUFKLEdBQUEwSyxJQUFBLE9BQUEsSUFBQTFLLEdBQUF5RCxFQUFBckQsR0FBQSxTQUFBQyxFQUFBSixHQUFBLElBQUEsR0FBQVEsR0FBQUwsRUFBQU8sT0FBQUwsRUFBQSxFQUFBQSxFQUFBRyxFQUFBSCxJQUFBTixFQUFBNlAsUUFBQXpQLEVBQUFFLElBQUEyUCxLQUFBNVAsRUFBQUosSUFBQSxTQUFBRyxFQUFBSixHQUFBLE1BQUFBLEdBQUEsR0FBQXdVLFdBQUEsc0NBQUEsUUFBQWpMLEdBQUFuSixHQUFBLEdBQUFKLEdBQUEwSyxLQUFBckssRUFBQSxHQUFBTCxHQUFBcUUsRUFBQSxPQUFBdUQsR0FBQXZILEVBQUFELEdBQUFDLEVBQUEsUUFBQWlDLEtBQUEsS0FBQSxJQUFBa1MsV0FBQSxzRkFBQSxRQUFBbk8sS0FBQSxLQUFBLElBQUFtTyxXQUFBLHlIQUFBLFFBQUFwUixHQUFBaEQsR0FBQXNLLEtBQUFrTCxJQUFBOVMsSUFBQTRILEtBQUFvTCxRQUFBcEwsS0FBQW1MLE9BQUEsT0FBQW5MLEtBQUE0TCxnQkFBQWpTLElBQUFqRSxJQUFBLGtCQUFBQSxJQUFBa0MsSUFBQW9JLGVBQUF0SCxHQUFBNEMsRUFBQTBFLEtBQUF0SyxHQUFBaUcsS0FBQSxRQUFBcUQsS0FBQSxHQUFBdEosR0FBQSxNQUFBLElBQUEsbUJBQUF5VyxRQUFBelcsRUFBQXlXLFdBQUEsSUFBQSxtQkFBQUMsTUFBQTFXLEVBQUEwVyxTQUFBLEtBQUExVyxFQUFBMlcsU0FBQSxpQkFBQSxNQUFBL1csR0FBQSxLQUFBLElBQUFrVCxPQUFBLDRFQUFBLEdBQUE3UyxHQUFBRCxFQUFBdU4sT0FBQSxJQUFBdE4sRUFBQSxDQUFBLEdBQUFKLEdBQUEsSUFBQSxLQUFBQSxFQUFBeUMsT0FBQUMsVUFBQXVCLFNBQUFyQixLQUFBeEMsRUFBQXdQLFdBQUEsTUFBQTdQLElBQUEsR0FBQSxxQkFBQUMsSUFBQUksRUFBQTJXLEtBQUEsT0FBQTVXLEVBQUF1TixRQUFBdkssRUFBQSxHQUFBbUQsR0FBQSxNQUFBQSxHQUFBK0QsTUFBQUMsUUFBQUQsTUFBQUMsUUFBQSxTQUFBbkssR0FBQSxNQUFBLG1CQUFBc0MsT0FBQUMsVUFBQXVCLFNBQUFyQixLQUFBekMsR0FBQSxJQUFBcUQsR0FBQThDLEVBQUFHLEVBQUEsRUFBQW9DLEVBQUEsT0FBQTdILEVBQUEsT0FBQXdGLEVBQUEsU0FBQXJHLEVBQUFKLEdBQUFWLEVBQUFvSCxHQUFBdEcsRUFBQWQsRUFBQW9ILEVBQUEsR0FBQTFHLEVBQUEwRyxHQUFBLEVBQUEsSUFBQUEsSUFBQXpGLEVBQUFBLEVBQUFWLEdBQUEwVyxPQUFBN1IsRUFBQSxtQkFBQWEsUUFBQUEsT0FBQSxPQUFBOUYsRUFBQWlGLE1BQUFnRCxFQUFBakksRUFBQStXLGtCQUFBL1csRUFBQWdYLHVCQUFBOVIsRUFBQSxtQkFBQXlSLE9BQUEsbUJBQUF6RyxVQUFBLHdCQUFBbk0sU0FBQXJCLEtBQUF3TixTQUFBdkksRUFBQSxtQkFBQXNQLG9CQUFBLG1CQUFBQyxnQkFBQSxtQkFBQW5DLGdCQUFBNVYsRUFBQSxHQUFBZ0wsT0FBQSxLQUFBMk0sR0FBQSxNQUFBQSxJQUFBNVIsRUFBQTVFLElBQUEySCxFQUFBdkgsSUFBQWlILEVBQUFsSCxJQUFBLFNBQUF3RSxHQUFBLGtCQUFBb1EsU0FBQXBVLElBQUFJLEdBQUEsSUFBQW9VLElBQUEvUixLQUFBQyxTQUFBSSxTQUFBLElBQUF1QixVQUFBLElBQUE0USxHQUFBLE9BQUFILEdBQUEsRUFBQUMsR0FBQSxFQUFBSixHQUFBLEdBQUF0TyxHQUFBOE8sR0FBQSxHQUFBOU8sR0FBQStPLEdBQUEsQ0FBQSxPQUFBaFEsR0FBQTdELFVBQUFpVSxXQUFBLFdBQUEsSUFBQSxHQUFBeFcsR0FBQXNLLEtBQUEvSixPQUFBWCxFQUFBMEssS0FBQWdNLE9BQUFyVyxFQUFBLEVBQUFxSyxLQUFBbUwsU0FBQVEsSUFBQWhXLEVBQUFELEVBQUFDLElBQUFxSyxLQUFBNE0sV0FBQXRYLEVBQUFLLEdBQUFBLElBQUFtRyxFQUFBN0QsVUFBQTJVLFdBQUEsU0FBQWxYLEVBQUFKLEdBQUEsR0FBQUssR0FBQXFLLEtBQUErTCxxQkFBQXhXLEVBQUFJLEVBQUF3UCxPQUFBLElBQUE1UCxJQUFBZ0UsRUFBQSxDQUFBLEdBQUF4RCxHQUFBYyxFQUFBbkIsRUFBQSxJQUFBSyxJQUFBbUIsR0FBQXhCLEVBQUF5VixTQUFBUSxHQUFBM0wsS0FBQTZNLFdBQUFuWCxFQUFBeVYsT0FBQTdWLEVBQUFJLEVBQUEwVixhQUFBLElBQUEsa0JBQUFyVixHQUFBaUssS0FBQWlNLGFBQUFqTSxLQUFBb0wsUUFBQTlWLEdBQUFJLE1BQUEsSUFBQUMsSUFBQStDLEVBQUEsQ0FBQSxHQUFBOUMsR0FBQSxHQUFBRCxHQUFBZ0UsRUFBQW1CLEdBQUFsRixFQUFBRixFQUFBSyxHQUFBaUssS0FBQThNLGNBQUFsWCxFQUFBTixPQUFBMEssTUFBQThNLGNBQUEsR0FBQW5YLEdBQUEsU0FBQUwsR0FBQSxNQUFBQSxHQUFBSSxLQUFBSixPQUFBMEssTUFBQThNLGNBQUF2WCxFQUFBRyxHQUFBSixJQUFBd0csRUFBQTdELFVBQUE0VSxXQUFBLFNBQUFuWCxFQUFBSixFQUFBSyxHQUFBLEdBQUFKLEdBQUF5SyxLQUFBcUksT0FBQTlTLEdBQUE0VixTQUFBUSxLQUFBM0wsS0FBQWlNLGFBQUF2VyxJQUFBK1YsR0FBQXZPLEVBQUEzSCxFQUFBSSxHQUFBcUssS0FBQW9MLFFBQUE5VixHQUFBSyxHQUFBLElBQUFxSyxLQUFBaU0sWUFBQTlRLEVBQUE1RixFQUFBeUssS0FBQW9MLFVBQUF0UCxFQUFBN0QsVUFBQTZVLGNBQUEsU0FBQXBYLEVBQUFKLEdBQUEsR0FBQUssR0FBQXFLLElBQUEzRixHQUFBM0UsRUFBQSxPQUFBLFNBQUFBLEdBQUEsTUFBQUMsR0FBQWtYLFdBQUFyQixHQUFBbFcsRUFBQUksSUFBQSxTQUFBQSxHQUFBLE1BQUFDLEdBQUFrWCxXQUFBcEIsR0FBQW5XLEVBQUFJLE1BQUFnRCxFQUFBc0ssSUFBQWpNLEVBQUEyQixFQUFBcVUsS0FBQWpRLEVBQUFwRSxFQUFBeU0sUUFBQTVMLEVBQUFiLEVBQUFrUixPQUFBL0ssRUFBQW5HLEVBQUFzVSxjQUFBclgsRUFBQStDLEVBQUF1VSxTQUFBMVgsRUFBQW1ELEVBQUF3VSxNQUFBblIsRUFBQXJELEVBQUFULFdBQUFnVCxZQUFBdlMsRUFBQTZNLEtBQUFyTyxFQUFBaVcsTUFBQSxTQUFBelgsR0FBQSxNQUFBc0ssTUFBQXVGLEtBQUEsS0FBQTdQLEtBQUFnRCxFQUFBMFUsU0FBQXBPLEVBQUF0RyxFQUFBdUssUUFBQXZLLEVBQUFBLElBQUF5UixXQUFBaUQsWUNDQSxTQUFBdlgsRUFBQWlFLEdBQUEsZ0JBQUFvSSxTQUFBLGdCQUFBQSxRQUFBRCxRQUFBQyxPQUFBRCxRQUFBcE0sRUFBQTBFLFNBQUFULEVBQUFqRSxHQUFBLEdBQUEsU0FBQUEsR0FBQSxJQUFBQSxFQUFBMEUsU0FBQSxLQUFBLElBQUFpTyxPQUFBLDJDQUFBLE9BQUExTyxHQUFBakUsSUFBQWlFLEVBQUFqRSxJQUFBLG1CQUFBMEYsUUFBQUEsT0FBQXlFLEtBQUEsU0FBQW5LLEVBQUFpRSxHQUFBLFFBQUF2RSxHQUFBTSxHQUFBLEdBQUFpRSxHQUFBakUsRUFBQUksT0FBQWEsRUFBQTRDLEdBQUFVLEtBQUF2RSxFQUFBLE9BQUEsYUFBQWlCLElBQUE0QyxHQUFBMlQsU0FBQXhYLE9BQUEsSUFBQUEsRUFBQXlYLFdBQUF4VCxLQUFBLFVBQUFoRCxHQUFBLElBQUFnRCxHQUFBLGdCQUFBQSxJQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQWpFLEtBQUEsUUFBQWlGLEdBQUFqRixFQUFBaUUsRUFBQWhELEdBQUEsR0FBQTRDLEdBQUE2SyxXQUFBekssR0FBQSxNQUFBSixJQUFBNlQsS0FBQTFYLEVBQUEsU0FBQUEsRUFBQWlELEdBQUEsUUFBQWdCLEVBQUEzQixLQUFBdEMsRUFBQWlELEVBQUFqRCxLQUFBaUIsR0FBQSxJQUFBZ0QsRUFBQXdULFNBQUEsTUFBQTVULElBQUE2VCxLQUFBMVgsRUFBQSxTQUFBQSxHQUFBLE1BQUFBLEtBQUFpRSxJQUFBaEQsR0FBQSxJQUFBLGdCQUFBZ0QsR0FBQSxDQUFBLEdBQUFMLEdBQUFyRSxLQUFBMEUsR0FBQSxNQUFBSixJQUFBOFQsT0FBQTFULEVBQUFqRSxFQUFBaUIsRUFBQWdELEdBQUFKLEdBQUE4VCxPQUFBMVQsRUFBQWpFLEdBQUEsTUFBQTZELElBQUE2VCxLQUFBMVgsRUFBQSxTQUFBQSxHQUFBLE1BQUE2RCxJQUFBK1QsUUFBQTVYLEVBQUFpRSxJQUFBLElBQUFoRCxJQUFBLFFBQUFnRyxHQUFBakgsRUFBQWlFLEdBQUEsRUFBQWpFLEdBQUFBLEVBQUFpRSxTQUFBakUsR0FBQSxJQUFBQSxFQUFBeVgsU0FBQSxPQUFBelgsR0FBQSxRQUFBbUcsR0FBQW5HLEdBQUEsR0FBQWlFLEdBQUEvQyxHQUFBbEIsS0FBQSxPQUFBNkQsSUFBQWdVLEtBQUE3WCxFQUFBeVQsTUFBQWpQLFFBQUEsU0FBQXhFLEVBQUFpQixHQUFBZ0QsRUFBQWhELElBQUEsSUFBQWdELEVBQUEsUUFBQXZELEtBQUFzRCxHQUFBSyxrQkFBQUwsR0FBQThULG9CQUFBLG1CQUFBNVIsR0FBQSxHQUFBbEcsRUFBQThYLG9CQUFBLE9BQUE1UixHQUFBLEtBQUFsQyxHQUFBK1QsWUFBQSxxQkFBQTdSLEdBQUFsRyxFQUFBK1gsWUFBQSxTQUFBN1IsSUFBQSxRQUFBQSxNQUFBbEMsR0FBQUssa0JBQUEsU0FBQTJULE1BQUF6VCxNQUFBLGFBQUFQLEdBQUF5TixjQUFBL1EsSUFBQW1ELEdBQUFvVSxTQUFBLFFBQUExVixHQUFBdkMsRUFBQWlFLEVBQUFoRCxHQUFBLEdBQUEsU0FBQUEsR0FBQSxJQUFBakIsRUFBQXlYLFNBQUEsQ0FBQSxHQUFBeFUsR0FBQSxRQUFBZ0IsRUFBQTRKLFFBQUEvSCxHQUFBLE9BQUExQixhQUFBLElBQUFuRCxFQUFBakIsRUFBQTZLLGFBQUE1SCxHQUFBLGdCQUFBaEMsR0FBQSxDQUFBLElBQUFBLEVBQUEsU0FBQUEsR0FBQSxVQUFBQSxJQUFBLFNBQUFBLEVBQUEsTUFBQUEsRUFBQSxLQUFBQSxHQUFBQSxFQUFBOEQsR0FBQXhGLEtBQUEwQixHQUFBNEMsR0FBQXFVLFVBQUFqWCxHQUFBQSxHQUFBLE1BQUF4QixJQUFBb0UsR0FBQStMLEtBQUE1UCxFQUFBaUUsRUFBQWhELE9BQUFBLEdBQUEsT0FBQSxNQUFBQSxHQUFBLFFBQUFrRyxHQUFBbkgsR0FBQSxHQUFBaUUsRUFBQSxLQUFBQSxJQUFBakUsR0FBQSxJQUFBLFNBQUFpRSxJQUFBSixHQUFBc1UsY0FBQW5ZLEVBQUFpRSxNQUFBLFdBQUFBLEVBQUEsT0FBQSxDQUNBLFFBQUEsRUFBQSxRQUFBWSxHQUFBN0UsRUFBQWlFLEVBQUFoQixFQUFBeEQsR0FBQSxHQUFBb0UsR0FBQXVVLFdBQUFwWSxHQUFBLENBQUEsR0FBQWEsR0FBQTRDLEVBQUFDLEVBQUFHLEdBQUF3VSxRQUFBdFksRUFBQUMsRUFBQXlYLFNBQUFwUSxFQUFBdEgsRUFBQThELEdBQUF5VSxNQUFBdFksRUFBQW1GLEVBQUFwRixFQUFBQyxFQUFBMEQsR0FBQTFELEVBQUEwRCxJQUFBQSxDQUFBLElBQUF5QixHQUFBa0MsRUFBQWxDLEtBQUExRixHQUFBNEgsRUFBQWxDLEdBQUF5SyxPQUFBLFNBQUEzTSxHQUFBLGdCQUFBZ0IsR0FBQSxNQUFBa0IsS0FBQUEsRUFBQXBGLEVBQUFDLEVBQUEwRCxHQUFBekMsRUFBQXNYLE9BQUExVSxHQUFBMlUsT0FBQTlVLEdBQUEyRCxFQUFBbEMsS0FBQWtDLEVBQUFsQyxHQUFBcEYsTUFBQTBZLE9BQUE1VSxHQUFBNlUsUUFBQSxnQkFBQXpVLElBQUEsa0JBQUFBLE1BQUF4RSxFQUFBNEgsRUFBQWxDLEdBQUF0QixHQUFBK0ksT0FBQXZGLEVBQUFsQyxHQUFBbEIsR0FBQW9ELEVBQUFsQyxHQUFBeUssS0FBQS9MLEdBQUErSSxPQUFBdkYsRUFBQWxDLEdBQUF5SyxLQUFBM0wsSUFBQVIsRUFBQTRELEVBQUFsQyxHQUFBMUYsSUFBQWdFLEVBQUFtTSxPQUFBbk0sRUFBQW1NLFNBQUFuTSxFQUFBQSxFQUFBbU0sTUFBQSxTQUFBM00sSUFBQVEsRUFBQUksR0FBQThVLFVBQUExVSxJQUFBaEIsR0FBQSxnQkFBQWdCLElBQUFwRCxFQUFBNEMsRUFBQVEsR0FBQSxNQUFBcEQsSUFBQUEsRUFBQTRDLEVBQUFJLEdBQUE4VSxVQUFBMVUsTUFBQXBELEVBQUE0QyxFQUFBNUMsR0FBQSxRQUFBakIsR0FBQUksRUFBQWlFLEVBQUFoRCxHQUFBLEdBQUE0QyxHQUFBdVUsV0FBQXBZLEdBQUEsQ0FBQSxHQUFBaUQsR0FBQXhELEVBQUFvQixFQUFBYixFQUFBeVgsU0FBQWhVLEVBQUE1QyxFQUFBZ0QsR0FBQXlVLE1BQUF0WSxFQUFBMEQsRUFBQTdDLEVBQUFiLEVBQUE2RCxHQUFBd1UsU0FBQXhVLEdBQUF3VSxPQUFBLElBQUE1VSxFQUFBQyxHQUFBLENBQUEsR0FBQU8sSUFBQWhCLEVBQUFoQyxFQUFBd0MsRUFBQUMsR0FBQUQsRUFBQUMsR0FBQWtNLE1BQUEsQ0FBQS9MLEdBQUFtRyxRQUFBL0YsR0FBQUEsRUFBQUEsRUFBQStELE9BQUFuRSxHQUFBK1UsSUFBQTNVLEVBQUFKLEdBQUE4VSxZQUFBMVUsSUFBQWhCLEdBQUFnQixHQUFBQSxJQUFBQSxFQUFBSixHQUFBOFUsVUFBQTFVLEdBQUFBLEVBQUFBLElBQUFoQixJQUFBZ0IsR0FBQUEsRUFBQXFILE1BQUEsTUFBQTdMLEVBQUF3RSxFQUFBN0QsTUFBQSxNQUFBWCxXQUFBd0QsR0FBQWdCLEVBQUF4RSxHQUFBLElBQUF3QixHQUFBa0csRUFBQWxFLElBQUFZLEdBQUFzVSxjQUFBbFYsR0FBQSxRQUFBaEMsVUFBQXdDLEdBQUFDLEdBQUFrTSxLQUFBekksRUFBQTFELEVBQUFDLFFBQUE3QyxFQUFBZ0QsR0FBQWdWLFdBQUE3WSxJQUFBLEdBQUFtRixHQUFBMlQsZUFBQXJWLEdBQUFBLEVBQUFpQyxhQUFBakMsR0FBQUMsR0FBQUQsRUFBQUMsR0FBQSxRQUFBLFFBQUFxVixLQUFBLE9BQUEsRUFBQSxRQUFBQyxLQUFBLE9BQUEsRUFBQSxRQUFBQyxLQUFBLElBQUEsTUFBQWpWLElBQUFrVixjQUFBLE1BQUFsWixLQUFBLFFBQUFtWixHQUFBblosR0FBQSxHQUFBaUUsR0FBQW1WLEdBQUE5TixNQUFBLEtBQUFySyxFQUFBakIsRUFBQXFaLHdCQUFBLElBQUFwWSxFQUFBNk0sY0FBQSxLQUFBN0osRUFBQTdELFFBQUFhLEVBQUE2TSxjQUFBN0osRUFBQXNVLE1BQUEsT0FBQXRYLEdBQUEsUUFBQXFZLEdBQUF0WixFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQWdDLEVBQUF4RCxFQUFBLEVBQUFvQixRQUFBYixHQUFBdUssdUJBQUF2QixHQUFBaEosRUFBQXVLLHFCQUFBdEcsR0FBQSxXQUFBakUsR0FBQWtLLG1CQUFBbEIsR0FBQWhKLEVBQUFrSyxpQkFBQWpHLEdBQUEsS0FBQSxNQUFBLEtBQUFwRCxFQUFBLElBQUFBLEtBQUFJLEVBQUFqQixFQUFBdVosWUFBQXZaLEVBQUEsT0FBQWlELEVBQUFoQyxFQUFBeEIsSUFBQUEsS0FBQXdFLEdBQUFKLEdBQUFvSCxTQUFBaEksRUFBQWdCLEdBQUFwRCxFQUFBc0QsS0FBQWxCLEdBQUFZLEdBQUFrSixNQUFBbE0sRUFBQXlZLEVBQUFyVyxFQUFBZ0IsR0FBQSxPQUFBLFVBQUFBLEdBQUFBLEdBQUFKLEdBQUFvSCxTQUFBakwsRUFBQWlFLEdBQUFKLEdBQUFrSixPQUFBL00sR0FBQWEsR0FBQUEsRUFBQSxRQUFBMlksR0FBQXhaLEdBQUFtSixHQUFBNUosS0FBQVMsRUFBQXVFLFFBQUF2RSxFQUFBeVosZUFBQXpaLEVBQUEwWixTQUFBLFFBQUFDLEdBQUEzWixFQUFBaUUsR0FBQSxNQUFBSixJQUFBb0gsU0FBQWpMLEVBQUEsVUFBQTZELEdBQUFvSCxTQUFBLEtBQUFoSCxFQUFBd1QsU0FBQXhULEVBQUFBLEVBQUEyVixXQUFBLE1BQUE1WixFQUFBdUsscUJBQUEsU0FBQSxJQUFBdkssRUFBQTZaLFlBQUE3WixFQUFBOFosY0FBQWhNLGNBQUEsVUFBQTlOLEVBQUEsUUFBQStaLEdBQUEvWixHQUFBLE1BQUFBLEdBQUF1RSxNQUFBLE9BQUFWLEdBQUFxRSxLQUFBOFIsS0FBQWhhLEVBQUEsU0FBQSxJQUFBQSxFQUFBdUUsS0FBQXZFLEVBQUEsUUFBQWlhLEdBQUFqYSxHQUFBLEdBQUFpRSxHQUFBaVcsR0FBQW5aLEtBQUFmLEVBQUF1RSxLQUFBLE9BQUFOLEdBQUFqRSxFQUFBdUUsS0FBQU4sRUFBQSxHQUFBakUsRUFBQW1hLGdCQUFBLFFBQUFuYSxFQUFBLFFBQUFvYSxHQUFBcGEsRUFBQWlFLEdBQUEsSUFBQSxHQUFBaEQsR0FBQWdDLEVBQUEsRUFBQSxPQUFBaEMsRUFBQWpCLEVBQUFpRCxJQUFBQSxJQUFBWSxHQUFBd1csTUFBQXBaLEVBQUEsY0FBQWdELEdBQUFKLEdBQUF3VyxNQUFBcFcsRUFBQWhCLEdBQUEsZUFBQSxRQUFBcVgsR0FBQXRhLEVBQUFpRSxHQUFBLEdBQUEsSUFBQUEsRUFBQXdULFVBQUE1VCxHQUFBMFcsUUFBQXZhLEdBQUEsQ0FBQSxHQUFBaUIsR0FBQWdDLEVBQUF4RCxFQUFBb0IsRUFBQWdELEdBQUF3VyxNQUFBcmEsR0FBQXlELEVBQUFJLEdBQUF3VyxNQUFBcFcsRUFBQXBELEdBQUE2QyxFQUFBN0MsRUFBQTJaLE1BQUEsSUFBQTlXLEVBQUEsT0FBQUQsR0FBQWdYLE9BQUFoWCxFQUFBK1csU0FBQSxLQUFBdlosSUFBQXlDLEdBQUEsSUFBQVQsRUFBQTtBQUFBeEQsRUFBQWlFLEVBQUF6QyxHQUFBYixPQUFBWCxFQUFBd0QsRUFBQUEsSUFBQVksR0FBQW1VLE1BQUEwQyxJQUFBelcsRUFBQWhELEVBQUF5QyxFQUFBekMsR0FBQWdDLElBQUFRLEVBQUFtTSxPQUFBbk0sRUFBQW1NLEtBQUEvTCxHQUFBK0ksVUFBQW5KLEVBQUFtTSxRQUFBLFFBQUErSyxHQUFBM2EsRUFBQWlFLEdBQUEsR0FBQWhELEdBQUFnQyxFQUFBeEQsQ0FBQSxJQUFBLElBQUF3RSxFQUFBd1QsU0FBQSxDQUFBLEdBQUF4VyxFQUFBZ0QsRUFBQWdILFNBQUE3RyxlQUFBZSxHQUFBeVYsY0FBQTNXLEVBQUFKLEdBQUF3VSxTQUFBLENBQUE1WSxFQUFBb0UsR0FBQXdXLE1BQUFwVyxFQUFBLEtBQUFoQixJQUFBeEQsR0FBQSthLE9BQUEzVyxHQUFBZ1gsWUFBQTVXLEVBQUFoQixFQUFBeEQsRUFBQWdiLE9BQUF4VyxHQUFBa1csZ0JBQUF0VyxHQUFBd1UsU0FBQSxXQUFBcFgsR0FBQWdELEVBQUE2VyxPQUFBOWEsRUFBQThhLE1BQUFmLEVBQUE5VixHQUFBNlcsS0FBQTlhLEVBQUE4YSxLQUFBYixFQUFBaFcsSUFBQSxXQUFBaEQsR0FBQWdELEVBQUE4VyxhQUFBOVcsRUFBQStXLFVBQUFoYixFQUFBZ2IsV0FBQTdWLEdBQUE4VixZQUFBamIsRUFBQWtiLFlBQUFyWCxHQUFBa0wsS0FBQTlLLEVBQUFpWCxhQUFBalgsRUFBQWlYLFVBQUFsYixFQUFBa2IsWUFBQSxVQUFBamEsR0FBQWtJLEdBQUE1SixLQUFBUyxFQUFBdUUsT0FBQU4sRUFBQXdWLGVBQUF4VixFQUFBeVYsUUFBQTFaLEVBQUEwWixRQUFBelYsRUFBQThHLFFBQUEvSyxFQUFBK0ssUUFBQTlHLEVBQUE4RyxNQUFBL0ssRUFBQStLLFFBQUEsV0FBQTlKLEVBQUFnRCxFQUFBa1gsZ0JBQUFsWCxFQUFBbVgsU0FBQXBiLEVBQUFtYixpQkFBQSxVQUFBbGEsR0FBQSxhQUFBQSxLQUFBZ0QsRUFBQW9YLGFBQUFyYixFQUFBcWIsZUFBQSxRQUFBQyxHQUFBclgsRUFBQWhELEdBQUEsR0FBQWdDLEdBQUF4RCxFQUFBb0UsR0FBQTVDLEVBQUE2TSxjQUFBN0osSUFBQXNYLFNBQUF0YSxFQUFBdWEsTUFBQTNhLEVBQUFiLEVBQUF5YiwwQkFBQXhZLEVBQUFqRCxFQUFBeWIsd0JBQUFoYyxFQUFBLEtBQUF3RCxFQUFBeVksUUFBQTdYLEdBQUE4WCxJQUFBbGMsRUFBQSxHQUFBLFVBQUEsT0FBQUEsR0FBQW1jLFNBQUEvYSxFQUFBLFFBQUFnYixHQUFBN2IsR0FBQSxHQUFBaUUsR0FBQUQsR0FBQS9DLEVBQUE2YSxHQUFBOWIsRUFBQSxPQUFBaUIsS0FBQUEsRUFBQXFhLEVBQUF0YixFQUFBaUUsR0FBQSxTQUFBaEQsR0FBQUEsSUFBQThhLElBQUFBLElBQUFsWSxHQUFBLG1EQUFBMFgsU0FBQXRYLEVBQUErWCxpQkFBQS9YLEdBQUE4WCxHQUFBLEdBQUFFLGVBQUFGLEdBQUEsR0FBQUcsaUJBQUF4WCxTQUFBVCxFQUFBdVAsUUFBQXZQLEVBQUFrWSxRQUFBbGIsRUFBQXFhLEVBQUF0YixFQUFBaUUsR0FBQThYLEdBQUFILFVBQUFFLEdBQUE5YixHQUFBaUIsR0FBQUEsRUFBQSxRQUFBbWIsR0FBQXBjLEVBQUFpRSxHQUFBLE9BQUFvWSxJQUFBLFdBQUEsR0FBQXBiLEdBQUFqQixHQUFBLElBQUEsTUFBQWlCLEVBQUEsTUFBQUEsY0FBQWtKLE1BQUFrUyxLQUFBbFMsS0FBQWtTLElBQUFwWSxHQUFBK0ssTUFBQTdFLEtBQUE0RCxhQUFBLFFBQUF1TyxHQUFBdGMsRUFBQWlFLEdBQUEsR0FBQUEsSUFBQWpFLEdBQUEsTUFBQWlFLEVBQUEsS0FBQSxHQUFBaEQsR0FBQWdELEVBQUFxUCxPQUFBLEdBQUExQyxjQUFBM00sRUFBQVQsTUFBQSxHQUFBUCxFQUFBZ0IsRUFBQXhFLEVBQUE4YyxHQUFBbmMsT0FBQVgsS0FBQSxHQUFBd0UsRUFBQXNZLEdBQUE5YyxHQUFBd0IsRUFBQWdELElBQUFqRSxHQUFBLE1BQUFpRSxFQUFBLE9BQUFoQixHQUFBLFFBQUF1WixHQUFBeGMsRUFBQWlFLEdBQUEsSUFBQSxHQUFBaEQsR0FBQWdDLEVBQUF4RCxFQUFBb0IsS0FBQTRDLEVBQUEsRUFBQUMsRUFBQTFELEVBQUFJLE9BQUFzRCxFQUFBRCxFQUFBQSxJQUFBUixFQUFBakQsRUFBQXlELEdBQUFSLEVBQUF3WixRQUFBNWIsRUFBQTRDLEdBQUFJLEdBQUF3VyxNQUFBcFgsRUFBQSxjQUFBaEMsRUFBQWdDLEVBQUF3WixNQUFBZixRQUFBelgsR0FBQXBELEVBQUE0QyxJQUFBLFNBQUF4QyxJQUFBZ0MsRUFBQXdaLE1BQUFmLFFBQUEsSUFBQSxLQUFBelksRUFBQXdaLE1BQUFmLFNBQUE3WSxHQUFBSSxLQUFBcEMsRUFBQTRDLEdBQUFJLEdBQUF3VyxNQUFBcFgsRUFBQSxhQUFBNFksRUFBQTVZLEVBQUFnSSxjQUFBeEwsRUFBQW9ELEdBQUFJLElBQUFoQyxHQUFBLFNBQUFBLElBQUF4QixJQUFBb0UsR0FBQXdXLE1BQUFwWCxFQUFBLGFBQUF4RCxFQUFBd0IsRUFBQTRDLEdBQUE4WCxJQUFBMVksRUFBQSxhQUFBLEtBQUFRLEVBQUEsRUFBQUMsRUFBQUQsRUFBQUEsSUFBQVIsRUFBQWpELEVBQUF5RCxHQUFBUixFQUFBd1osUUFBQXhZLEdBQUEsU0FBQWhCLEVBQUF3WixNQUFBZixTQUFBLEtBQUF6WSxFQUFBd1osTUFBQWYsVUFBQXpZLEVBQUF3WixNQUFBZixRQUFBelgsRUFBQXBELEVBQUE0QyxJQUFBLEdBQUEsUUFBQSxPQUFBekQsR0FBQSxRQUFBMGMsR0FBQTFjLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQTBaLEdBQUE1YixLQUFBa0QsRUFBQSxPQUFBaEIsR0FBQUssS0FBQXNaLElBQUEsRUFBQTNaLEVBQUEsSUFBQWhDLEdBQUEsS0FBQWdDLEVBQUEsSUFBQSxNQUFBZ0IsRUFBQSxRQUFBNFksR0FBQTdjLEVBQUFpRSxFQUFBaEQsRUFBQWdDLEVBQUF4RCxHQUFBLElBQUEsR0FBQW9CLEdBQUFJLEtBQUFnQyxFQUFBLFNBQUEsV0FBQSxFQUFBLFVBQUFnQixFQUFBLEVBQUEsRUFBQVIsRUFBQSxFQUFBLEVBQUE1QyxFQUFBQSxHQUFBLEVBQUEsV0FBQUksSUFBQXdDLEdBQUFJLEdBQUE4WCxJQUFBM2IsRUFBQWlCLEVBQUFpRyxHQUFBckcsSUFBQSxFQUFBcEIsSUFBQXdELEdBQUEsWUFBQWhDLElBQUF3QyxHQUFBSSxHQUFBOFgsSUFBQTNiLEVBQUEsVUFBQWtILEdBQUFyRyxJQUFBLEVBQUFwQixJQUFBLFdBQUF3QixJQUFBd0MsR0FBQUksR0FBQThYLElBQUEzYixFQUFBLFNBQUFrSCxHQUFBckcsR0FBQSxTQUFBLEVBQUFwQixNQUFBZ0UsR0FBQUksR0FBQThYLElBQUEzYixFQUFBLFVBQUFrSCxHQUFBckcsSUFBQSxFQUFBcEIsR0FBQSxZQUFBd0IsSUFBQXdDLEdBQUFJLEdBQUE4WCxJQUFBM2IsRUFBQSxTQUFBa0gsR0FBQXJHLEdBQUEsU0FBQSxFQUFBcEIsSUFBQSxPQUFBZ0UsR0FBQSxRQUFBcVosR0FBQTljLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsSUFBQSxFQUFBeEQsRUFBQSxVQUFBd0UsRUFBQWpFLEVBQUErYyxZQUFBL2MsRUFBQWdkLGFBQUFuYyxFQUFBb2MsR0FBQWpkLEdBQUF5RCxFQUFBMEIsR0FBQStYLFdBQUEsZUFBQXJaLEdBQUE4WCxJQUFBM2IsRUFBQSxhQUFBLEVBQUFhLEVBQUEsSUFBQSxHQUFBcEIsR0FBQSxNQUFBQSxFQUFBLENBQUEsR0FBQUEsRUFBQTBkLEdBQUFuZCxFQUFBaUUsRUFBQXBELElBQUEsRUFBQXBCLEdBQUEsTUFBQUEsS0FBQUEsRUFBQU8sRUFBQXljLE1BQUF4WSxJQUFBbVosR0FBQTdkLEtBQUFFLEdBQUEsTUFBQUEsRUFBQXdELEdBQUFRLElBQUEwQixHQUFBa1kscUJBQUE1ZCxJQUFBTyxFQUFBeWMsTUFBQXhZLElBQUF4RSxFQUFBNmQsV0FBQTdkLElBQUEsRUFBQSxNQUFBQSxHQUFBb2QsRUFBQTdjLEVBQUFpRSxFQUFBaEQsSUFBQXdDLEVBQUEsU0FBQSxXQUFBUixFQUFBcEMsR0FBQSxLQUFBLFFBQUEwYyxHQUFBdmQsRUFBQWlFLEVBQUFoRCxFQUFBZ0MsRUFBQXhELEdBQUEsTUFBQSxJQUFBOGQsR0FBQW5iLFVBQUFvYixLQUFBeGQsRUFBQWlFLEVBQUFoRCxFQUFBZ0MsRUFBQXhELEdBQ0EsUUFBQWdlLEtBQUEsTUFBQXpJLFlBQUEsV0FBQTBJLEdBQUEsU0FBQUEsR0FBQTdaLEdBQUF5QyxNQUFBLFFBQUFxWCxHQUFBM2QsRUFBQWlFLEdBQUEsR0FBQWhELEdBQUFnQyxHQUFBRixPQUFBL0MsR0FBQVAsRUFBQSxDQUFBLEtBQUF3RSxFQUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBeEUsRUFBQUEsR0FBQSxFQUFBd0UsRUFBQWhELEVBQUFpRyxHQUFBekgsR0FBQXdELEVBQUEsU0FBQWhDLEdBQUFnQyxFQUFBLFVBQUFoQyxHQUFBakIsQ0FBQSxPQUFBaUUsS0FBQWhCLEVBQUEyYSxRQUFBM2EsRUFBQUgsTUFBQTlDLEdBQUFpRCxFQUFBLFFBQUE0YSxHQUFBN2QsRUFBQWlFLEVBQUFoRCxHQUFBLElBQUEsR0FBQWdDLEdBQUF4RCxHQUFBcWUsR0FBQTdaLFFBQUErRCxPQUFBOFYsR0FBQSxNQUFBamQsRUFBQSxFQUFBNEMsRUFBQWhFLEVBQUFXLE9BQUFxRCxFQUFBNUMsRUFBQUEsSUFBQSxHQUFBb0MsRUFBQXhELEVBQUFvQixHQUFBeUIsS0FBQXJCLEVBQUFnRCxFQUFBakUsR0FBQSxNQUFBaUQsR0FBQSxRQUFBOGEsR0FBQS9kLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQXhELEVBQUFvQixFQUFBNEMsRUFBQUMsRUFBQTNELEVBQUFzSCxFQUFBaEcsRUFBQXZCLEVBQUFxSyxLQUFBakssS0FBQTRELEVBQUE5RCxFQUFBeWMsTUFBQTFXLEVBQUEvRixFQUFBeVgsVUFBQTVVLEdBQUE3QyxHQUFBTixFQUFBbUUsR0FBQXdXLE1BQUFyYSxFQUFBLFNBQUFpQixHQUFBK2MsUUFBQXRhLEVBQUFHLEdBQUFvYSxZQUFBamUsRUFBQSxNQUFBLE1BQUEwRCxFQUFBd2EsV0FBQXhhLEVBQUF3YSxTQUFBLEVBQUFuZSxFQUFBMkQsRUFBQXlhLE1BQUFDLEtBQUExYSxFQUFBeWEsTUFBQUMsS0FBQSxXQUFBMWEsRUFBQXdhLFVBQUFuZSxNQUFBMkQsRUFBQXdhLFdBQUFwZSxFQUFBdWUsT0FBQSxXQUFBdmUsRUFBQXVlLE9BQUEsV0FBQTNhLEVBQUF3YSxXQUFBcmEsR0FBQW1hLE1BQUFoZSxFQUFBLE1BQUFJLFFBQUFzRCxFQUFBeWEsTUFBQUMsWUFBQSxJQUFBcGUsRUFBQXlYLFdBQUEsVUFBQXhULElBQUEsU0FBQUEsTUFBQWhELEVBQUFxZCxVQUFBeGEsRUFBQXdhLFNBQUF4YSxFQUFBeWEsVUFBQXphLEVBQUEwYSxXQUFBblgsRUFBQXhELEdBQUE4WCxJQUFBM2IsRUFBQSxXQUFBcUIsRUFBQSxTQUFBZ0csRUFBQXhELEdBQUF3VyxNQUFBcmEsRUFBQSxlQUFBNmIsRUFBQTdiLEVBQUFpTCxVQUFBNUQsRUFBQSxXQUFBaEcsR0FBQSxTQUFBd0MsR0FBQThYLElBQUEzYixFQUFBLFdBQUFtRixHQUFBc1osd0JBQUEsV0FBQTVDLEVBQUE3YixFQUFBaUwsVUFBQW5ILEVBQUE0YSxLQUFBLEVBQUE1YSxFQUFBNFgsUUFBQSxpQkFBQXphLEVBQUFxZCxXQUFBeGEsRUFBQXdhLFNBQUEsU0FBQW5aLEdBQUF3WixvQkFBQTdlLEVBQUF1ZSxPQUFBLFdBQUF2YSxFQUFBd2EsU0FBQXJkLEVBQUFxZCxTQUFBLEdBQUF4YSxFQUFBeWEsVUFBQXRkLEVBQUFxZCxTQUFBLEdBQUF4YSxFQUFBMGEsVUFBQXZkLEVBQUFxZCxTQUFBLEtBQUEsS0FBQXJiLElBQUFnQixHQUFBLEdBQUF4RSxFQUFBd0UsRUFBQWhCLEdBQUEyYixHQUFBN2QsS0FBQXRCLEdBQUEsQ0FBQSxTQUFBd0UsR0FBQWhCLEdBQUFwQyxFQUFBQSxHQUFBLFdBQUFwQixFQUFBQSxLQUFBc0csRUFBQSxPQUFBLFFBQUEsQ0FBQSxHQUFBLFNBQUF0RyxJQUFBQyxHQUFBLFNBQUFBLEVBQUF1RCxHQUFBLFFBQUE4QyxJQUFBLEVBQUE3RixFQUFBK0MsR0FBQXZELEdBQUFBLEVBQUF1RCxJQUFBWSxHQUFBNFksTUFBQXpjLEVBQUFpRCxPQUFBb0UsR0FBQSxNQUFBLElBQUF4RCxHQUFBc1UsY0FBQWpZLEdBQUEsWUFBQSxTQUFBbUgsRUFBQXdVLEVBQUE3YixFQUFBaUwsVUFBQTVELEtBQUF2RCxFQUFBNFgsUUFBQXJVLE9BQUEsQ0FBQTNILEVBQUEsVUFBQUEsS0FBQXFHLEVBQUFyRyxFQUFBbWYsUUFBQW5mLEVBQUFtRSxHQUFBd1csTUFBQXJhLEVBQUEsYUFBQWEsSUFBQW5CLEVBQUFtZixRQUFBOVksR0FBQUEsRUFBQWxDLEdBQUE3RCxHQUFBOGUsT0FBQWhmLEVBQUFpZixLQUFBLFdBQUFsYixHQUFBN0QsR0FBQWdmLFNBQUFsZixFQUFBaWYsS0FBQSxXQUFBLEdBQUE5YSxFQUFBSixJQUFBb2IsWUFBQWpmLEVBQUEsU0FBQSxLQUFBaUUsSUFBQS9ELEdBQUEyRCxHQUFBNFksTUFBQXpjLEVBQUFpRSxFQUFBL0QsRUFBQStELEtBQUEsS0FBQWhCLElBQUEvQyxHQUFBdUQsRUFBQW9hLEVBQUE5WCxFQUFBckcsRUFBQXVELEdBQUEsRUFBQUEsRUFBQW5ELEdBQUFtRCxJQUFBdkQsS0FBQUEsRUFBQXVELEdBQUFRLEVBQUF5YixNQUFBblosSUFBQXRDLEVBQUEwYixJQUFBMWIsRUFBQXliLE1BQUF6YixFQUFBeWIsTUFBQSxVQUFBamMsR0FBQSxXQUFBQSxFQUFBLEVBQUEsS0FBQSxRQUFBbWMsR0FBQXBmLEVBQUFpRSxHQUFBLEdBQUFoRCxHQUFBZ0MsRUFBQXhELEVBQUFvQixFQUFBNEMsQ0FBQSxLQUFBeEMsSUFBQWpCLEdBQUEsR0FBQWlELEVBQUFZLEdBQUE4VSxVQUFBMVgsR0FBQXhCLEVBQUF3RSxFQUFBaEIsR0FBQXBDLEVBQUFiLEVBQUFpQixHQUFBNEMsR0FBQW1HLFFBQUFuSixLQUFBcEIsRUFBQW9CLEVBQUEsR0FBQUEsRUFBQWIsRUFBQWlCLEdBQUFKLEVBQUEsSUFBQUksSUFBQWdDLElBQUFqRCxFQUFBaUQsR0FBQXBDLFFBQUFiLEdBQUFpQixJQUFBd0MsRUFBQUksR0FBQXdiLFNBQUFwYyxHQUFBUSxHQUFBLFVBQUFBLEdBQUEsQ0FBQTVDLEVBQUE0QyxFQUFBNmIsT0FBQXplLFNBQUFiLEdBQUFpRCxFQUFBLEtBQUFoQyxJQUFBSixHQUFBSSxJQUFBakIsS0FBQUEsRUFBQWlCLEdBQUFKLEVBQUFJLEdBQUFnRCxFQUFBaEQsR0FBQXhCLE9BQUF3RSxHQUFBaEIsR0FBQXhELEVBQUEsUUFBQThmLEdBQUF2ZixFQUFBaUUsRUFBQWhELEdBQUEsR0FBQWdDLEdBQUF4RCxFQUFBb0IsRUFBQSxFQUFBNEMsRUFBQStiLEdBQUFwZixPQUFBc0QsRUFBQUcsR0FBQTRiLFdBQUFwQixPQUFBLGlCQUFBdGUsR0FBQTJmLE9BQUEzZixFQUFBLFdBQUEsR0FBQU4sRUFBQSxPQUFBLENBQUEsS0FBQSxHQUFBd0UsR0FBQXlaLElBQUFELElBQUF4YyxFQUFBcUMsS0FBQXNaLElBQUEsRUFBQXZWLEVBQUFzWSxVQUFBdFksRUFBQXVZLFNBQUEzYixHQUFBaEIsRUFBQWhDLEVBQUFvRyxFQUFBdVksVUFBQSxFQUFBL2UsRUFBQSxFQUFBb0MsRUFBQVEsRUFBQSxFQUFBMUQsRUFBQXNILEVBQUF3WSxPQUFBemYsT0FBQUwsRUFBQTBELEVBQUFBLElBQUE0RCxFQUFBd1ksT0FBQXBjLEdBQUFxYyxJQUFBamYsRUFBQSxPQUFBNkMsR0FBQXFjLFdBQUEvZixHQUFBcUgsRUFBQXhHLEVBQUFJLElBQUEsRUFBQUosR0FBQWQsRUFBQWtCLEdBQUF5QyxFQUFBc2MsWUFBQWhnQixHQUFBcUgsS0FBQSxJQUFBQSxFQUFBM0QsRUFBQThPLFNBQUFrTixLQUFBMWYsRUFBQWlnQixNQUFBcGMsR0FBQStJLFVBQUEzSSxHQUFBaWMsS0FBQXJjLEdBQUErSSxRQUFBLEdBQUF1VCxrQkFBQWxmLEdBQUFtZixtQkFBQW5jLEVBQUFvYyxnQkFBQXBmLEVBQUEwZSxVQUFBakMsSUFBQUQsSUFBQW1DLFNBQUEzZSxFQUFBMmUsU0FBQUMsVUFBQVMsWUFBQSxTQUFBcmMsRUFBQWhELEdBQUEsR0FBQWdDLEdBQUFZLEdBQUEwYyxNQUFBdmdCLEVBQUFxSCxFQUFBNlksS0FBQWpjLEVBQUFoRCxFQUFBb0csRUFBQTZZLEtBQUFDLGNBQUFsYyxJQUFBb0QsRUFBQTZZLEtBQUFNLE9BQUEsT0FBQW5aLEdBQUF3WSxPQUFBMWIsS0FBQWxCLEdBQUFBLEdBQUF3ZCxLQUFBLFNBQUF4YyxHQUFBLEdBQUFoRCxHQUFBLEVBQUFnQyxFQUFBZ0IsRUFBQW9ELEVBQUF3WSxPQUFBemYsT0FBQSxDQUFBLElBQUFYLEVBQUEsTUFBQTBLLEtBQUEsS0FBQTFLLEdBQUEsRUFBQXdELEVBQUFoQyxFQUFBQSxJQUFBb0csRUFBQXdZLE9BQUE1ZSxHQUFBNmUsSUFBQSxFQUFBLE9BQUE3YixHQUFBUCxFQUFBc2MsWUFBQWhnQixHQUFBcUgsRUFBQXBELElBQUFQLEVBQUFnZCxXQUFBMWdCLEdBQUFxSCxFQUFBcEQsSUFBQWtHLFFBQUFoRixFQUFBa0MsRUFBQTRZLEtBQUEsS0FBQWIsRUFBQWphLEVBQUFrQyxFQUFBNlksS0FBQUMsZUFBQTFjLEVBQUE1QyxFQUFBQSxJQUFBLEdBQUFvQyxFQUFBdWMsR0FBQTNlLEdBQUF5QixLQUFBK0UsRUFBQXJILEVBQUFtRixFQUFBa0MsRUFBQTZZLE1BQUEsTUFBQWpkLEVBQUEsT0FBQVksSUFBQStVLElBQUF6VCxFQUFBMFksRUFBQXhXLEdBQUF4RCxHQUFBNkssV0FBQXJILEVBQUE2WSxLQUFBaEIsUUFBQTdYLEVBQUE2WSxLQUFBaEIsTUFBQTVjLEtBQUF0QyxFQUFBcUgsR0FBQXhELEdBQUE4YyxHQUFBQyxNQUFBL2MsR0FBQStJLE9BQUE3TSxHQUFBMmYsS0FBQTFmLEVBQUE2Z0IsS0FBQXhaLEVBQUEyVyxNQUFBM1csRUFBQTZZLEtBQUFsQyxTQUFBM1csRUFBQXlaLFNBQUF6WixFQUFBNlksS0FBQVksVUFBQS9CLEtBQUExWCxFQUFBNlksS0FBQW5CLEtBQUExWCxFQUFBNlksS0FBQWEsVUFBQUMsS0FBQTNaLEVBQUE2WSxLQUFBYyxNQUFBM0MsT0FBQWhYLEVBQUE2WSxLQUFBN0IsUUFBQSxRQUFBNEMsR0FBQWpoQixHQUFBLE1BQUEsVUFBQWlFLEVBQUFoRCxHQUFBLGdCQUFBZ0QsS0FBQWhELEVBQUFnRCxFQUFBQSxFQUFBLElBQUEsSUFBQWhCLEdBQUF4RCxFQUFBLEVBQUFvQixFQUFBb0QsRUFBQUcsY0FBQXFQLE1BQUFqUCxPQUFBLElBQUFYLEdBQUE2SyxXQUFBek4sR0FBQSxLQUFBZ0MsRUFBQXBDLEVBQUFwQixNQUFBLE1BQUF3RCxFQUFBcVEsT0FBQSxJQUFBclEsRUFBQUEsRUFBQU8sTUFBQSxJQUFBLEtBQUF4RCxFQUFBaUQsR0FBQWpELEVBQUFpRCxRQUFBc00sUUFBQXRPLEtBQUFqQixFQUFBaUQsR0FBQWpELEVBQUFpRCxRQUFBa0IsS0FBQWxELElBQUEsUUFBQWlnQixHQUFBbGhCLEVBQUFpRSxFQUFBaEQsRUFBQWdDLEdBQUEsUUFBQVEsR0FBQUMsR0FBQSxHQUFBM0QsRUFBQSxPQUFBTixHQUFBaUUsSUFBQSxFQUFBRyxHQUFBZ1UsS0FBQTdYLEVBQUEwRCxPQUFBLFNBQUExRCxFQUFBMEQsR0FBQSxHQUFBMkQsR0FBQTNELEVBQUFPLEVBQUFoRCxFQUFBZ0MsRUFBQSxPQUFBLGdCQUFBb0UsSUFBQXhHLEdBQUFwQixFQUFBNEgsR0FBQXhHLElBQUFkLEVBQUFzSCxHQUFBLFFBQUFwRCxFQUFBa2QsVUFBQTVSLFFBQUFsSSxHQUFBNUQsRUFBQTRELElBQUEsS0FBQXRILEVBQUEsR0FBQU4sTUFBQW9CLEVBQUFiLElBQUFvaEIsRUFBQSxPQUFBM2QsR0FBQVEsRUFBQWtkLFVBQUEsTUFBQTFoQixFQUFBLE1BQUFnRSxFQUFBLEtBQUEsUUFBQTRkLEdBQUFyaEIsRUFBQWlFLEdBQUEsR0FBQWhELEdBQUFnQyxFQUFBeEQsRUFBQW9FLEdBQUF5ZCxhQUFBQyxlQUFBLEtBQUF0ZSxJQUFBZ0IsR0FBQSxTQUFBQSxFQUFBaEIsTUFBQXhELEVBQUF3RCxHQUFBakQsRUFBQWlCLElBQUFBLE9BQUFnQyxHQUFBZ0IsRUFBQWhCLEdBQUEsT0FBQWhDLElBQUE0QyxHQUFBK0ksUUFBQSxFQUFBNU0sRUFBQWlCLEdBQUFqQixFQUFBLFFBQUF3aEIsR0FBQXhoQixFQUFBaUUsRUFBQWhELEdBQUEsSUFBQSxHQUFBZ0MsR0FBQXhELEVBQUFvQixFQUFBNEMsRUFBQUMsRUFBQTFELEVBQUF5aEIsU0FBQTFoQixFQUFBQyxFQUFBbWhCLFVBQUEsTUFBQXBoQixFQUFBLElBQUFBLEVBQUE0UCxRQUFBLFNBQUFsUSxJQUFBQSxFQUFBTyxFQUFBMGhCLFVBQUF6ZCxFQUFBMGQsa0JBQUEsZ0JBQUEsSUFBQWxpQixFQUFBLElBQUFnRSxJQUFBQyxHQUFBLEdBQUFBLEVBQUFELElBQUFDLEVBQUFELEdBQUFsRSxLQUFBRSxHQUFBLENBQUFNLEVBQUF3UCxRQUFBOUwsRUFBQSxPQUFBLEdBQUExRCxFQUFBLElBQUFrQixHQUFBSixFQUFBZCxFQUFBLE9BQUEsQ0FBQSxJQUFBMEQsSUFBQXhDLEdBQUEsQ0FBQSxJQUFBbEIsRUFBQSxJQUFBQyxFQUFBNGhCLFdBQUFuZSxFQUFBLElBQUExRCxFQUFBLElBQUEsQ0FBQWMsRUFBQTRDLENBQUEsT0FBQVIsSUFBQUEsRUFBQVEsR0FBQTVDLEVBQUFBLEdBQUFvQyxFQUFBLE1BQUFwQyxJQUFBQSxJQUFBZCxFQUFBLElBQUFBLEVBQUF3UCxRQUFBMU8sR0FBQUksRUFBQUosSUFBQSxPQUFBLFFBQUFnaEIsR0FBQTdoQixFQUFBaUUsRUFBQWhELEVBQUFnQyxHQUFBLEdBQUF4RCxHQUFBb0IsRUFBQTRDLEVBQUFDLEVBQUEzRCxFQUFBc0gsS0FBQWxDLEVBQUFuRixFQUFBbWhCLFVBQUEzZCxPQUFBLElBQUEyQixFQUFBLEdBQUEsSUFBQTFCLElBQUF6RCxHQUFBNGhCLFdBQUF2YSxFQUFBNUQsRUFBQVcsZUFBQXBFLEVBQUE0aEIsV0FBQW5lLEVBQUEsS0FBQTVDLEVBQUFzRSxFQUFBd0ssUUFBQTlPLEdBQUEsR0FBQWIsRUFBQThoQixlQUFBamhCLEtBQUFJLEVBQUFqQixFQUFBOGhCLGVBQUFqaEIsSUFBQW9ELElBQUFsRSxHQUFBa0QsR0FBQWpELEVBQUEraEIsYUFBQTlkLEVBQUFqRSxFQUFBK2hCLFdBQUE5ZCxFQUFBakUsRUFBQWdpQixXQUFBamlCLEVBQUFjLEVBQUFBLEVBQUFzRSxFQUFBd0ssUUFBQSxHQUFBLE1BQUE5TyxFQUFBQSxFQUFBZCxNQUFBLElBQUEsTUFBQUEsR0FBQUEsSUFBQWMsRUFBQSxDQUFBLEdBQUE0QyxFQUFBNEQsRUFBQXRILEVBQUEsSUFBQWMsSUFBQXdHLEVBQUEsS0FBQXhHLElBQUE0QyxFQUFBLElBQUFoRSxJQUFBNEgsR0FBQSxHQUFBM0QsRUFBQWpFLEVBQUE2TCxNQUFBLEtBQUE1SCxFQUFBLEtBQUE3QyxJQUFBNEMsRUFBQTRELEVBQUF0SCxFQUFBLElBQUEyRCxFQUFBLEtBQUEyRCxFQUFBLEtBQUEzRCxFQUFBLEtBQUEsQ0FBQUQsS0FBQSxFQUFBQSxFQUFBNEQsRUFBQTVILEdBQUE0SCxFQUFBNUgsTUFBQSxJQUFBb0IsRUFBQTZDLEVBQUEsR0FBQXlCLEVBQUFvSyxRQUFBN0wsRUFBQSxJQUFBLE9BQUEsR0FBQUQsS0FBQSxFQUFBLEdBQUFBLEdBQUF6RCxFQUFBLE9BQUFpRSxFQUFBUixFQUFBUSxPQUFBLEtBQUFBLEVBQUFSLEVBQUFRLEdBQUEsTUFBQTVDLEdBQUEsT0FBQTRnQixNQUFBLGNBQUF4TSxNQUFBaFMsRUFBQXBDLEVBQUEsc0JBQUF0QixFQUFBLE9BQUFjLElBQUEsT0FBQW9oQixNQUFBLFVBQUFyUyxLQUFBM0wsR0FBQSxRQUFBaWUsR0FBQWxpQixFQUFBaUUsRUFBQWhELEVBQUFnQyxHQUFBLEdBQUF4RCxFQUFBLElBQUFvRSxHQUFBbUcsUUFBQS9GLEdBQUFKLEdBQUFnVSxLQUFBNVQsRUFBQSxTQUFBQSxFQUFBeEUsR0FBQXdCLEdBQUFraEIsR0FBQTVpQixLQUFBUyxHQUFBaUQsRUFBQWpELEVBQUFQLEdBQUF5aUIsRUFBQWxpQixFQUFBLEtBQUEsZ0JBQUFQLEdBQUF3RSxFQUFBLElBQUEsSUFBQXhFLEVBQUF3QixFQUFBZ0MsU0FBQSxJQUFBaEMsR0FBQSxXQUFBNEMsR0FBQVUsS0FBQU4sR0FBQWhCLEVBQUFqRCxFQUFBaUUsT0FBQSxLQUFBeEUsSUFBQXdFLEdBQUFpZSxFQUFBbGlCLEVBQUEsSUFBQVAsRUFBQSxJQUFBd0UsRUFBQXhFLEdBQUF3QixFQUFBZ0MsR0FBQSxRQUFBbWYsS0FBQSxJQUFBLE1BQUEsSUFBQXBpQixHQUFBNlAsZUFBQSxNQUFBNUwsS0FBQSxRQUFBb2UsS0FBQSxJQUFBLE1BQUEsSUFBQXJpQixHQUFBc2lCLGNBQUEscUJBQUEsTUFBQXJlLEtBQUEsUUFBQXNlLEdBQUF2aUIsR0FBQSxNQUFBNkQsSUFBQTJULFNBQUF4WCxHQUFBQSxFQUFBLElBQUFBLEVBQUF5WCxXQUFBelgsRUFBQXdpQixhQUFBeGlCLEVBQUF5aUIsY0FGQSxHQUFBeGhCLE1BQUFnQyxFQUFBaEMsRUFBQXVDLE1BQUEvRCxFQUFBd0IsRUFBQStHLE9BQUFuSCxFQUFBSSxFQUFBa0QsS0FBQVYsRUFBQXhDLEVBQUF1RSxRQUFBOUIsS0FBQTNELEdBQUEyRCxFQUFBQyxTQUFBMEQsR0FBQTNELEVBQUFyQixlQUFBOEMsTUFBQTlELEdBQUEsU0FBQXdDLEdBQUEsU0FBQTdELEVBQUFpRSxHQUFBLE1BQUEsSUFBQUosSUFBQTZlLEdBQUFsRixLQUFBeGQsRUFBQWlFLElBQUFuRSxHQUFBLHFDQUFBSSxHQUFBLFFBQUE0RCxHQUFBLGVBQUFpQyxHQUFBLFNBQUEvRixFQUFBaUUsR0FBQSxNQUFBQSxHQUFBMk0sY0FBQS9NLElBQUE2ZSxHQUFBN2UsR0FBQXpCLFdBQUF1Z0IsT0FBQXRoQixHQUFBK1QsWUFBQXZSLEdBQUErZSxTQUFBLEdBQUF4aUIsT0FBQSxFQUFBeWlCLFFBQUEsV0FBQSxNQUFBNWYsR0FBQVgsS0FBQTZILE9BQUFrUyxJQUFBLFNBQUFyYyxHQUFBLE1BQUEsT0FBQUEsRUFBQSxFQUFBQSxFQUFBbUssS0FBQW5LLEVBQUFtSyxLQUFBL0osUUFBQStKLEtBQUFuSyxHQUFBaUQsRUFBQVgsS0FBQTZILE9BQUEyWSxVQUFBLFNBQUE5aUIsR0FBQSxHQUFBaUUsR0FBQUosR0FBQWtKLE1BQUE1QyxLQUFBaUwsY0FBQXBWLEVBQUEsT0FBQWlFLEdBQUE4ZSxXQUFBNVksS0FBQWxHLEVBQUErZSxRQUFBN1ksS0FBQTZZLFFBQUEvZSxHQUFBNFQsS0FBQSxTQUFBN1gsRUFBQWlFLEdBQUEsTUFBQUosSUFBQWdVLEtBQUExTixLQUFBbkssRUFBQWlFLElBQUEyVSxJQUFBLFNBQUE1WSxHQUFBLE1BQUFtSyxNQUFBMlksVUFBQWpmLEdBQUErVSxJQUFBek8sS0FBQSxTQUFBbEcsRUFBQWhELEdBQUEsTUFBQWpCLEdBQUFzQyxLQUFBMkIsRUFBQWhELEVBQUFnRCxPQUFBVCxNQUFBLFdBQUEsTUFBQTJHLE1BQUEyWSxVQUFBN2YsRUFBQStMLE1BQUE3RSxLQUFBNEQsYUFBQWtWLE1BQUEsV0FBQSxNQUFBOVksTUFBQStZLEdBQUEsSUFBQUMsS0FBQSxXQUFBLE1BQUFoWixNQUFBK1ksSUFBQSxJQUFBQSxHQUFBLFNBQUFsakIsR0FBQSxHQUFBaUUsR0FBQWtHLEtBQUEvSixPQUFBYSxHQUFBakIsR0FBQSxFQUFBQSxFQUFBaUUsRUFBQSxFQUFBLE9BQUFrRyxNQUFBMlksVUFBQTdoQixHQUFBLEdBQUFnRCxFQUFBaEQsR0FBQWtKLEtBQUFsSixTQUFBa2UsSUFBQSxXQUFBLE1BQUFoVixNQUFBNFksWUFBQTVZLEtBQUFpTCxZQUFBLE9BQUFqUixLQUFBdEQsRUFBQTJKLEtBQUF2SixFQUFBdUosS0FBQUUsT0FBQXpKLEVBQUF5SixRQUFBN0csR0FBQStJLE9BQUEvSSxHQUFBNmUsR0FBQTlWLE9BQUEsV0FBQSxHQUFBNU0sR0FBQWlFLEVBQUFoRCxFQUFBZ0MsRUFBQXhELEVBQUFvQixFQUFBNEMsRUFBQXNLLFVBQUEsT0FBQXJLLEVBQUEsRUFBQTNELEVBQUFnTyxVQUFBM04sT0FBQWlILEdBQUEsQ0FBQSxLQUFBLGlCQUFBNUQsS0FBQTRELEVBQUE1RCxFQUFBQSxFQUFBc0ssVUFBQXJLLE9BQUFBLEtBQUEsZ0JBQUFELElBQUFJLEdBQUE2SyxXQUFBakwsS0FBQUEsTUFBQUMsSUFBQTNELElBQUEwRCxFQUFBMEcsS0FBQXpHLEtBQUEzRCxFQUFBMkQsRUFBQUEsSUFBQSxHQUFBLE9BQUFqRSxFQUFBc08sVUFBQXJLLElBQUEsSUFBQVQsSUFBQXhELEdBQUFPLEVBQUF5RCxFQUFBUixHQUFBaEMsRUFBQXhCLEVBQUF3RCxHQUFBUSxJQUFBeEMsSUFBQW9HLEdBQUFwRyxJQUFBNEMsR0FBQXVmLGNBQUFuaUIsS0FBQWdELEVBQUFKLEdBQUFtRyxRQUFBL0ksTUFBQWdELEdBQUFBLEdBQUEsRUFBQXBELEVBQUFiLEdBQUE2RCxHQUFBbUcsUUFBQWhLLEdBQUFBLE1BQUFhLEVBQUFiLEdBQUE2RCxHQUFBdWYsY0FBQXBqQixHQUFBQSxLQUFBeUQsRUFBQVIsR0FBQVksR0FBQStJLE9BQUF2RixFQUFBeEcsRUFBQUksSUFBQSxTQUFBQSxJQUFBd0MsRUFBQVIsR0FBQWhDLEdBQUEsT0FBQXdDLElBQUFJLEdBQUErSSxRQUFBeUwsUUFBQSxVQUFBaFgsR0FBQWlDLEtBQUFDLFVBQUFzSyxRQUFBLE1BQUEsSUFBQXdWLFNBQUEsRUFBQTVOLE1BQUEsU0FBQXpWLEdBQUEsS0FBQSxJQUFBMlMsT0FBQTNTLElBQUEwWSxLQUFBLGFBQUFoSyxXQUFBLFNBQUExTyxHQUFBLE1BQUEsYUFBQTZELEdBQUFVLEtBQUF2RSxJQUFBZ0ssUUFBQUQsTUFBQUMsU0FBQSxTQUFBaEssR0FBQSxNQUFBLFVBQUE2RCxHQUFBVSxLQUFBdkUsSUFBQXdYLFNBQUEsU0FBQXhYLEdBQUEsTUFBQSxPQUFBQSxHQUFBQSxHQUFBQSxFQUFBMEYsUUFBQTRkLFVBQUEsU0FBQXRqQixHQUFBLE9BQUE2RCxHQUFBbUcsUUFBQWhLLElBQUFBLEVBQUFzZCxXQUFBdGQsR0FBQSxHQUFBLEdBQUFtWSxjQUFBLFNBQUFuWSxHQUFBLEdBQUFpRSxFQUFBLEtBQUFBLElBQUFqRSxHQUFBLE9BQUEsQ0FBQSxRQUFBLEdBQUFvakIsY0FBQSxTQUFBcGpCLEdBQUEsR0FBQWlFLEVBQUEsS0FBQWpFLEdBQUEsV0FBQTZELEdBQUFVLEtBQUF2RSxJQUFBQSxFQUFBeVgsVUFBQTVULEdBQUEyVCxTQUFBeFgsR0FBQSxPQUFBLENBQUEsS0FBQSxHQUFBQSxFQUFBb1YsY0FBQS9OLEdBQUEvRSxLQUFBdEMsRUFBQSxpQkFBQXFILEdBQUEvRSxLQUFBdEMsRUFBQW9WLFlBQUFoVCxVQUFBLGlCQUFBLE9BQUEsRUFBQSxNQUFBbkIsR0FBQSxPQUFBLEVBQUEsR0FBQWtFLEdBQUFvZSxRQUFBLElBQUF0ZixJQUFBakUsR0FBQSxNQUFBcUgsSUFBQS9FLEtBQUF0QyxFQUFBaUUsRUFBQSxLQUFBQSxJQUFBakUsSUFBQSxNQUFBLFVBQUFpRSxHQUFBb0QsR0FBQS9FLEtBQUF0QyxFQUFBaUUsSUFBQU0sS0FBQSxTQUFBdkUsR0FBQSxNQUFBLE9BQUFBLEVBQUFBLEVBQUEsR0FBQSxnQkFBQUEsSUFBQSxrQkFBQUEsR0FBQTBELEVBQUEzRCxHQUFBdUMsS0FBQXRDLEtBQUEsZUFBQUEsSUFBQXdqQixXQUFBLFNBQUF2ZixHQUFBQSxHQUFBSixHQUFBa0wsS0FBQTlLLEtBQUFqRSxFQUFBeWpCLFlBQUEsU0FBQXhmLEdBQUFqRSxFQUFBMGpCLEtBQUFwaEIsS0FBQXRDLEVBQUFpRSxLQUFBQSxJQUFBMFUsVUFBQSxTQUFBM1ksR0FBQSxNQUFBQSxHQUFBNk4sUUFBQTNOLEdBQUEsT0FBQTJOLFFBQUEvSixHQUFBaUMsS0FBQWtGLFNBQUEsU0FBQWpMLEVBQUFpRSxHQUFBLE1BQUFqRSxHQUFBaUwsVUFBQWpMLEVBQUFpTCxTQUFBN0csZ0JBQUFILEVBQUFHLGVBQUF5VCxLQUFBLFNBQUE3WCxFQUFBaUUsRUFBQWhELEdBQUEsR0FBQWdDLEdBQUF4RCxFQUFBLEVBQUFvQixFQUFBYixFQUFBSSxPQUFBcUQsRUFBQS9ELEVBQUFNLEVBQUEsSUFBQWlCLEdBQUEsR0FBQXdDLEVBQUEsS0FBQTVDLEVBQUFwQixJQUFBd0QsRUFBQWdCLEVBQUErSyxNQUFBaFAsRUFBQVAsR0FBQXdCLEdBQUFnQyxLQUFBLEdBQUF4RCxTQUFBLEtBQUFBLElBQUFPLEdBQUEsR0FBQWlELEVBQUFnQixFQUFBK0ssTUFBQWhQLEVBQUFQLEdBQUF3QixHQUFBZ0MsS0FBQSxFQUFBLFVBQUEsSUFBQVEsRUFBQSxLQUFBNUMsRUFBQXBCLElBQUF3RCxFQUFBZ0IsRUFBQTNCLEtBQUF0QyxFQUFBUCxHQUFBQSxFQUFBTyxFQUFBUCxJQUFBd0QsS0FBQSxHQUFBeEQsU0FBQSxLQUFBQSxJQUFBTyxHQUFBLEdBQUFpRCxFQUFBZ0IsRUFBQTNCLEtBQUF0QyxFQUFBUCxHQUFBQSxFQUFBTyxFQUFBUCxJQUFBd0QsS0FBQSxFQUFBLEtBQUEsT0FBQWpELElBQUErTyxLQUFBLFNBQUEvTyxHQUFBLE1BQUEsT0FBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUE2TixRQUFBL04sR0FBQSxLQUFBNmpCLFVBQUEsU0FBQTNqQixFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQWdELEtBQUEsT0FBQSxPQUFBakUsSUFBQU4sRUFBQXlDLE9BQUFuQyxJQUFBNkQsR0FBQWtKLE1BQUE5TCxFQUFBLGdCQUFBakIsSUFBQUEsR0FBQUEsR0FBQWEsRUFBQXlCLEtBQUFyQixFQUFBakIsSUFBQWlCLEdBQUEyVyxRQUFBLFNBQUE1WCxFQUFBaUUsRUFBQWhELEdBQUEsR0FBQWdDLEVBQUEsSUFBQWdCLEVBQUEsQ0FBQSxHQUFBUixFQUFBLE1BQUFBLEdBQUFuQixLQUFBMkIsRUFBQWpFLEVBQUFpQixFQUFBLEtBQUFnQyxFQUFBZ0IsRUFBQTdELE9BQUFhLEVBQUFBLEVBQUEsRUFBQUEsRUFBQXFDLEtBQUFzWixJQUFBLEVBQUEzWixFQUFBaEMsR0FBQUEsRUFBQSxFQUFBZ0MsRUFBQWhDLEVBQUFBLElBQUEsR0FBQUEsSUFBQWdELElBQUFBLEVBQUFoRCxLQUFBakIsRUFBQSxNQUFBaUIsR0FBQSxPQUFBLEdBQUE4TCxNQUFBLFNBQUEvTSxFQUFBaUUsR0FBQSxJQUFBLEdBQUFoRCxJQUFBZ0QsRUFBQTdELE9BQUE2QyxFQUFBLEVBQUF4RCxFQUFBTyxFQUFBSSxPQUFBYSxFQUFBZ0MsR0FBQWpELEVBQUFQLEtBQUF3RSxFQUFBaEIsSUFBQSxJQUFBaEMsSUFBQUEsRUFBQSxLQUFBLFNBQUFnRCxFQUFBaEIsSUFBQWpELEVBQUFQLEtBQUF3RSxFQUFBaEIsSUFBQSxPQUFBakQsR0FBQUksT0FBQVgsRUFBQU8sR0FBQTBYLEtBQUEsU0FBQTFYLEVBQUFpRSxFQUFBaEQsR0FBQSxJQUFBLEdBQUFnQyxHQUFBeEQsS0FBQW9CLEVBQUEsRUFBQTRDLEVBQUF6RCxFQUFBSSxPQUFBc0QsR0FBQXpDLEVBQUF3QyxFQUFBNUMsRUFBQUEsSUFBQW9DLEdBQUFnQixFQUFBakUsRUFBQWEsR0FBQUEsR0FBQW9DLElBQUFTLEdBQUFqRSxFQUFBMEUsS0FBQW5FLEVBQUFhLEdBQUEsT0FBQXBCLElBQUFtWixJQUFBLFNBQUE1WSxFQUFBaUUsRUFBQWhELEdBQUEsR0FBQWdDLEdBQUFwQyxFQUFBLEVBQUE0QyxFQUFBekQsRUFBQUksT0FBQXNELEVBQUFoRSxFQUFBTSxHQUFBRCxJQUFBLElBQUEyRCxFQUFBLEtBQUFELEVBQUE1QyxFQUFBQSxJQUFBb0MsRUFBQWdCLEVBQUFqRSxFQUFBYSxHQUFBQSxFQUFBSSxHQUFBLE1BQUFnQyxHQUFBbEQsRUFBQW9FLEtBQUFsQixPQUFBLEtBQUFwQyxJQUFBYixHQUFBaUQsRUFBQWdCLEVBQUFqRSxFQUFBYSxHQUFBQSxFQUFBSSxHQUFBLE1BQUFnQyxHQUFBbEQsRUFBQW9FLEtBQUFsQixFQUFBLE9BQUF4RCxHQUFBdVAsU0FBQWpQLElBQUF5WSxLQUFBLEVBQUFvTCxNQUFBLFNBQUE1akIsRUFBQWlFLEdBQUEsR0FBQWhELEdBQUF4QixFQUFBb0IsQ0FBQSxPQUFBLGdCQUFBb0QsS0FBQXBELEVBQUFiLEVBQUFpRSxHQUFBQSxFQUFBakUsRUFBQUEsRUFBQWEsR0FBQWdELEdBQUE2SyxXQUFBMU8sSUFBQWlCLEVBQUFnQyxFQUFBWCxLQUFBeUwsVUFBQSxHQUFBdE8sRUFBQSxXQUFBLE1BQUFPLEdBQUFnUCxNQUFBL0ssR0FBQWtHLEtBQUFsSixFQUFBK0csT0FBQS9FLEVBQUFYLEtBQUF5TCxjQUFBdE8sRUFBQStZLEtBQUF4WSxFQUFBd1ksS0FBQXhZLEVBQUF3WSxNQUFBM1UsR0FBQTJVLE9BQUEvWSxHQUFBLFFBQUE2RyxJQUFBLFdBQUEsT0FBQSxHQUFBL0YsT0FBQXNqQixRQUFBMWUsS0FBQXRCLEdBQUFnVSxLQUFBLGdFQUFBdk0sTUFBQSxLQUFBLFNBQUF0TCxFQUFBaUUsR0FBQVAsRUFBQSxXQUFBTyxFQUFBLEtBQUFBLEVBQUFHLGVBQUEsSUFBQTlELElBQUEsU0FBQU4sR0FBQSxRQUFBOGpCLEdBQUE5akIsRUFBQWlFLEVBQUFoQixFQUFBeEQsR0FBQSxHQUFBb0IsR0FBQTZDLEVBQUEyRCxFQUFBbEMsRUFBQTlELEVBQUFuQixFQUFBUixFQUFBWSxFQUFBMkUsRUFBQTRCLENBQUEsS0FBQTVDLEVBQUFBLEVBQUE2VixlQUFBN1YsRUFBQUwsS0FBQTlELEdBQUErRCxFQUFBSSxHQUFBQSxFQUFBQSxHQUFBbkUsRUFBQW1ELEVBQUFBLE1BQUFrQyxFQUFBbEIsRUFBQXdULFNBQUEsZ0JBQUF6WCxLQUFBQSxHQUFBLElBQUFtRixHQUFBLElBQUFBLEdBQUEsS0FBQUEsRUFBQSxNQUFBbEMsRUFBQSxLQUFBeEQsR0FBQXFFLEVBQUEsQ0FBQSxHQUFBLEtBQUFxQixJQUFBdEUsRUFBQUcsR0FBQUQsS0FBQWYsSUFBQSxHQUFBcUgsRUFBQXhHLEVBQUEsSUFBQSxHQUFBLElBQUFzRSxFQUFBLENBQUEsR0FBQXpCLEVBQUFPLEVBQUE4ZixlQUFBMWMsSUFBQTNELElBQUFBLEVBQUFxWCxXQUFBLE1BQUE5WCxFQUFBLElBQUFTLEVBQUErSSxLQUFBcEYsRUFBQSxNQUFBcEUsR0FBQWtCLEtBQUFULEdBQUFULE1BQUEsSUFBQWdCLEVBQUE2VixnQkFBQXBXLEVBQUFPLEVBQUE2VixjQUFBaUssZUFBQTFjLEtBQUF4SCxFQUFBb0UsRUFBQVAsSUFBQUEsRUFBQStJLEtBQUFwRixFQUFBLE1BQUFwRSxHQUFBa0IsS0FBQVQsR0FBQVQsTUFBQSxDQUFBLEdBQUFwQyxFQUFBLEdBQUEsTUFBQTBILEdBQUF5RyxNQUFBL0wsRUFBQWdCLEVBQUFzRyxxQkFBQXZLLElBQUFpRCxDQUFBLEtBQUFvRSxFQUFBeEcsRUFBQSxLQUFBSSxFQUFBMkssdUJBQUEsTUFBQXJELEdBQUF5RyxNQUFBL0wsRUFBQWdCLEVBQUEySCx1QkFBQXZFLElBQUFwRSxFQUFBLEdBQUFoQyxFQUFBK2lCLE9BQUFqZSxJQUFBQSxFQUFBeEcsS0FBQVMsSUFBQSxDQUFBLEdBQUFNLEVBQUFaLEVBQUFXLEVBQUE0RSxFQUFBaEIsRUFBQTRDLEVBQUEsSUFBQTFCLEdBQUFuRixFQUFBLElBQUFtRixHQUFBLFdBQUFsQixFQUFBZ0gsU0FBQTdHLGNBQUEsQ0FBQSxJQUFBbEUsRUFBQXVELEVBQUF6RCxJQUFBTixFQUFBdUUsRUFBQTRHLGFBQUEsT0FBQXZLLEVBQUFaLEVBQUFtTyxRQUFBbUwsR0FBQSxRQUFBL1UsRUFBQStILGFBQUEsS0FBQTFMLEdBQUFBLEVBQUEsUUFBQUEsRUFBQSxNQUFBZSxFQUFBbkIsRUFBQUUsT0FBQWlCLEtBQUFuQixFQUFBbUIsR0FBQWYsRUFBQTJqQixFQUFBL2pCLEVBQUFtQixHQUFBNEQsR0FBQThULEdBQUF4WixLQUFBUyxJQUFBa2EsRUFBQWpXLEVBQUE4VyxhQUFBOVcsRUFBQTRDLEVBQUEzRyxFQUFBNFMsS0FBQSxLQUFBLEdBQUFqTSxFQUFBLElBQUEsTUFBQTBCLEdBQUF5RyxNQUFBL0wsRUFBQWdDLEVBQUFpRixpQkFBQXJELElBQUE1RCxFQUFBLE1BQUFlLElBQUEsUUFBQXRFLEdBQUF1RSxFQUFBa1csZ0JBQUEsUUFBQSxNQUFBcGEsR0FBQUMsRUFBQTZOLFFBQUFqTyxHQUFBLE1BQUFxRSxFQUFBaEIsRUFBQXhELEdBQUEsUUFBQXlrQixLQUFBLFFBQUFqZ0IsR0FBQWhELEVBQUF4QixHQUFBLE1BQUFPLEdBQUFtRSxLQUFBbEQsRUFBQSxLQUFBZ0MsRUFBQWtoQixtQkFBQWxnQixHQUFBakUsRUFBQTJQLFNBQUExTCxFQUFBaEQsRUFBQSxLQUFBeEIsRUFBQSxHQUFBTyxLQUFBLE9BQUFpRSxHQUFBLFFBQUFtZ0IsR0FBQXBrQixHQUFBLE1BQUFBLEdBQUFLLElBQUEsRUFBQUwsRUFBQSxRQUFBcWtCLEdBQUFya0IsR0FBQSxHQUFBaUUsR0FBQW5FLEVBQUFnTyxjQUFBLE1BQUEsS0FBQSxRQUFBOU4sRUFBQWlFLEdBQUEsTUFBQWhELEdBQUEsT0FBQSxFQUFBLFFBQUFnRCxFQUFBOFcsWUFBQTlXLEVBQUE4VyxXQUFBdUosWUFBQXJnQixHQUFBQSxFQUFBLE1BQUEsUUFBQXNnQixHQUFBdmtCLEVBQUFpRSxHQUFBLElBQUEsR0FBQWhELEdBQUFqQixFQUFBc0wsTUFBQSxLQUFBN0wsRUFBQU8sRUFBQUksT0FBQVgsS0FBQXdELEVBQUF1aEIsV0FBQXZqQixFQUFBeEIsSUFBQXdFLEVBQUEsUUFBQXdnQixHQUFBemtCLEVBQUFpRSxHQUFBLEdBQUFoRCxHQUFBZ0QsR0FBQWpFLEVBQUFpRCxFQUFBaEMsR0FBQSxJQUFBakIsRUFBQXlYLFVBQUEsSUFBQXhULEVBQUF3VCxZQUFBeFQsRUFBQXlnQixhQUFBamYsS0FBQXpGLEVBQUEwa0IsYUFBQWpmLEVBQUEsSUFBQXhDLEVBQUEsTUFBQUEsRUFBQSxJQUFBaEMsRUFBQSxLQUFBQSxFQUFBQSxFQUFBMGpCLGFBQUEsR0FBQTFqQixJQUFBZ0QsRUFBQSxPQUFBLENBQUEsT0FBQWpFLEdBQUEsR0FBQSxFQUFBLFFBQUE0a0IsR0FBQTVrQixHQUFBLE1BQUEsVUFBQWlFLEdBQUEsR0FBQWhELEdBQUFnRCxFQUFBZ0gsU0FBQTdHLGFBQUEsT0FBQSxVQUFBbkQsR0FBQWdELEVBQUFNLE9BQUF2RSxHQUFBLFFBQUE2a0IsR0FBQTdrQixHQUFBLE1BQUEsVUFBQWlFLEdBQUEsR0FBQWhELEdBQUFnRCxFQUFBZ0gsU0FBQTdHLGFBQUEsUUFBQSxVQUFBbkQsR0FBQSxXQUFBQSxJQUFBZ0QsRUFBQU0sT0FBQXZFLEdBQUEsUUFBQThrQixHQUFBOWtCLEdBQUEsTUFBQW9rQixHQUFBLFNBQUFuZ0IsR0FBQSxNQUFBQSxJQUFBQSxFQUFBbWdCLEVBQUEsU0FBQW5qQixFQUFBZ0MsR0FBQSxJQUFBLEdBQUF4RCxHQUFBb0IsRUFBQWIsS0FBQWlCLEVBQUFiLE9BQUE2RCxHQUFBUixFQUFBNUMsRUFBQVQsT0FBQXFELEtBQUF4QyxFQUFBeEIsRUFBQW9CLEVBQUE0QyxNQUFBeEMsRUFBQXhCLEtBQUF3RCxFQUFBeEQsR0FBQXdCLEVBQUF4QixTQUFBLFFBQUF5YSxHQUFBbGEsR0FBQSxNQUFBQSxJQUFBLG1CQUFBQSxHQUFBdUssc0JBQUF2SyxFQUFBLFFBQUEra0IsTUFBQSxRQUFBZCxHQUFBamtCLEdBQUEsSUFBQSxHQUFBaUUsR0FBQSxFQUFBaEQsRUFBQWpCLEVBQUFJLE9BQUE2QyxFQUFBLEdBQUFoQyxFQUFBZ0QsRUFBQUEsSUFBQWhCLEdBQUFqRCxFQUFBaUUsR0FBQThHLEtBQUEsT0FBQTlILEdBQUEsUUFBQStoQixHQUFBaGxCLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQWdCLEVBQUF2QyxJQUFBakMsRUFBQXdCLEdBQUEsZUFBQWdDLEVBQUFwQyxFQUFBZ0csR0FBQSxPQUFBNUMsR0FBQWdmLE1BQUEsU0FBQWhmLEVBQUFoRCxFQUFBSixHQUFBLEtBQUFvRCxFQUFBQSxFQUFBaEIsSUFBQSxHQUFBLElBQUFnQixFQUFBd1QsVUFBQWhZLEVBQUEsTUFBQU8sR0FBQWlFLEVBQUFoRCxFQUFBSixJQUFBLFNBQUFvRCxFQUFBaEQsRUFBQXdDLEdBQUEsR0FBQUMsR0FBQTNELEVBQUFzSCxHQUFBcEMsRUFBQXBFLEVBQUEsSUFBQTRDLEdBQUEsS0FBQVEsRUFBQUEsRUFBQWhCLElBQUEsSUFBQSxJQUFBZ0IsRUFBQXdULFVBQUFoWSxJQUFBTyxFQUFBaUUsRUFBQWhELEVBQUF3QyxHQUFBLE9BQUEsTUFBQSxNQUFBUSxFQUFBQSxFQUFBaEIsSUFBQSxHQUFBLElBQUFnQixFQUFBd1QsVUFBQWhZLEVBQUEsQ0FBQSxHQUFBTSxFQUFBa0UsRUFBQTVELEtBQUE0RCxFQUFBNUQsUUFBQXFELEVBQUEzRCxFQUFBa0QsS0FBQVMsRUFBQSxLQUFBdUIsR0FBQXZCLEVBQUEsS0FBQTdDLEVBQUEsTUFBQXdHLEdBQUEsR0FBQTNELEVBQUEsRUFBQSxJQUFBM0QsRUFBQWtELEdBQUFvRSxFQUFBQSxFQUFBLEdBQUFySCxFQUFBaUUsRUFBQWhELEVBQUF3QyxHQUFBLE9BQUEsSUFBQSxRQUFBd2hCLEdBQUFqbEIsR0FBQSxNQUFBQSxHQUFBSSxPQUFBLEVBQUEsU0FBQTZELEVBQUFoRCxFQUFBZ0MsR0FBQSxJQUFBLEdBQUF4RCxHQUFBTyxFQUFBSSxPQUFBWCxLQUFBLElBQUFPLEVBQUFQLEdBQUF3RSxFQUFBaEQsRUFBQWdDLEdBQUEsT0FBQSxDQUFBLFFBQUEsR0FBQWpELEVBQUEsR0FBQSxRQUFBc1osR0FBQXRaLEVBQUFpRSxFQUFBaEQsR0FBQSxJQUFBLEdBQUFnQyxHQUFBLEVBQUF4RCxFQUFBd0UsRUFBQTdELE9BQUFYLEVBQUF3RCxFQUFBQSxJQUFBNmdCLEVBQUE5akIsRUFBQWlFLEVBQUFoQixHQUFBaEMsRUFBQSxPQUFBQSxHQUFBLFFBQUF1WSxHQUFBeFosRUFBQWlFLEVBQUFoRCxFQUFBZ0MsRUFBQXhELEdBQUEsSUFBQSxHQUFBb0IsR0FBQTRDLEtBQUFDLEVBQUEsRUFBQTNELEVBQUFDLEVBQUFJLE9BQUFpSCxFQUFBLE1BQUFwRCxFQUFBbEUsRUFBQTJELEVBQUFBLEtBQUE3QyxFQUFBYixFQUFBMEQsT0FBQXpDLEdBQUFBLEVBQUFKLEVBQUFvQyxFQUFBeEQsTUFBQWdFLEVBQUFVLEtBQUF0RCxHQUFBd0csR0FBQXBELEVBQUFFLEtBQUFULEdBQUEsT0FBQUQsR0FBQSxRQUFBa1csR0FBQTNaLEVBQUFpRSxFQUFBaEQsRUFBQWdDLEVBQUF4RCxFQUFBb0IsR0FBQSxNQUFBb0MsS0FBQUEsRUFBQTVDLEtBQUE0QyxFQUFBMFcsRUFBQTFXLElBQUF4RCxJQUFBQSxFQUFBWSxLQUFBWixFQUFBa2EsRUFBQWxhLEVBQUFvQixJQUFBdWpCLEVBQUEsU0FBQXZqQixFQUFBNEMsRUFBQUMsRUFBQTNELEdBQUEsR0FBQXNILEdBQUFsQyxFQUFBOUQsRUFBQXdDLEtBQUEvRCxLQUFBSSxFQUFBdUQsRUFBQXJELE9BQUEwRCxFQUFBakQsR0FBQXlZLEVBQUFyVixHQUFBLElBQUFQLEVBQUErVCxVQUFBL1QsR0FBQUEsTUFBQXFDLEdBQUEvRixJQUFBYSxHQUFBb0QsRUFBQUgsRUFBQTBWLEVBQUExVixFQUFBRCxFQUFBN0QsRUFBQTBELEVBQUEzRCxHQUFBTCxFQUFBdUIsRUFBQXhCLElBQUFvQixFQUFBYixFQUFBRSxHQUFBK0MsTUFBQVEsRUFBQXNDLENBQUEsSUFBQTlFLEdBQUFBLEVBQUE4RSxFQUFBckcsRUFBQWdFLEVBQUEzRCxHQUFBa0QsRUFBQSxJQUFBb0UsRUFBQW1TLEVBQUE5WixFQUFBSSxHQUFBbUQsRUFBQW9FLEtBQUEzRCxFQUFBM0QsR0FBQW9GLEVBQUFrQyxFQUFBakgsT0FBQStFLE1BQUE5RCxFQUFBZ0csRUFBQWxDLE1BQUF6RixFQUFBSSxFQUFBcUYsTUFBQVksRUFBQWpHLEVBQUFxRixJQUFBOUQsR0FBQSxJQUFBUixHQUFBLEdBQUFwQixHQUFBTyxFQUFBLENBQUEsR0FBQVAsRUFBQSxDQUFBLElBQUE0SCxLQUFBbEMsRUFBQXpGLEVBQUFVLE9BQUErRSxNQUFBOUQsRUFBQTNCLEVBQUF5RixLQUFBa0MsRUFBQWxELEtBQUE0QixFQUFBWixHQUFBOUQsRUFBQTVCLEdBQUEsS0FBQUMsS0FBQTJILEVBQUF0SCxHQUFBLElBQUFvRixFQUFBekYsRUFBQVUsT0FBQStFLE1BQUE5RCxFQUFBM0IsRUFBQXlGLE1BQUFrQyxFQUFBNUgsRUFBQXlHLEdBQUFyRixFQUFBUSxHQUFBd0MsRUFBQXNCLEtBQUEsSUFBQXRFLEVBQUF3RyxLQUFBNUQsRUFBQTRELEdBQUFoRyxTQUFBM0IsR0FBQThaLEVBQUE5WixJQUFBK0QsRUFBQS9ELEVBQUFnTCxPQUFBeEssRUFBQVIsRUFBQVUsUUFBQVYsR0FBQUQsRUFBQUEsRUFBQSxLQUFBZ0UsRUFBQS9ELEVBQUFLLEdBQUF3SSxFQUFBeUcsTUFBQXZMLEVBQUEvRCxLQUFBLFFBQUFxYSxHQUFBL1osR0FBQSxJQUFBLEdBQUFpRSxHQUFBaEQsRUFBQXhCLEVBQUFvQixFQUFBYixFQUFBSSxPQUFBcUQsRUFBQVIsRUFBQWlpQixTQUFBbGxCLEVBQUEsR0FBQXVFLE1BQUFiLEVBQUFELEdBQUFSLEVBQUFpaUIsU0FBQSxLQUFBbmxCLEVBQUEwRCxFQUFBLEVBQUEsRUFBQTBCLEVBQUE2ZixFQUFBLFNBQUFobEIsR0FBQSxNQUFBQSxLQUFBaUUsR0FBQVAsR0FBQSxHQUFBckMsRUFBQTJqQixFQUFBLFNBQUFobEIsR0FBQSxNQUFBa0csSUFBQWpDLEVBQUFqRSxJQUFBLEdBQUEwRCxHQUFBLEdBQUFHLEdBQUEsU0FBQTdELEVBQUFpQixFQUFBZ0MsR0FBQSxHQUFBeEQsSUFBQWdFLElBQUFSLEdBQUFoQyxJQUFBb0csTUFBQXBELEVBQUFoRCxHQUFBd1csU0FBQXRTLEVBQUFuRixFQUFBaUIsRUFBQWdDLEdBQUE1QixFQUFBckIsRUFBQWlCLEVBQUFnQyxHQUFBLE9BQUFnQixHQUFBLEtBQUF4RSxJQUFBb0IsRUFBQWQsRUFBQUEsSUFBQSxHQUFBa0IsRUFBQWdDLEVBQUFpaUIsU0FBQWxsQixFQUFBRCxHQUFBd0UsTUFBQVYsR0FBQW1oQixFQUFBQyxFQUFBcGhCLEdBQUE1QyxRQUFBLENBQUEsR0FBQUEsRUFBQWdDLEVBQUEwVSxPQUFBM1gsRUFBQUQsR0FBQXdFLE1BQUF5SyxNQUFBLEtBQUFoUCxFQUFBRCxHQUFBb2xCLFNBQUFsa0IsRUFBQVosR0FBQSxDQUFBLElBQUFaLElBQUFNLEVBQUFjLEVBQUFwQixJQUFBd0QsRUFBQWlpQixTQUFBbGxCLEVBQUFQLEdBQUE4RSxNQUFBOUUsS0FBQSxNQUFBa2EsR0FBQTVaLEVBQUEsR0FBQWtsQixFQUFBcGhCLEdBQUE5RCxFQUFBLEdBQUFra0IsRUFBQWprQixFQUFBd0QsTUFBQSxFQUFBekQsRUFBQSxHQUFBaUksUUFBQStDLE1BQUEsTUFBQS9LLEVBQUFELEVBQUEsR0FBQXdFLEtBQUEsSUFBQSxNQUFBc0osUUFBQWpPLEdBQUEsTUFBQXFCLEVBQUF4QixFQUFBTSxHQUFBZ2EsRUFBQS9aLEVBQUF3RCxNQUFBekQsRUFBQU4sSUFBQW9CLEVBQUFwQixHQUFBc2EsRUFBQS9aLEVBQUFBLEVBQUF3RCxNQUFBL0QsSUFBQW9CLEVBQUFwQixHQUFBd2tCLEVBQUFqa0IsSUFBQTZELEVBQUFNLEtBQUFsRCxHQUFBLE1BQUFna0IsR0FBQXBoQixHQUFBLFFBQUFvVyxHQUFBamEsRUFBQWlFLEdBQUEsR0FBQWhELEdBQUFnRCxFQUFBN0QsT0FBQSxFQUFBWCxFQUFBTyxFQUFBSSxPQUFBLEVBQUFTLEVBQUEsU0FBQUEsRUFBQTRDLEVBQUFDLEVBQUEzRCxFQUFBb0YsR0FBQSxHQUFBOUQsR0FBQXdDLEVBQUEzRCxFQUFBNEQsRUFBQSxFQUFBaUMsRUFBQSxJQUFBckcsRUFBQW1CLE1BQUFQLEtBQUFULEVBQUF3SCxFQUFBaEgsRUFBQVEsR0FBQXBCLEdBQUF3RCxFQUFBaUYsS0FBQWtkLElBQUEsSUFBQWpnQixHQUFBdkIsRUFBQXFCLEdBQUEsTUFBQXBGLEVBQUEsRUFBQXlELEtBQUFDLFVBQUEsR0FBQXNELEVBQUF4RyxFQUFBRCxNQUFBLEtBQUErRSxJQUFBa0MsRUFBQTVELElBQUEzRCxHQUFBMkQsR0FBQXNDLElBQUFjLEdBQUEsT0FBQXhGLEVBQUFoQixFQUFBMEYsSUFBQUEsSUFBQSxDQUFBLEdBQUF0RyxHQUFBNEIsRUFBQSxDQUFBLElBQUF3QyxFQUFBLEVBQUEzRCxFQUFBRixFQUFBNkQsTUFBQSxHQUFBM0QsRUFBQW1CLEVBQUFvQyxFQUFBQyxHQUFBLENBQUEzRCxFQUFBb0UsS0FBQTlDLEVBQUEsT0FBQThELElBQUFGLEVBQUFyQixHQUFBM0MsS0FBQUksR0FBQW5CLEdBQUFtQixJQUFBeUMsSUFBQWpELEdBQUFuQixFQUFBeUUsS0FBQTlDLElBQUEsR0FBQXlDLEdBQUFpQyxFQUFBOUUsR0FBQThFLElBQUFqQyxFQUFBLENBQUEsSUFBQUQsRUFBQSxFQUFBM0QsRUFBQStELEVBQUFKLE1BQUEzRCxFQUFBUixFQUFBWSxFQUFBbUQsRUFBQUMsRUFBQSxJQUFBN0MsRUFBQSxDQUFBLEdBQUFpRCxFQUFBLEVBQUEsS0FBQWlDLEtBQUFyRyxFQUFBcUcsSUFBQXpGLEVBQUF5RixLQUFBekYsRUFBQXlGLEdBQUE3RSxFQUFBb0IsS0FBQXZDLEdBQUFPLEdBQUFrWixFQUFBbFosR0FBQWlJLEVBQUF5RyxNQUFBalAsRUFBQU8sR0FBQTZFLElBQUF0RSxHQUFBUCxFQUFBRixPQUFBLEdBQUEwRCxFQUFBRyxFQUFBN0QsT0FBQSxHQUFBMGpCLEVBQUF1QixXQUFBdGxCLEdBQUEsTUFBQW9GLEtBQUFGLEVBQUFyQixFQUFBeUQsRUFBQXhILEdBQUFILEVBQUEsT0FBQXVCLEdBQUFtakIsRUFBQXZqQixHQUFBQSxFQUFBLEdBQUFvRCxHQUFBaEQsRUFBQWdDLEVBQUF4RCxFQUFBb0IsRUFBQTRDLEVBQUFDLEVBQUEzRCxFQUFBc0gsRUFBQWxDLEVBQUE5RCxFQUFBd0MsRUFBQS9ELEVBQUFJLEVBQUE0RCxFQUFBaUMsRUFBQXJHLEVBQUFZLEVBQUFULEVBQUFRLEVBQUEsU0FBQSxFQUFBLEdBQUFFLE1BQUFxRCxFQUFBNUQsRUFBQTBFLFNBQUFPLEVBQUEsRUFBQTRCLEVBQUEsRUFBQTdDLEVBQUFrZ0IsSUFBQWxlLEVBQUFrZSxJQUFBbmdCLEVBQUFtZ0IsSUFBQWhoQixFQUFBLFNBQUFsRCxFQUFBaUUsR0FBQSxNQUFBakUsS0FBQWlFLElBQUE1QyxHQUFBLEdBQUEsR0FBQW9FLEVBQUEsR0FBQSxHQUFBd0IsS0FBQTVFLGVBQUFtQyxLQUFBdEQsRUFBQXNELEVBQUErVCxJQUFBcFMsRUFBQTNCLEVBQUFMLEtBQUFvRSxFQUFBL0QsRUFBQUwsS0FBQXpELEVBQUE4RCxFQUFBaEIsTUFBQTBDLEdBQUEsU0FBQWxHLEVBQUFpRSxHQUFBLElBQUEsR0FBQWhELEdBQUEsRUFBQWdDLEVBQUFqRCxFQUFBSSxPQUFBNkMsRUFBQWhDLEVBQUFBLElBQUEsR0FBQWpCLEVBQUFpQixLQUFBZ0QsRUFBQSxNQUFBaEQsRUFBQSxRQUFBLEdBQUErSCxHQUFBLDZIQUFBakgsR0FBQSxzQkFBQWdELEdBQUEsbUNBQUFlLEdBQUFmLEdBQUE4SSxRQUFBLElBQUEsTUFBQXRMLEdBQUEsTUFBQVIsR0FBQSxLQUFBZ0QsR0FBQSxPQUFBaEQsR0FBQSxnQkFBQUEsR0FBQSwyREFBQStELEdBQUEsT0FBQS9ELEdBQUEsT0FBQW9GLEdBQUEsS0FBQXBDLEdBQUEsd0ZBQUF4QyxHQUFBLGVBQUFzQyxHQUFBLEdBQUEvRCxRQUFBaUIsR0FBQSxJQUFBLEtBQUFuQyxHQUFBLEdBQUFrQixRQUFBLElBQUFpQixHQUFBLDhCQUFBQSxHQUFBLEtBQUEsS0FBQXVELEdBQUEsR0FBQXhFLFFBQUEsSUFBQWlCLEdBQUEsS0FBQUEsR0FBQSxLQUFBbUYsR0FBQSxHQUFBcEcsUUFBQSxJQUFBaUIsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsS0FBQWMsR0FBQSxHQUFBL0IsUUFBQSxJQUFBaUIsR0FBQSxpQkFBQUEsR0FBQSxPQUFBLEtBQUE4RixHQUFBLEdBQUEvRyxRQUFBcUcsSUFBQWdDLEdBQUEsR0FBQXJJLFFBQUEsSUFBQWdGLEdBQUEsS0FBQWhCLElBQUF3Z0IsR0FBQSxHQUFBeGtCLFFBQUEsTUFBQWlFLEdBQUEsS0FBQXdnQixNQUFBLEdBQUF6a0IsUUFBQSxRQUFBaUUsR0FBQSxLQUFBcWdCLElBQUEsR0FBQXRrQixRQUFBLEtBQUFpRSxHQUFBOEksUUFBQSxJQUFBLE1BQUEsS0FBQTJYLEtBQUEsR0FBQTFrQixRQUFBLElBQUF5QixJQUFBa2pCLE9BQUEsR0FBQTNrQixRQUFBLElBQUFxRyxJQUFBdWUsTUFBQSxHQUFBNWtCLFFBQUEseURBQUFpQixHQUFBLCtCQUFBQSxHQUFBLGNBQUFBLEdBQUEsYUFBQUEsR0FBQSxTQUFBLEtBQUE0akIsS0FBQSxHQUFBN2tCLFFBQUEsT0FBQWtJLEdBQUEsS0FBQSxLQUFBNGMsYUFBQSxHQUFBOWtCLFFBQUEsSUFBQWlCLEdBQUEsbURBQUFBLEdBQUEsbUJBQUFBLEdBQUEsbUJBQUEsTUFBQWtFLEdBQUEsc0NBQUFzQixHQUFBLFNBQUF4SSxHQUFBLHlCQUFBaUMsR0FBQSxtQ0FBQStYLEdBQUEsT0FBQUMsR0FBQSxRQUFBQyxHQUFBLEdBQUFuWSxRQUFBLHFCQUFBaUIsR0FBQSxNQUFBQSxHQUFBLE9BQUEsTUFBQW9YLEdBQUEsU0FBQW5aLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQSxLQUFBZ0IsRUFBQSxLQUFBLE9BQUFoQixLQUFBQSxHQUFBaEMsRUFBQWdELEVBQUEsRUFBQWhCLEVBQUFoRCxPQUFBNGxCLGFBQUE1aUIsRUFBQSxPQUFBaEQsT0FBQTRsQixhQUFBNWlCLEdBQUEsR0FBQSxNQUFBLEtBQUFBLEVBQUEsUUFBQW1XLEdBQUEsV0FBQXZWLElBQUEsS0FBQTBFLEVBQUF5RyxNQUFBeEssRUFBQTlELEVBQUE0QixLQUFBc0IsRUFBQTJWLFlBQUEzVixFQUFBMlYsWUFBQS9VLEVBQUFaLEVBQUEyVixXQUFBblosUUFBQXFYLFNBQUEsTUFBQXFPLEdBQUF2ZCxHQUFBeUcsTUFBQXhLLEVBQUFwRSxPQUFBLFNBQUFKLEVBQUFpRSxHQUFBa0MsRUFBQTZJLE1BQUFoUCxFQUFBVSxFQUFBNEIsS0FBQTJCLEtBQUEsU0FBQWpFLEVBQUFpRSxHQUFBLElBQUEsR0FBQWhELEdBQUFqQixFQUFBSSxPQUFBNkMsRUFBQSxFQUFBakQsRUFBQWlCLEtBQUFnRCxFQUFBaEIsT0FBQWpELEVBQUFJLE9BQUFhLEVBQUEsSUFBQUEsRUFBQTZpQixFQUFBRCxXQUFBaGpCLEVBQUFpakIsRUFBQWlDLE1BQUEsU0FBQS9sQixHQUFBLEdBQUFpRSxHQUFBakUsSUFBQUEsRUFBQThaLGVBQUE5WixHQUFBZ2MsZUFBQSxTQUFBL1gsR0FBQSxTQUFBQSxFQUFBZ0gsVUFBQXBILEVBQUFpZ0IsRUFBQWtDLFlBQUEsU0FBQWhtQixHQUFBLEdBQUFpRSxHQUFBeEUsRUFBQWdFLEVBQUF6RCxFQUFBQSxFQUFBOFosZUFBQTlaLEVBQUE0RCxDQUFBLE9BQUFILEtBQUEzRCxHQUFBLElBQUEyRCxFQUFBZ1UsVUFBQWhVLEVBQUF1WSxpQkFBQWxjLEVBQUEyRCxFQUFBdkQsRUFBQXVELEVBQUF1WSxnQkFBQXZjLEVBQUFnRSxFQUFBK2UsWUFBQS9pQixHQUFBQSxJQUFBQSxFQUFBZ0YsTUFBQWhGLEVBQUE0RSxpQkFBQTVFLEVBQUE0RSxpQkFBQSxTQUFBK1UsSUFBQSxHQUFBM1osRUFBQTZFLGFBQUE3RSxFQUFBNkUsWUFBQSxXQUFBOFUsS0FBQXRWLEdBQUFqRCxFQUFBNEMsR0FBQXhDLEVBQUE2SixXQUFBdVosRUFBQSxTQUFBcmtCLEdBQUEsTUFBQUEsR0FBQXFMLFVBQUEsS0FBQXJMLEVBQUE2SyxhQUFBLGVBQUE1SixFQUFBc0oscUJBQUE4WixFQUFBLFNBQUFya0IsR0FBQSxNQUFBQSxHQUFBNlosWUFBQXBXLEVBQUF3aUIsY0FBQSxNQUFBam1CLEVBQUF1SyxxQkFBQSxLQUFBbkssU0FBQWEsRUFBQTJLLHVCQUFBN00sR0FBQVEsS0FBQWtFLEVBQUFtSSx3QkFBQTNLLEVBQUFpbEIsUUFBQTdCLEVBQUEsU0FBQXJrQixHQUFBLE1BQUFFLEdBQUEyWixZQUFBN1osR0FBQXlNLEdBQUFwTSxHQUFBb0QsRUFBQTBpQixvQkFBQTFpQixFQUFBMGlCLGtCQUFBOWxCLEdBQUFELFNBQUFhLEVBQUFpbEIsU0FBQWpqQixFQUFBaUYsS0FBQW9kLEdBQUEsU0FBQXRsQixFQUFBaUUsR0FBQSxHQUFBLG1CQUFBQSxHQUFBOGYsZ0JBQUFqZ0IsRUFBQSxDQUFBLEdBQUE3QyxHQUFBZ0QsRUFBQThmLGVBQUEvakIsRUFBQSxPQUFBaUIsSUFBQUEsRUFBQThaLFlBQUE5WixRQUFBZ0MsRUFBQTBVLE9BQUEyTixHQUFBLFNBQUF0bEIsR0FBQSxHQUFBaUUsR0FBQWpFLEVBQUE2TixRQUFBb0wsR0FBQUUsR0FBQSxPQUFBLFVBQUFuWixHQUFBLE1BQUFBLEdBQUE2SyxhQUFBLFFBQUE1RyxZQUFBaEIsR0FBQWlGLEtBQUFvZCxHQUFBcmlCLEVBQUEwVSxPQUFBMk4sR0FBQSxTQUFBdGxCLEdBQUEsR0FBQWlFLEdBQUFqRSxFQUFBNk4sUUFBQW9MLEdBQUFFLEdBQUEsT0FBQSxVQUFBblosR0FBQSxHQUFBaUIsR0FBQSxtQkFBQWpCLEdBQUFvbUIsa0JBQUFwbUIsRUFBQW9tQixpQkFBQSxLQUFBLE9BQUFubEIsSUFBQUEsRUFBQThKLFFBQUE5RyxLQUFBaEIsRUFBQWlGLEtBQUFrZCxJQUFBbmtCLEVBQUFzSixxQkFBQSxTQUFBdkssRUFBQWlFLEdBQUEsTUFBQSxtQkFBQUEsR0FBQXNHLHFCQUFBdEcsRUFBQXNHLHFCQUFBdkssR0FBQWlCLEVBQUEraUIsSUFBQS9mLEVBQUFpRyxpQkFBQWxLLEdBQUEsUUFBQSxTQUFBQSxFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQWdDLEtBQUF4RCxFQUFBLEVBQUFvQixFQUFBb0QsRUFBQXNHLHFCQUFBdkssRUFBQSxJQUFBLE1BQUFBLEVBQUEsQ0FBQSxLQUFBaUIsRUFBQUosRUFBQXBCLE1BQUEsSUFBQXdCLEVBQUF3VyxVQUFBeFUsRUFBQWtCLEtBQUFsRCxFQUFBLE9BQUFnQyxHQUFBLE1BQUFwQyxJQUFBb0MsRUFBQWlGLEtBQUFxZCxNQUFBdGtCLEVBQUEySyx3QkFBQSxTQUFBNUwsRUFBQWlFLEdBQUEsTUFBQUgsR0FBQUcsRUFBQTJILHVCQUFBNUwsR0FBQSxRQUFBTixLQUFBcUcsTUFBQTlFLEVBQUEraUIsSUFBQWpsQixHQUFBUSxLQUFBa0UsRUFBQXlHLHFCQUFBbWEsRUFBQSxTQUFBcmtCLEdBQUFFLEVBQUEyWixZQUFBN1osR0FBQWtiLFVBQUEsVUFBQTdhLEVBQUEscUJBQUFBLEVBQUEsaUVBQUFMLEVBQUFrSyxpQkFBQSx3QkFBQTlKLFFBQUEyRixFQUFBNUIsS0FBQSxTQUFBcEMsR0FBQSxnQkFBQS9CLEVBQUFrSyxpQkFBQSxjQUFBOUosUUFBQTJGLEVBQUE1QixLQUFBLE1BQUFwQyxHQUFBLGFBQUFpSCxHQUFBLEtBQUFoSixFQUFBa0ssaUJBQUEsUUFBQTdKLEVBQUEsTUFBQUQsUUFBQTJGLEVBQUE1QixLQUFBLE1BQUFuRSxFQUFBa0ssaUJBQUEsWUFBQTlKLFFBQUEyRixFQUFBNUIsS0FBQSxZQUFBbkUsRUFBQWtLLGlCQUFBLEtBQUE3SixFQUFBLE1BQUFELFFBQUEyRixFQUFBNUIsS0FBQSxjQUFBa2dCLEVBQUEsU0FBQXJrQixHQUFBLEdBQUFpRSxHQUFBUixFQUFBcUssY0FBQSxRQUFBN0osR0FBQStILGFBQUEsT0FBQSxVQUFBaE0sRUFBQTZaLFlBQUE1VixHQUFBK0gsYUFBQSxPQUFBLEtBQUFoTSxFQUFBa0ssaUJBQUEsWUFBQTlKLFFBQUEyRixFQUFBNUIsS0FBQSxPQUFBcEMsR0FBQSxlQUFBL0IsRUFBQWtLLGlCQUFBLFlBQUE5SixRQUFBMkYsRUFBQTVCLEtBQUEsV0FBQSxhQUFBbkUsRUFBQWtLLGlCQUFBLFFBQUFuRSxFQUFBNUIsS0FBQSxZQUFBbEQsRUFBQW9sQixnQkFBQXRuQixHQUFBUSxLQUFBZSxFQUFBSixFQUFBaWxCLFNBQUFqbEIsRUFBQW9tQix1QkFBQXBtQixFQUFBcW1CLG9CQUFBcm1CLEVBQUFzbUIsa0JBQUF0bUIsRUFBQXVtQixxQkFBQXBDLEVBQUEsU0FBQXJrQixHQUFBaUIsRUFBQXlsQixrQkFBQXBtQixFQUFBZ0MsS0FBQXRDLEVBQUEsT0FBQU0sRUFBQWdDLEtBQUF0QyxFQUFBLGFBQUFOLEVBQUF5RSxLQUFBLEtBQUFnRCxNQUFBcEIsRUFBQUEsRUFBQTNGLFFBQUEsR0FBQVUsUUFBQWlGLEVBQUErTSxLQUFBLE1BQUFwVCxFQUFBQSxFQUFBVSxRQUFBLEdBQUFVLFFBQUFwQixFQUFBb1QsS0FBQSxNQUFBN08sRUFBQWxGLEdBQUFRLEtBQUFXLEVBQUF5bUIseUJBQUE5bUIsRUFBQW9FLEdBQUFsRixHQUFBUSxLQUFBVyxFQUFBMG1CLFVBQUEsU0FBQTVtQixFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQSxJQUFBakIsRUFBQXlYLFNBQUF6WCxFQUFBZ2MsZ0JBQUFoYyxFQUFBaUQsRUFBQWdCLEdBQUFBLEVBQUE4VyxVQUFBLE9BQUEvYSxLQUFBaUQsTUFBQUEsR0FBQSxJQUFBQSxFQUFBd1UsWUFBQXhXLEVBQUEybEIsU0FBQTNsQixFQUFBMmxCLFNBQUEzakIsR0FBQWpELEVBQUEybUIseUJBQUEsR0FBQTNtQixFQUFBMm1CLHdCQUFBMWpCLE1BQUEsU0FBQWpELEVBQUFpRSxHQUFBLEdBQUFBLEVBQUEsS0FBQUEsRUFBQUEsRUFBQThXLFlBQUEsR0FBQTlXLElBQUFqRSxFQUFBLE9BQUEsQ0FBQSxRQUFBLEdBQUFrRCxFQUFBZSxFQUFBLFNBQUFqRSxFQUFBaUUsR0FBQSxHQUFBakUsSUFBQWlFLEVBQUEsTUFBQTVDLElBQUEsRUFBQSxDQUFBLElBQUE0QixJQUFBakQsRUFBQTJtQix5QkFBQTFpQixFQUFBMGlCLHVCQUFBLE9BQUExakIsR0FBQUEsR0FBQUEsR0FBQWpELEVBQUE4WixlQUFBOVosTUFBQWlFLEVBQUE2VixlQUFBN1YsR0FBQWpFLEVBQUEybUIsd0JBQUExaUIsR0FBQSxFQUFBLEVBQUFoQixJQUFBaEMsRUFBQTRsQixjQUFBNWlCLEVBQUEwaUIsd0JBQUEzbUIsS0FBQWlELEVBQUFqRCxJQUFBeUQsR0FBQXpELEVBQUE4WixnQkFBQWxXLEdBQUEvRCxFQUFBK0QsRUFBQTVELElBQUEsRUFBQWlFLElBQUFSLEdBQUFRLEVBQUE2VixnQkFBQWxXLEdBQUEvRCxFQUFBK0QsRUFBQUssR0FBQSxFQUFBa0IsRUFBQWUsR0FBQWYsRUFBQW5GLEdBQUFrRyxHQUFBZixFQUFBbEIsR0FBQSxFQUFBLEVBQUFoQixHQUFBLEVBQUEsSUFBQSxTQUFBakQsRUFBQWlFLEdBQUEsR0FBQWpFLElBQUFpRSxFQUFBLE1BQUE1QyxJQUFBLEVBQUEsQ0FBQSxJQUFBSixHQUFBZ0MsRUFBQSxFQUFBeEQsRUFBQU8sRUFBQSthLFdBQUFsYSxFQUFBb0QsRUFBQThXLFdBQUFyWCxHQUFBMUQsR0FBQUQsR0FBQWtFLEVBQUEsS0FBQXhFLElBQUFvQixFQUFBLE1BQUFiLEtBQUF5RCxHQUFBLEVBQUFRLElBQUFSLEVBQUEsRUFBQWhFLEdBQUEsRUFBQW9CLEVBQUEsRUFBQXNFLEVBQUFlLEdBQUFmLEVBQUFuRixHQUFBa0csR0FBQWYsRUFBQWxCLEdBQUEsQ0FBQSxJQUFBeEUsSUFBQW9CLEVBQUEsTUFBQTRqQixHQUFBemtCLEVBQUFpRSxFQUFBLEtBQUFoRCxFQUFBakIsRUFBQWlCLEVBQUFBLEVBQUE4WixZQUFBclgsRUFBQTZMLFFBQUF0TyxFQUFBLEtBQUFBLEVBQUFnRCxFQUFBaEQsRUFBQUEsRUFBQThaLFlBQUFoYixFQUFBd1AsUUFBQXRPLEVBQUEsTUFBQXlDLEVBQUFULEtBQUFsRCxFQUFBa0QsSUFBQUEsR0FBQSxPQUFBQSxHQUFBd2hCLEVBQUEvZ0IsRUFBQVQsR0FBQWxELEVBQUFrRCxJQUFBUyxFQUFBVCxLQUFBVyxHQUFBLEVBQUE3RCxFQUFBa0QsS0FBQVcsRUFBQSxFQUFBLEdBQUFILEdBQUEzRCxHQUFBZ2tCLEVBQUFxQixRQUFBLFNBQUFubEIsRUFBQWlFLEdBQUEsTUFBQTZmLEdBQUE5akIsRUFBQSxLQUFBLEtBQUFpRSxJQUFBNmYsRUFBQXVDLGdCQUFBLFNBQUFybUIsRUFBQWlFLEdBQUEsSUFBQWpFLEVBQUE4WixlQUFBOVosS0FBQUYsR0FBQStELEVBQUE3RCxHQUFBaUUsRUFBQUEsRUFBQTRKLFFBQUFoTCxHQUFBLGFBQUE1QixFQUFBb2xCLGtCQUFBdmlCLEdBQUFwRSxHQUFBQSxFQUFBSCxLQUFBMEUsSUFBQThCLEdBQUFBLEVBQUF4RyxLQUFBMEUsSUFBQSxJQUFBLEdBQUFoQixHQUFBM0MsRUFBQWdDLEtBQUF0QyxFQUFBaUUsRUFBQSxJQUFBaEIsR0FBQWhDLEVBQUF5bEIsbUJBQUExbUIsRUFBQTBFLFVBQUEsS0FBQTFFLEVBQUEwRSxTQUFBK1MsU0FBQSxNQUFBeFUsR0FBQSxNQUFBeEQsSUFBQSxNQUFBcWtCLEdBQUE3ZixFQUFBbkUsRUFBQSxNQUFBRSxJQUFBSSxPQUFBLEdBQUEwakIsRUFBQThDLFNBQUEsU0FBQTVtQixFQUFBaUUsR0FBQSxPQUFBakUsRUFBQThaLGVBQUE5WixLQUFBRixHQUFBK0QsRUFBQTdELEdBQUFILEVBQUFHLEVBQUFpRSxJQUFBNmYsRUFBQTlKLEtBQUEsU0FBQWhhLEVBQUFpRSxJQUFBakUsRUFBQThaLGVBQUE5WixLQUFBRixHQUFBK0QsRUFBQTdELEVBQUEsSUFBQVAsR0FBQXdELEVBQUF1aEIsV0FBQXZnQixFQUFBRyxlQUFBdkQsRUFBQXBCLEdBQUF3SCxFQUFBM0UsS0FBQVcsRUFBQXVoQixXQUFBdmdCLEVBQUFHLGVBQUEzRSxFQUFBTyxFQUFBaUUsR0FBQUgsR0FBQSxNQUFBLE9BQUEsVUFBQWpELEVBQUFBLEVBQUFJLEVBQUE2SixhQUFBaEgsRUFBQTlELEVBQUE2SyxhQUFBNUcsSUFBQXBELEVBQUFiLEVBQUFvbUIsaUJBQUFuaUIsS0FBQXBELEVBQUFpbUIsVUFBQWptQixFQUFBa0ssTUFBQSxNQUFBK1ksRUFBQXJPLE1BQUEsU0FBQXpWLEdBQUEsS0FBQSxJQUFBMlMsT0FBQSwwQ0FBQTNTLElBQUE4akIsRUFBQXVCLFdBQUEsU0FBQXJsQixHQUFBLEdBQUFpRSxHQUFBaEIsS0FBQXhELEVBQUEsRUFBQW9CLEVBQUEsQ0FBQSxJQUFBUSxHQUFBSixFQUFBOGxCLGlCQUFBNWhCLEdBQUFsRSxFQUFBK2xCLFlBQUFobkIsRUFBQXdELE1BQUEsR0FBQXhELEVBQUF3SyxLQUFBdEgsR0FBQTdCLEVBQUEsQ0FBQSxLQUFBNEMsRUFBQWpFLEVBQUFhLE1BQUFvRCxJQUFBakUsRUFBQWEsS0FBQXBCLEVBQUF3RCxFQUFBa0IsS0FBQXRELEdBQUEsTUFBQXBCLEtBQUFPLEVBQUEwSyxPQUFBekgsRUFBQXhELEdBQUEsR0FBQSxNQUFBMEYsR0FBQSxLQUFBbkYsR0FBQVAsRUFBQXFrQixFQUFBbUQsUUFBQSxTQUFBam5CLEdBQUEsR0FBQWlFLEdBQUFoRCxFQUFBLEdBQUFnQyxFQUFBLEVBQUFwQyxFQUFBYixFQUFBeVgsUUFBQSxJQUFBNVcsR0FBQSxHQUFBLElBQUFBLEdBQUEsSUFBQUEsR0FBQSxLQUFBQSxFQUFBLENBQUEsR0FBQSxnQkFBQWIsR0FBQWtuQixZQUFBLE1BQUFsbkIsR0FBQWtuQixXQUFBLEtBQUFsbkIsRUFBQUEsRUFBQTRaLFdBQUE1WixFQUFBQSxFQUFBQSxFQUFBMmtCLFlBQUExakIsR0FBQXhCLEVBQUFPLE9BQUEsSUFBQSxJQUFBYSxHQUFBLElBQUFBLEVBQUEsTUFBQWIsR0FBQWdMLGNBQUEsTUFBQS9HLEVBQUFqRSxFQUFBaUQsTUFBQWhDLEdBQUF4QixFQUFBd0UsRUFBQSxPQUFBaEQsSUFBQWdDLEVBQUE2Z0IsRUFBQS9iLFdBQUFvYyxZQUFBLEdBQUFnRCxhQUFBL0MsRUFBQTNRLE1BQUEzTyxHQUFBMGYsY0FBQXRjLFFBQUFnZCxVQUFBa0MsS0FBQTFsQixJQUFBLGFBQUF1aEIsT0FBQSxHQUFBb0UsS0FBQTNsQixJQUFBLGNBQUE0bEIsS0FBQTVsQixJQUFBLGtCQUFBdWhCLE9BQUEsR0FBQXNFLEtBQUE3bEIsSUFBQSxvQkFBQThsQixXQUFBaEMsS0FBQSxTQUFBeGxCLEdBQUEsTUFBQUEsR0FBQSxHQUFBQSxFQUFBLEdBQUE2TixRQUFBb0wsR0FBQUUsSUFBQW5aLEVBQUEsSUFBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQSxJQUFBNk4sUUFBQW9MLEdBQUFFLElBQUEsT0FBQW5aLEVBQUEsS0FBQUEsRUFBQSxHQUFBLElBQUFBLEVBQUEsR0FBQSxLQUFBQSxFQUFBd0QsTUFBQSxFQUFBLElBQUFraUIsTUFBQSxTQUFBMWxCLEdBQUEsTUFBQUEsR0FBQSxHQUFBQSxFQUFBLEdBQUFvRSxjQUFBLFFBQUFwRSxFQUFBLEdBQUF3RCxNQUFBLEVBQUEsSUFBQXhELEVBQUEsSUFBQThqQixFQUFBck8sTUFBQXpWLEVBQUEsSUFBQUEsRUFBQSxLQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUFBLEdBQUEsR0FBQSxTQUFBQSxFQUFBLElBQUEsUUFBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUFBLFFBQUFBLEVBQUEsS0FBQUEsRUFBQSxJQUFBOGpCLEVBQUFyTyxNQUFBelYsRUFBQSxJQUFBQSxHQUFBeWxCLE9BQUEsU0FBQXpsQixHQUFBLEdBQUFpRSxHQUFBaEQsR0FBQWpCLEVBQUEsSUFBQUEsRUFBQSxFQUFBLE9BQUE4RSxJQUFBNGdCLE1BQUFubUIsS0FBQVMsRUFBQSxJQUFBLE1BQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQSxHQUFBaUIsR0FBQTRHLEdBQUF0SSxLQUFBMEIsS0FBQWdELEVBQUFSLEVBQUF4QyxHQUFBLE1BQUFnRCxFQUFBaEQsRUFBQXVFLFFBQUEsSUFBQXZFLEVBQUFiLE9BQUE2RCxHQUFBaEQsRUFBQWIsVUFBQUosRUFBQSxHQUFBQSxFQUFBLEdBQUF3RCxNQUFBLEVBQUFTLEdBQUFqRSxFQUFBLEdBQUFpQixFQUFBdUMsTUFBQSxFQUFBUyxJQUFBakUsRUFBQXdELE1BQUEsRUFBQSxNQUFBbVUsUUFBQXlOLElBQUEsU0FBQXBsQixHQUFBLEdBQUFpRSxHQUFBakUsRUFBQTZOLFFBQUFvTCxHQUFBRSxJQUFBL1UsYUFBQSxPQUFBLE1BQUFwRSxFQUFBLFdBQUEsT0FBQSxHQUFBLFNBQUFBLEdBQUEsTUFBQUEsR0FBQWlMLFVBQUFqTCxFQUFBaUwsU0FBQTdHLGdCQUFBSCxJQUFBc2hCLE1BQUEsU0FBQXZsQixHQUFBLEdBQUFpRSxHQUFBRCxFQUFBaEUsRUFBQSxJQUFBLE9BQUFpRSxLQUFBQSxFQUFBLEdBQUFuRCxRQUFBLE1BQUFpQixHQUFBLElBQUEvQixFQUFBLElBQUErQixHQUFBLFNBQUFpQyxFQUFBaEUsRUFBQSxTQUFBQSxHQUFBLE1BQUFpRSxHQUFBMUUsS0FBQSxnQkFBQVMsR0FBQXFMLFdBQUFyTCxFQUFBcUwsV0FBQSxtQkFBQXJMLEdBQUE2SyxjQUFBN0ssRUFBQTZLLGFBQUEsVUFBQSxPQUFBMmEsS0FBQSxTQUFBeGxCLEVBQUFpRSxFQUFBaEQsR0FBQSxNQUFBLFVBQUFnQyxHQUFBLEdBQUF4RCxHQUFBcWtCLEVBQUE5SixLQUFBL1csRUFBQWpELEVBQUEsT0FBQSxPQUFBUCxFQUFBLE9BQUF3RSxHQUFBQSxJQUFBeEUsR0FBQSxHQUFBLE1BQUF3RSxFQUFBeEUsSUFBQXdCLEVBQUEsT0FBQWdELEVBQUF4RSxJQUFBd0IsRUFBQSxPQUFBZ0QsRUFBQWhELEdBQUEsSUFBQXhCLEVBQUErRixRQUFBdkUsR0FBQSxPQUFBZ0QsRUFBQWhELEdBQUF4QixFQUFBK0YsUUFBQXZFLElBQUEsRUFBQSxPQUFBZ0QsRUFBQWhELEdBQUF4QixFQUFBK0QsT0FBQXZDLEVBQUFiLFVBQUFhLEVBQUEsT0FBQWdELEdBQUEsSUFBQXhFLEVBQUFvTyxRQUFBaEosR0FBQSxLQUFBLEtBQUFXLFFBQUF2RSxJQUFBLEVBQUEsT0FBQWdELElBQUF4RSxJQUFBd0IsR0FBQXhCLEVBQUErRCxNQUFBLEVBQUF2QyxFQUFBYixPQUFBLEtBQUFhLEVBQUEsUUFBQXlrQixNQUFBLFNBQUExbEIsRUFBQWlFLEVBQUFoRCxFQUFBZ0MsRUFBQXhELEdBQUEsR0FBQW9CLEdBQUEsUUFBQWIsRUFBQXdELE1BQUEsRUFBQSxHQUFBQyxFQUFBLFNBQUF6RCxFQUFBd0QsT0FBQSxHQUFBRSxFQUFBLFlBQUFPLENBQUEsT0FBQSxLQUFBaEIsR0FBQSxJQUFBeEQsRUFBQSxTQUFBTyxHQUFBLFFBQUFBLEVBQUErYSxZQUFBLFNBQUE5VyxFQUFBaEQsRUFBQWxCLEdBQUEsR0FBQXNILEdBQUFsQyxFQUFBOUQsRUFBQXdDLEVBQUEvRCxFQUFBSSxFQUFBNEQsRUFBQWpELElBQUE0QyxFQUFBLGNBQUEsa0JBQUFzQyxFQUFBOUIsRUFBQThXLFdBQUFyYixFQUFBZ0UsR0FBQU8sRUFBQWdILFNBQUE3RyxjQUFBOUQsR0FBQVAsSUFBQTJELENBQUEsSUFBQXFDLEVBQUEsQ0FBQSxHQUFBbEYsRUFBQSxDQUFBLEtBQUFpRCxHQUFBLENBQUEsSUFBQXpDLEVBQUE0QyxFQUFBNUMsRUFBQUEsRUFBQXlDLElBQUEsR0FBQUosRUFBQXJDLEVBQUE0SixTQUFBN0csZ0JBQUExRSxFQUFBLElBQUEyQixFQUFBb1csU0FBQSxPQUFBLENBQUF2WCxHQUFBNEQsRUFBQSxTQUFBOUQsSUFBQUUsR0FBQSxjQUFBLE9BQUEsRUFBQSxHQUFBQSxHQUFBdUQsRUFBQXNDLEVBQUE2VCxXQUFBN1QsRUFBQTBoQixXQUFBaGtCLEdBQUFuRCxHQUFBLElBQUE2RSxFQUFBWSxFQUFBMUYsS0FBQTBGLEVBQUExRixPQUFBZ0gsRUFBQWxDLEVBQUFuRixPQUFBRixFQUFBdUgsRUFBQSxLQUFBcEMsR0FBQW9DLEVBQUEsR0FBQXhELEVBQUF3RCxFQUFBLEtBQUFwQyxHQUFBb0MsRUFBQSxHQUFBaEcsRUFBQXZCLEdBQUFpRyxFQUFBd1QsV0FBQXpaLEdBQUF1QixJQUFBdkIsR0FBQXVCLEdBQUFBLEVBQUF5QyxLQUFBRCxFQUFBL0QsRUFBQSxJQUFBSSxFQUFBcVksT0FBQSxHQUFBLElBQUFsWCxFQUFBb1csWUFBQTVULEdBQUF4QyxJQUFBNEMsRUFBQSxDQUFBa0IsRUFBQW5GLElBQUFpRixFQUFBbkYsRUFBQStELEVBQUEsWUFBQSxJQUFBdkQsSUFBQStHLEdBQUFwRCxFQUFBNUQsS0FBQTRELEVBQUE1RCxRQUFBTCxLQUFBcUgsRUFBQSxLQUFBcEMsRUFBQXBCLEVBQUF3RCxFQUFBLE9BQUEsT0FBQWhHLElBQUF2QixHQUFBdUIsR0FBQUEsRUFBQXlDLEtBQUFELEVBQUEvRCxFQUFBLElBQUFJLEVBQUFxWSxVQUFBN1UsRUFBQXJDLEVBQUE0SixTQUFBN0csZ0JBQUExRSxFQUFBLElBQUEyQixFQUFBb1csY0FBQTVULElBQUF2RCxLQUFBZSxFQUFBaEIsS0FBQWdCLEVBQUFoQixRQUFBTCxJQUFBaUYsRUFBQXBCLElBQUF4QyxJQUFBNEMsTUFBQSxNQUFBSixJQUFBcEUsRUFBQW9FLElBQUFaLEdBQUFZLEVBQUFaLElBQUEsR0FBQVksRUFBQVosR0FBQSxLQUFBd2lCLE9BQUEsU0FBQXpsQixFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQXhCLEVBQUF3RCxFQUFBeWtCLFFBQUExbkIsSUFBQWlELEVBQUEwa0IsV0FBQTNuQixFQUFBb0UsZ0JBQUEwZixFQUFBck8sTUFBQSx1QkFBQXpWLEVBQUEsT0FBQVAsR0FBQVksR0FBQVosRUFBQXdFLEdBQUF4RSxFQUFBVyxPQUFBLEdBQUFhLEdBQUFqQixFQUFBQSxFQUFBLEdBQUFpRSxHQUFBaEIsRUFBQTBrQixXQUFBdGxCLGVBQUFyQyxFQUFBb0UsZUFBQWdnQixFQUFBLFNBQUFwa0IsRUFBQWlCLEdBQUEsSUFBQSxHQUFBZ0MsR0FBQXBDLEVBQUFwQixFQUFBTyxFQUFBaUUsR0FBQVIsRUFBQTVDLEVBQUFULE9BQUFxRCxLQUFBUixFQUFBaUQsR0FBQWxHLEVBQUFhLEVBQUE0QyxJQUFBekQsRUFBQWlELEtBQUFoQyxFQUFBZ0MsR0FBQXBDLEVBQUE0QyxNQUFBLFNBQUF6RCxHQUFBLE1BQUFQLEdBQUFPLEVBQUEsRUFBQWlCLEtBQUF4QixJQUFBaW9CLFNBQUFFLElBQUF4RCxFQUFBLFNBQUFwa0IsR0FBQSxHQUFBaUUsTUFBQWhELEtBQUFnQyxFQUFBUyxFQUFBMUQsRUFBQTZOLFFBQUFqTyxHQUFBLE1BQUEsT0FBQXFELEdBQUE1QyxHQUFBK2pCLEVBQUEsU0FBQXBrQixFQUFBaUUsRUFBQWhELEVBQUF4QixHQUFBLElBQUEsR0FBQW9CLEdBQUE0QyxFQUFBUixFQUFBakQsRUFBQSxLQUFBUCxNQUFBaUUsRUFBQTFELEVBQUFJLE9BQUFzRCxNQUFBN0MsRUFBQTRDLEVBQUFDLE1BQUExRCxFQUFBMEQsS0FBQU8sRUFBQVAsR0FBQTdDLE1BQUEsU0FBQWIsRUFBQVAsRUFBQW9CLEdBQUEsTUFBQW9ELEdBQUEsR0FBQWpFLEVBQUFpRCxFQUFBZ0IsRUFBQSxLQUFBcEQsRUFBQUksR0FBQWdELEVBQUEsR0FBQSxNQUFBaEQsRUFBQXNYLFNBQUFzUCxJQUFBekQsRUFBQSxTQUFBcGtCLEdBQUEsTUFBQSxVQUFBaUUsR0FBQSxNQUFBNmYsR0FBQTlqQixFQUFBaUUsR0FBQTdELE9BQUEsS0FBQXdtQixTQUFBeEMsRUFBQSxTQUFBcGtCLEdBQUEsTUFBQUEsR0FBQUEsRUFBQTZOLFFBQUFvTCxHQUFBRSxJQUFBLFNBQUFsVixHQUFBLE9BQUFBLEVBQUFpakIsYUFBQWpqQixFQUFBNmpCLFdBQUFyb0IsRUFBQXdFLElBQUF1QixRQUFBeEYsSUFBQSxLQUFBK25CLEtBQUEzRCxFQUFBLFNBQUFwa0IsR0FBQSxNQUFBbUosSUFBQTVKLEtBQUFTLEdBQUEsS0FBQThqQixFQUFBck8sTUFBQSxxQkFBQXpWLEdBQUFBLEVBQUFBLEVBQUE2TixRQUFBb0wsR0FBQUUsSUFBQS9VLGNBQUEsU0FBQUgsR0FBQSxHQUFBaEQsRUFBQSxHQUFBLElBQUFBLEVBQUE2QyxFQUFBRyxFQUFBOGpCLEtBQUE5akIsRUFBQTRHLGFBQUEsYUFBQTVHLEVBQUE0RyxhQUFBLFFBQUEsTUFBQTVKLEdBQUFBLEVBQUFtRCxjQUFBbkQsSUFBQWpCLEdBQUEsSUFBQWlCLEVBQUF1RSxRQUFBeEYsRUFBQSxZQUFBaUUsRUFBQUEsRUFBQThXLGFBQUEsSUFBQTlXLEVBQUF3VCxTQUFBLFFBQUEsS0FBQWhRLE9BQUEsU0FBQXhELEdBQUEsR0FBQWhELEdBQUFqQixFQUFBb0csVUFBQXBHLEVBQUFvRyxTQUFBOE0sSUFBQSxPQUFBalMsSUFBQUEsRUFBQXVDLE1BQUEsS0FBQVMsRUFBQXdJLElBQUF1YixLQUFBLFNBQUFob0IsR0FBQSxNQUFBQSxLQUFBRSxHQUFBK25CLE1BQUEsU0FBQWpvQixHQUFBLE1BQUFBLEtBQUFGLEVBQUFvWixpQkFBQXBaLEVBQUFvb0IsVUFBQXBvQixFQUFBb29CLGdCQUFBbG9CLEVBQUF1RSxNQUFBdkUsRUFBQXFHLE9BQUFyRyxFQUFBbW9CLFdBQUFDLFFBQUEsU0FBQXBvQixHQUFBLE1BQUFBLEdBQUFxb0IsWUFBQSxHQUFBQSxTQUFBLFNBQUFyb0IsR0FBQSxNQUFBQSxHQUFBcW9CLFlBQUEsR0FBQTNPLFFBQUEsU0FBQTFaLEdBQUEsR0FBQWlFLEdBQUFqRSxFQUFBaUwsU0FBQTdHLGFBQUEsT0FBQSxVQUFBSCxLQUFBakUsRUFBQTBaLFNBQUEsV0FBQXpWLEtBQUFqRSxFQUFBb2IsVUFBQUEsU0FBQSxTQUFBcGIsR0FBQSxNQUFBQSxHQUFBK2EsWUFBQS9hLEVBQUErYSxXQUFBdU4sY0FBQXRvQixFQUFBb2IsWUFBQSxHQUFBK0MsTUFBQSxTQUFBbmUsR0FBQSxJQUFBQSxFQUFBQSxFQUFBNFosV0FBQTVaLEVBQUFBLEVBQUFBLEVBQUEya0IsWUFBQSxHQUFBM2tCLEVBQUF5WCxTQUFBLEVBQUEsT0FBQSxDQUFBLFFBQUEsR0FBQTdTLE9BQUEsU0FBQTVFLEdBQUEsT0FBQWlELEVBQUF5a0IsUUFBQXZKLE1BQUFuZSxJQUFBdW9CLE9BQUEsU0FBQXZvQixHQUFBLE1BQUF1SCxJQUFBaEksS0FBQVMsRUFBQWlMLFdBQUF1ZCxNQUFBLFNBQUF4b0IsR0FBQSxNQUFBaUcsSUFBQTFHLEtBQUFTLEVBQUFpTCxXQUFBd2QsT0FBQSxTQUFBem9CLEdBQUEsR0FBQWlFLEdBQUFqRSxFQUFBaUwsU0FBQTdHLGFBQUEsT0FBQSxVQUFBSCxHQUFBLFdBQUFqRSxFQUFBdUUsTUFBQSxXQUFBTixHQUFBNlcsS0FBQSxTQUFBOWEsR0FBQSxHQUFBaUUsRUFBQSxPQUFBLFVBQUFqRSxFQUFBaUwsU0FBQTdHLGVBQUEsU0FBQXBFLEVBQUF1RSxPQUFBLE9BQUFOLEVBQUFqRSxFQUFBNkssYUFBQSxVQUFBLFNBQUE1RyxFQUFBRyxnQkFBQTZlLE1BQUE2QixFQUFBLFdBQUEsT0FBQSxLQUFBM0IsS0FBQTJCLEVBQUEsU0FBQTlrQixFQUFBaUUsR0FBQSxPQUFBQSxFQUFBLEtBQUFpZixHQUFBNEIsRUFBQSxTQUFBOWtCLEVBQUFpRSxFQUFBaEQsR0FBQSxPQUFBLEVBQUFBLEVBQUFBLEVBQUFnRCxFQUFBaEQsS0FBQXluQixLQUFBNUQsRUFBQSxTQUFBOWtCLEVBQUFpRSxHQUFBLElBQUEsR0FBQWhELEdBQUEsRUFBQWdELEVBQUFoRCxFQUFBQSxHQUFBLEVBQUFqQixFQUFBbUUsS0FBQWxELEVBQUEsT0FBQWpCLEtBQUEyb0IsSUFBQTdELEVBQUEsU0FBQTlrQixFQUFBaUUsR0FBQSxJQUFBLEdBQUFoRCxHQUFBLEVBQUFnRCxFQUFBaEQsRUFBQUEsR0FBQSxFQUFBakIsRUFBQW1FLEtBQUFsRCxFQUFBLE9BQUFqQixLQUFBNG9CLEdBQUE5RCxFQUFBLFNBQUE5a0IsRUFBQWlFLEVBQUFoRCxHQUFBLElBQUEsR0FBQWdDLEdBQUEsRUFBQWhDLEVBQUFBLEVBQUFnRCxFQUFBaEQsSUFBQWdDLEdBQUEsR0FBQWpELEVBQUFtRSxLQUFBbEIsRUFBQSxPQUFBakQsS0FBQTZvQixHQUFBL0QsRUFBQSxTQUFBOWtCLEVBQUFpRSxFQUFBaEQsR0FBQSxJQUFBLEdBQUFnQyxHQUFBLEVBQUFoQyxFQUFBQSxFQUFBZ0QsRUFBQWhELElBQUFnQyxFQUFBZ0IsR0FBQWpFLEVBQUFtRSxLQUFBbEIsRUFBQSxPQUFBakQsT0FBQWlELEVBQUF5a0IsUUFBQW9CLElBQUE3bEIsRUFBQXlrQixRQUFBeEUsRUFBQSxLQUFBamYsS0FBQThrQixPQUFBLEVBQUFDLFVBQUEsRUFBQUMsTUFBQSxFQUFBN1gsVUFBQSxFQUFBOFgsT0FBQSxHQUFBam1CLEVBQUF5a0IsUUFBQXpqQixHQUFBMmdCLEVBQUEzZ0IsRUFBQSxLQUFBQSxLQUFBa2xCLFFBQUEsRUFBQUMsT0FBQSxHQUFBbm1CLEVBQUF5a0IsUUFBQXpqQixHQUFBNGdCLEVBQUE1Z0IsRUFBQSxPQUFBOGdCLEdBQUEzaUIsVUFBQWEsRUFBQW9tQixRQUFBcG1CLEVBQUF5a0IsUUFBQXprQixFQUFBMGtCLFdBQUEsR0FBQTVDLEdBQUF0aEIsRUFBQXFnQixFQUFBd0YsU0FBQSxTQUFBdHBCLEVBQUFpRSxHQUFBLEdBQUFoRCxHQUFBeEIsRUFBQW9CLEVBQUE0QyxFQUFBQyxFQUFBM0QsRUFBQXNILEVBQUFsQyxFQUFBYSxFQUFBaEcsRUFBQSxJQUFBLElBQUFtRixFQUFBLE1BQUFsQixHQUFBLEVBQUFrQixFQUFBM0IsTUFBQSxFQUFBLEtBQUFFLEVBQUExRCxFQUFBRCxLQUFBc0gsRUFBQXBFLEVBQUF1a0IsVUFBQTlqQixHQUFBLEdBQUF6QyxJQUFBeEIsRUFBQTZGLEdBQUF2RSxLQUFBMkMsT0FBQWpFLElBQUFpRSxFQUFBQSxFQUFBRixNQUFBL0QsRUFBQSxHQUFBVyxTQUFBc0QsR0FBQTNELEVBQUFvRSxLQUFBdEQsT0FBQUksR0FBQSxHQUFBeEIsRUFBQXlILEdBQUFuRyxLQUFBMkMsTUFBQXpDLEVBQUF4QixFQUFBa1EsUUFBQTlPLEVBQUFzRCxNQUFBNEcsTUFBQTlKLEVBQUFzRCxLQUFBOUUsRUFBQSxHQUFBb08sUUFBQWpPLEdBQUEsT0FBQThELEVBQUFBLEVBQUFGLE1BQUF2QyxFQUFBYixRQUFBLEtBQUFxRCxJQUFBUixHQUFBMFUsU0FBQWxZLEVBQUFxRixHQUFBckIsR0FBQTFDLEtBQUEyQyxLQUFBMkQsRUFBQTVELE1BQUFoRSxFQUFBNEgsRUFBQTVELEdBQUFoRSxNQUFBd0IsRUFBQXhCLEVBQUFrUSxRQUFBOU8sRUFBQXNELE1BQUE0RyxNQUFBOUosRUFBQXNELEtBQUFkLEVBQUEwaEIsUUFBQTFsQixJQUFBaUUsRUFBQUEsRUFBQUYsTUFBQXZDLEVBQUFiLFFBQUEsS0FBQWEsRUFBQSxNQUFBLE1BQUFnRCxHQUFBUCxFQUFBdEQsT0FBQXNELEVBQUFvZ0IsRUFBQXJPLE1BQUF6VixHQUFBZ0csRUFBQWhHLEVBQUFELEdBQUF5RCxNQUFBLElBQUFFLEVBQUFvZ0IsRUFBQXlGLFFBQUEsU0FBQXZwQixFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQWdDLEtBQUF4RCxLQUFBb0IsRUFBQWtELEVBQUEvRCxFQUFBLElBQUEsS0FBQWEsRUFBQSxDQUFBLElBQUFvRCxJQUFBQSxFQUFBUixFQUFBekQsSUFBQWlCLEVBQUFnRCxFQUFBN0QsT0FBQWEsS0FBQUosRUFBQWtaLEVBQUE5VixFQUFBaEQsSUFBQUosRUFBQVIsR0FBQTRDLEVBQUFrQixLQUFBdEQsR0FBQXBCLEVBQUEwRSxLQUFBdEQsRUFBQUEsR0FBQWtELEVBQUEvRCxFQUFBaWEsRUFBQXhhLEVBQUF3RCxJQUFBcEMsRUFBQStoQixTQUFBNWlCLEVBQUEsTUFBQWEsSUFBQWQsRUFBQStqQixFQUFBMEYsT0FBQSxTQUFBeHBCLEVBQUFpRSxFQUFBeEUsRUFBQW9CLEdBQUEsR0FBQWQsR0FBQXNILEVBQUFsQyxFQUFBOUQsRUFBQXdDLEVBQUEvRCxFQUFBLGtCQUFBRSxJQUFBQSxFQUFBRSxHQUFBVyxHQUFBNEMsRUFBQXpELEVBQUFGLEVBQUE4aUIsVUFBQTVpQixFQUFBLElBQUFQLEVBQUFBLE1BQUEsSUFBQVMsRUFBQUUsT0FBQSxDQUFBLEdBQUFpSCxFQUFBbkgsRUFBQSxHQUFBQSxFQUFBLEdBQUFzRCxNQUFBLEdBQUE2RCxFQUFBakgsT0FBQSxHQUFBLFFBQUErRSxFQUFBa0MsRUFBQSxJQUFBOUMsTUFBQXRELEVBQUFpbEIsU0FBQSxJQUFBamlCLEVBQUF3VCxVQUFBM1QsR0FBQWIsRUFBQWlpQixTQUFBN2QsRUFBQSxHQUFBOUMsTUFBQSxDQUFBLEdBQUFOLEdBQUFoQixFQUFBaUYsS0FBQW9kLEdBQUFuZ0IsRUFBQWdnQixRQUFBLEdBQUF0WCxRQUFBb0wsR0FBQUUsSUFBQWxWLFFBQUEsSUFBQUEsRUFBQSxNQUFBeEUsRUFBQUssS0FBQW1FLEVBQUFBLEVBQUE4VyxZQUFBL2EsRUFBQUEsRUFBQXdELE1BQUE2RCxFQUFBc0ksUUFBQTVFLE1BQUEzSyxRQUFBLElBQUFMLEVBQUErRSxHQUFBOGdCLGFBQUFybUIsS0FBQVMsR0FBQSxFQUFBcUgsRUFBQWpILE9BQUFMLE1BQUFvRixFQUFBa0MsRUFBQXRILElBQUFrRCxFQUFBaWlCLFNBQUE3akIsRUFBQThELEVBQUFaLFFBQUEsSUFBQVYsRUFBQVosRUFBQWlGLEtBQUE3RyxNQUFBUixFQUFBZ0QsRUFBQXNCLEVBQUFnZ0IsUUFBQSxHQUFBdFgsUUFBQW9MLEdBQUFFLElBQUFKLEdBQUF4WixLQUFBOEgsRUFBQSxHQUFBOUMsT0FBQTJWLEVBQUFqVyxFQUFBOFcsYUFBQTlXLElBQUEsQ0FBQSxHQUFBb0QsRUFBQXFELE9BQUEzSyxFQUFBLEdBQUFDLEVBQUFhLEVBQUFULFFBQUE2akIsRUFBQTVjLElBQUFySCxFQUFBLE1BQUF1SSxHQUFBeUcsTUFBQXZQLEVBQUFvQixHQUFBcEIsQ0FBQSxRQUFBLE9BQUFLLEdBQUE0RCxFQUFBMUQsRUFBQUUsSUFBQVcsRUFBQW9ELEdBQUFILEVBQUFyRSxFQUFBc1osR0FBQXhaLEtBQUFTLElBQUFrYSxFQUFBalcsRUFBQThXLGFBQUE5VyxHQUFBeEUsR0FBQXdCLEVBQUErbEIsV0FBQTNtQixFQUFBaUwsTUFBQSxJQUFBZCxLQUFBdEgsR0FBQTRQLEtBQUEsTUFBQXpTLEVBQUFZLEVBQUE4bEIsbUJBQUExbEIsRUFBQXdDLElBQUE1QyxFQUFBNGxCLGFBQUF4QyxFQUFBLFNBQUFya0IsR0FBQSxNQUFBLEdBQUFBLEVBQUEybUIsd0JBQUE3bUIsRUFBQWdPLGNBQUEsVUFBQXVXLEVBQUEsU0FBQXJrQixHQUFBLE1BQUFBLEdBQUFrYixVQUFBLG1CQUFBLE1BQUFsYixFQUFBNFosV0FBQS9PLGFBQUEsV0FBQTBaLEVBQUEseUJBQUEsU0FBQXZrQixFQUFBaUUsRUFBQWhELEdBQUEsTUFBQUEsR0FBQSxPQUFBakIsRUFBQTZLLGFBQUE1RyxFQUFBLFNBQUFBLEVBQUFHLGNBQUEsRUFBQSxLQUFBbkQsRUFBQTZKLFlBQUF1WixFQUFBLFNBQUFya0IsR0FBQSxNQUFBQSxHQUFBa2IsVUFBQSxXQUFBbGIsRUFBQTRaLFdBQUE1TixhQUFBLFFBQUEsSUFBQSxLQUFBaE0sRUFBQTRaLFdBQUEvTyxhQUFBLFlBQUEwWixFQUFBLFFBQUEsU0FBQXZrQixFQUFBaUUsRUFBQWhELEdBQUEsTUFBQUEsSUFBQSxVQUFBakIsRUFBQWlMLFNBQUE3RyxjQUFBLE9BQUFwRSxFQUFBcWIsZUFBQWdKLEVBQUEsU0FBQXJrQixHQUFBLE1BQUEsT0FBQUEsRUFBQTZLLGFBQUEsZUFBQTBaLEVBQUF2YixHQUFBLFNBQUFoSixFQUFBaUUsRUFBQWhELEdBQUEsR0FBQWdDLEVBQUEsT0FBQWhDLEdBQUEsT0FBQWpCLEVBQUFpRSxNQUFBLEVBQUFBLEVBQUFHLGVBQUFuQixFQUFBakQsRUFBQW9tQixpQkFBQW5pQixLQUFBaEIsRUFBQTZqQixVQUFBN2pCLEVBQUE4SCxNQUFBLE9BQUErWSxHQUFBOWpCLEVBQUE2RCxJQUFBcUUsS0FBQTVILEdBQUF1RCxHQUFBNGxCLEtBQUFucEIsR0FBQXlILFVBQUFsRSxHQUFBNGxCLEtBQUEsS0FBQTVsQixHQUFBNGxCLEtBQUEvQixRQUFBN2pCLEdBQUE2bEIsT0FBQXBwQixHQUFBK2tCLFdBQUF4aEIsR0FBQWlYLEtBQUF4YSxHQUFBMm1CLFFBQUFwakIsR0FBQThsQixTQUFBcnBCLEdBQUF5bEIsTUFBQWxpQixHQUFBK2lCLFNBQUF0bUIsR0FBQXNtQixRQUFBLElBQUEvbUIsSUFBQWdFLEdBQUE0bEIsS0FBQWhXLE1BQUFtUyxhQUFBdmxCLEdBQUEsNkJBQUF1RCxHQUFBLGdCQUFBQyxJQUFBOFQsT0FBQSxTQUFBM1gsRUFBQWlFLEVBQUFoRCxHQUFBLEdBQUFnQyxHQUFBZ0IsRUFBQSxFQUFBLE9BQUFoRCxLQUFBakIsRUFBQSxRQUFBQSxFQUFBLEtBQUEsSUFBQWlFLEVBQUE3RCxRQUFBLElBQUE2QyxFQUFBd1UsU0FBQTVULEdBQUFxRSxLQUFBbWUsZ0JBQUFwakIsRUFBQWpELElBQUFpRCxNQUFBWSxHQUFBcUUsS0FBQWlkLFFBQUFubEIsRUFBQTZELEdBQUE2VCxLQUFBelQsRUFBQSxTQUFBakUsR0FBQSxNQUFBLEtBQUFBLEVBQUF5WCxhQUFBNVQsR0FBQTZlLEdBQUE5VixRQUFBMUUsS0FBQSxTQUFBbEksR0FBQSxHQUFBaUUsR0FBQWhELEtBQUFnQyxFQUFBa0gsS0FBQTFLLEVBQUF3RCxFQUFBN0MsTUFBQSxJQUFBLGdCQUFBSixHQUFBLE1BQUFtSyxNQUFBMlksVUFBQWpmLEdBQUE3RCxHQUFBMlgsT0FBQSxXQUFBLElBQUExVCxFQUFBLEVBQUF4RSxFQUFBd0UsRUFBQUEsSUFBQSxHQUFBSixHQUFBK2lCLFNBQUEzakIsRUFBQWdCLEdBQUFrRyxNQUFBLE9BQUEsSUFBQSxLQUFBbEcsRUFBQSxFQUFBeEUsRUFBQXdFLEVBQUFBLElBQUFKLEdBQUFxRSxLQUFBbEksRUFBQWlELEVBQUFnQixHQUFBaEQsRUFBQSxPQUFBQSxHQUFBa0osS0FBQTJZLFVBQUFyakIsRUFBQSxFQUFBb0UsR0FBQTZsQixPQUFBem9CLEdBQUFBLEdBQUFBLEVBQUEyaEIsU0FBQXpZLEtBQUF5WSxTQUFBelksS0FBQXlZLFNBQUEsSUFBQTVpQixFQUFBQSxFQUFBaUIsR0FBQTBXLE9BQUEsU0FBQTNYLEdBQUEsTUFBQW1LLE1BQUEyWSxVQUFBN2QsRUFBQWtGLEtBQUFuSyxPQUFBLEtBQUE0bkIsSUFBQSxTQUFBNW5CLEdBQUEsTUFBQW1LLE1BQUEyWSxVQUFBN2QsRUFBQWtGLEtBQUFuSyxPQUFBLEtBQUE0cEIsR0FBQSxTQUFBNXBCLEdBQUEsUUFBQWlGLEVBQUFrRixLQUFBLGdCQUFBbkssSUFBQUgsR0FBQU4sS0FBQVMsR0FBQTZELEdBQUE3RCxHQUFBQSxPQUFBLEdBQUFJLFNBQUEsSUFBQXlHLElBQUE3QyxHQUFBaEUsRUFBQTBFLFNBQUFzQixHQUFBLHNDQUFBakMsR0FBQUYsR0FBQTZlLEdBQUFsRixLQUFBLFNBQUF4ZCxFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQWdDLENBQUEsS0FBQWpELEVBQUEsTUFBQW1LLEtBQUEsSUFBQSxnQkFBQW5LLEdBQUEsQ0FBQSxHQUFBaUIsRUFBQSxNQUFBakIsRUFBQXNULE9BQUEsSUFBQSxNQUFBdFQsRUFBQXNULE9BQUF0VCxFQUFBSSxPQUFBLElBQUFKLEVBQUFJLFFBQUEsR0FBQSxLQUFBSixFQUFBLE1BQUFnRyxHQUFBakYsS0FBQWYsSUFBQWlCLElBQUFBLEVBQUEsSUFBQWdELEVBQUEsT0FBQUEsR0FBQUEsRUFBQTBlLFFBQUExZSxHQUFBNEMsSUFBQXFCLEtBQUFsSSxHQUFBbUssS0FBQWlMLFlBQUFuUixHQUFBaUUsS0FBQWxJLEVBQUEsSUFBQWlCLEVBQUEsR0FBQSxDQUFBLEdBQUFnRCxFQUFBQSxZQUFBSixJQUFBSSxFQUFBLEdBQUFBLEVBQUFKLEdBQUFrSixNQUFBNUMsS0FBQXRHLEdBQUFnbUIsVUFBQTVvQixFQUFBLEdBQUFnRCxHQUFBQSxFQUFBd1QsU0FBQXhULEVBQUE2VixlQUFBN1YsRUFBQUQsSUFBQSxJQUFBM0QsR0FBQWQsS0FBQTBCLEVBQUEsS0FBQTRDLEdBQUF1ZixjQUFBbmYsR0FBQSxJQUFBaEQsSUFBQWdELEdBQUFKLEdBQUE2SyxXQUFBdkUsS0FBQWxKLElBQUFrSixLQUFBbEosR0FBQWdELEVBQUFoRCxJQUFBa0osS0FBQTZQLEtBQUEvWSxFQUFBZ0QsRUFBQWhELEdBQUEsT0FBQWtKLE1BQUEsR0FBQWxILEVBQUFlLEdBQUErZixlQUFBOWlCLEVBQUEsSUFBQWdDLEdBQUFBLEVBQUE4WCxXQUFBLENBQUEsR0FBQTlYLEVBQUF3SixLQUFBeEwsRUFBQSxHQUFBLE1BQUE0RixJQUFBcUIsS0FBQWxJLEVBQUFtSyxNQUFBL0osT0FBQSxFQUFBK0osS0FBQSxHQUFBbEgsRUFBQSxNQUFBa0gsTUFBQTZZLFFBQUFoZixHQUFBbUcsS0FBQXlZLFNBQUE1aUIsRUFBQW1LLEtBQUEsTUFBQW5LLEdBQUF5WCxVQUFBdE4sS0FBQTZZLFFBQUE3WSxLQUFBLEdBQUFuSyxFQUFBbUssS0FBQS9KLE9BQUEsRUFBQStKLE1BQUF0RyxHQUFBNkssV0FBQTFPLEdBQUEsbUJBQUE2RyxJQUFBb1IsTUFBQXBSLEdBQUFvUixNQUFBalksR0FBQUEsRUFBQTZELEtBQUEsU0FBQTdELEVBQUE0aUIsV0FBQXpZLEtBQUF5WSxTQUFBNWlCLEVBQUE0aUIsU0FBQXpZLEtBQUE2WSxRQUFBaGpCLEVBQUFnakIsU0FBQW5mLEdBQUE4ZixVQUFBM2pCLEVBQUFtSyxPQUFBcEcsSUFBQTNCLFVBQUF5QixHQUFBNmUsR0FBQTdiLEdBQUFoRCxHQUFBRyxHQUFBLElBQUFkLElBQUEsaUNBQUF1QyxJQUFBcWtCLFVBQUEsRUFBQXJJLFVBQUEsRUFBQXNJLE1BQUE7QUFBQUMsTUFBQSxFQUFBbm1CLElBQUErSSxRQUFBbEwsSUFBQSxTQUFBMUIsRUFBQWlFLEVBQUFoRCxHQUFBLElBQUEsR0FBQWdDLE1BQUF4RCxFQUFBTyxFQUFBaUUsR0FBQXhFLEdBQUEsSUFBQUEsRUFBQWdZLFdBQUEsU0FBQXhXLEdBQUEsSUFBQXhCLEVBQUFnWSxXQUFBNVQsR0FBQXBFLEdBQUFtcUIsR0FBQTNvQixLQUFBLElBQUF4QixFQUFBZ1ksVUFBQXhVLEVBQUFrQixLQUFBMUUsR0FBQUEsRUFBQUEsRUFBQXdFLEVBQUEsT0FBQWhCLElBQUFnbkIsUUFBQSxTQUFBanFCLEVBQUFpRSxHQUFBLElBQUEsR0FBQWhELE1BQUFqQixFQUFBQSxFQUFBQSxFQUFBMmtCLFlBQUEsSUFBQTNrQixFQUFBeVgsVUFBQXpYLElBQUFpRSxHQUFBaEQsRUFBQWtELEtBQUFuRSxFQUFBLE9BQUFpQixNQUFBNEMsR0FBQTZlLEdBQUE5VixRQUFBaWIsSUFBQSxTQUFBN25CLEdBQUEsR0FBQWlFLEdBQUFoRCxFQUFBNEMsR0FBQTdELEVBQUFtSyxNQUFBbEgsRUFBQWhDLEVBQUFiLE1BQUEsT0FBQStKLE1BQUF3TixPQUFBLFdBQUEsSUFBQTFULEVBQUEsRUFBQWhCLEVBQUFnQixFQUFBQSxJQUFBLEdBQUFKLEdBQUEraUIsU0FBQXpjLEtBQUFsSixFQUFBZ0QsSUFBQSxPQUFBLEtBQUFpbUIsUUFBQSxTQUFBbHFCLEVBQUFpRSxHQUFBLElBQUEsR0FBQWhELEdBQUFnQyxFQUFBLEVBQUF4RCxFQUFBMEssS0FBQS9KLE9BQUFTLEtBQUE0QyxFQUFBNUQsR0FBQU4sS0FBQVMsSUFBQSxnQkFBQUEsR0FBQTZELEdBQUE3RCxFQUFBaUUsR0FBQWtHLEtBQUE2WSxTQUFBLEVBQUF2akIsRUFBQXdELEVBQUFBLElBQUEsSUFBQWhDLEVBQUFrSixLQUFBbEgsR0FBQWhDLEdBQUFBLElBQUFnRCxFQUFBaEQsRUFBQUEsRUFBQThaLFdBQUEsR0FBQTlaLEVBQUF3VyxTQUFBLEtBQUFoVSxFQUFBQSxFQUFBMG1CLE1BQUFscEIsSUFBQSxFQUFBLElBQUFBLEVBQUF3VyxVQUFBNVQsR0FBQXFFLEtBQUFtZSxnQkFBQXBsQixFQUFBakIsSUFBQSxDQUFBYSxFQUFBc0QsS0FBQWxELEVBQUEsT0FBQSxNQUFBa0osTUFBQTJZLFVBQUFqaUIsRUFBQVQsT0FBQSxFQUFBeUQsR0FBQTZsQixPQUFBN29CLEdBQUFBLElBQUFzcEIsTUFBQSxTQUFBbnFCLEdBQUEsTUFBQUEsR0FBQSxnQkFBQUEsR0FBQTZELEdBQUErVCxRQUFBek4sS0FBQSxHQUFBdEcsR0FBQTdELElBQUE2RCxHQUFBK1QsUUFBQTVYLEVBQUEyaUIsT0FBQTNpQixFQUFBLEdBQUFBLEVBQUFtSyxNQUFBQSxLQUFBLElBQUFBLEtBQUEsR0FBQTRRLFdBQUE1USxLQUFBOFksUUFBQW1ILFVBQUFocUIsUUFBQSxHQUFBc2EsSUFBQSxTQUFBMWEsRUFBQWlFLEdBQUEsTUFBQWtHLE1BQUEyWSxVQUFBamYsR0FBQTZsQixPQUFBN2xCLEdBQUFrSixNQUFBNUMsS0FBQWtTLE1BQUF4WSxHQUFBN0QsRUFBQWlFLE9BQUFvbUIsUUFBQSxTQUFBcnFCLEdBQUEsTUFBQW1LLE1BQUF1USxJQUFBLE1BQUExYSxFQUFBbUssS0FBQTRZLFdBQUE1WSxLQUFBNFksV0FBQXBMLE9BQUEzWCxPQUFBNkQsR0FBQWdVLE1BQUFqVCxPQUFBLFNBQUE1RSxHQUFBLEdBQUFpRSxHQUFBakUsRUFBQSthLFVBQUEsT0FBQTlXLElBQUEsS0FBQUEsRUFBQXdULFNBQUF4VCxFQUFBLE1BQUFxbUIsUUFBQSxTQUFBdHFCLEdBQUEsTUFBQTZELElBQUFuQyxJQUFBMUIsRUFBQSxlQUFBdXFCLGFBQUEsU0FBQXZxQixFQUFBaUUsRUFBQWhELEdBQUEsTUFBQTRDLElBQUFuQyxJQUFBMUIsRUFBQSxhQUFBaUIsSUFBQThvQixLQUFBLFNBQUEvcEIsR0FBQSxNQUFBaUgsR0FBQWpILEVBQUEsZ0JBQUFncUIsS0FBQSxTQUFBaHFCLEdBQUEsTUFBQWlILEdBQUFqSCxFQUFBLG9CQUFBd3FCLFFBQUEsU0FBQXhxQixHQUFBLE1BQUE2RCxJQUFBbkMsSUFBQTFCLEVBQUEsZ0JBQUFvcUIsUUFBQSxTQUFBcHFCLEdBQUEsTUFBQTZELElBQUFuQyxJQUFBMUIsRUFBQSxvQkFBQXlxQixVQUFBLFNBQUF6cUIsRUFBQWlFLEVBQUFoRCxHQUFBLE1BQUE0QyxJQUFBbkMsSUFBQTFCLEVBQUEsY0FBQWlCLElBQUF5cEIsVUFBQSxTQUFBMXFCLEVBQUFpRSxFQUFBaEQsR0FBQSxNQUFBNEMsSUFBQW5DLElBQUExQixFQUFBLGtCQUFBaUIsSUFBQTBwQixTQUFBLFNBQUEzcUIsR0FBQSxNQUFBNkQsSUFBQW9tQixTQUFBanFCLEVBQUErYSxnQkFBQW5CLFdBQUE1WixJQUFBOHBCLFNBQUEsU0FBQTlwQixHQUFBLE1BQUE2RCxJQUFBb21CLFFBQUFqcUIsRUFBQTRaLGFBQUE2SCxTQUFBLFNBQUF6aEIsR0FBQSxNQUFBNkQsSUFBQW9ILFNBQUFqTCxFQUFBLFVBQUFBLEVBQUFrYyxpQkFBQWxjLEVBQUFpYyxjQUFBdlgsU0FBQWIsR0FBQWtKLFNBQUEvTSxFQUFBdVosY0FBQSxTQUFBdlosRUFBQWlFLEdBQUFKLEdBQUE2ZSxHQUFBMWlCLEdBQUEsU0FBQWlCLEVBQUFnQyxHQUFBLEdBQUF4RCxHQUFBb0UsR0FBQStVLElBQUF6TyxLQUFBbEcsRUFBQWhELEVBQUEsT0FBQSxVQUFBakIsRUFBQXdELE9BQUEsS0FBQVAsRUFBQWhDLEdBQUFnQyxHQUFBLGdCQUFBQSxLQUFBeEQsRUFBQW9FLEdBQUE4VCxPQUFBMVUsRUFBQXhELElBQUEwSyxLQUFBL0osT0FBQSxJQUFBcUYsR0FBQXpGLEtBQUFQLEVBQUFvRSxHQUFBNmxCLE9BQUFqcUIsSUFBQXlELEdBQUEzRCxLQUFBUyxLQUFBUCxFQUFBQSxFQUFBbXJCLFlBQUF6Z0IsS0FBQTJZLFVBQUFyakIsS0FBQSxJQUFBK0UsSUFBQSxPQUFBdEQsS0FBQTJDLElBQUFnbkIsVUFBQSxTQUFBN3FCLEdBQUFBLEVBQUEsZ0JBQUFBLEdBQUFrQixHQUFBbEIsSUFBQW1HLEVBQUFuRyxHQUFBNkQsR0FBQStJLFVBQUE1TSxFQUFBLElBQUFpRSxHQUFBaEQsRUFBQWdDLEVBQUF4RCxFQUFBb0IsRUFBQTRDLEVBQUFDLEtBQUEzRCxHQUFBQyxFQUFBOHFCLFNBQUF6akIsRUFBQSxTQUFBaEcsR0FBQSxJQUFBSixFQUFBakIsRUFBQStxQixRQUFBMXBCLEVBQUE0QixHQUFBLEVBQUFwQyxFQUFBNEMsR0FBQSxFQUFBQSxFQUFBLEVBQUFoRSxFQUFBaUUsRUFBQXRELE9BQUE2RCxHQUFBLEVBQUFQLEdBQUFqRSxFQUFBb0IsRUFBQUEsSUFBQSxHQUFBNkMsRUFBQTdDLEdBQUFtTyxNQUFBM04sRUFBQSxHQUFBQSxFQUFBLE9BQUEsR0FBQXJCLEVBQUFnckIsWUFBQSxDQUFBL3BCLEdBQUEsQ0FBQSxPQUFBZ0QsR0FBQSxFQUFBUCxJQUFBM0QsRUFBQUEsRUFBQUssUUFBQWlILEVBQUF0SCxFQUFBNFAsU0FBQTFPLEVBQUF5QyxLQUFBeUIsRUFBQThsQixZQUFBOWxCLEdBQUF1VixJQUFBLFdBQUEsR0FBQWhYLEVBQUEsQ0FBQSxHQUFBVCxHQUFBUyxFQUFBdEQsUUFBQSxRQUFBUyxHQUFBb0QsR0FBQUosR0FBQWdVLEtBQUE1VCxFQUFBLFNBQUFBLEVBQUFoRCxHQUFBLEdBQUFnQyxHQUFBWSxHQUFBVSxLQUFBdEQsRUFBQSxjQUFBZ0MsRUFBQWpELEVBQUEwcEIsUUFBQXZrQixFQUFBMGlCLElBQUE1bUIsSUFBQXlDLEVBQUFTLEtBQUFsRCxHQUFBQSxHQUFBQSxFQUFBYixRQUFBLFdBQUE2QyxHQUFBcEMsRUFBQUksTUFBQThNLFdBQUE5SixFQUFBeEUsRUFBQWlFLEVBQUF0RCxPQUFBYSxJQUFBd0MsRUFBQVIsRUFBQW9FLEVBQUFwRyxJQUFBLE1BQUFrSixPQUFBdUosT0FBQSxXQUFBLE1BQUFoUSxJQUFBRyxHQUFBZ1UsS0FBQTlKLFVBQUEsU0FBQS9OLEVBQUFpQixHQUFBLElBQUEsR0FBQWdDLElBQUFBLEVBQUFZLEdBQUErVCxRQUFBM1csRUFBQXlDLEVBQUFULEtBQUEsR0FBQVMsRUFBQWdILE9BQUF6SCxFQUFBLEdBQUFnQixJQUFBeEUsR0FBQXdELEdBQUF4RCxJQUFBb0IsR0FBQW9DLEdBQUFwQyxPQUFBc0osTUFBQTBkLElBQUEsU0FBQTduQixHQUFBLE1BQUFBLEdBQUE2RCxHQUFBK1QsUUFBQTVYLEVBQUEwRCxJQUFBLEtBQUFBLElBQUFBLEVBQUF0RCxTQUFBK2QsTUFBQSxXQUFBLE1BQUF6YSxNQUFBakUsRUFBQSxFQUFBMEssTUFBQThnQixRQUFBLFdBQUEsTUFBQXZuQixHQUFBM0QsRUFBQWtCLEVBQUEsT0FBQWtKLE1BQUFrZSxTQUFBLFdBQUEsT0FBQTNrQixHQUFBd25CLEtBQUEsV0FBQSxNQUFBbnJCLEdBQUEsT0FBQWtCLEdBQUFrRSxFQUFBOGxCLFVBQUE5Z0IsTUFBQWdoQixPQUFBLFdBQUEsT0FBQXByQixHQUFBcXJCLFNBQUEsU0FBQXByQixFQUFBaUIsR0FBQSxPQUFBeUMsR0FBQVQsSUFBQWxELElBQUFrQixFQUFBQSxNQUFBQSxHQUFBakIsRUFBQWlCLEVBQUF1QyxNQUFBdkMsRUFBQXVDLFFBQUF2QyxHQUFBZ0QsRUFBQWxFLEVBQUFvRSxLQUFBbEQsR0FBQW9HLEVBQUFwRyxJQUFBa0osTUFBQWlVLEtBQUEsV0FBQSxNQUFBalosR0FBQWltQixTQUFBamhCLEtBQUE0RCxXQUFBNUQsTUFBQWtoQixNQUFBLFdBQUEsUUFBQXBvQixHQUFBLE9BQUFrQyxJQUFBdEIsR0FBQStJLFFBQUE2UyxTQUFBLFNBQUF6ZixHQUFBLEdBQUFpRSxLQUFBLFVBQUEsT0FBQUosR0FBQWduQixVQUFBLGVBQUEsYUFBQSxTQUFBLE9BQUFobkIsR0FBQWduQixVQUFBLGVBQUEsYUFBQSxTQUFBLFdBQUFobkIsR0FBQWduQixVQUFBLFlBQUE1cEIsRUFBQSxVQUFBZ0MsR0FBQWdmLE1BQUEsV0FBQSxNQUFBaGhCLElBQUFvZCxPQUFBLFdBQUEsTUFBQTVlLEdBQUFzZixLQUFBaFIsV0FBQWlULEtBQUFqVCxXQUFBNUQsTUFBQXVGLEtBQUEsV0FBQSxHQUFBMVAsR0FBQStOLFNBQUEsT0FBQWxLLElBQUE0YixTQUFBLFNBQUF4ZSxHQUFBNEMsR0FBQWdVLEtBQUE1VCxFQUFBLFNBQUFBLEVBQUFwRCxHQUFBLEdBQUE0QyxHQUFBSSxHQUFBNkssV0FBQTFPLEVBQUFpRSxLQUFBakUsRUFBQWlFLEVBQUF4RSxHQUFBb0IsRUFBQSxJQUFBLFdBQUEsR0FBQWIsR0FBQXlELEdBQUFBLEVBQUF1TCxNQUFBN0UsS0FBQTRELFVBQUEvTixJQUFBNkQsR0FBQTZLLFdBQUExTyxFQUFBd1MsU0FBQXhTLEVBQUF3UyxVQUFBdU0sS0FBQTlkLEVBQUFxTyxTQUFBMFIsS0FBQS9mLEVBQUE4UyxRQUFBK00sU0FBQTdmLEVBQUFxcUIsUUFBQXJxQixFQUFBSixFQUFBLEdBQUEsUUFBQXNKLE9BQUFsSCxFQUFBaEMsRUFBQXVSLFVBQUFySSxLQUFBMUcsR0FBQXpELEdBQUErTixlQUFBL04sRUFBQSxPQUFBd1MsV0FBQUEsUUFBQSxTQUFBeFMsR0FBQSxNQUFBLE9BQUFBLEVBQUE2RCxHQUFBK0ksT0FBQTVNLEVBQUFpRCxHQUFBQSxJQUFBeEQsSUFBQSxPQUFBd0QsR0FBQTBLLEtBQUExSyxFQUFBeU0sS0FBQTdMLEdBQUFnVSxLQUFBNVQsRUFBQSxTQUFBakUsRUFBQWEsR0FBQSxHQUFBNEMsR0FBQTVDLEVBQUEsR0FBQTZDLEVBQUE3QyxFQUFBLEVBQUFvQyxHQUFBcEMsRUFBQSxJQUFBNEMsRUFBQWlYLElBQUFoWCxHQUFBRCxFQUFBaVgsSUFBQSxXQUFBelosRUFBQXlDLEdBQUFPLEVBQUEsRUFBQWpFLEdBQUEsR0FBQWlyQixRQUFBaG5CLEVBQUEsR0FBQSxHQUFBaW5CLE1BQUF6ckIsRUFBQW9CLEVBQUEsSUFBQSxXQUFBLE1BQUFwQixHQUFBb0IsRUFBQSxHQUFBLFFBQUFzSixPQUFBMUssRUFBQXdELEVBQUFrSCxLQUFBNEQsV0FBQTVELE1BQUExSyxFQUFBb0IsRUFBQSxHQUFBLFFBQUE0QyxFQUFBMm5CLFdBQUFub0IsRUFBQXVQLFFBQUEvUyxHQUFBTyxHQUFBQSxFQUFBc0MsS0FBQTdDLEVBQUFBLEdBQUFBLEdBQUE4ckIsS0FBQSxTQUFBdnJCLEdBQUEsR0FBQUQsR0FBQXNILEVBQUFsQyxFQUFBbEIsRUFBQSxFQUFBaEQsRUFBQWdDLEVBQUFYLEtBQUF5TCxXQUFBdE8sRUFBQXdCLEVBQUFiLE9BQUFTLEVBQUEsSUFBQXBCLEdBQUFPLEdBQUE2RCxHQUFBNkssV0FBQTFPLEVBQUF3UyxTQUFBL1MsRUFBQSxFQUFBZ0UsRUFBQSxJQUFBNUMsRUFBQWIsRUFBQTZELEdBQUE0YixXQUFBL2IsRUFBQSxTQUFBMUQsRUFBQWlFLEVBQUFoRCxHQUFBLE1BQUEsVUFBQXhCLEdBQUF3RSxFQUFBakUsR0FBQW1LLEtBQUFsSixFQUFBakIsR0FBQStOLFVBQUEzTixPQUFBLEVBQUE2QyxFQUFBWCxLQUFBeUwsV0FBQXRPLEVBQUF3QixJQUFBbEIsRUFBQTBELEVBQUFzYyxXQUFBOWIsRUFBQWhELEtBQUFKLEdBQUE0QyxFQUFBdWMsWUFBQS9iLEVBQUFoRCxJQUFBLElBQUF4QixFQUFBLEVBQUEsSUFBQU0sRUFBQSxHQUFBZ0ssT0FBQXRLLEdBQUE0SCxFQUFBLEdBQUEwQyxPQUFBdEssR0FBQTBGLEVBQUEsR0FBQTRFLE9BQUF0SyxHQUFBQSxFQUFBd0UsRUFBQUEsSUFBQWhELEVBQUFnRCxJQUFBSixHQUFBNkssV0FBQXpOLEVBQUFnRCxHQUFBdU8sU0FBQXZSLEVBQUFnRCxHQUFBdU8sVUFBQXVNLEtBQUFyYixFQUFBTyxFQUFBa0IsRUFBQWxFLElBQUErZixLQUFBdmQsRUFBQXNRLFFBQUErTSxTQUFBcGQsRUFBQU8sRUFBQW9ELEVBQUF0SCxNQUFBYyxDQUFBLE9BQUFBLElBQUE0QyxFQUFBdWMsWUFBQTdhLEVBQUFsRSxHQUFBd0MsRUFBQStPLFlBQUEsSUFBQWpLLEdBQUExRSxJQUFBNmUsR0FBQXpLLE1BQUEsU0FBQWpZLEdBQUEsTUFBQTZELElBQUFvVSxNQUFBekYsVUFBQXVNLEtBQUEvZSxHQUFBbUssTUFBQXRHLEdBQUErSSxRQUFBeVcsU0FBQSxFQUFBbUksVUFBQSxFQUFBQyxVQUFBLFNBQUF6ckIsR0FBQUEsRUFBQTZELEdBQUEybkIsWUFBQTNuQixHQUFBb1UsT0FBQSxJQUFBQSxNQUFBLFNBQUFqWSxHQUFBLEdBQUFBLEtBQUEsS0FBQTZELEdBQUEybkIsV0FBQTNuQixHQUFBd2YsUUFBQSxDQUFBLElBQUFyZixHQUFBd1gsS0FBQSxNQUFBeEcsWUFBQW5SLEdBQUFvVSxNQUFBcFUsSUFBQXdmLFNBQUEsRUFBQXJqQixLQUFBLEtBQUE2RCxHQUFBMm5CLFVBQUEsSUFBQWpqQixHQUFBeVgsWUFBQWhjLElBQUFILEtBQUFBLEdBQUE2ZSxHQUFBZ0osaUJBQUE3bkIsR0FBQUcsSUFBQTBuQixlQUFBLFNBQUE3bkIsR0FBQUcsSUFBQTJuQixJQUFBLGVBQUE5bkIsR0FBQW9VLE1BQUF6RixRQUFBLFNBQUF2TyxHQUFBLElBQUFzRSxHQUFBLEdBQUFBLEdBQUExRSxHQUFBNGIsV0FBQSxhQUFBemIsR0FBQXlOLFdBQUF1RCxXQUFBblIsR0FBQW9VLFdBQUEsSUFBQWpVLEdBQUFLLGlCQUFBTCxHQUFBSyxpQkFBQSxtQkFBQTZCLEdBQUEsR0FBQWxHLEVBQUFxRSxpQkFBQSxPQUFBNkIsR0FBQSxPQUFBLENBQUFsQyxHQUFBTSxZQUFBLHFCQUFBNEIsR0FBQWxHLEVBQUFzRSxZQUFBLFNBQUE0QixFQUFBLElBQUFqRixJQUFBLENBQUEsS0FBQUEsRUFBQSxNQUFBakIsRUFBQTRyQixjQUFBNW5CLEdBQUFnWSxnQkFBQSxNQUFBL1ksSUFBQWhDLEdBQUFBLEVBQUE0cUIsV0FBQSxRQUFBcHNCLEtBQUEsSUFBQW9FLEdBQUF3ZixRQUFBLENBQUEsSUFBQXBpQixFQUFBNHFCLFNBQUEsUUFBQSxNQUFBN3JCLEdBQUEsTUFBQWdWLFlBQUF2VixFQUFBLElBQUFpQixJQUFBbUQsR0FBQW9VLFlBQUEsTUFBQTFQLElBQUFpSyxRQUFBdk8sR0FBQSxJQUFBbEMsSUFBQWlILEdBQUEsV0FBQSxLQUFBakgsS0FBQThCLElBQUFzQixJQUFBLEtBQUFBLElBQUFvZSxRQUFBLE1BQUF4aEIsR0FBQW9ELEdBQUFzWix3QkFBQSxFQUFBNWEsR0FBQSxXQUFBLEdBQUE3RCxHQUFBaUUsRUFBQWhELEVBQUFnQyxDQUFBaEMsR0FBQStDLEdBQUF1RyxxQkFBQSxRQUFBLEdBQUF0SixHQUFBQSxFQUFBd2IsUUFBQXhZLEVBQUFELEdBQUE4SixjQUFBLE9BQUE3SyxFQUFBZSxHQUFBOEosY0FBQSxPQUFBN0ssRUFBQXdaLE1BQUFxUCxRQUFBLGlFQUFBN3FCLEVBQUE0WSxZQUFBNVcsR0FBQTRXLFlBQUE1VixTQUFBQSxHQUFBd1ksTUFBQWlDLE9BQUExVixLQUFBL0UsRUFBQXdZLE1BQUFxUCxRQUFBLGdFQUFBM21CLEdBQUFzWix1QkFBQXplLEVBQUEsSUFBQWlFLEVBQUE4WSxZQUFBL2MsSUFBQWlCLEVBQUF3YixNQUFBaUMsS0FBQSxJQUFBemQsRUFBQXFqQixZQUFBcmhCLE1BQUEsV0FBQSxHQUFBakQsR0FBQWdFLEdBQUE4SixjQUFBLE1BQUEsSUFBQSxNQUFBM0ksR0FBQTJULGNBQUEsQ0FBQTNULEdBQUEyVCxlQUFBLENBQUEsV0FBQTlZLEdBQUFULEtBQUEsTUFBQTBFLEdBQUFrQixHQUFBMlQsZUFBQSxHQUFBOVksRUFBQSxRQUFBNkQsR0FBQXVVLFdBQUEsU0FBQXBZLEdBQUEsR0FBQWlFLEdBQUFKLEdBQUFrb0IsUUFBQS9yQixFQUFBaUwsU0FBQSxLQUFBN0csZUFBQW5ELEdBQUFqQixFQUFBeVgsVUFBQSxDQUFBLFFBQUEsSUFBQXhXLEdBQUEsSUFBQUEsTUFBQWdELEdBQUFBLEtBQUEsR0FBQWpFLEVBQUE2SyxhQUFBLGFBQUE1RyxHQUFBLElBQUFjLElBQUEsZ0NBQUFlLEdBQUEsVUFDQWpDLElBQUErSSxRQUFBMEwsU0FBQXlULFFBQUFDLFdBQUEsRUFBQUMsVUFBQSxFQUFBQyxVQUFBLDhDQUFBM1IsUUFBQSxTQUFBdmEsR0FBQSxNQUFBQSxHQUFBQSxFQUFBeVgsU0FBQTVULEdBQUF5VSxNQUFBdFksRUFBQTZELEdBQUF3VSxVQUFBclksRUFBQTZELEdBQUF3VSxXQUFBclksSUFBQW1ILEVBQUFuSCxJQUFBNFAsS0FBQSxTQUFBNVAsRUFBQWlFLEVBQUFoRCxHQUFBLE1BQUE0RCxHQUFBN0UsRUFBQWlFLEVBQUFoRCxJQUFBa3JCLFdBQUEsU0FBQW5zQixFQUFBaUUsR0FBQSxNQUFBckUsR0FBQUksRUFBQWlFLElBQUFvVyxNQUFBLFNBQUFyYSxFQUFBaUUsRUFBQWhELEdBQUEsTUFBQTRELEdBQUE3RSxFQUFBaUUsRUFBQWhELEdBQUEsSUFBQWdlLFlBQUEsU0FBQWpmLEVBQUFpRSxHQUFBLE1BQUFyRSxHQUFBSSxFQUFBaUUsR0FBQSxNQUFBSixHQUFBNmUsR0FBQTlWLFFBQUFnRCxLQUFBLFNBQUE1UCxFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQWdDLEVBQUF4RCxFQUFBb0IsRUFBQXNKLEtBQUEsR0FBQTFHLEVBQUE1QyxHQUFBQSxFQUFBaUssVUFBQSxJQUFBLFNBQUE5SyxFQUFBLENBQUEsR0FBQW1LLEtBQUEvSixTQUFBWCxFQUFBb0UsR0FBQStMLEtBQUEvTyxHQUFBLElBQUFBLEVBQUE0VyxXQUFBNVQsR0FBQXdXLE1BQUF4WixFQUFBLGdCQUFBLENBQUEsSUFBQUksRUFBQXdDLEVBQUFyRCxPQUFBYSxLQUFBd0MsRUFBQXhDLEtBQUFnQyxFQUFBUSxFQUFBeEMsR0FBQS9CLEtBQUEsSUFBQStELEVBQUF1QyxRQUFBLFdBQUF2QyxFQUFBWSxHQUFBOFUsVUFBQTFWLEVBQUFPLE1BQUEsSUFBQWpCLEVBQUExQixFQUFBb0MsRUFBQXhELEVBQUF3RCxLQUFBWSxJQUFBd1csTUFBQXhaLEVBQUEsZUFBQSxHQUFBLE1BQUFwQixHQUFBLE1BQUEsZ0JBQUFPLEdBQUFtSyxLQUFBME4sS0FBQSxXQUFBaFUsR0FBQStMLEtBQUF6RixLQUFBbkssS0FBQStOLFVBQUEzTixPQUFBLEVBQUErSixLQUFBME4sS0FBQSxXQUFBaFUsR0FBQStMLEtBQUF6RixLQUFBbkssRUFBQWlFLEtBQUFwRCxFQUFBMEIsRUFBQTFCLEVBQUFiLEVBQUE2RCxHQUFBK0wsS0FBQS9PLEVBQUFiLElBQUEsUUFBQW1zQixXQUFBLFNBQUFuc0IsR0FBQSxNQUFBbUssTUFBQTBOLEtBQUEsV0FBQWhVLEdBQUFzb0IsV0FBQWhpQixLQUFBbkssUUFBQTZELEdBQUErSSxRQUFBb1IsTUFBQSxTQUFBaGUsRUFBQWlFLEVBQUFoRCxHQUFBLEdBQUFnQyxFQUFBLE9BQUFqRCxJQUFBaUUsR0FBQUEsR0FBQSxNQUFBLFFBQUFoQixFQUFBWSxHQUFBd1csTUFBQXJhLEVBQUFpRSxHQUFBaEQsS0FBQWdDLEdBQUFZLEdBQUFtRyxRQUFBL0ksR0FBQWdDLEVBQUFZLEdBQUF3VyxNQUFBcmEsRUFBQWlFLEVBQUFKLEdBQUE4ZixVQUFBMWlCLElBQUFnQyxFQUFBa0IsS0FBQWxELElBQUFnQyxPQUFBLFFBQUFtcEIsUUFBQSxTQUFBcHNCLEVBQUFpRSxHQUFBQSxFQUFBQSxHQUFBLElBQUEsSUFBQWhELEdBQUE0QyxHQUFBbWEsTUFBQWhlLEVBQUFpRSxHQUFBaEIsRUFBQWhDLEVBQUFiLE9BQUFYLEVBQUF3QixFQUFBME8sUUFBQTlPLEVBQUFnRCxHQUFBb2EsWUFBQWplLEVBQUFpRSxHQUFBUixFQUFBLFdBQUFJLEdBQUF1b0IsUUFBQXBzQixFQUFBaUUsR0FBQSxnQkFBQXhFLElBQUFBLEVBQUF3QixFQUFBME8sUUFBQTFNLEtBQUF4RCxJQUFBLE9BQUF3RSxHQUFBaEQsRUFBQXNPLFFBQUEsb0JBQUExTyxHQUFBNGYsS0FBQWhoQixFQUFBNkMsS0FBQXRDLEVBQUF5RCxFQUFBNUMsS0FBQW9DLEdBQUFwQyxHQUFBQSxFQUFBc2QsTUFBQUMsUUFBQUgsWUFBQSxTQUFBamUsRUFBQWlFLEdBQUEsR0FBQWhELEdBQUFnRCxFQUFBLFlBQUEsT0FBQUosSUFBQXdXLE1BQUFyYSxFQUFBaUIsSUFBQTRDLEdBQUF3VyxNQUFBcmEsRUFBQWlCLEdBQUFrZCxNQUFBdGEsR0FBQWduQixVQUFBLGVBQUFuUSxJQUFBLFdBQUE3VyxHQUFBb2IsWUFBQWpmLEVBQUFpRSxFQUFBLFNBQUFKLEdBQUFvYixZQUFBamYsRUFBQWlCLFVBQUE0QyxHQUFBNmUsR0FBQTlWLFFBQUFvUixNQUFBLFNBQUFoZSxFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQSxDQUFBLE9BQUEsZ0JBQUFqQixLQUFBaUUsRUFBQWpFLEVBQUFBLEVBQUEsS0FBQWlCLEtBQUE4TSxVQUFBM04sT0FBQWEsRUFBQTRDLEdBQUFtYSxNQUFBN1QsS0FBQSxHQUFBbkssR0FBQSxTQUFBaUUsRUFBQWtHLEtBQUFBLEtBQUEwTixLQUFBLFdBQUEsR0FBQTVXLEdBQUE0QyxHQUFBbWEsTUFBQTdULEtBQUFuSyxFQUFBaUUsRUFBQUosSUFBQW9hLFlBQUE5VCxLQUFBbkssR0FBQSxPQUFBQSxHQUFBLGVBQUFpQixFQUFBLElBQUE0QyxHQUFBdW9CLFFBQUFqaUIsS0FBQW5LLE1BQUFvc0IsUUFBQSxTQUFBcHNCLEdBQUEsTUFBQW1LLE1BQUEwTixLQUFBLFdBQUFoVSxHQUFBdW9CLFFBQUFqaUIsS0FBQW5LLE1BQUFxc0IsV0FBQSxTQUFBcnNCLEdBQUEsTUFBQW1LLE1BQUE2VCxNQUFBaGUsR0FBQSxVQUFBd1MsUUFBQSxTQUFBeFMsRUFBQWlFLEdBQUEsR0FBQWhELEdBQUFnQyxFQUFBLEVBQUF4RCxFQUFBb0UsR0FBQTRiLFdBQUE1ZSxFQUFBc0osS0FBQTFHLEVBQUEwRyxLQUFBL0osT0FBQXNELEVBQUEsYUFBQVQsR0FBQXhELEVBQUF1Z0IsWUFBQW5mLEdBQUFBLElBQUEsS0FBQSxnQkFBQWIsS0FBQWlFLEVBQUFqRSxFQUFBQSxFQUFBLFFBQUFBLEVBQUFBLEdBQUEsS0FBQXlELEtBQUF4QyxFQUFBNEMsR0FBQXdXLE1BQUF4WixFQUFBNEMsR0FBQXpELEVBQUEsY0FBQWlCLEdBQUFBLEVBQUFrZCxRQUFBbGIsSUFBQWhDLEVBQUFrZCxNQUFBekQsSUFBQWhYLEdBQUEsT0FBQUEsS0FBQWpFLEVBQUErUyxRQUFBdk8sS0FBQSxJQUFBcUIsSUFBQSxzQ0FBQTZPLE9BQUFqTixJQUFBLE1BQUEsUUFBQSxTQUFBLFFBQUFyRSxHQUFBLFNBQUE3QyxFQUFBaUUsR0FBQSxNQUFBakUsR0FBQWlFLEdBQUFqRSxFQUFBLFNBQUE2RCxHQUFBOFgsSUFBQTNiLEVBQUEsYUFBQTZELEdBQUEraUIsU0FBQTVtQixFQUFBOFosY0FBQTlaLElBQUE2SCxHQUFBaEUsR0FBQXlvQixPQUFBLFNBQUF0c0IsRUFBQWlFLEVBQUFoRCxFQUFBZ0MsRUFBQXhELEVBQUFvQixFQUFBNEMsR0FBQSxHQUFBQyxHQUFBLEVBQUEzRCxFQUFBQyxFQUFBSSxPQUFBaUgsRUFBQSxNQUFBcEcsQ0FBQSxJQUFBLFdBQUE0QyxHQUFBVSxLQUFBdEQsR0FBQSxDQUFBeEIsR0FBQSxDQUFBLEtBQUFpRSxJQUFBekMsR0FBQTRDLEdBQUF5b0IsT0FBQXRzQixFQUFBaUUsRUFBQVAsRUFBQXpDLEVBQUF5QyxJQUFBLEVBQUE3QyxFQUFBNEMsT0FBQSxJQUFBLFNBQUFSLElBQUF4RCxHQUFBLEVBQUFvRSxHQUFBNkssV0FBQXpMLEtBQUFRLEdBQUEsR0FBQTRELElBQUE1RCxHQUFBUSxFQUFBM0IsS0FBQXRDLEVBQUFpRCxHQUFBZ0IsRUFBQSxPQUFBb0QsRUFBQXBELEVBQUFBLEVBQUEsU0FBQWpFLEVBQUFpRSxFQUFBaEQsR0FBQSxNQUFBb0csR0FBQS9FLEtBQUF1QixHQUFBN0QsR0FBQWlCLE1BQUFnRCxHQUFBLEtBQUFsRSxFQUFBMkQsRUFBQUEsSUFBQU8sRUFBQWpFLEVBQUEwRCxHQUFBekMsRUFBQXdDLEVBQUFSLEVBQUFBLEVBQUFYLEtBQUF0QyxFQUFBMEQsR0FBQUEsRUFBQU8sRUFBQWpFLEVBQUEwRCxHQUFBekMsSUFBQSxPQUFBeEIsR0FBQU8sRUFBQXFILEVBQUFwRCxFQUFBM0IsS0FBQXRDLEdBQUFELEVBQUFrRSxFQUFBakUsRUFBQSxHQUFBaUIsR0FBQUosR0FBQXNJLEdBQUEseUJBQUEsV0FBQSxHQUFBbkosR0FBQWdFLEdBQUE4SixjQUFBLFNBQUE3SixFQUFBRCxHQUFBOEosY0FBQSxPQUFBN00sRUFBQStDLEdBQUFxVix3QkFBQSxJQUFBcFYsRUFBQWlYLFVBQUEscUVBQUEvVixHQUFBb25CLGtCQUFBLElBQUF0b0IsRUFBQTJWLFdBQUFuQyxTQUFBdFMsR0FBQXFuQixPQUFBdm9CLEVBQUFzRyxxQkFBQSxTQUFBbkssT0FBQStFLEdBQUFzbkIsZ0JBQUF4b0IsRUFBQXNHLHFCQUFBLFFBQUFuSyxPQUFBK0UsR0FBQThWLFdBQUEsa0JBQUFqWCxHQUFBOEosY0FBQSxPQUFBNGUsV0FBQSxHQUFBMVIsVUFBQWhiLEVBQUF1RSxLQUFBLFdBQUF2RSxFQUFBMFosU0FBQSxFQUFBelksRUFBQTRZLFlBQUE3WixHQUFBbUYsR0FBQXduQixjQUFBM3NCLEVBQUEwWixRQUFBelYsRUFBQWlYLFVBQUEseUJBQUEvVixHQUFBeW5CLGlCQUFBM29CLEVBQUF5b0IsV0FBQSxHQUFBakYsVUFBQXBNLGFBQUFwYSxFQUFBNFksWUFBQTVWLEdBQUFBLEVBQUFpWCxVQUFBLG1EQUFBL1YsR0FBQTBuQixXQUFBNW9CLEVBQUF5b0IsV0FBQSxHQUFBQSxXQUFBLEdBQUFqRixVQUFBL04sUUFBQXZVLEdBQUF5VixjQUFBLEVBQUEzVyxFQUFBSyxjQUFBTCxFQUFBSyxZQUFBLFVBQUEsV0FBQWEsR0FBQXlWLGNBQUEsSUFBQTNXLEVBQUF5b0IsV0FBQSxHQUFBOWtCLFNBQUEsTUFBQXpDLEdBQUEyVCxjQUFBLENBQUEzVCxHQUFBMlQsZUFBQSxDQUFBLFdBQUE3VSxHQUFBMUUsS0FBQSxNQUFBMEQsR0FBQWtDLEdBQUEyVCxlQUFBLE9BQUEsV0FBQSxHQUFBN1UsR0FBQWhELEVBQUFnQyxFQUFBZSxHQUFBOEosY0FBQSxNQUFBLEtBQUE3SixLQUFBa2xCLFFBQUEsRUFBQTJELFFBQUEsRUFBQUMsU0FBQSxHQUFBOXJCLEVBQUEsS0FBQWdELEdBQUFrQixHQUFBbEIsRUFBQSxXQUFBaEQsSUFBQWpCLE1BQUFpRCxFQUFBK0ksYUFBQS9LLEVBQUEsS0FBQWtFLEdBQUFsQixFQUFBLFdBQUFoQixFQUFBNkgsV0FBQTdKLEdBQUFvWCxXQUFBLEVBQUFwVixHQUFBLE9BQUEsSUFBQTZCLElBQUEsK0JBQUFtQixHQUFBLE9BQUFzQixHQUFBLHVDQUFBeEksR0FBQSxrQ0FBQWlDLEdBQUEsc0JBQUE2QyxJQUFBbVUsT0FBQTFCLFVBQUFvRSxJQUFBLFNBQUExYSxFQUFBaUUsRUFBQWhELEVBQUFnQyxFQUFBeEQsR0FBQSxHQUFBb0IsR0FBQTRDLEVBQUFDLEVBQUEzRCxFQUFBc0gsRUFBQWxDLEVBQUE5RCxFQUFBdkIsRUFBQUksRUFBQTRELEVBQUFpQyxFQUFBckcsRUFBQW1FLEdBQUF3VyxNQUFBcmEsRUFBQSxJQUFBTixFQUFBLENBQUEsSUFBQXVCLEVBQUErckIsVUFBQWp0QixFQUFBa0IsRUFBQUEsRUFBQWxCLEVBQUFpdEIsUUFBQXZ0QixFQUFBTSxFQUFBNmlCLFVBQUEzaEIsRUFBQXVYLE9BQUF2WCxFQUFBdVgsS0FBQTNVLEdBQUEyVSxTQUFBL1UsRUFBQS9ELEVBQUE4YSxVQUFBL1csRUFBQS9ELEVBQUE4YSxZQUFBclYsRUFBQXpGLEVBQUErYSxVQUFBdFYsRUFBQXpGLEVBQUErYSxPQUFBLFNBQUF6YSxHQUFBLGFBQUE2RCxNQUFBbUYsSUFBQWhKLEdBQUE2RCxHQUFBbVUsTUFBQWlWLFlBQUFqdEIsRUFBQXVFLEtBQUEsT0FBQVYsR0FBQW1VLE1BQUFrVixTQUFBbGUsTUFBQTdKLEVBQUF1YSxLQUFBM1IsWUFBQTVJLEVBQUF1YSxLQUFBMWYsR0FBQWlFLEdBQUFBLEdBQUEsSUFBQXdQLE1BQUFqUCxNQUFBLElBQUFkLEVBQUFPLEVBQUE3RCxPQUFBc0QsS0FBQTdDLEVBQUFHLEdBQUFELEtBQUFrRCxFQUFBUCxRQUFBeEQsRUFBQTZGLEVBQUFsRixFQUFBLEdBQUFpRCxHQUFBakQsRUFBQSxJQUFBLElBQUF5SyxNQUFBLEtBQUFkLE9BQUF0SyxJQUFBbUgsRUFBQXhELEdBQUFtVSxNQUFBbVYsUUFBQWp0QixPQUFBQSxHQUFBVCxFQUFBNEgsRUFBQStsQixhQUFBL2xCLEVBQUFnbUIsV0FBQW50QixFQUFBbUgsRUFBQXhELEdBQUFtVSxNQUFBbVYsUUFBQWp0QixPQUFBbUIsRUFBQXdDLEdBQUErSSxRQUFBckksS0FBQXJFLEVBQUFvdEIsU0FBQXZuQixFQUFBNkosS0FBQTNNLEVBQUErcEIsUUFBQS9yQixFQUFBdVgsS0FBQXZYLEVBQUF1WCxLQUFBb0ssU0FBQW5qQixFQUFBbW1CLGFBQUFubUIsR0FBQW9FLEdBQUE0bEIsS0FBQWhXLE1BQUFtUyxhQUFBcm1CLEtBQUFFLEdBQUE4dEIsVUFBQXpwQixFQUFBZ1AsS0FBQSxNQUFBL1MsSUFBQUQsRUFBQTJELEVBQUF2RCxNQUFBSixFQUFBMkQsRUFBQXZELE1BQUFKLEVBQUEwdEIsY0FBQSxFQUFBbm1CLEVBQUFvbUIsT0FBQXBtQixFQUFBb21CLE1BQUFuckIsS0FBQXRDLEVBQUFpRCxFQUFBYSxFQUFBcUIsTUFBQSxJQUFBbkYsRUFBQXFFLGlCQUFBckUsRUFBQXFFLGlCQUFBbkUsRUFBQWlGLEdBQUEsR0FBQW5GLEVBQUFzRSxhQUFBdEUsRUFBQXNFLFlBQUEsS0FBQXBFLEVBQUFpRixLQUFBa0MsRUFBQXFULE1BQUFyVCxFQUFBcVQsSUFBQXBZLEtBQUF0QyxFQUFBcUIsR0FBQUEsRUFBQTJyQixRQUFBeFUsT0FBQW5YLEVBQUEyckIsUUFBQXhVLEtBQUF2WCxFQUFBdVgsT0FBQS9ZLEVBQUFLLEVBQUE0SyxPQUFBNUssRUFBQTB0QixnQkFBQSxFQUFBbnNCLEdBQUF2QixFQUFBcUUsS0FBQTlDLEdBQUF3QyxHQUFBbVUsTUFBQTFCLE9BQUFwVyxJQUFBLEVBQUFGLEdBQUEsT0FBQTBULE9BQUEsU0FBQTFULEVBQUFpRSxFQUFBaEQsRUFBQWdDLEVBQUF4RCxHQUFBLEdBQUFvQixHQUFBNEMsRUFBQUMsRUFBQTNELEVBQUFzSCxFQUFBbEMsRUFBQTlELEVBQUF2QixFQUFBSSxFQUFBNEQsRUFBQWlDLEVBQUFyRyxFQUFBbUUsR0FBQTBXLFFBQUF2YSxJQUFBNkQsR0FBQXdXLE1BQUFyYSxFQUFBLElBQUFOLElBQUF5RixFQUFBekYsRUFBQThhLFFBQUEsQ0FBQSxJQUFBdlcsR0FBQUEsR0FBQSxJQUFBd1AsTUFBQWpQLE1BQUEsSUFBQTZDLEVBQUFwRCxFQUFBN0QsT0FBQWlILEtBQUEsR0FBQTNELEVBQUExQyxHQUFBRCxLQUFBa0QsRUFBQW9ELFFBQUFuSCxFQUFBNkYsRUFBQXJDLEVBQUEsR0FBQUksR0FBQUosRUFBQSxJQUFBLElBQUE0SCxNQUFBLEtBQUFkLE9BQUF0SyxFQUFBLENBQUEsSUFBQW1CLEVBQUF3QyxHQUFBbVUsTUFBQW1WLFFBQUFqdEIsT0FBQUEsR0FBQStDLEVBQUE1QixFQUFBK3JCLGFBQUEvckIsRUFBQWdzQixXQUFBbnRCLEVBQUFKLEVBQUFxRixFQUFBakYsT0FBQXdELEVBQUFBLEVBQUEsSUFBQSxHQUFBNUMsUUFBQSxVQUFBZ0QsRUFBQWdQLEtBQUEsaUJBQUEsV0FBQS9TLEVBQUFjLEVBQUFmLEVBQUFNLE9BQUFTLEtBQUE0QyxFQUFBM0QsRUFBQWUsSUFBQXBCLEdBQUFzRyxJQUFBdEMsRUFBQTZwQixVQUFBcnNCLEdBQUFBLEVBQUF1WCxPQUFBL1UsRUFBQStVLE1BQUE5VSxJQUFBQSxFQUFBbkUsS0FBQWtFLEVBQUE4cEIsWUFBQXRxQixHQUFBQSxJQUFBUSxFQUFBbWYsV0FBQSxPQUFBM2YsSUFBQVEsRUFBQW1mLFlBQUE5aUIsRUFBQTRLLE9BQUE3SixFQUFBLEdBQUE0QyxFQUFBbWYsVUFBQTlpQixFQUFBMHRCLGdCQUFBbnNCLEVBQUFxUyxRQUFBclMsRUFBQXFTLE9BQUFwUixLQUFBdEMsRUFBQXlELEdBQUExRCxLQUFBRCxFQUFBTSxTQUFBaUIsRUFBQXFzQixVQUFBcnNCLEVBQUFxc0IsU0FBQXByQixLQUFBdEMsRUFBQThELEVBQUFwRSxFQUFBK2EsV0FBQSxHQUFBNVcsR0FBQWdYLFlBQUE3YSxFQUFBRSxFQUFBUixFQUFBK2EsY0FBQXRWLEdBQUFqRixRQUFBLEtBQUFBLElBQUFpRixHQUFBdEIsR0FBQW1VLE1BQUF0RSxPQUFBMVQsRUFBQUUsRUFBQStELEVBQUFvRCxHQUFBcEcsRUFBQWdDLEdBQUEsRUFBQVksSUFBQXNVLGNBQUFoVCxXQUFBekYsR0FBQSthLE9BQUE1VyxHQUFBb2IsWUFBQWpmLEVBQUEsYUFBQTJ0QixRQUFBLFNBQUExcEIsRUFBQWhELEVBQUFnQyxFQUFBeEQsR0FBQSxHQUFBb0IsR0FBQTRDLEVBQUFDLEVBQUEzRCxFQUFBb0YsRUFBQTlELEVBQUF2QixFQUFBSSxHQUFBK0MsR0FBQWUsSUFBQUYsRUFBQXVELEdBQUEvRSxLQUFBMkIsRUFBQSxRQUFBQSxFQUFBTSxLQUFBTixFQUFBOEIsRUFBQXNCLEdBQUEvRSxLQUFBMkIsRUFBQSxhQUFBQSxFQUFBc3BCLFVBQUFqaUIsTUFBQSxPQUFBLElBQUE1SCxFQUFBckMsRUFBQTRCLEVBQUFBLEdBQUFlLEdBQUEsSUFBQWYsRUFBQXdVLFVBQUEsSUFBQXhVLEVBQUF3VSxXQUFBMVksR0FBQVEsS0FBQXVFLEVBQUFELEdBQUFtVSxNQUFBaVYsYUFBQW5wQixFQUFBMEIsUUFBQSxNQUFBLElBQUFPLEVBQUFqQyxFQUFBd0gsTUFBQSxLQUFBeEgsRUFBQWlDLEVBQUE0SixRQUFBNUosRUFBQXlFLFFBQUEvRyxFQUFBSyxFQUFBMEIsUUFBQSxLQUFBLEdBQUEsS0FBQTFCLEVBQUFHLEVBQUFBLEVBQUFKLEdBQUF3VSxTQUFBcFUsRUFBQSxHQUFBSixJQUFBK3BCLE1BQUE5cEIsRUFBQSxnQkFBQUcsSUFBQUEsR0FBQUEsRUFBQTRwQixVQUFBcHVCLEVBQUEsRUFBQSxFQUFBd0UsRUFBQXNwQixVQUFBeG5CLEVBQUErTSxLQUFBLEtBQUE3TyxFQUFBNnBCLGFBQUE3cEIsRUFBQXNwQixVQUFBLEdBQUF6c0IsUUFBQSxVQUFBaUYsRUFBQStNLEtBQUEsaUJBQUEsV0FBQSxLQUFBN08sRUFBQThwQixPQUFBLE9BQUE5cEIsRUFBQXdELFNBQUF4RCxFQUFBd0QsT0FBQXhFLEdBQUFoQyxFQUFBLE1BQUFBLEdBQUFnRCxHQUFBSixHQUFBOGYsVUFBQTFpQixHQUFBZ0QsSUFBQWtCLEVBQUF0QixHQUFBbVUsTUFBQW1WLFFBQUFycEIsT0FBQXJFLElBQUEwRixFQUFBd29CLFNBQUF4b0IsRUFBQXdvQixRQUFBM2UsTUFBQS9MLEVBQUFoQyxNQUFBLEdBQUEsQ0FBQSxJQUFBeEIsSUFBQTBGLEVBQUE2b0IsV0FBQW5xQixHQUFBMlQsU0FBQXZVLEdBQUEsQ0FBQSxJQUFBbEQsRUFBQW9GLEVBQUFpb0IsY0FBQXRwQixFQUFBL0UsR0FBQVEsS0FBQVEsRUFBQStELEtBQUFKLEVBQUFBLEVBQUFxWCxZQUFBclgsRUFBQUEsRUFBQUEsRUFBQXFYLFdBQUE3YSxFQUFBaUUsS0FBQVQsR0FBQXJDLEVBQUFxQyxDQUFBckMsTUFBQTRCLEVBQUE2VyxlQUFBOVYsS0FBQTlELEVBQUFpRSxLQUFBOUMsRUFBQW1oQixhQUFBbmhCLEVBQUFvaEIsY0FBQXppQixHQUFBLElBQUFGLEVBQUEsR0FBQTRELEVBQUF4RCxFQUFBSixRQUFBbUUsRUFBQWdxQix3QkFBQWhxQixFQUFBTSxLQUFBekUsRUFBQSxFQUFBQyxFQUFBb0YsRUFBQWtvQixVQUFBdnBCLEVBQUFqRCxHQUFBZ0QsR0FBQXdXLE1BQUEzVyxFQUFBLGVBQUFPLEVBQUFNLE9BQUFWLEdBQUF3VyxNQUFBM1csRUFBQSxVQUFBN0MsR0FBQUEsRUFBQW1PLE1BQUF0TCxFQUFBekMsR0FBQUosRUFBQTRDLEdBQUFDLEVBQUFELEdBQUE1QyxHQUFBQSxFQUFBbU8sT0FBQW5MLEdBQUF1VSxXQUFBMVUsS0FBQU8sRUFBQThwQixPQUFBbHRCLEVBQUFtTyxNQUFBdEwsRUFBQXpDLEdBQUFnRCxFQUFBOHBCLFVBQUEsR0FBQTlwQixFQUFBaXFCLGlCQUFBLElBQUFqcUIsRUFBQU0sS0FBQVQsR0FBQXJFLElBQUF3RSxFQUFBa3FCLHdCQUFBaHBCLEVBQUFpcEIsVUFBQWpwQixFQUFBaXBCLFNBQUFwZixNQUFBOU8sRUFBQXFZLE1BQUF0WCxNQUFBLElBQUE0QyxHQUFBdVUsV0FBQW5WLElBQUFRLEdBQUFSLEVBQUFhLEtBQUFELEdBQUEyVCxTQUFBdlUsR0FBQSxDQUFBNUIsRUFBQTRCLEVBQUFRLEdBQUFwQyxJQUFBNEIsRUFBQVEsR0FBQSxNQUFBSSxHQUFBbVUsTUFBQWlWLFVBQUFucEIsQ0FBQSxLQUFBYixFQUFBYSxLQUFBLE1BQUFwRSxJQUFBbUUsR0FBQW1VLE1BQUFpVixVQUFBLE9BQUE1ckIsSUFBQTRCLEVBQUFRLEdBQUFwQyxHQUFBLE1BQUE0QyxHQUFBOHBCLFNBQUFiLFNBQUEsU0FBQWx0QixHQUFBQSxFQUFBNkQsR0FBQW1VLE1BQUFxVyxJQUFBcnVCLEVBQUEsSUFBQWlFLEdBQUFoRCxFQUFBeEIsRUFBQW9CLEVBQUE0QyxFQUFBQyxLQUFBM0QsRUFBQWtELEVBQUFYLEtBQUF5TCxXQUFBMUcsR0FBQXhELEdBQUF3VyxNQUFBbFEsS0FBQSxlQUFBbkssRUFBQXVFLFVBQUFZLEVBQUF0QixHQUFBbVUsTUFBQW1WLFFBQUFudEIsRUFBQXVFLFNBQUEsSUFBQXhFLEVBQUEsR0FBQUMsRUFBQUEsRUFBQXN1QixlQUFBbmtCLE1BQUFoRixFQUFBb3BCLGFBQUFwcEIsRUFBQW9wQixZQUFBanNCLEtBQUE2SCxLQUFBbkssTUFBQSxFQUFBLENBQUEsSUFBQTBELEVBQUFHLEdBQUFtVSxNQUFBckUsU0FBQXJSLEtBQUE2SCxLQUFBbkssRUFBQXFILEdBQUFwRCxFQUFBLEdBQUFwRCxFQUFBNkMsRUFBQU8sUUFBQWpFLEVBQUFpdUIsd0JBQUEsSUFBQWp1QixFQUFBd0gsY0FBQTNHLEVBQUE2ZSxLQUFBamMsRUFBQSxHQUFBaEUsRUFBQW9CLEVBQUE4UyxTQUFBbFEsUUFBQXpELEVBQUF3dUIsbUNBQUF4dUIsRUFBQTh0QixjQUFBOXRCLEVBQUE4dEIsYUFBQXZ1QixLQUFBRSxFQUFBOHRCLGNBQUF2dEIsRUFBQXl1QixVQUFBaHZCLEVBQUFPLEVBQUE0UCxLQUFBblEsRUFBQW1RLEtBQUEzTyxJQUFBNEMsR0FBQW1VLE1BQUFtVixRQUFBMXRCLEVBQUE2dEIsZUFBQTdTLFFBQUFoYixFQUFBdXRCLFNBQUFoZSxNQUFBbk8sRUFBQTZlLEtBQUEzZixHQUFBLFNBQUFrQixJQUFBakIsRUFBQSt0QixPQUFBOXNCLE1BQUEsSUFBQWpCLEVBQUFrdUIsaUJBQUFsdUIsRUFBQTB1QixtQkFBQSxPQUFBdnBCLEdBQUF3cEIsY0FBQXhwQixFQUFBd3BCLGFBQUFyc0IsS0FBQTZILEtBQUFuSyxHQUFBQSxFQUFBK3RCLFNBQUFwYSxTQUFBLFNBQUEzVCxFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQWdDLEVBQUF4RCxFQUFBb0IsRUFBQTRDLEtBQUFDLEVBQUFPLEVBQUF1cEIsY0FBQXp0QixFQUFBQyxFQUFBeUgsTUFBQSxJQUFBL0QsR0FBQTNELEVBQUEwWCxZQUFBelgsRUFBQXlvQixRQUFBLFVBQUF6b0IsRUFBQXVFLE1BQUEsS0FBQXhFLEdBQUFvSyxLQUFBcEssRUFBQUEsRUFBQWdiLFlBQUE1USxLQUFBLEdBQUEsSUFBQXBLLEVBQUEwWCxXQUFBMVgsRUFBQXNvQixZQUFBLEdBQUEsVUFBQXJvQixFQUFBdUUsTUFBQSxDQUFBLElBQUE5RSxLQUFBb0IsRUFBQSxFQUFBNkMsRUFBQTdDLEVBQUFBLElBQUFvQyxFQUFBZ0IsRUFBQXBELEdBQUFJLEVBQUFnQyxFQUFBMmYsU0FBQSxJQUFBLFNBQUFuakIsRUFBQXdCLEtBQUF4QixFQUFBd0IsR0FBQWdDLEVBQUEyaUIsYUFBQS9oQixHQUFBNUMsRUFBQWtKLE1BQUFnZ0IsTUFBQXBxQixJQUFBLEVBQUE4RCxHQUFBcUUsS0FBQWpILEVBQUFrSixLQUFBLE1BQUFwSyxJQUFBSyxRQUFBWCxFQUFBd0IsSUFBQXhCLEVBQUEwRSxLQUFBbEIsRUFBQXhELEdBQUFXLFFBQUFxRCxFQUFBVSxNQUFBdWIsS0FBQTNmLEVBQUE0VCxTQUFBbFUsSUFBQSxNQUFBaUUsR0FBQU8sRUFBQTdELFFBQUFxRCxFQUFBVSxNQUFBdWIsS0FBQXZWLEtBQUF3SixTQUFBMVAsRUFBQVQsTUFBQUUsS0FBQUQsR0FBQTRxQixJQUFBLFNBQUFydUIsR0FBQSxHQUFBQSxFQUFBNkQsR0FBQXdVLFNBQUEsTUFBQXJZLEVBQUEsSUFBQWlFLEdBQUFoRCxFQUFBZ0MsRUFBQXhELEVBQUFPLEVBQUF1RSxLQUFBMUQsRUFBQWIsRUFBQXlELEVBQUEwRyxLQUFBeWtCLFNBQUFudkIsRUFBQSxLQUFBZ0UsSUFBQTBHLEtBQUF5a0IsU0FBQW52QixHQUFBZ0UsRUFBQThELEdBQUFoSSxLQUFBRSxHQUFBMEssS0FBQTBrQixXQUFBNW9CLEdBQUExRyxLQUFBRSxHQUFBMEssS0FBQTJrQixhQUFBN3JCLEVBQUFRLEVBQUF3YyxNQUFBOVYsS0FBQThWLE1BQUFqWSxPQUFBdkUsRUFBQXdjLE9BQUE5VixLQUFBOFYsTUFBQWpnQixFQUFBLEdBQUE2RCxJQUFBK3BCLE1BQUEvc0IsR0FBQW9ELEVBQUFoQixFQUFBN0MsT0FBQTZELEtBQUFoRCxFQUFBZ0MsRUFBQWdCLEdBQUFqRSxFQUFBaUIsR0FBQUosRUFBQUksRUFBQSxPQUFBakIsR0FBQXlILFNBQUF6SCxFQUFBeUgsT0FBQTVHLEVBQUFrdUIsWUFBQS9xQixJQUFBLElBQUFoRSxFQUFBeUgsT0FBQWdRLFdBQUF6WCxFQUFBeUgsT0FBQXpILEVBQUF5SCxPQUFBc1QsWUFBQS9hLEVBQUFndkIsVUFBQWh2QixFQUFBZ3ZCLFFBQUF2ckIsRUFBQWtVLE9BQUFsVSxFQUFBa1UsT0FBQTNYLEVBQUFhLEdBQUFiLEdBQUFpZ0IsTUFBQSx3SEFBQTNVLE1BQUEsS0FBQXNqQixZQUFBRSxVQUFBN08sTUFBQSw0QkFBQTNVLE1BQUEsS0FBQXFNLE9BQUEsU0FBQTNYLEVBQUFpRSxHQUFBLE1BQUEsT0FBQWpFLEVBQUFpdkIsUUFBQWp2QixFQUFBaXZCLE1BQUEsTUFBQWhyQixFQUFBaXJCLFNBQUFqckIsRUFBQWlyQixTQUFBanJCLEVBQUFrckIsU0FBQW52QixJQUFBNnVCLFlBQUE1TyxNQUFBLG1HQUFBM1UsTUFBQSxLQUFBcU0sT0FBQSxTQUFBM1gsRUFBQWlFLEdBQUEsR0FBQWhELEdBQUFnQyxFQUFBeEQsRUFBQW9CLEVBQUFvRCxFQUFBd2tCLE9BQUFobEIsRUFBQVEsRUFBQW1yQixXQUFBLE9BQUEsT0FBQXB2QixFQUFBcXZCLE9BQUEsTUFBQXByQixFQUFBcXJCLFVBQUFyc0IsRUFBQWpELEVBQUF5SCxPQUFBcVMsZUFBQTlWLEdBQUF2RSxFQUFBd0QsRUFBQStZLGdCQUFBL2EsRUFBQWdDLEVBQUF1WSxLQUFBeGIsRUFBQXF2QixNQUFBcHJCLEVBQUFxckIsU0FBQTd2QixHQUFBQSxFQUFBOHZCLFlBQUF0dUIsR0FBQUEsRUFBQXN1QixZQUFBLElBQUE5dkIsR0FBQUEsRUFBQSt2QixZQUFBdnVCLEdBQUFBLEVBQUF1dUIsWUFBQSxHQUFBeHZCLEVBQUF5dkIsTUFBQXhyQixFQUFBeXJCLFNBQUFqd0IsR0FBQUEsRUFBQWt3QixXQUFBMXVCLEdBQUFBLEVBQUEwdUIsV0FBQSxJQUFBbHdCLEdBQUFBLEVBQUFtd0IsV0FBQTN1QixHQUFBQSxFQUFBMnVCLFdBQUEsS0FBQTV2QixFQUFBNnZCLGVBQUFwc0IsSUFBQXpELEVBQUE2dkIsY0FBQXBzQixJQUFBekQsRUFBQXlILE9BQUF4RCxFQUFBNnJCLFVBQUFyc0IsR0FBQXpELEVBQUFpdkIsT0FBQSxTQUFBcHVCLElBQUFiLEVBQUFpdkIsTUFBQSxFQUFBcHVCLEVBQUEsRUFBQSxFQUFBQSxFQUFBLEVBQUEsRUFBQUEsRUFBQSxFQUFBLEdBQUFiLElBQUFtdEIsU0FBQTRDLE1BQUEvQixVQUFBLEdBQUEvRixPQUFBMEYsUUFBQSxXQUFBLEdBQUF4akIsT0FBQThPLEtBQUE5TyxLQUFBOGQsTUFBQSxJQUFBLE1BQUE5ZCxNQUFBOGQsU0FBQSxFQUFBLE1BQUFqb0IsTUFBQW90QixhQUFBLFdBQUE0QyxNQUFBckMsUUFBQSxXQUFBLE1BQUF4akIsUUFBQThPLEtBQUE5TyxLQUFBNmxCLE1BQUE3bEIsS0FBQTZsQixRQUFBLEdBQUEsUUFBQTVDLGFBQUEsWUFBQXhsQixPQUFBK2xCLFFBQUEsV0FBQSxNQUFBOXBCLElBQUFvSCxTQUFBZCxLQUFBLFVBQUEsYUFBQUEsS0FBQTVGLE1BQUE0RixLQUFBdkMsT0FBQXVDLEtBQUF2QyxTQUFBLEdBQUEsUUFBQXdtQixTQUFBLFNBQUFwdUIsR0FBQSxNQUFBNkQsSUFBQW9ILFNBQUFqTCxFQUFBeUgsT0FBQSxPQUFBd29CLGNBQUF0QixhQUFBLFNBQUEzdUIsR0FBQSxTQUFBQSxFQUFBK3RCLFFBQUEvdEIsRUFBQWt3QixnQkFBQWx3QixFQUFBa3dCLGNBQUFDLFlBQUFud0IsRUFBQSt0QixXQUFBcUMsU0FBQSxTQUFBcHdCLEVBQUFpRSxFQUFBaEQsRUFBQWdDLEdBQUEsR0FBQXhELEdBQUFvRSxHQUFBK0ksT0FBQSxHQUFBL0ksSUFBQStwQixNQUFBM3NCLEdBQUFzRCxLQUFBdkUsRUFBQXF3QixhQUFBLEVBQUFILGtCQUFBanRCLEdBQUFZLEdBQUFtVSxNQUFBMlYsUUFBQWx1QixFQUFBLEtBQUF3RSxHQUFBSixHQUFBbVUsTUFBQWtWLFNBQUE1cUIsS0FBQTJCLEVBQUF4RSxHQUFBQSxFQUFBMHVCLHNCQUFBbHRCLEVBQUFpdEIsbUJBQUFycUIsR0FBQWdYLFlBQUE3VyxHQUFBOFQsb0JBQUEsU0FBQTlYLEVBQUFpRSxFQUFBaEQsR0FBQWpCLEVBQUE4WCxxQkFBQTlYLEVBQUE4WCxvQkFBQTdULEVBQUFoRCxHQUFBLElBQUEsU0FBQWpCLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQSxLQUFBZ0IsQ0FBQWpFLEdBQUErWCxvQkFBQS9YLEdBQUFpRCxLQUFBK0YsS0FBQWhKLEVBQUFpRCxHQUFBLE1BQUFqRCxFQUFBK1gsWUFBQTlVLEVBQUFoQyxLQUFBNEMsR0FBQStwQixNQUFBLFNBQUE1dEIsRUFBQWlFLEdBQUEsTUFBQWtHLGdCQUFBdEcsSUFBQStwQixPQUFBNXRCLEdBQUFBLEVBQUF1RSxNQUFBNEYsS0FBQStsQixjQUFBbHdCLEVBQUFtSyxLQUFBNUYsS0FBQXZFLEVBQUF1RSxLQUFBNEYsS0FBQWdrQixtQkFBQW51QixFQUFBc3dCLGtCQUFBLFNBQUF0d0IsRUFBQXN3QixrQkFBQXR3QixFQUFBbXdCLGVBQUEsRUFBQXBYLEVBQUFDLEdBQUE3TyxLQUFBNUYsS0FBQXZFLEVBQUFpRSxHQUFBSixHQUFBK0ksT0FBQXpDLEtBQUFsRyxHQUFBa0csS0FBQW9tQixVQUFBdndCLEdBQUFBLEVBQUF1d0IsV0FBQTFzQixHQUFBeUMsV0FBQTZELEtBQUF0RyxHQUFBd1UsVUFBQSxJQUFBLEdBQUF4VSxJQUFBK3BCLE1BQUE1dEIsRUFBQWlFLElBQUFKLEdBQUErcEIsTUFBQXhyQixXQUFBK3JCLG1CQUFBblYsRUFBQWlWLHFCQUFBalYsRUFBQXdWLDhCQUFBeFYsRUFBQWtWLGVBQUEsV0FBQSxHQUFBbHVCLEdBQUFtSyxLQUFBK2xCLGFBQUEvbEIsTUFBQWdrQixtQkFBQXBWLEVBQUEvWSxJQUFBQSxFQUFBa3VCLGVBQUFsdUIsRUFBQWt1QixpQkFBQWx1QixFQUFBbXdCLGFBQUEsSUFBQXpCLGdCQUFBLFdBQUEsR0FBQTF1QixHQUFBbUssS0FBQStsQixhQUFBL2xCLE1BQUE4akIscUJBQUFsVixFQUFBL1ksSUFBQUEsRUFBQTB1QixpQkFBQTF1QixFQUFBMHVCLGtCQUFBMXVCLEVBQUF3d0IsY0FBQSxJQUFBQyx5QkFBQSxXQUFBLEdBQUF6d0IsR0FBQW1LLEtBQUErbEIsYUFBQS9sQixNQUFBcWtCLDhCQUFBelYsRUFBQS9ZLEdBQUFBLEVBQUF5d0IsMEJBQUF6d0IsRUFBQXl3QiwyQkFBQXRtQixLQUFBdWtCLG9CQUFBN3FCLEdBQUFnVSxNQUFBNlksV0FBQSxZQUFBQyxXQUFBLFdBQUFDLGFBQUEsY0FBQUMsYUFBQSxjQUFBLFNBQUE3d0IsRUFBQWlFLEdBQUFKLEdBQUFtVSxNQUFBbVYsUUFBQW50QixJQUFBb3RCLGFBQUFucEIsRUFBQW9wQixTQUFBcHBCLEVBQUF3VyxPQUFBLFNBQUF6YSxHQUFBLEdBQUFpQixHQUFBZ0MsRUFBQWtILEtBQUExSyxFQUFBTyxFQUFBNnZCLGNBQUFodkIsRUFBQWIsRUFBQXl1QixTQUFBLFNBQUFodkIsR0FBQUEsSUFBQXdELElBQUFZLEdBQUEraUIsU0FBQTNqQixFQUFBeEQsTUFBQU8sRUFBQXVFLEtBQUExRCxFQUFBeXNCLFNBQUFyc0IsRUFBQUosRUFBQW1zQixRQUFBaGUsTUFBQTdFLEtBQUE0RCxXQUFBL04sRUFBQXVFLEtBQUFOLEdBQUFoRCxNQUFBa0UsR0FBQTJyQixnQkFBQWp0QixHQUFBbVUsTUFBQW1WLFFBQUFoRSxRQUFBc0UsTUFBQSxXQUFBLE9BQUE1cEIsR0FBQW9ILFNBQUFkLEtBQUEsYUFBQXRHLElBQUFtVSxNQUFBMEMsSUFBQXZRLEtBQUEsaUNBQUEsU0FBQW5LLEdBQUEsR0FBQWlFLEdBQUFqRSxFQUFBeUgsT0FBQXhHLEVBQUE0QyxHQUFBb0gsU0FBQWhILEVBQUEsVUFBQUosR0FBQW9ILFNBQUFoSCxFQUFBLFVBQUFBLEVBQUE4c0IsS0FBQSxNQUFBOXZCLEtBQUE0QyxHQUFBd1csTUFBQXBaLEVBQUEsbUJBQUE0QyxHQUFBbVUsTUFBQTBDLElBQUF6WixFQUFBLGlCQUFBLFNBQUFqQixHQUFBQSxFQUFBZ3hCLGdCQUFBLElBQUFudEIsR0FBQXdXLE1BQUFwWixFQUFBLGlCQUFBLE9BQUEwdEIsYUFBQSxTQUFBM3VCLEdBQUFBLEVBQUFneEIsdUJBQUFoeEIsR0FBQWd4QixlQUFBN21CLEtBQUE0USxhQUFBL2EsRUFBQTZ0QixXQUFBaHFCLEdBQUFtVSxNQUFBb1ksU0FBQSxTQUFBam1CLEtBQUE0USxXQUFBL2EsR0FBQSxLQUFBMHRCLFNBQUEsV0FBQSxPQUFBN3BCLEdBQUFvSCxTQUFBZCxLQUFBLGFBQUF0RyxJQUFBbVUsTUFBQXRFLE9BQUF2SixLQUFBLGVBQUFoRixHQUFBOHJCLGdCQUFBcHRCLEdBQUFtVSxNQUFBbVYsUUFBQUwsUUFBQVcsTUFBQSxXQUFBLE1BQUEzb0IsSUFBQXZGLEtBQUE0SyxLQUFBYyxZQUFBLGFBQUFkLEtBQUE1RixNQUFBLFVBQUE0RixLQUFBNUYsUUFBQVYsR0FBQW1VLE1BQUEwQyxJQUFBdlEsS0FBQSx5QkFBQSxTQUFBbkssR0FBQSxZQUFBQSxFQUFBa3dCLGNBQUFnQixlQUFBL21CLEtBQUFnbkIsZUFBQSxLQUFBdHRCLEdBQUFtVSxNQUFBMEMsSUFBQXZRLEtBQUEsZ0JBQUEsU0FBQW5LLEdBQUFtSyxLQUFBZ25CLGdCQUFBbnhCLEVBQUE2dEIsWUFBQTFqQixLQUFBZ25CLGVBQUEsR0FBQXR0QixHQUFBbVUsTUFBQW9ZLFNBQUEsU0FBQWptQixLQUFBbkssR0FBQSxPQUFBLE9BQUE2RCxJQUFBbVUsTUFBQTBDLElBQUF2USxLQUFBLHlCQUFBLFNBQUFuSyxHQUFBLEdBQUFpRSxHQUFBakUsRUFBQXlILE1BQUEzQyxJQUFBdkYsS0FBQTBFLEVBQUFnSCxZQUFBcEgsR0FBQXdXLE1BQUFwVyxFQUFBLG1CQUFBSixHQUFBbVUsTUFBQTBDLElBQUF6VyxFQUFBLGlCQUFBLFNBQUFqRSxJQUFBbUssS0FBQTRRLFlBQUEvYSxFQUFBcXdCLGFBQUFyd0IsRUFBQTZ0QixXQUFBaHFCLEdBQUFtVSxNQUFBb1ksU0FBQSxTQUFBam1CLEtBQUE0USxXQUFBL2EsR0FBQSxLQUFBNkQsR0FBQXdXLE1BQUFwVyxFQUFBLGlCQUFBLE9BQUF3VyxPQUFBLFNBQUF6YSxHQUFBLEdBQUFpRSxHQUFBakUsRUFBQXlILE1BQUEsT0FBQTBDLFFBQUFsRyxHQUFBakUsRUFBQXF3QixhQUFBcndCLEVBQUE2dEIsV0FBQSxVQUFBNXBCLEVBQUFNLE1BQUEsYUFBQU4sRUFBQU0sS0FBQXZFLEVBQUF5dUIsVUFBQXpCLFFBQUFoZSxNQUFBN0UsS0FBQTRELFdBQUEsUUFBQTJmLFNBQUEsV0FBQSxNQUFBN3BCLElBQUFtVSxNQUFBdEUsT0FBQXZKLEtBQUEsYUFBQXJGLEdBQUF2RixLQUFBNEssS0FBQWMsYUFBQTlGLEdBQUFpc0IsZ0JBQUF2dEIsR0FBQWdVLE1BQUFvUSxNQUFBLFVBQUErSCxLQUFBLFlBQUEsU0FBQWh3QixFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQSxTQUFBakIsR0FBQTZELEdBQUFtVSxNQUFBb1ksU0FBQW5zQixFQUFBakUsRUFBQXlILE9BQUE1RCxHQUFBbVUsTUFBQXFXLElBQUFydUIsSUFBQSxHQUFBNkQsSUFBQW1VLE1BQUFtVixRQUFBbHBCLElBQUF3cEIsTUFBQSxXQUFBLEdBQUF4cUIsR0FBQWtILEtBQUEyUCxlQUFBM1AsS0FBQTFLLEVBQUFvRSxHQUFBd1csTUFBQXBYLEVBQUFnQixFQUFBeEUsSUFBQXdELEVBQUFvQixpQkFBQXJFLEVBQUFpQixHQUFBLEdBQUE0QyxHQUFBd1csTUFBQXBYLEVBQUFnQixHQUFBeEUsR0FBQSxHQUFBLElBQUFpdUIsU0FBQSxXQUFBLEdBQUF6cUIsR0FBQWtILEtBQUEyUCxlQUFBM1AsS0FBQTFLLEVBQUFvRSxHQUFBd1csTUFBQXBYLEVBQUFnQixHQUFBLENBQUF4RSxHQUFBb0UsR0FBQXdXLE1BQUFwWCxFQUFBZ0IsRUFBQXhFLElBQUF3RCxFQUFBNlUsb0JBQUE5WCxFQUFBaUIsR0FBQSxHQUFBNEMsR0FBQW9iLFlBQUFoYyxFQUFBZ0IsUUFBQUosR0FBQTZlLEdBQUE5VixRQUFBeWtCLEdBQUEsU0FBQXJ4QixFQUFBaUUsRUFBQWhELEVBQUFnQyxFQUFBeEQsR0FBQSxHQUFBb0IsR0FBQTRDLENBQUEsSUFBQSxnQkFBQXpELEdBQUEsQ0FBQSxnQkFBQWlFLEtBQUFoRCxFQUFBQSxHQUFBZ0QsRUFBQUEsRUFBQSxPQUFBLEtBQUFwRCxJQUFBYixHQUFBbUssS0FBQWtuQixHQUFBeHdCLEVBQUFvRCxFQUFBaEQsRUFBQWpCLEVBQUFhLEdBQUFwQixFQUFBLE9BQUEwSyxNQUFBLEdBQUEsTUFBQWxKLEdBQUEsTUFBQWdDLEdBQUFBLEVBQUFnQixFQUFBaEQsRUFBQWdELEVBQUEsUUFBQSxNQUFBaEIsSUFBQSxnQkFBQWdCLElBQUFoQixFQUFBaEMsRUFBQUEsRUFBQSxTQUFBZ0MsRUFBQWhDLEVBQUFBLEVBQUFnRCxFQUFBQSxFQUFBLFNBQUFoQixLQUFBLEVBQUFBLEVBQUErVixNQUFBLEtBQUEvVixFQUFBLE1BQUFrSCxLQUFBLE9BQUEsS0FBQTFLLElBQUFnRSxFQUFBUixFQUFBQSxFQUFBLFNBQUFqRCxHQUFBLE1BQUE2RCxNQUFBOG5CLElBQUEzckIsR0FBQXlELEVBQUF1TCxNQUFBN0UsS0FBQTRELFlBQUE5SyxFQUFBdVYsS0FBQS9VLEVBQUErVSxPQUFBL1UsRUFBQStVLEtBQUEzVSxHQUFBMlUsU0FBQXJPLEtBQUEwTixLQUFBLFdBQUFoVSxHQUFBbVUsTUFBQTBDLElBQUF2USxLQUFBbkssRUFBQWlELEVBQUFoQyxFQUFBZ0QsTUFBQXF0QixJQUFBLFNBQUF0eEIsRUFBQWlFLEVBQUFoRCxFQUFBZ0MsR0FBQSxNQUFBa0gsTUFBQWtuQixHQUFBcnhCLEVBQUFpRSxFQUFBaEQsRUFBQWdDLEVBQUEsSUFBQTBvQixJQUFBLFNBQUEzckIsRUFBQWlFLEVBQUFoRCxHQUFBLEdBQUFnQyxHQUFBeEQsQ0FBQSxJQUFBTyxHQUFBQSxFQUFBa3VCLGdCQUFBbHVCLEVBQUF5dUIsVUFBQSxNQUFBeHJCLEdBQUFqRCxFQUFBeXVCLFVBQUE1cUIsR0FBQTdELEVBQUFzdUIsZ0JBQUEzQyxJQUFBMW9CLEVBQUFzcUIsVUFBQXRxQixFQUFBcXFCLFNBQUEsSUFBQXJxQixFQUFBc3FCLFVBQUF0cUIsRUFBQXFxQixTQUFBcnFCLEVBQUEyZixTQUFBM2YsRUFBQStwQixTQUFBN2lCLElBQUEsSUFBQSxnQkFBQW5LLEdBQUEsQ0FBQSxJQUFBUCxJQUFBTyxHQUFBbUssS0FBQXdoQixJQUFBbHNCLEVBQUF3RSxFQUFBakUsRUFBQVAsR0FBQSxPQUFBMEssTUFBQSxPQUFBbEcsS0FBQSxHQUFBLGtCQUFBQSxNQUFBaEQsRUFBQWdELEVBQUFBLEVBQUEsUUFBQWhELEtBQUEsSUFBQUEsRUFBQStYLEdBQUE3TyxLQUFBME4sS0FBQSxXQUFBaFUsR0FBQW1VLE1BQUF0RSxPQUFBdkosS0FBQW5LLEVBQUFpQixFQUFBZ0QsTUFBQTBwQixRQUFBLFNBQUEzdEIsRUFBQWlFLEdBQUEsTUFBQWtHLE1BQUEwTixLQUFBLFdBQUFoVSxHQUFBbVUsTUFBQTJWLFFBQUEzdEIsRUFBQWlFLEVBQUFrRyxTQUFBdWhCLGVBQUEsU0FBQTFyQixFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQWtKLEtBQUEsRUFBQSxPQUFBbEosR0FBQTRDLEdBQUFtVSxNQUFBMlYsUUFBQTN0QixFQUFBaUUsRUFBQWhELEdBQUEsR0FBQSxTQUFBLElBQUFtWSxJQUFBLDZKQUFBME0sR0FBQSw2QkFBQWhDLEdBQUEsR0FBQWhqQixRQUFBLE9BQUFzWSxHQUFBLFdBQUEsS0FBQThLLEdBQUEsT0FBQUUsR0FBQSwwRUFBQUMsR0FBQSxZQUFBRSxHQUFBLFVBQUFFLEdBQUEsWUFBQUcsR0FBQSwwQkFBQUMsR0FBQSxvQ0FBQUMsR0FBQSw0QkFBQTVLLEdBQUEsY0FBQTZLLEdBQUEsMkNBQUFkLElBQUFzTixRQUFBLEVBQUEsK0JBQUEsYUFBQUMsUUFBQSxFQUFBLGFBQUEsZUFBQUMsTUFBQSxFQUFBLFFBQUEsVUFBQUMsT0FBQSxFQUFBLFdBQUEsYUFBQUMsT0FBQSxFQUFBLFVBQUEsWUFBQUMsSUFBQSxFQUFBLGlCQUFBLG9CQUFBQyxLQUFBLEVBQUEsbUNBQUEsdUJBQUFDLElBQUEsRUFBQSxxQkFBQSx5QkFBQTFELFNBQUFqcEIsR0FBQXNuQixlQUFBLEVBQUEsR0FBQSxLQUFBLEVBQUEsU0FBQSxXQUFBekgsR0FBQTdMLEVBQUFuVixJQUFBaWhCLEdBQUFELEdBQUFuTCxZQUFBN1YsR0FBQThKLGNBQUEsT0FBQW1XLElBQUE4TixTQUFBOU4sR0FBQXNOLE9BQUF0TixHQUFBdUksTUFBQXZJLEdBQUErTixNQUFBL04sR0FBQWdPLFNBQUFoTyxHQUFBaU8sUUFBQWpPLEdBQUEwTixNQUFBMU4sR0FBQWtPLEdBQUFsTyxHQUFBNk4sR0FBQWp1QixHQUFBK0ksUUFBQXdsQixNQUFBLFNBQUFweUIsRUFBQWlFLEVBQUFoRCxHQUFBLEdBQUFnQyxHQUFBeEQsRUFBQW9CLEVBQUE0QyxFQUFBQyxFQUFBM0QsRUFBQThELEdBQUEraUIsU0FBQTVtQixFQUFBOFosY0FBQTlaLEVBQUEsSUFBQW1GLEdBQUE4VixZQUFBcFgsR0FBQThsQixTQUFBM3BCLEtBQUE4akIsR0FBQXZrQixLQUFBLElBQUFTLEVBQUFpTCxTQUFBLEtBQUFwSyxFQUFBYixFQUFBMHNCLFdBQUEsSUFBQXpILEdBQUEvSixVQUFBbGIsRUFBQWdiLFVBQUFpSyxHQUFBWCxZQUFBempCLEVBQUFva0IsR0FBQXJMLGVBQUF6VSxHQUFBeVYsY0FBQXpWLEdBQUF5bkIsZ0JBQUEsSUFBQTVzQixFQUFBeVgsVUFBQSxLQUFBelgsRUFBQXlYLFVBQUE1VCxHQUFBOGxCLFNBQUEzcEIsSUFBQSxJQUFBaUQsRUFBQXFXLEVBQUF6WSxHQUFBNkMsRUFBQTRWLEVBQUF0WixHQUFBeUQsRUFBQSxFQUFBLE9BQUFoRSxFQUFBaUUsRUFBQUQsTUFBQUEsRUFBQVIsRUFBQVEsSUFBQWtYLEVBQUFsYixFQUFBd0QsRUFBQVEsR0FBQSxJQUFBUSxFQUFBLEdBQUFoRCxFQUFBLElBQUF5QyxFQUFBQSxHQUFBNFYsRUFBQXRaLEdBQUFpRCxFQUFBQSxHQUFBcVcsRUFBQXpZLEdBQUE0QyxFQUFBLEVBQUEsT0FBQWhFLEVBQUFpRSxFQUFBRCxJQUFBQSxJQUFBNlcsRUFBQTdhLEVBQUF3RCxFQUFBUSxRQUFBNlcsR0FBQXRhLEVBQUFhLEVBQUEsT0FBQW9DLEdBQUFxVyxFQUFBelksRUFBQSxVQUFBb0MsRUFBQTdDLE9BQUEsR0FBQWdhLEVBQUFuWCxHQUFBbEQsR0FBQXVaLEVBQUF0WixFQUFBLFdBQUFpRCxFQUFBUyxFQUFBakUsRUFBQSxLQUFBb0IsR0FBQXd4QixjQUFBLFNBQUFyeUIsRUFBQWlFLEVBQUFoRCxFQUFBZ0MsR0FBQSxJQUFBLEdBQUF4RCxHQUFBb0IsRUFBQTRDLEVBQUFDLEVBQUEzRCxFQUFBc0gsRUFBQWhHLEVBQUF2QixFQUFBRSxFQUFBSSxPQUFBRixFQUFBaVosRUFBQWxWLEdBQUFILEtBQUFpQyxFQUFBLEVBQUFqRyxFQUFBaUcsRUFBQUEsSUFBQSxHQUFBbEYsRUFBQWIsRUFBQStGLEdBQUFsRixHQUFBLElBQUFBLEVBQUEsR0FBQSxXQUFBZ0QsR0FBQVUsS0FBQTFELEdBQUFnRCxHQUFBa0osTUFBQWpKLEVBQUFqRCxFQUFBNFcsVUFBQTVXLEdBQUFBLE9BQUEsSUFBQTRqQixHQUFBbGxCLEtBQUFzQixHQUFBLENBQUEsSUFBQTZDLEVBQUFBLEdBQUF4RCxFQUFBMlosWUFBQTVWLEVBQUE2SixjQUFBLFFBQUEvTixHQUFBc2tCLEdBQUF0akIsS0FBQUYsS0FBQSxHQUFBLEtBQUEsR0FBQXVELGNBQUEvQyxFQUFBNGlCLEdBQUFsa0IsSUFBQWtrQixHQUFBbUssU0FBQTFxQixFQUFBd1gsVUFBQTdaLEVBQUEsR0FBQVIsRUFBQWdOLFFBQUF1VyxHQUFBLGFBQUEvaUIsRUFBQSxHQUFBNUIsRUFBQTRCLEVBQUEsR0FBQTVCLEtBQUFpRSxFQUFBQSxFQUFBK2pCLFNBQUEsS0FBQXRpQixHQUFBb25CLG1CQUFBckksR0FBQTNrQixLQUFBc0IsSUFBQWlELEVBQUFLLEtBQUFGLEVBQUF1USxlQUFBMFAsR0FBQW5qQixLQUFBRixHQUFBLE1BQUFzRSxHQUFBcW5CLE1BQUEsSUFBQTNyQixFQUFBLFVBQUFkLEdBQUF3a0IsR0FBQWhsQixLQUFBc0IsR0FBQSxZQUFBUSxFQUFBLElBQUFrakIsR0FBQWhsQixLQUFBc0IsR0FBQSxFQUFBNkMsRUFBQUEsRUFBQWtXLFdBQUFuYSxFQUFBb0IsR0FBQUEsRUFBQTBZLFdBQUFuWixPQUFBWCxLQUFBb0UsR0FBQW9ILFNBQUE1RCxFQUFBeEcsRUFBQTBZLFdBQUE5WixHQUFBLFdBQUE0SCxFQUFBa1MsV0FBQW5aLFFBQUFTLEVBQUF5akIsWUFBQWpkLEVBQUEsS0FBQXhELEdBQUFrSixNQUFBakosRUFBQUosRUFBQTZWLFlBQUE3VixFQUFBd2pCLFlBQUEsR0FBQXhqQixFQUFBa1csWUFBQWxXLEVBQUE0Z0IsWUFBQTVnQixFQUFBa1csV0FBQWxXLEdBQUF4RCxFQUFBdW5CLGNBQUEzakIsR0FBQUssS0FBQUYsRUFBQXVRLGVBQUEzVCxHQUFBLEtBQUE2QyxHQUFBeEQsRUFBQW9rQixZQUFBNWdCLEdBQUF5QixHQUFBd25CLGVBQUE5b0IsR0FBQTZULEtBQUE0QixFQUFBeFYsRUFBQSxTQUFBMFYsR0FBQXpULEVBQUEsRUFBQWxGLEVBQUFpRCxFQUFBaUMsTUFBQSxLQUFBOUMsSUFBQSxJQUFBWSxHQUFBK1QsUUFBQS9XLEVBQUFvQyxNQUFBUSxFQUFBSSxHQUFBK2lCLFNBQUEvbEIsRUFBQWlaLGNBQUFqWixHQUFBNkMsRUFBQTRWLEVBQUFwWixFQUFBMlosWUFBQWhaLEdBQUEsVUFBQTRDLEdBQUEyVyxFQUFBMVcsR0FBQXpDLEdBQUEsSUFBQXhCLEVBQUEsRUFBQW9CLEVBQUE2QyxFQUFBakUsTUFBQXFsQixHQUFBdmxCLEtBQUFzQixFQUFBMEQsTUFBQSxLQUFBdEQsRUFBQWtELEtBQUF0RCxFQUFBLE9BQUE2QyxHQUFBLEtBQUF4RCxHQUFBMlksVUFBQSxTQUFBN1ksRUFBQWlFLEdBQUEsSUFBQSxHQUFBaEIsR0FBQXhELEVBQUFvQixFQUFBNEMsRUFBQUMsRUFBQSxFQUFBM0QsRUFBQThELEdBQUF3VSxRQUFBaFIsRUFBQXhELEdBQUF5VSxNQUFBalgsRUFBQThELEdBQUEyVCxjQUFBaFosRUFBQStELEdBQUFtVSxNQUFBbVYsUUFBQSxPQUFBbHFCLEVBQUFqRCxFQUFBMEQsSUFBQUEsSUFBQSxJQUFBTyxHQUFBSixHQUFBdVUsV0FBQW5WLE1BQUFwQyxFQUFBb0MsRUFBQWxELEdBQUEwRCxFQUFBNUMsR0FBQXdHLEVBQUF4RyxJQUFBLENBQUEsR0FBQTRDLEVBQUErVyxPQUFBLElBQUEvYSxJQUFBZ0UsR0FBQStXLE9BQUExYSxFQUFBTCxHQUFBb0UsR0FBQW1VLE1BQUF0RSxPQUFBelEsRUFBQXhELEdBQUFvRSxHQUFBZ1gsWUFBQTVYLEVBQUF4RCxFQUFBZ0UsRUFBQWdYLE9BQUFwVCxHQUFBeEcsV0FBQXdHLEdBQUF4RyxHQUFBUSxRQUFBNEIsR0FBQWxELFNBQUFrRCxHQUFBa1gsa0JBQUFuUixHQUFBL0YsRUFBQWtYLGdCQUFBcGEsR0FBQWtELEVBQUFsRCxHQUFBLEtBQUFrQixFQUFBa0QsS0FBQXRELFFBQUFnRCxHQUFBNmUsR0FBQTlWLFFBQUFrTyxLQUFBLFNBQUE5YSxHQUFBLE1BQUE2SCxJQUFBc0MsS0FBQSxTQUFBbkssR0FBQSxNQUFBLFVBQUFBLEVBQUE2RCxHQUFBaVgsS0FBQTNRLE1BQUFBLEtBQUFnVSxRQUFBbVUsUUFBQW5vQixLQUFBLElBQUFBLEtBQUEsR0FBQTJQLGVBQUE5VixJQUFBd1EsZUFBQXhVLEtBQUEsS0FBQUEsRUFBQStOLFVBQUEzTixTQUFBa3lCLE9BQUEsV0FBQSxNQUFBbm9CLE1BQUFvb0IsU0FBQXhrQixVQUFBLFNBQUEvTixHQUFBLEdBQUEsSUFBQW1LLEtBQUFzTixVQUFBLEtBQUF0TixLQUFBc04sVUFBQSxJQUFBdE4sS0FBQXNOLFNBQUEsQ0FBQSxHQUFBeFQsR0FBQTBWLEVBQUF4UCxLQUFBbkssRUFBQWlFLEdBQUE0VixZQUFBN1osT0FBQXd5QixRQUFBLFdBQUEsTUFBQXJvQixNQUFBb29CLFNBQUF4a0IsVUFBQSxTQUFBL04sR0FBQSxHQUFBLElBQUFtSyxLQUFBc04sVUFBQSxLQUFBdE4sS0FBQXNOLFVBQUEsSUFBQXROLEtBQUFzTixTQUFBLENBQUEsR0FBQXhULEdBQUEwVixFQUFBeFAsS0FBQW5LLEVBQUFpRSxHQUFBd3VCLGFBQUF6eUIsRUFBQWlFLEVBQUEyVixnQkFBQThZLE9BQUEsV0FBQSxNQUFBdm9CLE1BQUFvb0IsU0FBQXhrQixVQUFBLFNBQUEvTixHQUFBbUssS0FBQTRRLFlBQUE1USxLQUFBNFEsV0FBQTBYLGFBQUF6eUIsRUFBQW1LLFNBQUF3b0IsTUFBQSxXQUFBLE1BQUF4b0IsTUFBQW9vQixTQUFBeGtCLFVBQUEsU0FBQS9OLEdBQUFtSyxLQUFBNFEsWUFBQTVRLEtBQUE0USxXQUFBMFgsYUFBQXp5QixFQUFBbUssS0FBQXdhLGdCQUFBalIsT0FBQSxTQUFBMVQsRUFBQWlFLEdBQUEsSUFBQSxHQUFBaEQsR0FBQWdDLEVBQUFqRCxFQUFBNkQsR0FBQThULE9BQUEzWCxFQUFBbUssTUFBQUEsS0FBQTFLLEVBQUEsRUFBQSxPQUFBd0IsRUFBQWdDLEVBQUF4RCxJQUFBQSxJQUFBd0UsR0FBQSxJQUFBaEQsRUFBQXdXLFVBQUE1VCxHQUFBZ1YsVUFBQVMsRUFBQXJZLElBQUFBLEVBQUE4WixhQUFBOVcsR0FBQUosR0FBQStpQixTQUFBM2xCLEVBQUE2WSxjQUFBN1ksSUFBQW1aLEVBQUFkLEVBQUFyWSxFQUFBLFdBQUFBLEVBQUE4WixXQUFBdUosWUFBQXJqQixHQUFBLE9BQUFrSixPQUFBZ1UsTUFBQSxXQUFBLElBQUEsR0FBQW5lLEdBQUFpRSxFQUFBLEVBQUEsT0FBQWpFLEVBQUFtSyxLQUFBbEcsSUFBQUEsSUFBQSxDQUFBLElBQUEsSUFBQWpFLEVBQUF5WCxVQUFBNVQsR0FBQWdWLFVBQUFTLEVBQUF0WixHQUFBLElBQUFBLEVBQUE0WixZQUFBNVosRUFBQXNrQixZQUFBdGtCLEVBQUE0WixXQUFBNVosR0FBQTR5QixTQUFBL3VCLEdBQUFvSCxTQUFBakwsRUFBQSxZQUFBQSxFQUFBNHlCLFFBQUF4eUIsT0FBQSxHQUFBLE1BQUErSixPQUFBaW9CLE1BQUEsU0FBQXB5QixFQUFBaUUsR0FBQSxNQUFBakUsR0FBQSxNQUFBQSxHQUFBQSxFQUFBaUUsRUFBQSxNQUFBQSxFQUFBakUsRUFBQWlFLEVBQUFrRyxLQUFBeU8sSUFBQSxXQUFBLE1BQUEvVSxJQUFBdXVCLE1BQUFqb0IsS0FBQW5LLEVBQUFpRSxNQUFBNHVCLEtBQUEsU0FBQTd5QixHQUFBLE1BQUE2SCxJQUFBc0MsS0FBQSxTQUFBbkssR0FBQSxHQUFBaUUsR0FBQWtHLEtBQUEsT0FBQWxKLEVBQUEsRUFBQWdDLEVBQUFrSCxLQUFBL0osTUFBQSxJQUFBLFNBQUFKLEVBQUEsTUFBQSxLQUFBaUUsRUFBQXdULFNBQUF4VCxFQUFBaVgsVUFBQXJOLFFBQUFpWSxHQUFBLElBQUEsTUFBQSxNQUFBLGdCQUFBOWxCLElBQUE0a0IsR0FBQXJsQixLQUFBUyxLQUFBbUYsR0FBQXNuQixlQUFBM0ksR0FBQXZrQixLQUFBUyxLQUFBbUYsR0FBQW9uQixtQkFBQXJJLEdBQUEza0IsS0FBQVMsSUFBQWlrQixJQUFBSSxHQUFBdGpCLEtBQUFmLEtBQUEsR0FBQSxLQUFBLEdBQUFvRSxnQkFBQSxDQUFBcEUsRUFBQUEsRUFBQTZOLFFBQUF1VyxHQUFBLFlBQUEsS0FBQSxLQUFBbmhCLEVBQUFoQyxFQUFBQSxJQUFBZ0QsRUFBQWtHLEtBQUFsSixPQUFBLElBQUFnRCxFQUFBd1QsV0FBQTVULEdBQUFnVixVQUFBUyxFQUFBclYsR0FBQSxJQUFBQSxFQUFBaVgsVUFBQWxiLEVBQUFpRSxHQUFBLEVBQUEsTUFBQXhFLEtBQUF3RSxHQUFBa0csS0FBQWdVLFFBQUFtVSxPQUFBdHlCLElBQUEsS0FBQUEsRUFBQStOLFVBQUEzTixTQUFBMHlCLFlBQUEsV0FBQSxHQUFBOXlCLEdBQUErTixVQUFBLEVBQUEsT0FBQTVELE1BQUFvb0IsU0FBQXhrQixVQUFBLFNBQUE5SixHQUFBakUsRUFBQW1LLEtBQUE0USxXQUFBbFgsR0FBQWdWLFVBQUFTLEVBQUFuUCxPQUFBbkssR0FBQUEsRUFBQSt5QixhQUFBOXVCLEVBQUFrRyxRQUFBbkssSUFBQUEsRUFBQUksUUFBQUosRUFBQXlYLFVBQUF0TixLQUFBQSxLQUFBdUosVUFBQWtJLE9BQUEsU0FBQTViLEdBQUEsTUFBQW1LLE1BQUF1SixPQUFBMVQsR0FBQSxJQUFBdXlCLFNBQUEsU0FBQXZ5QixFQUFBaUUsR0FBQWpFLEVBQUFQLEVBQUF1UCxTQUFBaFAsRUFBQSxJQUFBaUIsR0FBQWdDLEVBQUFwQyxFQUFBNEMsRUFBQUMsRUFBQTNELEVBQUFzSCxFQUFBLEVBQUFoRyxFQUFBOEksS0FBQS9KLE9BQUFOLEVBQUFxSyxLQUFBakssRUFBQW1CLEVBQUEsRUFBQXlDLEVBQUE5RCxFQUFBLEdBQUErRixFQUFBbEMsR0FBQTZLLFdBQUE1SyxFQUFBLElBQUFpQyxHQUFBMUUsRUFBQSxHQUFBLGdCQUFBeUMsS0FBQXFCLEdBQUEwbkIsWUFBQWhJLEdBQUF0bEIsS0FBQXVFLEdBQUEsTUFBQXFHLE1BQUEwTixLQUFBLFNBQUE1VyxHQUFBLEdBQUFnQyxHQUFBbkQsRUFBQW9qQixHQUFBamlCLEVBQUE4RSxLQUFBL0YsRUFBQSxHQUFBOEQsRUFBQXhCLEtBQUE2SCxLQUFBbEosRUFBQWdDLEVBQUE0dkIsU0FBQTV2QixFQUFBc3ZCLFNBQUF2eUIsRUFBQWlFLElBQUEsSUFBQTVDLElBQUF0QixFQUFBOEQsR0FBQXd1QixjQUFBcnlCLEVBQUFtSyxLQUFBLEdBQUEyUCxlQUFBLEVBQUEzUCxNQUFBbEosRUFBQWxCLEVBQUE2WixXQUFBLElBQUE3WixFQUFBd1osV0FBQW5aLFNBQUFMLEVBQUFrQixHQUFBQSxHQUFBLENBQUEsSUFBQXdDLEVBQUFJLEdBQUErVSxJQUFBVSxFQUFBdlosRUFBQSxVQUFBZ2EsR0FBQWxaLEVBQUE0QyxFQUFBckQsT0FBQWlCLEVBQUFnRyxFQUFBQSxJQUFBcEUsRUFBQWxELEVBQUFzSCxJQUFBbkgsSUFBQStDLEVBQUFZLEdBQUF1dUIsTUFBQW52QixHQUFBLEdBQUEsR0FBQXBDLEdBQUFnRCxHQUFBa0osTUFBQXRKLEVBQUE2VixFQUFBclcsRUFBQSxZQUFBZ0IsRUFBQTNCLEtBQUE2SCxLQUFBOUMsR0FBQXBFLEVBQUFvRSxFQUFBLElBQUF4RyxFQUFBLElBQUE2QyxFQUFBRCxFQUFBQSxFQUFBckQsT0FBQSxHQUFBMFosY0FBQWpXLEdBQUErVSxJQUFBblYsRUFBQXdXLEdBQUE1UyxFQUFBLEVBQUF4RyxFQUFBd0csRUFBQUEsSUFBQXBFLEVBQUFRLEVBQUE0RCxHQUFBeWQsR0FBQXZsQixLQUFBMEQsRUFBQXNCLE1BQUEsTUFBQVYsR0FBQXdXLE1BQUFwWCxFQUFBLGVBQUFZLEdBQUEraUIsU0FBQWxqQixFQUFBVCxLQUFBQSxFQUFBc0MsSUFBQTFCLEdBQUFtdkIsVUFBQW52QixHQUFBbXZCLFNBQUEvdkIsRUFBQXNDLEtBQUExQixHQUFBMmYsWUFBQXZnQixFQUFBNlgsTUFBQTdYLEVBQUFpa0IsYUFBQWprQixFQUFBaVksV0FBQSxJQUFBck4sUUFBQWtYLEdBQUEsS0FBQWhsQixHQUFBa0IsRUFBQSxLQUFBLE1BQUFrSixTQUFBdEcsR0FBQWdVLE1BQUEwRCxTQUFBLFNBQUEwWCxVQUFBLFVBQUFSLGFBQUEsU0FBQVMsWUFBQSxRQUFBQyxXQUFBLGVBQUEsU0FBQW56QixFQUFBaUUsR0FBQUosR0FBQTZlLEdBQUExaUIsR0FBQSxTQUFBQSxHQUFBLElBQUEsR0FBQWlCLEdBQUFnQyxFQUFBLEVBQUF4RCxLQUFBZ0UsRUFBQUksR0FBQTdELEdBQUEwRCxFQUFBRCxFQUFBckQsT0FBQSxFQUFBc0QsR0FBQVQsRUFBQUEsSUFBQWhDLEVBQUFnQyxJQUFBUyxFQUFBeUcsS0FBQUEsS0FBQWlvQixPQUFBLEdBQUF2dUIsR0FBQUosRUFBQVIsSUFBQWdCLEdBQUFoRCxHQUFBSixFQUFBbU8sTUFBQXZQLEVBQUF3QixFQUFBb2IsTUFBQSxPQUFBbFMsTUFBQTJZLFVBQUFyakIsS0FBQSxJQUFBc2MsSUFBQUQsT0FBQSxXQUFBLEdBQUE5YixFQUFBbUYsSUFBQXdaLGlCQUFBLFdBQUEsR0FBQSxNQUFBM2UsRUFBQSxNQUFBQSxFQUFBQSxJQUFBLENBQUEsSUFBQWlFLEdBQUFoRCxFQUFBZ0MsQ0FBQSxPQUFBaEMsR0FBQStDLEdBQUF1RyxxQkFBQSxRQUFBLEdBQUF0SixHQUFBQSxFQUFBd2IsT0FBQXhZLEVBQUFELEdBQUE4SixjQUFBLE9BQUE3SyxFQUFBZSxHQUFBOEosY0FBQSxPQUFBN0ssRUFBQXdaLE1BQUFxUCxRQUFBLGlFQUFBN3FCLEVBQUE0WSxZQUFBNVcsR0FBQTRXLFlBQUE1VixTQUFBQSxHQUFBd1ksTUFBQWlDLE9BQUExVixLQUFBL0UsRUFBQXdZLE1BQUFxUCxRQUFBLGlKQUFBN25CLEVBQUE0VixZQUFBN1YsR0FBQThKLGNBQUEsUUFBQTJPLE1BQUEzWixNQUFBLE1BQUE5QyxFQUFBLElBQUFpRSxFQUFBOFksYUFBQTliLEVBQUFxakIsWUFBQXJoQixHQUFBakQsR0FBQSxVQUFBLElBQUFpZCxJQUFBRSxHQUFBaVcsR0FBQSxVQUFBaFcsR0FBQSxHQUFBdGMsUUFBQSxLQUFBd0UsR0FBQSxrQkFBQSxLQUFBK3RCLEdBQUEsMkJBQUFyekIsR0FBQXN6QixrQkFBQXJXLEdBQUEsU0FBQWhaLEdBQUEsTUFBQUEsR0FBQTZWLGNBQUEwSSxZQUFBK1EsT0FBQXR2QixFQUFBNlYsY0FBQTBJLFlBQUE4USxpQkFBQXJ2QixFQUFBLE1BQUFqRSxFQUFBc3pCLGlCQUFBcnZCLEVBQUEsT0FBQWtaLEdBQUEsU0FBQW5kLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQXhELEVBQUFvQixFQUFBNEMsRUFBQUMsRUFBQTFELEVBQUF5YyxLQUFBLE9BQUF4YixHQUFBQSxHQUFBZ2MsR0FBQWpkLEdBQUF5RCxFQUFBeEMsRUFBQUEsRUFBQXV5QixpQkFBQXZ2QixJQUFBaEQsRUFBQWdELEdBQUEsT0FBQWhELElBQUEsS0FBQXdDLEdBQUFJLEdBQUEraUIsU0FBQTVtQixFQUFBOFosY0FBQTlaLEtBQUF5RCxFQUFBSSxHQUFBNFksTUFBQXpjLEVBQUFpRSxJQUFBbVosR0FBQTdkLEtBQUFrRSxJQUFBMnZCLEdBQUE3ekIsS0FBQTBFLEtBQUFoQixFQUFBUyxFQUFBWixNQUFBckQsRUFBQWlFLEVBQUErdkIsU0FBQTV5QixFQUFBNkMsRUFBQWd3QixTQUFBaHdCLEVBQUErdkIsU0FBQS92QixFQUFBZ3dCLFNBQUFod0IsRUFBQVosTUFBQVcsRUFBQUEsRUFBQXhDLEVBQUE2QixNQUFBWSxFQUFBWixNQUFBRyxFQUFBUyxFQUFBK3ZCLFNBQUFoMEIsRUFBQWlFLEVBQUFnd0IsU0FBQTd5QixJQUFBLFNBQUE0QyxFQUFBQSxFQUFBQSxFQUFBLEtBQUFPLEdBQUFnWSxnQkFBQTJYLGVBQUExVyxHQUFBLFNBQUFqZCxHQUFBLE1BQUFBLEdBQUEyekIsY0FBQXhXLEdBQUEsU0FBQW5kLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQXhELEVBQUFvQixFQUFBNEMsRUFBQUMsRUFBQTFELEVBQUF5YyxLQUFBLE9BQUF4YixHQUFBQSxHQUFBZ2MsR0FBQWpkLEdBQUF5RCxFQUFBeEMsRUFBQUEsRUFBQWdELEdBQUEsT0FBQSxNQUFBUixHQUFBQyxHQUFBQSxFQUFBTyxLQUFBUixFQUFBQyxFQUFBTyxJQUFBbVosR0FBQTdkLEtBQUFrRSxLQUFBNHZCLEdBQUE5ekIsS0FBQTBFLEtBQUFoQixFQUFBUyxFQUFBa3dCLEtBQUFuMEIsRUFBQU8sRUFBQTZ6QixhQUFBaHpCLEVBQUFwQixHQUFBQSxFQUFBbTBCLEtBQUEveUIsSUFBQXBCLEVBQUFtMEIsS0FBQTV6QixFQUFBMnpCLGFBQUFDLE1BQUFsd0IsRUFBQWt3QixLQUFBLGFBQUEzdkIsRUFBQSxNQUFBUixFQUFBQSxFQUFBQyxFQUFBb3dCLFVBQUEsS0FBQXB3QixFQUFBa3dCLEtBQUEzd0IsRUFBQXBDLElBQUFwQixFQUFBbTBCLEtBQUEveUIsSUFBQSxTQUFBNEMsRUFBQUEsRUFBQUEsRUFBQSxJQUFBLFVBQUEsV0FBQSxRQUFBMUQsS0FBQSxHQUFBa0UsR0FBQWhELEVBQUFnQyxFQUFBbEQsQ0FBQWtCLEdBQUErQyxHQUFBdUcscUJBQUEsUUFBQSxHQUFBdEosR0FBQUEsRUFBQXdiLFFBQUF4WSxFQUFBRCxHQUFBOEosY0FBQSxPQUFBN0ssRUFBQWUsR0FBQThKLGNBQUEsT0FBQTdLLEVBQUF3WixNQUFBcVAsUUFBQSxpRUFBQTdxQixFQUFBNFksWUFBQTVXLEdBQUE0VyxZQUFBNVYsR0FBQUEsRUFBQXdZLE1BQUFxUCxRQUFBLHVLQUFBcnNCLEVBQUFvQixHQUFBLEVBQUE2QyxHQUFBLEVBQUExRCxFQUFBc3pCLG1CQUFBN3pCLEVBQUEsUUFBQU8sRUFBQXN6QixpQkFBQXJ2QixFQUFBLFdBQUFRLElBQUE1RCxFQUFBLFNBQUFiLEVBQUFzekIsaUJBQUFydkIsRUFBQSxRQUFBbkIsTUFBQSxRQUFBQSxNQUFBL0MsRUFBQWtFLEVBQUE0VixZQUFBN1YsR0FBQThKLGNBQUEsUUFBQS9OLEVBQUEwYyxNQUFBcVAsUUFBQTduQixFQUFBd1ksTUFBQXFQLFFBQUEsOEhBQUEvckIsRUFBQTBjLE1BQUFzWCxZQUFBaDBCLEVBQUEwYyxNQUFBM1osTUFBQSxJQUFBbUIsRUFBQXdZLE1BQUEzWixNQUFBLE1BQUFZLEdBQUE0WixZQUFBdGQsRUFBQXN6QixpQkFBQXZ6QixFQUFBLFdBQUFnMEIsYUFBQTl2QixFQUFBcWdCLFlBQUF2a0IsSUFBQWtFLEVBQUFpWCxVQUFBLDhDQUFBbmIsRUFBQWtFLEVBQUFzRyxxQkFBQSxNQUFBeEssRUFBQSxHQUFBMGMsTUFBQXFQLFFBQUEsMkNBQUFyb0IsRUFBQSxJQUFBMUQsRUFBQSxHQUFBaWQsYUFBQXZaLElBQUExRCxFQUFBLEdBQUEwYyxNQUFBZixRQUFBLEdBQUEzYixFQUFBLEdBQUEwYyxNQUFBZixRQUFBLE9BQUFqWSxFQUFBLElBQUExRCxFQUFBLEdBQUFpZCxjQUFBL2IsRUFBQXFqQixZQUFBcmhCLElBQUEsR0FBQWdCLEdBQUFoRCxFQUFBZ0MsRUFBQXhELEVBQUFvQixFQUFBNEMsRUFBQUMsQ0FBQU8sR0FBQUQsR0FBQThKLGNBQUEsT0FBQTdKLEVBQUFpWCxVQUFBLHFFQUFBalksRUFBQWdCLEVBQUFzRyxxQkFBQSxLQUFBLElBQUF0SixFQUFBZ0MsR0FBQUEsRUFBQXdaLFNBQUF4YixFQUFBNnFCLFFBQUEsd0JBQUEzbUIsR0FBQXlZLFFBQUEsUUFBQTNjLEVBQUEyYyxRQUFBelksR0FBQTZ1QixXQUFBL3lCLEVBQUEreUIsU0FBQS92QixFQUFBd1ksTUFBQXdYLGVBQUEsY0FBQWh3QixFQUFBeW9CLFdBQUEsR0FBQWpRLE1BQUF3WCxlQUFBLEdBQUE5dUIsR0FBQSt1QixnQkFBQSxnQkFBQWp3QixFQUFBd1ksTUFBQXdYLGVBQUE5dUIsR0FBQStYLFVBQUEsS0FBQWpjLEVBQUFpYyxXQUFBLEtBQUFqYyxFQUFBa3pCLGNBQUEsS0FBQWx6QixFQUFBbXpCLGdCQUFBdndCLEdBQUErSSxPQUFBekgsSUFBQWt2QixzQkFBQSxXQUFBLE1BQUEsT0FBQTV3QixHQUFBMUQsSUFBQTBELEdBQUE0WixrQkFBQSxXQUFBLE1BQUEsT0FBQXhjLEdBQUFkLElBQUFjLEdBQUF5ekIsY0FBQSxXQUFBLE1BQUEsT0FBQTcwQixHQUFBTSxJQUFBTixHQUFBODBCLG9CQUFBLFdBQUEsTUFBQSxPQUFBN3dCLEdBQUEzRCxJQUFBMkQsU0FBQUcsR0FBQTJ3QixLQUFBLFNBQUF4MEIsRUFBQWlFLEVBQUFoRCxFQUFBZ0MsR0FBQSxHQUFBeEQsR0FBQW9CLEVBQUE0QyxJQUFBLEtBQUE1QyxJQUFBb0QsR0FBQVIsRUFBQTVDLEdBQUFiLEVBQUF5YyxNQUFBNWIsR0FBQWIsRUFBQXljLE1BQUE1YixHQUFBb0QsRUFBQXBELEVBQUFwQixHQUFBd0IsRUFBQStOLE1BQUFoUCxFQUFBaUQsTUFBQSxLQUFBcEMsSUFBQW9ELEdBQUFqRSxFQUFBeWMsTUFBQTViLEdBQUE0QyxFQUFBNUMsRUFBQSxPQUFBcEIsR0FBQSxJQUFBZzFCLElBQUEsa0JBQUFDLEdBQUEsd0JBQUFDLEdBQUEsNEJBQUFoWSxHQUFBLEdBQUE3YixRQUFBLEtBQUF3RSxHQUFBLFNBQUEsS0FBQXN2QixHQUFBLEdBQUE5ekIsUUFBQSxZQUFBd0UsR0FBQSxJQUFBLEtBQUF1dkIsSUFBQUMsU0FBQSxXQUFBQyxXQUFBLFNBQUFyWixRQUFBLFNBQUFzWixJQUFBQyxjQUFBLElBQUFDLFdBQUEsT0FBQTNZLElBQUEsU0FBQSxJQUFBLE1BQUEsS0FBQTFZLElBQUErSSxRQUFBeVMsVUFBQXpCLFNBQUF2QixJQUFBLFNBQUFyYyxFQUFBaUUsR0FBQSxHQUFBQSxFQUFBLENBQUEsR0FBQWhELEdBQUFrYyxHQUFBbmQsRUFBQSxVQUFBLE9BQUEsS0FBQWlCLEVBQUEsSUFBQUEsTUFBQWswQixXQUFBQyxhQUFBLEVBQUFDLGFBQUEsRUFBQUMsVUFBQSxFQUFBQyxZQUFBLEVBQUFMLFlBQUEsRUFBQU0sWUFBQSxFQUFBNVgsU0FBQSxFQUFBNlgsT0FBQSxFQUFBQyxTQUFBLEVBQUFDLFFBQUEsRUFBQUMsUUFBQSxFQUFBbFgsTUFBQSxHQUFBbVgsVUFBQUMsTUFBQTN3QixHQUFBNnVCLFNBQUEsV0FBQSxjQUFBdlgsTUFBQSxTQUFBemMsRUFBQWlFLEVBQUFoRCxFQUFBZ0MsR0FBQSxHQUFBakQsR0FBQSxJQUFBQSxFQUFBeVgsVUFBQSxJQUFBelgsRUFBQXlYLFVBQUF6WCxFQUFBeWMsTUFBQSxDQUFBLEdBQUFoZCxHQUFBb0IsRUFBQTRDLEVBQUFDLEVBQUFHLEdBQUE4VSxVQUFBMVUsR0FBQWxFLEVBQUFDLEVBQUF5YyxLQUFBLElBQUF4WSxFQUFBSixHQUFBZ3lCLFNBQUFueUIsS0FBQUcsR0FBQWd5QixTQUFBbnlCLEdBQUE0WSxFQUFBdmMsRUFBQTJELElBQUFELEVBQUFJLEdBQUF3YixTQUFBcGIsSUFBQUosR0FBQXdiLFNBQUEzYixHQUFBLFNBQUF6QyxFQUFBLE1BQUF3QyxJQUFBLE9BQUFBLElBQUEsVUFBQWhFLEVBQUFnRSxFQUFBNFksSUFBQXJjLEdBQUEsRUFBQWlELElBQUF4RCxFQUFBTSxFQUFBa0UsRUFBQSxJQUFBcEQsUUFBQUksR0FBQSxXQUFBSixJQUFBcEIsRUFBQW0xQixHQUFBN3pCLEtBQUFFLE1BQUFBLEdBQUF4QixFQUFBLEdBQUEsR0FBQUEsRUFBQSxHQUFBNmQsV0FBQXpaLEdBQUE4WCxJQUFBM2IsRUFBQWlFLElBQUFwRCxFQUFBLFVBQUEsTUFBQUksR0FBQUEsSUFBQUEsSUFBQSxXQUFBSixHQUFBZ0QsR0FBQXN4QixVQUFBenhCLEtBQUF6QyxHQUFBLE1BQUFrRSxHQUFBK3VCLGlCQUFBLEtBQUFqekIsR0FBQSxJQUFBZ0QsRUFBQXVCLFFBQUEsZ0JBQUF6RixFQUFBa0UsR0FBQSxhQUFBUixHQUFBLE9BQUFBLElBQUEsVUFBQXhDLEVBQUF3QyxFQUFBc3lCLElBQUEvMUIsRUFBQWlCLEVBQUFnQyxNQUFBLElBQUFsRCxFQUFBa0UsR0FBQWhELEVBQUEsTUFBQW9HLE9BQUFzVSxJQUFBLFNBQUEzYixFQUFBaUUsRUFBQWhELEVBQUFnQztBQUFBLEdBQUF4RCxHQUFBb0IsRUFBQTRDLEVBQUFDLEVBQUFHLEdBQUE4VSxVQUFBMVUsRUFBQSxPQUFBQSxHQUFBSixHQUFBZ3lCLFNBQUFueUIsS0FBQUcsR0FBQWd5QixTQUFBbnlCLEdBQUE0WSxFQUFBdGMsRUFBQXljLE1BQUEvWSxJQUFBRCxFQUFBSSxHQUFBd2IsU0FBQXBiLElBQUFKLEdBQUF3YixTQUFBM2IsR0FBQUQsR0FBQSxPQUFBQSxLQUFBNUMsRUFBQTRDLEVBQUE0WSxJQUFBcmMsR0FBQSxFQUFBaUIsSUFBQSxTQUFBSixJQUFBQSxFQUFBc2MsR0FBQW5kLEVBQUFpRSxFQUFBaEIsSUFBQSxXQUFBcEMsR0FBQW9ELElBQUErd0IsTUFBQW4wQixFQUFBbTBCLEdBQUEvd0IsSUFBQSxLQUFBaEQsR0FBQUEsR0FBQXhCLEVBQUE2ZCxXQUFBemMsR0FBQUksS0FBQSxHQUFBNEMsR0FBQXlmLFVBQUE3akIsR0FBQUEsR0FBQSxFQUFBb0IsR0FBQUEsS0FBQWdELEdBQUFnVSxNQUFBLFNBQUEsU0FBQSxTQUFBN1gsRUFBQWlFLEdBQUFKLEdBQUF3YixTQUFBcGIsSUFBQW9ZLElBQUEsU0FBQXJjLEVBQUFpQixFQUFBZ0MsR0FBQSxNQUFBaEMsR0FBQTB6QixHQUFBcDFCLEtBQUFzRSxHQUFBOFgsSUFBQTNiLEVBQUEsYUFBQSxJQUFBQSxFQUFBK2MsWUFBQWxaLEdBQUEyd0IsS0FBQXgwQixFQUFBNjBCLEdBQUEsV0FBQSxNQUFBL1gsR0FBQTljLEVBQUFpRSxFQUFBaEIsS0FBQTZaLEVBQUE5YyxFQUFBaUUsRUFBQWhCLEdBQUEsUUFBQTh5QixJQUFBLFNBQUEvMUIsRUFBQWlCLEVBQUFnQyxHQUFBLEdBQUF4RCxHQUFBd0QsR0FBQWdhLEdBQUFqZCxFQUFBLE9BQUEwYyxHQUFBMWMsRUFBQWlCLEVBQUFnQyxFQUFBNFosRUFBQTdjLEVBQUFpRSxFQUFBaEIsRUFBQWtDLEdBQUErWCxXQUFBLGVBQUFyWixHQUFBOFgsSUFBQTNiLEVBQUEsYUFBQSxFQUFBUCxHQUFBQSxHQUFBLE9BQUEwRixHQUFBeVksVUFBQS9aLEdBQUF3YixTQUFBekIsU0FBQXZCLElBQUEsU0FBQXJjLEVBQUFpRSxHQUFBLE1BQUF5d0IsSUFBQW4xQixNQUFBMEUsR0FBQWpFLEVBQUEyekIsYUFBQTN6QixFQUFBMnpCLGFBQUFoYyxPQUFBM1gsRUFBQXljLE1BQUE5RSxTQUFBLElBQUEsSUFBQTJGLFdBQUF4YyxPQUFBazFCLElBQUEsR0FBQS94QixFQUFBLElBQUEsSUFBQTh4QixJQUFBLFNBQUEvMUIsRUFBQWlFLEdBQUEsR0FBQWhELEdBQUFqQixFQUFBeWMsTUFBQXhaLEVBQUFqRCxFQUFBMnpCLGFBQUFsMEIsRUFBQW9FLEdBQUF5ZixVQUFBcmYsR0FBQSxpQkFBQSxJQUFBQSxFQUFBLElBQUEsR0FBQXBELEVBQUFvQyxHQUFBQSxFQUFBMFUsUUFBQTFXLEVBQUEwVyxRQUFBLEVBQUExVyxHQUFBeWQsS0FBQSxHQUFBemEsR0FBQSxHQUFBLEtBQUFBLElBQUEsS0FBQUosR0FBQWtMLEtBQUFsTyxFQUFBZ04sUUFBQTRtQixHQUFBLE1BQUF4ekIsRUFBQWtaLGtCQUFBbFosRUFBQWtaLGdCQUFBLFVBQUEsS0FBQWxXLEdBQUFoQixJQUFBQSxFQUFBMFUsVUFBQTFXLEVBQUEwVyxPQUFBOGMsR0FBQWwxQixLQUFBc0IsR0FBQUEsRUFBQWdOLFFBQUE0bUIsR0FBQWgxQixHQUFBb0IsRUFBQSxJQUFBcEIsTUFBQW9FLEdBQUF3YixTQUFBMFUsWUFBQTNYLEVBQUFqWCxHQUFBb3ZCLG9CQUFBLFNBQUF2MEIsRUFBQWlFLEdBQUEsTUFBQUEsR0FBQUosR0FBQTJ3QixLQUFBeDBCLEdBQUEwYixRQUFBLGdCQUFBeUIsSUFBQW5kLEVBQUEsZ0JBQUEsU0FBQTZELEdBQUFnVSxNQUFBb2UsT0FBQSxHQUFBQyxRQUFBLEdBQUFDLE9BQUEsU0FBQSxTQUFBbjJCLEVBQUFpRSxHQUFBSixHQUFBd2IsU0FBQXJmLEVBQUFpRSxJQUFBcWIsT0FBQSxTQUFBcmUsR0FBQSxJQUFBLEdBQUFnQyxHQUFBLEVBQUF4RCxLQUFBb0IsRUFBQSxnQkFBQUksR0FBQUEsRUFBQXFLLE1BQUEsTUFBQXJLLEdBQUEsRUFBQWdDLEVBQUFBLElBQUF4RCxFQUFBTyxFQUFBa0gsR0FBQWpFLEdBQUFnQixHQUFBcEQsRUFBQW9DLElBQUFwQyxFQUFBb0MsRUFBQSxJQUFBcEMsRUFBQSxFQUFBLE9BQUFwQixLQUFBMnpCLEdBQUE3ekIsS0FBQVMsS0FBQTZELEdBQUF3YixTQUFBcmYsRUFBQWlFLEdBQUE4eEIsSUFBQXJaLEtBQUE3WSxHQUFBNmUsR0FBQTlWLFFBQUErTyxJQUFBLFNBQUEzYixFQUFBaUUsR0FBQSxNQUFBNEQsSUFBQXNDLEtBQUEsU0FBQW5LLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQXhELEVBQUFvQixLQUFBNEMsRUFBQSxDQUFBLElBQUFJLEdBQUFtRyxRQUFBL0YsR0FBQSxDQUFBLElBQUFoQixFQUFBZ2EsR0FBQWpkLEdBQUFQLEVBQUF3RSxFQUFBN0QsT0FBQVgsRUFBQWdFLEVBQUFBLElBQUE1QyxFQUFBb0QsRUFBQVIsSUFBQUksR0FBQThYLElBQUEzYixFQUFBaUUsRUFBQVIsSUFBQSxFQUFBUixFQUFBLE9BQUFwQyxHQUFBLE1BQUEsVUFBQUksRUFBQTRDLEdBQUE0WSxNQUFBemMsRUFBQWlFLEVBQUFoRCxHQUFBNEMsR0FBQThYLElBQUEzYixFQUFBaUUsSUFBQWpFLEVBQUFpRSxFQUFBOEosVUFBQTNOLE9BQUEsSUFBQTBlLEtBQUEsV0FBQSxNQUFBdEMsR0FBQXJTLE1BQUEsSUFBQTZVLEtBQUEsV0FBQSxNQUFBeEMsR0FBQXJTLE9BQUFpc0IsT0FBQSxTQUFBcDJCLEdBQUEsTUFBQSxpQkFBQUEsR0FBQUEsRUFBQW1LLEtBQUEyVSxPQUFBM1UsS0FBQTZVLE9BQUE3VSxLQUFBME4sS0FBQSxXQUFBaFYsR0FBQXNILE1BQUF0RyxHQUFBc0csTUFBQTJVLE9BQUFqYixHQUFBc0csTUFBQTZVLFlBQ0FuYixHQUFBMGMsTUFBQWhELEVBQUFBLEVBQUFuYixXQUFBZ1QsWUFBQW1JLEVBQUFDLEtBQUEsU0FBQXhkLEVBQUFpRSxFQUFBaEQsRUFBQWdDLEVBQUF4RCxFQUFBb0IsR0FBQXNKLEtBQUF1VixLQUFBMWYsRUFBQW1LLEtBQUFrc0IsS0FBQXAxQixFQUFBa0osS0FBQXFXLE9BQUEvZ0IsR0FBQSxRQUFBMEssS0FBQXlvQixRQUFBM3VCLEVBQUFrRyxLQUFBK1UsTUFBQS9VLEtBQUE3RCxJQUFBNkQsS0FBQW1zQixNQUFBbnNCLEtBQUFnVixJQUFBbGMsRUFBQWtILEtBQUFvc0IsS0FBQTExQixJQUFBZ0QsR0FBQXN4QixVQUFBbDBCLEdBQUEsR0FBQSxPQUFBcTFCLElBQUEsV0FBQSxHQUFBdDJCLEdBQUF1ZCxFQUFBaVosVUFBQXJzQixLQUFBa3NCLEtBQUEsT0FBQXIyQixJQUFBQSxFQUFBcWMsSUFBQXJjLEVBQUFxYyxJQUFBbFMsTUFBQW9ULEVBQUFpWixVQUFBcEksU0FBQS9SLElBQUFsUyxPQUFBMlYsSUFBQSxTQUFBOWYsR0FBQSxHQUFBaUUsR0FBQWhELEVBQUFzYyxFQUFBaVosVUFBQXJzQixLQUFBa3NCLEtBQUEsT0FBQWxzQixNQUFBc3NCLElBQUF4eUIsRUFBQWtHLEtBQUF5b0IsUUFBQWhULFNBQUEvYixHQUFBMmMsT0FBQXJXLEtBQUFxVyxRQUFBeGdCLEVBQUFtSyxLQUFBeW9CLFFBQUFoVCxTQUFBNWYsRUFBQSxFQUFBLEVBQUFtSyxLQUFBeW9CLFFBQUFoVCxVQUFBNWYsRUFBQW1LLEtBQUE3RCxLQUFBNkQsS0FBQWdWLElBQUFoVixLQUFBK1UsT0FBQWpiLEVBQUFrRyxLQUFBK1UsTUFBQS9VLEtBQUF5b0IsUUFBQThELE1BQUF2c0IsS0FBQXlvQixRQUFBOEQsS0FBQXAwQixLQUFBNkgsS0FBQXVWLEtBQUF2VixLQUFBN0QsSUFBQTZELE1BQUFsSixHQUFBQSxFQUFBODBCLElBQUE5MEIsRUFBQTgwQixJQUFBNXJCLE1BQUFvVCxFQUFBaVosVUFBQXBJLFNBQUEySCxJQUFBNXJCLE1BQUFBLE9BQUFvVCxFQUFBbmIsVUFBQW9iLEtBQUFwYixVQUFBbWIsRUFBQW5iLFVBQUFtYixFQUFBaVosV0FBQXBJLFVBQUEvUixJQUFBLFNBQUFyYyxHQUFBLEdBQUFpRSxFQUFBLE9BQUEsT0FBQWpFLEVBQUEwZixLQUFBMWYsRUFBQXEyQixPQUFBcjJCLEVBQUEwZixLQUFBakQsT0FBQSxNQUFBemMsRUFBQTBmLEtBQUFqRCxNQUFBemMsRUFBQXEyQixPQUFBcHlCLEVBQUFKLEdBQUE4WCxJQUFBM2IsRUFBQTBmLEtBQUExZixFQUFBcTJCLEtBQUEsSUFBQXB5QixHQUFBLFNBQUFBLEVBQUFBLEVBQUEsR0FBQWpFLEVBQUEwZixLQUFBMWYsRUFBQXEyQixPQUFBTixJQUFBLFNBQUEvMUIsR0FBQTZELEdBQUE4YyxHQUFBK1YsS0FBQTEyQixFQUFBcTJCLE1BQUF4eUIsR0FBQThjLEdBQUErVixLQUFBMTJCLEVBQUFxMkIsTUFBQXIyQixHQUFBQSxFQUFBMGYsS0FBQWpELFFBQUEsTUFBQXpjLEVBQUEwZixLQUFBakQsTUFBQTVZLEdBQUFneUIsU0FBQTcxQixFQUFBcTJCLFFBQUF4eUIsR0FBQXdiLFNBQUFyZixFQUFBcTJCLE9BQUF4eUIsR0FBQTRZLE1BQUF6YyxFQUFBMGYsS0FBQTFmLEVBQUFxMkIsS0FBQXIyQixFQUFBc0csSUFBQXRHLEVBQUF1MkIsTUFBQXYyQixFQUFBMGYsS0FBQTFmLEVBQUFxMkIsTUFBQXIyQixFQUFBc0csT0FBQWlYLEVBQUFpWixVQUFBN0csVUFBQXBTLEVBQUFpWixVQUFBakgsWUFBQXdHLElBQUEsU0FBQS8xQixHQUFBQSxFQUFBMGYsS0FBQWpJLFVBQUF6WCxFQUFBMGYsS0FBQTNFLGFBQUEvYSxFQUFBMGYsS0FBQTFmLEVBQUFxMkIsTUFBQXIyQixFQUFBc0csT0FBQXpDLEdBQUEyYyxRQUFBbVcsT0FBQSxTQUFBMzJCLEdBQUEsTUFBQUEsSUFBQTQyQixNQUFBLFNBQUE1MkIsR0FBQSxNQUFBLEdBQUFzRCxLQUFBdXpCLElBQUE3MkIsRUFBQXNELEtBQUF3ekIsSUFBQSxJQUFBanpCLEdBQUE4YyxHQUFBcEQsRUFBQW5iLFVBQUFvYixLQUFBM1osR0FBQThjLEdBQUErVixPQUFBLElBQUFoWixJQUFBcVosR0FBQW5ZLEdBQUEseUJBQUFvWSxHQUFBLEdBQUFsMkIsUUFBQSxpQkFBQXdFLEdBQUEsY0FBQSxLQUFBMnhCLEdBQUEsY0FBQXpYLElBQUF6QixHQUFBRCxJQUFBb1osS0FBQSxTQUFBbDNCLEVBQUFpRSxHQUFBLEdBQUFoRCxHQUFBa0osS0FBQW1XLFlBQUF0Z0IsRUFBQWlFLEdBQUFoQixFQUFBaEMsRUFBQXExQixNQUFBNzJCLEVBQUF1M0IsR0FBQWoyQixLQUFBa0QsR0FBQXBELEVBQUFwQixHQUFBQSxFQUFBLEtBQUFvRSxHQUFBc3hCLFVBQUFuMUIsR0FBQSxHQUFBLE1BQUF5RCxHQUFBSSxHQUFBc3hCLFVBQUFuMUIsSUFBQSxPQUFBYSxJQUFBb0MsSUFBQSt6QixHQUFBajJCLEtBQUE4QyxHQUFBOFgsSUFBQTFhLEVBQUF5ZSxLQUFBMWYsSUFBQTBELEVBQUEsRUFBQTNELEVBQUEsRUFBQSxJQUFBMEQsR0FBQUEsRUFBQSxLQUFBNUMsRUFBQSxDQUFBQSxFQUFBQSxHQUFBNEMsRUFBQSxHQUFBaEUsRUFBQUEsTUFBQWdFLEdBQUFSLEdBQUEsQ0FBQSxHQUFBUyxHQUFBQSxHQUFBLEtBQUFELEdBQUFDLEVBQUFHLEdBQUE0WSxNQUFBeGIsRUFBQXllLEtBQUExZixFQUFBeUQsRUFBQTVDLFNBQUE2QyxLQUFBQSxFQUFBekMsRUFBQXExQixNQUFBcnpCLElBQUEsSUFBQVMsS0FBQTNELEdBQUEsTUFBQU4sS0FBQWdFLEVBQUF4QyxFQUFBaWUsT0FBQXpiLElBQUFSLEdBQUEsRUFBQWhDLEVBQUFzMUIsS0FBQTExQixFQUFBSSxFQUFBa2UsSUFBQTFmLEVBQUEsR0FBQWdFLEdBQUFoRSxFQUFBLEdBQUEsR0FBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUF3QixJQUFBNEMsSUFBQXN6QixVQUFBdHpCLEdBQUErSSxPQUFBMlMsR0FBQTZYLFFBQUEsU0FBQXAzQixFQUFBaUUsR0FBQUosR0FBQTZLLFdBQUExTyxJQUFBaUUsRUFBQWpFLEVBQUFBLEdBQUEsTUFBQUEsRUFBQUEsRUFBQXNMLE1BQUEsSUFBQSxLQUFBLEdBQUFySyxHQUFBZ0MsRUFBQSxFQUFBeEQsRUFBQU8sRUFBQUksT0FBQVgsRUFBQXdELEVBQUFBLElBQUFoQyxFQUFBakIsRUFBQWlELEdBQUE2YSxHQUFBN2MsR0FBQTZjLEdBQUE3YyxPQUFBNmMsR0FBQTdjLEdBQUFzTyxRQUFBdEwsSUFBQW96QixVQUFBLFNBQUFyM0IsRUFBQWlFLEdBQUFBLEVBQUF1YixHQUFBalEsUUFBQXZQLEdBQUF3ZixHQUFBcmIsS0FBQW5FLE1BQUE2RCxHQUFBeXpCLE1BQUEsU0FBQXQzQixFQUFBaUUsRUFBQWhELEdBQUEsR0FBQWdDLEdBQUFqRCxHQUFBLGdCQUFBQSxHQUFBNkQsR0FBQStJLFVBQUE1TSxJQUFBK2dCLFNBQUE5ZixJQUFBQSxHQUFBZ0QsR0FBQUosR0FBQTZLLFdBQUExTyxJQUFBQSxFQUFBNGYsU0FBQTVmLEVBQUF3Z0IsT0FBQXZmLEdBQUFnRCxHQUFBQSxJQUFBSixHQUFBNkssV0FBQXpLLElBQUFBLEVBQUEsT0FBQWhCLEdBQUEyYyxTQUFBL2IsR0FBQThjLEdBQUFnTCxJQUFBLEVBQUEsZ0JBQUExb0IsR0FBQTJjLFNBQUEzYyxFQUFBMmMsU0FBQTNjLEVBQUEyYyxXQUFBL2IsSUFBQThjLEdBQUE0VyxPQUFBMXpCLEdBQUE4YyxHQUFBNFcsT0FBQXQwQixFQUFBMmMsVUFBQS9iLEdBQUE4YyxHQUFBNFcsT0FBQW5KLFVBQUEsTUFBQW5yQixFQUFBK2EsT0FBQS9hLEVBQUErYSxTQUFBLEtBQUEvYSxFQUFBK2EsTUFBQSxNQUFBL2EsRUFBQXUwQixJQUFBdjBCLEVBQUE4ZCxTQUFBOWQsRUFBQThkLFNBQUEsV0FBQWxkLEdBQUE2SyxXQUFBekwsRUFBQXUwQixNQUFBdjBCLEVBQUF1MEIsSUFBQWwxQixLQUFBNkgsTUFBQWxILEVBQUErYSxPQUFBbmEsR0FBQXVvQixRQUFBamlCLEtBQUFsSCxFQUFBK2EsUUFBQS9hLEdBQUFZLEdBQUE2ZSxHQUFBOVYsUUFBQTZxQixPQUFBLFNBQUF6M0IsRUFBQWlFLEVBQUFoRCxFQUFBZ0MsR0FBQSxNQUFBa0gsTUFBQXdOLE9BQUE5VSxJQUFBOFksSUFBQSxVQUFBLEdBQUFtRCxPQUFBSyxNQUFBdVksU0FBQTlaLFFBQUEzWixHQUFBakUsRUFBQWlCLEVBQUFnQyxJQUFBeTBCLFFBQUEsU0FBQTEzQixFQUFBaUUsRUFBQWhELEVBQUFnQyxHQUFBLEdBQUF4RCxHQUFBb0UsR0FBQXNVLGNBQUFuWSxHQUFBYSxFQUFBZ0QsR0FBQXl6QixNQUFBcnpCLEVBQUFoRCxFQUFBZ0MsR0FBQVEsRUFBQSxXQUFBLEdBQUFRLEdBQUFzYixFQUFBcFYsS0FBQXRHLEdBQUErSSxVQUFBNU0sR0FBQWEsSUFBQXBCLEdBQUFvRSxHQUFBd1csTUFBQWxRLEtBQUEsWUFBQWxHLEVBQUF3YyxNQUFBLEdBQUEsT0FBQWhkLEdBQUFrMEIsT0FBQWwwQixFQUFBaEUsR0FBQW9CLEVBQUFtZCxTQUFBLEVBQUE3VCxLQUFBME4sS0FBQXBVLEdBQUEwRyxLQUFBNlQsTUFBQW5kLEVBQUFtZCxNQUFBdmEsSUFBQWdkLEtBQUEsU0FBQXpnQixFQUFBaUUsRUFBQWhELEdBQUEsR0FBQWdDLEdBQUEsU0FBQWpELEdBQUEsR0FBQWlFLEdBQUFqRSxFQUFBeWdCLFdBQUF6Z0IsR0FBQXlnQixLQUFBeGMsRUFBQWhELEdBQUEsT0FBQSxnQkFBQWpCLEtBQUFpQixFQUFBZ0QsRUFBQUEsRUFBQWpFLEVBQUFBLEVBQUEsUUFBQWlFLEdBQUFqRSxLQUFBLEdBQUFtSyxLQUFBNlQsTUFBQWhlLEdBQUEsU0FBQW1LLEtBQUEwTixLQUFBLFdBQUEsR0FBQTVULElBQUEsRUFBQXhFLEVBQUEsTUFBQU8sR0FBQUEsRUFBQSxhQUFBYSxFQUFBZ0QsR0FBQSt6QixPQUFBbjBCLEVBQUFJLEdBQUF3VyxNQUFBbFEsS0FBQSxJQUFBMUssRUFBQWdFLEVBQUFoRSxJQUFBZ0UsRUFBQWhFLEdBQUFnaEIsTUFBQXhkLEVBQUFRLEVBQUFoRSxRQUFBLEtBQUFBLElBQUFnRSxHQUFBQSxFQUFBaEUsSUFBQWdFLEVBQUFoRSxHQUFBZ2hCLE1BQUF3VyxHQUFBMTNCLEtBQUFFLElBQUF3RCxFQUFBUSxFQUFBaEUsR0FBQSxLQUFBQSxFQUFBb0IsRUFBQVQsT0FBQVgsS0FBQW9CLEVBQUFwQixHQUFBaWdCLE9BQUF2VixNQUFBLE1BQUFuSyxHQUFBYSxFQUFBcEIsR0FBQXVlLFFBQUFoZSxJQUFBYSxFQUFBcEIsR0FBQW9oQixLQUFBSixLQUFBeGYsR0FBQWdELEdBQUEsRUFBQXBELEVBQUE2SixPQUFBakwsRUFBQSxLQUFBd0UsSUFBQWhELElBQUE0QyxHQUFBdW9CLFFBQUFqaUIsS0FBQW5LLE1BQUEyM0IsT0FBQSxTQUFBMzNCLEdBQUEsTUFBQUEsTUFBQSxJQUFBQSxFQUFBQSxHQUFBLE1BQUFtSyxLQUFBME4sS0FBQSxXQUFBLEdBQUE1VCxHQUFBaEQsRUFBQTRDLEdBQUF3VyxNQUFBbFEsTUFBQWxILEVBQUFoQyxFQUFBakIsRUFBQSxTQUFBUCxFQUFBd0IsRUFBQWpCLEVBQUEsY0FBQWEsRUFBQWdELEdBQUErekIsT0FBQW4wQixFQUFBUixFQUFBQSxFQUFBN0MsT0FBQSxDQUFBLEtBQUFhLEVBQUEwMkIsUUFBQSxFQUFBOXpCLEdBQUFtYSxNQUFBN1QsS0FBQW5LLE1BQUFQLEdBQUFBLEVBQUFnaEIsTUFBQWhoQixFQUFBZ2hCLEtBQUFuZSxLQUFBNkgsTUFBQSxHQUFBbEcsRUFBQXBELEVBQUFULE9BQUE2RCxLQUFBcEQsRUFBQW9ELEdBQUF5YixPQUFBdlYsTUFBQXRKLEVBQUFvRCxHQUFBK1osUUFBQWhlLElBQUFhLEVBQUFvRCxHQUFBNGMsS0FBQUosTUFBQSxHQUFBNWYsRUFBQTZKLE9BQUF6RyxFQUFBLEdBQUEsS0FBQUEsRUFBQSxFQUFBUixFQUFBUSxFQUFBQSxJQUFBaEIsRUFBQWdCLElBQUFoQixFQUFBZ0IsR0FBQTB6QixRQUFBMTBCLEVBQUFnQixHQUFBMHpCLE9BQUFyMUIsS0FBQTZILFlBQUFsSixHQUFBMDJCLFlBQUE5ekIsR0FBQWdVLE1BQUEsU0FBQSxPQUFBLFFBQUEsU0FBQTdYLEVBQUFpRSxHQUFBLEdBQUFoRCxHQUFBNEMsR0FBQTZlLEdBQUF6ZSxFQUFBSixJQUFBNmUsR0FBQXplLEdBQUEsU0FBQWpFLEVBQUFpRCxFQUFBeEQsR0FBQSxNQUFBLE9BQUFPLEdBQUEsaUJBQUFBLEdBQUFpQixFQUFBK04sTUFBQTdFLEtBQUE0RCxXQUFBNUQsS0FBQXV0QixRQUFBL1osRUFBQTFaLEdBQUEsR0FBQWpFLEVBQUFpRCxFQUFBeEQsTUFBQW9FLEdBQUFnVSxNQUFBZ2dCLFVBQUFsYSxFQUFBLFFBQUFtYSxRQUFBbmEsRUFBQSxRQUFBb2EsWUFBQXBhLEVBQUEsVUFBQXFhLFFBQUFwYSxRQUFBLFFBQUFxYSxTQUFBcmEsUUFBQSxRQUFBc2EsWUFBQXRhLFFBQUEsV0FBQSxTQUFBNWQsRUFBQWlFLEdBQUFKLEdBQUE2ZSxHQUFBMWlCLEdBQUEsU0FBQUEsRUFBQWlCLEVBQUFnQyxHQUFBLE1BQUFrSCxNQUFBdXRCLFFBQUF6ekIsRUFBQWpFLEVBQUFpQixFQUFBZ0MsTUFBQVksR0FBQSt6QixVQUFBL3pCLEdBQUE4YyxHQUFBd1gsS0FBQSxXQUFBLEdBQUFuNEIsR0FBQWlFLEVBQUFKLEdBQUErekIsT0FBQTMyQixFQUFBLENBQUEsS0FBQXljLEdBQUE3WixHQUFBeUMsTUFBQXJGLEVBQUFnRCxFQUFBN0QsT0FBQWEsSUFBQWpCLEVBQUFpRSxFQUFBaEQsR0FBQWpCLEtBQUFpRSxFQUFBaEQsS0FBQWpCLEdBQUFpRSxFQUFBeUcsT0FBQXpKLElBQUEsRUFBQWdELEdBQUE3RCxRQUFBeUQsR0FBQThjLEdBQUFGLE9BQUEvQyxHQUFBLFFBQUE3WixHQUFBOGMsR0FBQUMsTUFBQSxTQUFBNWdCLEdBQUE2RCxHQUFBK3pCLE9BQUF6ekIsS0FBQW5FLEdBQUFBLElBQUE2RCxHQUFBOGMsR0FBQXpCLFFBQUFyYixHQUFBK3pCLE9BQUFyZixPQUFBMVUsR0FBQThjLEdBQUF5WCxTQUFBLEdBQUF2MEIsR0FBQThjLEdBQUF6QixNQUFBLFdBQUE2WCxLQUFBQSxHQUFBc0IsWUFBQXgwQixHQUFBOGMsR0FBQXdYLEtBQUF0MEIsR0FBQThjLEdBQUF5WCxZQUFBdjBCLEdBQUE4YyxHQUFBRixLQUFBLFdBQUE2WCxjQUFBdkIsSUFBQUEsR0FBQSxNQUFBbHpCLEdBQUE4YyxHQUFBNFcsUUFBQWdCLEtBQUEsSUFBQUMsS0FBQSxJQUFBcEssU0FBQSxLQUFBdnFCLEdBQUE2ZSxHQUFBK1YsTUFBQSxTQUFBejRCLEVBQUFpRSxHQUFBLE1BQUFqRSxHQUFBNkQsR0FBQThjLEdBQUE5YyxHQUFBOGMsR0FBQTRXLE9BQUF2M0IsSUFBQUEsRUFBQUEsRUFBQWlFLEVBQUFBLEdBQUEsS0FBQWtHLEtBQUE2VCxNQUFBL1osRUFBQSxTQUFBQSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQStSLFdBQUEvUSxFQUFBakUsRUFBQWlCLEdBQUF3ZixLQUFBLFdBQUFpWSxhQUFBejFCLE9BQUEsV0FBQSxHQUFBakQsR0FBQWlFLEVBQUFoRCxFQUFBZ0MsRUFBQXhELENBQUF3RSxHQUFBRCxHQUFBOEosY0FBQSxPQUFBN0osRUFBQStILGFBQUEsWUFBQSxLQUFBL0gsRUFBQWlYLFVBQUEscUVBQUFqWSxFQUFBZ0IsRUFBQXNHLHFCQUFBLEtBQUEsR0FBQXRKLEVBQUErQyxHQUFBOEosY0FBQSxVQUFBck8sRUFBQXdCLEVBQUE0WSxZQUFBN1YsR0FBQThKLGNBQUEsV0FBQTlOLEVBQUFpRSxFQUFBc0cscUJBQUEsU0FBQSxHQUFBdEgsRUFBQXdaLE1BQUFxUCxRQUFBLFVBQUEzbUIsR0FBQXd6QixnQkFBQSxNQUFBMTBCLEVBQUFvSCxVQUFBbEcsR0FBQXNYLE1BQUEsTUFBQWxkLEtBQUEwRCxFQUFBNEgsYUFBQSxVQUFBMUYsR0FBQXl6QixlQUFBLE9BQUEzMUIsRUFBQTRILGFBQUEsUUFBQTFGLEdBQUEwekIsVUFBQTc0QixFQUFBK0ssTUFBQTVGLEdBQUEyekIsWUFBQXI1QixFQUFBMmIsU0FBQWpXLEdBQUE0ekIsVUFBQS8wQixHQUFBOEosY0FBQSxRQUFBaXJCLFFBQUE5M0IsRUFBQW9uQixVQUFBLEVBQUFsakIsR0FBQTZ6QixhQUFBdjVCLEVBQUE0b0IsU0FBQXJvQixFQUFBZ0UsR0FBQThKLGNBQUEsU0FBQTlOLEVBQUFnTSxhQUFBLFFBQUEsSUFBQTdHLEdBQUFxakIsTUFBQSxLQUFBeG9CLEVBQUE2SyxhQUFBLFNBQUE3SyxFQUFBK0ssTUFBQSxJQUFBL0ssRUFBQWdNLGFBQUEsT0FBQSxTQUFBN0csR0FBQTh6QixXQUFBLE1BQUFqNUIsRUFBQStLLFFBQUEsSUFBQW11QixJQUFBLEtBQUFyMUIsSUFBQTZlLEdBQUE5VixRQUFBdXNCLElBQUEsU0FBQW41QixHQUFBLEdBQUFpRSxHQUFBaEQsRUFBQWdDLEVBQUF4RCxFQUFBMEssS0FBQSxFQUFBLE9BQUE0RCxXQUFBM04sUUFBQTZDLEVBQUFZLEdBQUE2SyxXQUFBMU8sR0FBQW1LLEtBQUEwTixLQUFBLFNBQUE1VyxHQUFBLEdBQUF4QixFQUFBLEtBQUEwSyxLQUFBc04sV0FBQWhZLEVBQUF3RCxFQUFBakQsRUFBQXNDLEtBQUE2SCxLQUFBbEosRUFBQTRDLEdBQUFzRyxNQUFBZ3ZCLE9BQUFuNUIsRUFBQSxNQUFBUCxFQUFBQSxFQUFBLEdBQUEsZ0JBQUFBLEdBQUFBLEdBQUEsR0FBQW9FLEdBQUFtRyxRQUFBdkssS0FBQUEsRUFBQW9FLEdBQUErVSxJQUFBblosRUFBQSxTQUFBTyxHQUFBLE1BQUEsT0FBQUEsRUFBQSxHQUFBQSxFQUFBLE1BQUFpRSxFQUFBSixHQUFBdTFCLFNBQUFqdkIsS0FBQTVGLE9BQUFWLEdBQUF1MUIsU0FBQWp2QixLQUFBYyxTQUFBN0csZUFBQUgsR0FBQSxPQUFBQSxJQUFBLFNBQUFBLEVBQUE4eEIsSUFBQTVyQixLQUFBMUssRUFBQSxXQUFBMEssS0FBQVksTUFBQXRMLE9BQUFBLEdBQUF3RSxFQUFBSixHQUFBdTFCLFNBQUEzNUIsRUFBQThFLE9BQUFWLEdBQUF1MUIsU0FBQTM1QixFQUFBd0wsU0FBQTdHLGVBQUFILEdBQUEsT0FBQUEsSUFBQSxVQUFBaEQsRUFBQWdELEVBQUFvWSxJQUFBNWMsRUFBQSxVQUFBd0IsR0FBQUEsRUFBQXhCLEVBQUFzTCxNQUFBLGdCQUFBOUosR0FBQUEsRUFBQTRNLFFBQUFxckIsR0FBQSxJQUFBLE1BQUFqNEIsRUFBQSxHQUFBQSxJQUFBLFVBQUE0QyxHQUFBK0ksUUFBQXdzQixVQUFBN0gsUUFBQWxWLElBQUEsU0FBQXJjLEdBQUEsR0FBQWlFLEdBQUFKLEdBQUFxRSxLQUFBOFIsS0FBQWhhLEVBQUEsUUFBQSxPQUFBLE9BQUFpRSxFQUFBQSxFQUFBSixHQUFBa0wsS0FBQWxMLEdBQUFpWCxLQUFBOWEsTUFBQXdwQixRQUFBbk4sSUFBQSxTQUFBcmMsR0FBQSxJQUFBLEdBQUFpRSxHQUFBaEQsRUFBQWdDLEVBQUFqRCxFQUFBNHlCLFFBQUFuekIsRUFBQU8sRUFBQXNvQixjQUFBem5CLEVBQUEsZUFBQWIsRUFBQXVFLE1BQUEsRUFBQTlFLEVBQUFnRSxFQUFBNUMsRUFBQSxRQUFBNkMsRUFBQTdDLEVBQUFwQixFQUFBLEVBQUF3RCxFQUFBN0MsT0FBQUwsRUFBQSxFQUFBTixFQUFBaUUsRUFBQTdDLEVBQUFwQixFQUFBLEVBQUFpRSxFQUFBM0QsRUFBQUEsSUFBQSxHQUFBa0IsRUFBQWdDLEVBQUFsRCxNQUFBa0IsRUFBQW1hLFVBQUFyYixJQUFBTixJQUFBMEYsR0FBQTZ6QixZQUFBLzNCLEVBQUFvbkIsU0FBQSxPQUFBcG5CLEVBQUE0SixhQUFBLGNBQUE1SixFQUFBOFosV0FBQXNOLFVBQUF4a0IsR0FBQW9ILFNBQUFoSyxFQUFBOFosV0FBQSxhQUFBLENBQUEsR0FBQTlXLEVBQUFKLEdBQUE1QyxHQUFBazRCLE1BQUF0NEIsRUFBQSxNQUFBb0QsRUFBQVIsR0FBQVUsS0FBQUYsR0FBQSxNQUFBUixJQUFBc3lCLElBQUEsU0FBQS8xQixFQUFBaUUsR0FBQSxJQUFBLEdBQUFoRCxHQUFBZ0MsRUFBQXhELEVBQUFPLEVBQUE0eUIsUUFBQS94QixFQUFBZ0QsR0FBQThmLFVBQUExZixHQUFBUixFQUFBaEUsRUFBQVcsT0FBQXFELEtBQUEsR0FBQVIsRUFBQXhELEVBQUFnRSxHQUFBSSxHQUFBK1QsUUFBQS9ULEdBQUF1MUIsU0FBQTdILE9BQUFsVixJQUFBcFosR0FBQXBDLElBQUEsRUFBQSxJQUFBb0MsRUFBQW1ZLFNBQUFuYSxHQUFBLEVBQUEsTUFBQXlDLEdBQUFULEVBQUFvMkIsaUJBQUFwMkIsR0FBQW1ZLFVBQUEsQ0FBQSxPQUFBbmEsS0FBQWpCLEVBQUFzb0IsZUFBQSxHQUFBN29CLE9BQUFvRSxHQUFBZ1UsTUFBQSxRQUFBLFlBQUEsV0FBQWhVLEdBQUF1MUIsU0FBQWp2QixPQUFBNHJCLElBQUEsU0FBQS8xQixFQUFBaUUsR0FBQSxNQUFBSixJQUFBbUcsUUFBQS9GLEdBQUFqRSxFQUFBMFosUUFBQTdWLEdBQUErVCxRQUFBL1QsR0FBQTdELEdBQUFtNUIsTUFBQWwxQixJQUFBLEVBQUEsU0FBQWtCLEdBQUEwekIsVUFBQWgxQixHQUFBdTFCLFNBQUFqdkIsTUFBQWtTLElBQUEsU0FBQXJjLEdBQUEsTUFBQSxRQUFBQSxFQUFBNkssYUFBQSxTQUFBLEtBQUE3SyxFQUFBK0ssU0FBQSxJQUFBdXVCLElBQUFDLEdBQUFDLEdBQUEzMUIsR0FBQTRsQixLQUFBakYsV0FBQWlWLEdBQUEsMEJBQUFDLEdBQUF2MEIsR0FBQXd6QixnQkFBQWdCLEdBQUF4MEIsR0FBQXFqQixLQUFBM2tCLElBQUE2ZSxHQUFBOVYsUUFBQW9OLEtBQUEsU0FBQWhhLEVBQUFpRSxHQUFBLE1BQUE0RCxJQUFBc0MsS0FBQXRHLEdBQUFtVyxLQUFBaGEsRUFBQWlFLEVBQUE4SixVQUFBM04sT0FBQSxJQUFBdzVCLFdBQUEsU0FBQTU1QixHQUFBLE1BQUFtSyxNQUFBME4sS0FBQSxXQUFBaFUsR0FBQSsxQixXQUFBenZCLEtBQUFuSyxRQUFBNkQsR0FBQStJLFFBQUFvTixLQUFBLFNBQUFoYSxFQUFBaUUsRUFBQWhELEdBQUEsR0FBQWdDLEdBQUF4RCxFQUFBb0IsRUFBQWIsRUFBQXlYLFFBQUEsSUFBQXpYLEdBQUEsSUFBQWEsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEVBQUEsYUFBQWIsR0FBQTZLLGVBQUE3QixHQUFBbkYsR0FBQXd5QixLQUFBcjJCLEVBQUFpRSxFQUFBaEQsSUFBQSxJQUFBSixHQUFBZ0QsR0FBQThsQixTQUFBM3BCLEtBQUFpRSxFQUFBQSxFQUFBRyxjQUFBbkIsRUFBQVksR0FBQWcyQixVQUFBNTFCLEtBQUFKLEdBQUE0bEIsS0FBQWhXLE1BQUFrUyxLQUFBcG1CLEtBQUEwRSxHQUFBczFCLEdBQUFELEtBQUEsU0FBQXI0QixFQUFBZ0MsR0FBQSxPQUFBQSxJQUFBLFFBQUF4RCxFQUFBd0QsRUFBQW9aLElBQUFyYyxFQUFBaUUsSUFBQXhFLEdBQUFBLEVBQUFvRSxHQUFBcUUsS0FBQThSLEtBQUFoYSxFQUFBaUUsR0FBQSxNQUFBeEUsRUFBQSxPQUFBQSxHQUFBLE9BQUF3QixFQUFBZ0MsR0FBQSxPQUFBQSxJQUFBLFVBQUF4RCxFQUFBd0QsRUFBQTh5QixJQUFBLzFCLEVBQUFpQixFQUFBZ0QsSUFBQXhFLEdBQUFPLEVBQUFnTSxhQUFBL0gsRUFBQWhELEVBQUEsSUFBQUEsT0FBQTRDLElBQUErMUIsV0FBQTU1QixFQUFBaUUsS0FBQTIxQixXQUFBLFNBQUE1NUIsRUFBQWlFLEdBQUEsR0FBQWhELEdBQUFnQyxFQUFBeEQsRUFBQSxFQUFBb0IsRUFBQW9ELEdBQUFBLEVBQUF3UCxNQUFBalAsR0FBQSxJQUFBM0QsR0FBQSxJQUFBYixFQUFBeVgsU0FBQSxLQUFBeFcsRUFBQUosRUFBQXBCLE1BQUF3RCxFQUFBWSxHQUFBaTJCLFFBQUE3NEIsSUFBQUEsRUFBQTRDLEdBQUE0bEIsS0FBQWhXLE1BQUFrUyxLQUFBcG1CLEtBQUEwQixHQUFBMDRCLElBQUFELEtBQUFELEdBQUFsNkIsS0FBQTBCLEdBQUFqQixFQUFBaUQsSUFBQSxFQUFBakQsRUFBQTZELEdBQUE4VSxVQUFBLFdBQUExWCxJQUFBakIsRUFBQWlELElBQUEsRUFBQVksR0FBQW1XLEtBQUFoYSxFQUFBaUIsRUFBQSxJQUFBakIsRUFBQW1hLGdCQUFBdWYsR0FBQXo0QixFQUFBZ0MsSUFBQTQyQixXQUFBdDFCLE1BQUF3eEIsSUFBQSxTQUFBLzFCLEVBQUFpRSxHQUFBLElBQUFrQixHQUFBOHpCLFlBQUEsVUFBQWgxQixHQUFBSixHQUFBb0gsU0FBQWpMLEVBQUEsU0FBQSxDQUFBLEdBQUFpQixHQUFBakIsRUFBQStLLEtBQUEsT0FBQS9LLEdBQUFnTSxhQUFBLE9BQUEvSCxHQUFBaEQsSUFBQWpCLEVBQUErSyxNQUFBOUosR0FBQWdELFFBQUFzMUIsSUFBQXhELElBQUEsU0FBQS8xQixFQUFBaUUsRUFBQWhELEdBQUEsTUFBQWdELE1BQUEsRUFBQUosR0FBQSsxQixXQUFBNTVCLEVBQUFpQixHQUFBMDRCLElBQUFELEtBQUFELEdBQUFsNkIsS0FBQTBCLEdBQUFqQixFQUFBZ00sY0FBQTB0QixJQUFBNzFCLEdBQUFpMkIsUUFBQTc0QixJQUFBQSxFQUFBQSxHQUFBakIsRUFBQTZELEdBQUE4VSxVQUFBLFdBQUExWCxJQUFBakIsRUFBQWlCLElBQUEsRUFBQUEsSUFBQTRDLEdBQUFnVSxLQUFBaFUsR0FBQTRsQixLQUFBaFcsTUFBQWtTLEtBQUF4UixPQUFBVixNQUFBLFFBQUEsU0FBQXpULEVBQUFpRSxHQUFBLEdBQUFoRCxHQUFBdTRCLEdBQUF2MUIsSUFBQUosR0FBQXFFLEtBQUE4UixJQUFBd2YsSUFBQXYxQixHQUFBMDFCLElBQUFELEtBQUFELEdBQUFsNkIsS0FBQTBFLEdBQUEsU0FBQWpFLEVBQUFpRSxFQUFBaEIsR0FBQSxHQUFBeEQsR0FBQW9CLENBQUEsT0FBQW9DLEtBQUFwQyxFQUFBMjRCLEdBQUF2MUIsR0FBQXUxQixHQUFBdjFCLEdBQUF4RSxFQUFBQSxFQUFBLE1BQUF3QixFQUFBakIsRUFBQWlFLEVBQUFoQixHQUFBZ0IsRUFBQUcsY0FBQSxLQUFBbzFCLEdBQUF2MUIsR0FBQXBELEdBQUFwQixHQUFBLFNBQUFPLEVBQUFpRSxFQUFBaEQsR0FBQSxNQUFBQSxHQUFBLE9BQUFqQixFQUFBNkQsR0FBQThVLFVBQUEsV0FBQTFVLElBQUFBLEVBQUFHLGNBQUEsUUFBQXUxQixJQUFBRCxLQUFBNzFCLEdBQUFnMkIsVUFBQTl1QixPQUFBZ3JCLElBQUEsU0FBQS8xQixFQUFBaUUsRUFBQWhELEdBQUEsTUFBQTRDLElBQUFvSCxTQUFBakwsRUFBQSxjQUFBQSxFQUFBcWIsYUFBQXBYLEdBQUFxMUIsSUFBQUEsR0FBQXZELElBQUEvMUIsRUFBQWlFLEVBQUFoRCxNQUFBeTRCLEtBQUFKLElBQUF2RCxJQUFBLFNBQUEvMUIsRUFBQWlFLEVBQUFoRCxHQUFBLEdBQUFnQyxHQUFBakQsRUFBQW9tQixpQkFBQW5sQixFQUFBLE9BQUFnQyxJQUFBakQsRUFBQSs1QixpQkFBQTkyQixFQUFBakQsRUFBQThaLGNBQUFrZ0IsZ0JBQUEvNEIsSUFBQWdDLEVBQUE4SCxNQUFBOUcsR0FBQSxHQUFBLFVBQUFoRCxHQUFBZ0QsSUFBQWpFLEVBQUE2SyxhQUFBNUosR0FBQWdELEVBQUEsU0FBQXUxQixHQUFBL3NCLEdBQUErc0IsR0FBQXQ2QixLQUFBczZCLEdBQUFTLE9BQUEsU0FBQWo2QixFQUFBaUUsRUFBQWhELEdBQUEsR0FBQWdDLEVBQUEsT0FBQWhDLEdBQUEsUUFBQWdDLEVBQUFqRCxFQUFBb21CLGlCQUFBbmlCLEtBQUEsS0FBQWhCLEVBQUE4SCxNQUFBOUgsRUFBQThILE1BQUEsTUFBQWxILEdBQUF1MUIsU0FBQTNRLFFBQUFwTSxJQUFBLFNBQUFyYyxFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQWpCLEVBQUFvbUIsaUJBQUFuaUIsRUFBQSxPQUFBaEQsSUFBQUEsRUFBQTZsQixVQUFBN2xCLEVBQUE4SixNQUFBLFFBQUFnckIsSUFBQXVELEdBQUF2RCxLQUFBbHlCLEdBQUFnMkIsVUFBQUssaUJBQUFuRSxJQUFBLFNBQUEvMUIsRUFBQWlFLEVBQUFoRCxHQUFBcTRCLEdBQUF2RCxJQUFBLzFCLEVBQUEsS0FBQWlFLEdBQUFBLEVBQUFoRCxLQUFBNEMsR0FBQWdVLE1BQUEsUUFBQSxVQUFBLFNBQUE3WCxFQUFBaUUsR0FBQUosR0FBQWcyQixVQUFBNTFCLElBQUE4eEIsSUFBQSxTQUFBLzFCLEVBQUFpQixHQUFBLE1BQUEsS0FBQUEsR0FBQWpCLEVBQUFnTSxhQUFBL0gsRUFBQSxRQUFBaEQsR0FBQSxZQUFBa0UsR0FBQXNYLFFBQUE1WSxHQUFBZzJCLFVBQUFwZCxPQUFBSixJQUFBLFNBQUFyYyxHQUFBLE1BQUFBLEdBQUF5YyxNQUFBcVAsU0FBQSxRQUFBaUssSUFBQSxTQUFBLzFCLEVBQUFpRSxHQUFBLE1BQUFqRSxHQUFBeWMsTUFBQXFQLFFBQUE3bkIsRUFBQSxLQUFBLElBQUFrMkIsSUFBQSw2Q0FBQUMsR0FBQSxlQUFBdjJCLElBQUE2ZSxHQUFBOVYsUUFBQXlwQixLQUFBLFNBQUFyMkIsRUFBQWlFLEdBQUEsTUFBQTRELElBQUFzQyxLQUFBdEcsR0FBQXd5QixLQUFBcjJCLEVBQUFpRSxFQUFBOEosVUFBQTNOLE9BQUEsSUFBQWk2QixXQUFBLFNBQUFyNkIsR0FBQSxNQUFBQSxHQUFBNkQsR0FBQWkyQixRQUFBOTVCLElBQUFBLEVBQUFtSyxLQUFBME4sS0FBQSxXQUFBLElBQUExTixLQUFBbkssR0FBQSxhQUFBbUssTUFBQW5LLEdBQUEsTUFBQWlFLFVBQUFKLEdBQUErSSxRQUFBa3RCLFNBQUFRLElBQUEsVUFBQUMsTUFBQSxhQUFBbEUsS0FBQSxTQUFBcjJCLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQXhELEVBQUFvQixFQUFBNEMsRUFBQXpELEVBQUF5WCxRQUFBLElBQUF6WCxHQUFBLElBQUF5RCxHQUFBLElBQUFBLEdBQUEsSUFBQUEsRUFBQSxNQUFBNUMsR0FBQSxJQUFBNEMsSUFBQUksR0FBQThsQixTQUFBM3BCLEdBQUFhLElBQUFvRCxFQUFBSixHQUFBaTJCLFFBQUE3MUIsSUFBQUEsRUFBQXhFLEVBQUFvRSxHQUFBMnlCLFVBQUF2eUIsSUFBQSxTQUFBaEQsRUFBQXhCLEdBQUEsT0FBQUEsSUFBQSxVQUFBd0QsRUFBQXhELEVBQUFzMkIsSUFBQS8xQixFQUFBaUIsRUFBQWdELElBQUFoQixFQUFBakQsRUFBQWlFLEdBQUFoRCxFQUFBeEIsR0FBQSxPQUFBQSxJQUFBLFFBQUF3RCxFQUFBeEQsRUFBQTRjLElBQUFyYyxFQUFBaUUsSUFBQWhCLEVBQUFqRCxFQUFBaUUsSUFBQXV5QixXQUFBck8sVUFBQTlMLElBQUEsU0FBQXJjLEdBQUEsR0FBQWlFLEdBQUFKLEdBQUFxRSxLQUFBOFIsS0FBQWhhLEVBQUEsV0FBQSxPQUFBaUUsR0FBQXJCLFNBQUFxQixFQUFBLElBQUFrMkIsR0FBQTU2QixLQUFBUyxFQUFBaUwsV0FBQW12QixHQUFBNzZCLEtBQUFTLEVBQUFpTCxXQUFBakwsRUFBQXFHLEtBQUEsR0FBQSxPQUFBbEIsR0FBQXl6QixnQkFBQS8wQixHQUFBZ1UsTUFBQSxPQUFBLE9BQUEsU0FBQTdYLEVBQUFpRSxHQUFBSixHQUFBMnlCLFVBQUF2eUIsSUFBQW9ZLElBQUEsU0FBQXJjLEdBQUEsTUFBQUEsR0FBQTZLLGFBQUE1RyxFQUFBLE9BQUFrQixHQUFBMnpCLGNBQUFqMUIsR0FBQTJ5QixVQUFBcGIsVUFBQWlCLElBQUEsU0FBQXJjLEdBQUEsR0FBQWlFLEdBQUFqRSxFQUFBK2EsVUFBQSxPQUFBOVcsS0FBQUEsRUFBQXFrQixjQUFBcmtCLEVBQUE4VyxZQUFBOVcsRUFBQThXLFdBQUF1TixlQUFBLFFBQUF6a0IsR0FBQWdVLE1BQUEsV0FBQSxXQUFBLFlBQUEsY0FBQSxjQUFBLFVBQUEsVUFBQSxTQUFBLGNBQUEsbUJBQUEsV0FBQWhVLEdBQUFpMkIsUUFBQTN2QixLQUFBL0YsZUFBQStGLE9BQUFoRixHQUFBNHpCLFVBQUFsMUIsR0FBQWkyQixRQUFBZixRQUFBLFdBQUEsSUFBQXlCLElBQUEsYUFBQTMyQixJQUFBNmUsR0FBQTlWLFFBQUE2dEIsU0FBQSxTQUFBejZCLEdBQUEsR0FBQWlFLEdBQUFoRCxFQUFBZ0MsRUFBQXhELEVBQUFvQixFQUFBNEMsRUFBQUMsRUFBQSxFQUFBM0QsRUFBQW9LLEtBQUEvSixPQUFBaUgsRUFBQSxnQkFBQXJILElBQUFBLENBQUEsSUFBQTZELEdBQUE2SyxXQUFBMU8sR0FBQSxNQUFBbUssTUFBQTBOLEtBQUEsU0FBQTVULEdBQUFKLEdBQUFzRyxNQUFBc3dCLFNBQUF6NkIsRUFBQXNDLEtBQUE2SCxLQUFBbEcsRUFBQWtHLEtBQUFrQixhQUFBLElBQUFoRSxFQUFBLElBQUFwRCxHQUFBakUsR0FBQSxJQUFBeVQsTUFBQWpQLFFBQUF6RSxFQUFBMkQsRUFBQUEsSUFBQSxHQUFBekMsRUFBQWtKLEtBQUF6RyxHQUFBVCxFQUFBLElBQUFoQyxFQUFBd1csV0FBQXhXLEVBQUFvSyxXQUFBLElBQUFwSyxFQUFBb0ssVUFBQSxLQUFBd0MsUUFBQTJzQixHQUFBLEtBQUEsS0FBQSxDQUFBLElBQUEzNUIsRUFBQSxFQUFBcEIsRUFBQXdFLEVBQUFwRCxNQUFBb0MsRUFBQXVDLFFBQUEsSUFBQS9GLEVBQUEsS0FBQSxJQUFBd0QsR0FBQXhELEVBQUEsSUFBQWdFLEdBQUFJLEdBQUFrTCxLQUFBOUwsR0FBQWhDLEVBQUFvSyxZQUFBNUgsSUFBQXhDLEVBQUFvSyxVQUFBNUgsR0FBQSxNQUFBMEcsT0FBQXV3QixZQUFBLFNBQUExNkIsR0FBQSxHQUFBaUUsR0FBQWhELEVBQUFnQyxFQUFBeEQsRUFBQW9CLEVBQUE0QyxFQUFBQyxFQUFBLEVBQUEzRCxFQUFBb0ssS0FBQS9KLE9BQUFpSCxFQUFBLElBQUEwRyxVQUFBM04sUUFBQSxnQkFBQUosSUFBQUEsQ0FBQSxJQUFBNkQsR0FBQTZLLFdBQUExTyxHQUFBLE1BQUFtSyxNQUFBME4sS0FBQSxTQUFBNVQsR0FBQUosR0FBQXNHLE1BQUF1d0IsWUFBQTE2QixFQUFBc0MsS0FBQTZILEtBQUFsRyxFQUFBa0csS0FBQWtCLGFBQUEsSUFBQWhFLEVBQUEsSUFBQXBELEdBQUFqRSxHQUFBLElBQUF5VCxNQUFBalAsUUFBQXpFLEVBQUEyRCxFQUFBQSxJQUFBLEdBQUF6QyxFQUFBa0osS0FBQXpHLEdBQUFULEVBQUEsSUFBQWhDLEVBQUF3VyxXQUFBeFcsRUFBQW9LLFdBQUEsSUFBQXBLLEVBQUFvSyxVQUFBLEtBQUF3QyxRQUFBMnNCLEdBQUEsS0FBQSxJQUFBLENBQUEsSUFBQTM1QixFQUFBLEVBQUFwQixFQUFBd0UsRUFBQXBELE1BQUEsS0FBQW9DLEVBQUF1QyxRQUFBLElBQUEvRixFQUFBLE1BQUEsR0FBQXdELEVBQUFBLEVBQUE0SyxRQUFBLElBQUFwTyxFQUFBLElBQUEsSUFBQWdFLEdBQUF6RCxFQUFBNkQsR0FBQWtMLEtBQUE5TCxHQUFBLEdBQUFoQyxFQUFBb0ssWUFBQTVILElBQUF4QyxFQUFBb0ssVUFBQTVILEdBQUEsTUFBQTBHLE9BQUF3d0IsWUFBQSxTQUFBMzZCLEVBQUFpRSxHQUFBLEdBQUFoRCxTQUFBakIsRUFBQSxPQUFBLGlCQUFBaUUsSUFBQSxXQUFBaEQsRUFBQWdELEVBQUFrRyxLQUFBc3dCLFNBQUF6NkIsR0FBQW1LLEtBQUF1d0IsWUFBQTE2QixHQUFBbUssS0FBQTBOLEtBQUFoVSxHQUFBNkssV0FBQTFPLEdBQUEsU0FBQWlCLEdBQUE0QyxHQUFBc0csTUFBQXd3QixZQUFBMzZCLEVBQUFzQyxLQUFBNkgsS0FBQWxKLEVBQUFrSixLQUFBa0IsVUFBQXBILEdBQUFBLElBQUEsV0FBQSxHQUFBLFdBQUFoRCxFQUFBLElBQUEsR0FBQWdELEdBQUFoQixFQUFBLEVBQUF4RCxFQUFBb0UsR0FBQXNHLE1BQUF0SixFQUFBYixFQUFBeVQsTUFBQWpQLFFBQUFQLEVBQUFwRCxFQUFBb0MsTUFBQXhELEVBQUFtN0IsU0FBQTMyQixHQUFBeEUsRUFBQWk3QixZQUFBejJCLEdBQUF4RSxFQUFBZzdCLFNBQUF4MkIsUUFBQWhELElBQUErSCxJQUFBLFlBQUEvSCxLQUFBa0osS0FBQWtCLFdBQUF4SCxHQUFBd1csTUFBQWxRLEtBQUEsZ0JBQUFBLEtBQUFrQixXQUFBbEIsS0FBQWtCLFVBQUFsQixLQUFBa0IsV0FBQXJMLEtBQUEsRUFBQSxHQUFBNkQsR0FBQXdXLE1BQUFsUSxLQUFBLGtCQUFBLE9BQUF5d0IsU0FBQSxTQUFBNTZCLEdBQUEsSUFBQSxHQUFBaUUsR0FBQSxJQUFBakUsRUFBQSxJQUFBaUIsRUFBQSxFQUFBZ0MsRUFBQWtILEtBQUEvSixPQUFBNkMsRUFBQWhDLEVBQUFBLElBQUEsR0FBQSxJQUFBa0osS0FBQWxKLEdBQUF3VyxXQUFBLElBQUF0TixLQUFBbEosR0FBQW9LLFVBQUEsS0FBQXdDLFFBQUEyc0IsR0FBQSxLQUFBaDFCLFFBQUF2QixJQUFBLEVBQUEsT0FBQSxDQUFBLFFBQUEsS0FBQUosR0FBQWdVLEtBQUEsME1BQUF2TSxNQUFBLEtBQUEsU0FBQXRMLEVBQUFpRSxHQUFBSixHQUFBNmUsR0FBQXplLEdBQUEsU0FBQWpFLEVBQUFpQixHQUFBLE1BQUE4TSxXQUFBM04sT0FBQSxFQUFBK0osS0FBQWtuQixHQUFBcHRCLEVBQUEsS0FBQWpFLEVBQUFpQixHQUFBa0osS0FBQXdqQixRQUFBMXBCLE1BQUFKLEdBQUE2ZSxHQUFBOVYsUUFBQWl1QixNQUFBLFNBQUE3NkIsRUFBQWlFLEdBQUEsTUFBQWtHLE1BQUF1bUIsV0FBQTF3QixHQUFBMndCLFdBQUExc0IsR0FBQWpFLElBQUE4USxLQUFBLFNBQUE5USxFQUFBaUUsRUFBQWhELEdBQUEsTUFBQWtKLE1BQUFrbkIsR0FBQXJ4QixFQUFBLEtBQUFpRSxFQUFBaEQsSUFBQTY1QixPQUFBLFNBQUE5NkIsRUFBQWlFLEdBQUEsTUFBQWtHLE1BQUF3aEIsSUFBQTNyQixFQUFBLEtBQUFpRSxJQUFBODJCLFNBQUEsU0FBQS82QixFQUFBaUUsRUFBQWhELEVBQUFnQyxHQUFBLE1BQUFrSCxNQUFBa25CLEdBQUFwdEIsRUFBQWpFLEVBQUFpQixFQUFBZ0MsSUFBQSszQixXQUFBLFNBQUFoN0IsRUFBQWlFLEVBQUFoRCxHQUFBLE1BQUEsS0FBQThNLFVBQUEzTixPQUFBK0osS0FBQXdoQixJQUFBM3JCLEVBQUEsTUFBQW1LLEtBQUF3aEIsSUFBQTFuQixFQUFBakUsR0FBQSxLQUFBaUIsS0FBQSxJQUFBZzZCLElBQUFwM0IsR0FBQXlDLE1BQUE0MEIsR0FBQSxLQUFBQyxHQUFBLGtJQUFBdDNCLElBQUFxVSxVQUFBLFNBQUFqVSxHQUFBLEdBQUFqRSxFQUFBb0QsTUFBQXBELEVBQUFvRCxLQUFBK00sTUFBQSxNQUFBblEsR0FBQW9ELEtBQUErTSxNQUFBbE0sRUFBQSxHQUFBLElBQUFoRCxHQUFBZ0MsRUFBQSxLQUFBeEQsRUFBQW9FLEdBQUFrTCxLQUFBOUssRUFBQSxHQUFBLE9BQUF4RSxLQUFBb0UsR0FBQWtMLEtBQUF0UCxFQUFBb08sUUFBQXN0QixHQUFBLFNBQUFuN0IsRUFBQWlFLEVBQUF4RSxFQUFBb0IsR0FBQSxNQUFBSSxJQUFBZ0QsSUFBQWhCLEVBQUEsR0FBQSxJQUFBQSxFQUFBakQsR0FBQWlCLEVBQUF4QixHQUFBd0UsRUFBQWhCLElBQUFwQyxHQUFBcEIsRUFBQSxPQUFBK1csU0FBQSxVQUFBL1csS0FBQW9FLEdBQUE0UixNQUFBLGlCQUFBeFIsSUFBQUosR0FBQXUzQixTQUFBLFNBQUFuM0IsR0FBQSxHQUFBaEQsR0FBQWdDLENBQUEsS0FBQWdCLEdBQUEsZ0JBQUFBLEdBQUEsTUFBQSxLQUFBLEtBQUFqRSxFQUFBcTdCLFdBQUFwNEIsRUFBQSxHQUFBbzRCLFdBQUFwNkIsRUFBQWdDLEVBQUFxNEIsZ0JBQUFyM0IsRUFBQSxjQUFBaEQsRUFBQSxHQUFBcWhCLGVBQUEsb0JBQUFyaEIsRUFBQXM2QixNQUFBLFFBQUF0NkIsRUFBQXU2QixRQUFBdjNCLElBQUEsTUFBQXhFLEdBQUF3QixFQUFBLE9BQUEsTUFBQUEsSUFBQUEsRUFBQSthLGtCQUFBL2EsRUFBQXNKLHFCQUFBLGVBQUFuSyxRQUFBeUQsR0FBQTRSLE1BQUEsZ0JBQUF4UixHQUFBaEQsRUFBQSxJQUFBdzZCLElBQUFDLEdBQUFDLEdBQUEsT0FBQUMsR0FBQSxnQkFBQUMsR0FBQSxnQ0FBQUMsR0FBQSw0REFBQUMsR0FBQSxpQkFBQUMsR0FBQSxRQUFBQyxHQUFBLDREQUFBQyxNQUFBOWEsTUFBQSthLEdBQUEsS0FBQW4wQixPQUFBLElBQUEsS0FBQTB6QixHQUFBdDFCLFNBQUFDLEtBQUEsTUFBQSsxQixHQUFBVixHQUFBMTNCLEdBQUE4SixjQUFBLEtBQUE0dEIsR0FBQXIxQixLQUFBLEdBQUFxMUIsR0FBQUEsR0FBQXIxQixLQUFBbzFCLEdBQUFRLEdBQUFsN0IsS0FBQTI2QixHQUFBdDNCLG1CQUFBUCxHQUFBK0ksUUFBQXl2QixPQUFBLEVBQUFDLGdCQUFBQyxRQUFBamIsY0FBQTdhLElBQUFpMUIsR0FBQW4zQixLQUFBLE1BQUFpNEIsUUFBQVYsR0FBQXY4QixLQUFBazhCLEdBQUEsSUFBQW5sQixRQUFBLEVBQUFtbUIsYUFBQSxFQUFBbEIsT0FBQSxFQUFBbUIsWUFBQSxtREFBQUMsU0FBQXpGLElBQUFpRixHQUFBcmhCLEtBQUEsYUFBQStYLEtBQUEsWUFBQStKLElBQUEsNEJBQUFDLEtBQUEscUNBQUFwYixVQUFBbWIsSUFBQSxNQUFBL0osS0FBQSxPQUFBZ0ssS0FBQSxRQUFBL2EsZ0JBQUE4YSxJQUFBLGNBQUE5aEIsS0FBQSxlQUFBK2hCLEtBQUEsZ0JBQUFqYixZQUFBa2IsU0FBQTc4QixPQUFBODhCLGFBQUEsRUFBQUMsWUFBQW41QixHQUFBcVUsVUFBQStrQixXQUFBcDVCLEdBQUF1M0IsVUFBQTdaLGFBQUE5YSxLQUFBLEVBQUF1YyxTQUFBLElBQUFrYSxVQUFBLFNBQUFsOUIsRUFBQWlFLEdBQUEsTUFBQUEsR0FBQW9kLEVBQUFBLEVBQUFyaEIsRUFBQTZELEdBQUF5ZCxjQUFBcmQsR0FBQW9kLEVBQUF4ZCxHQUFBeWQsYUFBQXRoQixJQUFBbTlCLGNBQUFsYyxFQUFBaWIsSUFBQWtCLGNBQUFuYyxFQUFBRyxJQUFBaWMsS0FBQSxTQUFBcjlCLEVBQUFpRSxHQUFBLFFBQUE0QyxHQUFBN0csRUFBQWlFLEVBQUFoRCxFQUFBZ0MsR0FBQSxHQUFBb0UsR0FBQTNILEVBQUFZLEVBQUFELEVBQUE0RSxFQUFBNEIsRUFBQTVDLENBQUEsS0FBQXBFLElBQUFBLEVBQUEsRUFBQTRELEdBQUFpMUIsYUFBQWoxQixHQUFBMUQsRUFBQSxPQUFBYyxFQUFBb0MsR0FBQSxHQUFBVyxFQUFBNk4sV0FBQXpSLEVBQUEsRUFBQSxFQUFBLEVBQUFxSCxFQUFBckgsR0FBQSxLQUFBLElBQUFBLEdBQUEsTUFBQUEsRUFBQWlCLElBQUFaLEVBQUFtaEIsRUFBQXJjLEVBQUF2QixFQUFBM0MsSUFBQVosRUFBQXdoQixFQUFBMWMsRUFBQTlFLEVBQUF1RCxFQUFBeUQsR0FBQUEsR0FBQWxDLEVBQUFtNEIsYUFBQXI0QixFQUFBckIsRUFBQStkLGtCQUFBLGlCQUFBMWMsSUFBQXBCLEdBQUF5NEIsYUFBQTc4QixHQUFBd0YsR0FBQUEsRUFBQXJCLEVBQUErZCxrQkFBQSxRQUFBMWMsSUFBQXBCLEdBQUEwNEIsS0FBQTk4QixHQUFBd0YsSUFBQSxNQUFBakYsR0FBQSxTQUFBbUYsRUFBQVosS0FBQXNDLEVBQUEsWUFBQSxNQUFBN0csRUFBQTZHLEVBQUEsZUFBQUEsRUFBQXhHLEVBQUE0aEIsTUFBQXZpQixFQUFBVyxFQUFBdVAsS0FBQXRQLEVBQUFELEVBQUFvVixNQUFBcE8sR0FBQS9HLEtBQUFBLEVBQUF1RyxHQUFBN0csSUFBQTZHLEtBQUFBLEVBQUEsUUFBQSxFQUFBN0csSUFBQUEsRUFBQSxLQUFBNEQsRUFBQThOLE9BQUExUixFQUFBNEQsRUFBQW1PLFlBQUE5TixHQUFBNEMsR0FBQSxHQUFBUSxFQUFBbkgsRUFBQThmLFlBQUEzZSxHQUFBM0IsRUFBQW1ILEVBQUFqRCxJQUFBMUQsRUFBQXdnQixXQUFBcmYsR0FBQXVDLEVBQUFpRCxFQUFBdkcsSUFBQXNELEVBQUEyNUIsV0FBQXgzQixHQUFBQSxFQUFBLE9BQUFyQyxHQUFBNUQsRUFBQTZ0QixRQUFBdG1CLEVBQUEsY0FBQSxhQUFBekQsRUFBQXVCLEVBQUFrQyxFQUFBM0gsRUFBQVksSUFBQXdELEVBQUFzbkIsU0FBQS9wQixHQUFBdUMsRUFBQWlELElBQUFuRCxJQUFBNUQsRUFBQTZ0QixRQUFBLGdCQUFBL3BCLEVBQUF1QixNQUFBdEIsR0FBQXc0QixRQUFBeDRCLEdBQUFtVSxNQUFBMlYsUUFBQSxjQUFBLGdCQUFBM3RCLEtBQUFpRSxFQUFBakUsRUFBQUEsRUFBQSxRQUFBaUUsRUFBQUEsS0FBQSxJQUFBaEQsR0FBQWdDLEVBQUF4RCxFQUFBb0IsRUFBQTRDLEVBQUFDLEVBQUEzRCxFQUFBc0gsRUFBQWxDLEVBQUF0QixHQUFBcTVCLGFBQUFqNUIsR0FBQTVDLEVBQUE4RCxFQUFBNmQsU0FBQTdkLEVBQUFyRixFQUFBcUYsRUFBQTZkLFVBQUEzaEIsRUFBQW9XLFVBQUFwVyxFQUFBc2hCLFFBQUE5ZSxHQUFBeEMsR0FBQXdDLEdBQUFtVSxNQUFBOVgsRUFBQTJELEdBQUE0YixXQUFBM2IsRUFBQUQsR0FBQWduQixVQUFBLGVBQUE5a0IsRUFBQVosRUFBQW80QixlQUFBNzlCLEtBQUFZLEtBQUFULEVBQUEsRUFBQVEsRUFBQSxXQUFBdUQsR0FBQTZOLFdBQUEsRUFBQWtRLGtCQUFBLFNBQUEzaEIsR0FBQSxHQUFBaUUsRUFBQSxJQUFBLElBQUFwRSxFQUFBLENBQUEsSUFBQXdILEVBQUEsSUFBQUEsS0FBQXBELEVBQUE0M0IsR0FBQTk2QixLQUFBRixJQUFBd0csRUFBQXBELEVBQUEsR0FBQUcsZUFBQUgsRUFBQSxFQUFBQSxHQUFBb0QsRUFBQXJILEVBQUFvRSxlQUFBLE1BQUEsT0FBQUgsRUFBQSxLQUFBQSxHQUFBMk4sc0JBQUEsV0FBQSxNQUFBLEtBQUEvUixFQUFBZ0IsRUFBQSxNQUFBc1IsaUJBQUEsU0FBQW5TLEVBQUFpRSxHQUFBLEdBQUFoRCxHQUFBakIsRUFBQW9FLGFBQUEsT0FBQXZFLEtBQUFHLEVBQUFNLEVBQUFXLEdBQUFYLEVBQUFXLElBQUFqQixFQUFBTixFQUFBTSxHQUFBaUUsR0FBQWtHLE1BQUFxekIsaUJBQUEsU0FBQXg5QixHQUFBLE1BQUFILEtBQUFzRixFQUFBdWMsU0FBQTFoQixHQUFBbUssTUFBQW96QixXQUFBLFNBQUF2OUIsR0FBQSxHQUFBaUUsRUFBQSxJQUFBakUsRUFBQSxHQUFBLEVBQUFILEVBQUEsSUFBQW9FLElBQUFqRSxHQUFBK0YsRUFBQTlCLElBQUE4QixFQUFBOUIsR0FBQWpFLEVBQUFpRSxRQUFBTCxHQUFBeWEsT0FBQXJlLEVBQUE0RCxFQUFBOE4sUUFBQSxPQUFBdkgsT0FBQXNJLE1BQUEsU0FBQXpTLEdBQUEsR0FBQWlFLEdBQUFqRSxHQUFBSyxDQUFBLE9BQUFOLElBQUFBLEVBQUEwUyxNQUFBeE8sR0FBQTRDLEVBQUEsRUFBQTVDLEdBQUFrRyxNQUFBLElBQUFqSyxFQUFBc1MsUUFBQTVPLEdBQUFtZCxTQUFBamQsRUFBQTRXLElBQUE5VyxFQUFBNjVCLFFBQUE3NUIsRUFBQW1iLEtBQUFuYixFQUFBNlIsTUFBQTdSLEVBQUFvZCxLQUFBN2IsRUFBQXNCLE1BQUF6RyxHQUFBbUYsRUFBQXNCLEtBQUFpMUIsSUFBQSxJQUFBN3RCLFFBQUE4dEIsR0FBQSxJQUFBOXRCLFFBQUFtdUIsR0FBQVAsR0FBQSxHQUFBLE1BQUF0MkIsRUFBQVosS0FBQU4sRUFBQW1MLFFBQUFuTCxFQUFBTSxNQUFBWSxFQUFBaUssUUFBQWpLLEVBQUFaLEtBQUFZLEVBQUFnYyxVQUFBdGQsR0FBQWtMLEtBQUE1SixFQUFBNmMsVUFBQSxLQUFBNWQsY0FBQXFQLE1BQUFqUCxNQUFBLElBQUEsTUFBQVcsRUFBQXU0QixjQUFBejhCLEVBQUFnN0IsR0FBQWw3QixLQUFBb0UsRUFBQXNCLElBQUFyQyxlQUFBZSxFQUFBdTRCLGVBQUF6OEIsR0FBQUEsRUFBQSxLQUFBdzZCLEdBQUEsSUFBQXg2QixFQUFBLEtBQUF3NkIsR0FBQSxLQUFBeDZCLEVBQUEsS0FBQSxVQUFBQSxFQUFBLEdBQUEsS0FBQSxXQUFBdzZCLEdBQUEsS0FBQSxVQUFBQSxHQUFBLEdBQUEsS0FBQSxVQUFBdDJCLEVBQUF5SyxNQUFBekssRUFBQXMzQixhQUFBLGdCQUFBdDNCLEdBQUF5SyxPQUFBekssRUFBQXlLLEtBQUEvTCxHQUFBNnRCLE1BQUF2c0IsRUFBQXlLLEtBQUF6SyxFQUFBdzRCLGNBQUF6YyxFQUFBZ2IsR0FBQS8yQixFQUFBbEIsRUFBQUwsR0FBQSxJQUFBL0QsRUFBQSxNQUFBK0QsRUFBQUYsR0FBQUcsR0FBQW1VLE9BQUE3UyxFQUFBbVIsT0FBQTVTLEdBQUEsSUFBQUcsR0FBQXc0QixVQUFBeDRCLEdBQUFtVSxNQUFBMlYsUUFBQSxhQUFBeG9CLEVBQUFaLEtBQUFZLEVBQUFaLEtBQUFxTSxjQUFBekwsRUFBQXk0QixZQUFBN0IsR0FBQXg4QixLQUFBNEYsRUFBQVosTUFBQTlFLEVBQUEwRixFQUFBc0IsSUFBQXRCLEVBQUF5NEIsYUFBQXo0QixFQUFBeUssT0FBQW5RLEVBQUEwRixFQUFBc0IsTUFBQXkwQixHQUFBMzdCLEtBQUFFLEdBQUEsSUFBQSxLQUFBMEYsRUFBQXlLLFdBQUF6SyxHQUFBeUssTUFBQXpLLEVBQUFtVCxTQUFBLElBQUFuVCxFQUFBc0IsSUFBQW0xQixHQUFBcjhCLEtBQUFFLEdBQUFBLEVBQUFvTyxRQUFBK3RCLEdBQUEsT0FBQVgsTUFBQXg3QixHQUFBeTdCLEdBQUEzN0IsS0FBQUUsR0FBQSxJQUFBLEtBQUEsS0FBQXc3QixPQUFBOTFCLEVBQUFtNEIsYUFBQXo1QixHQUFBeTRCLGFBQUE3OEIsSUFBQW1FLEVBQUF1TyxpQkFBQSxvQkFBQXRPLEdBQUF5NEIsYUFBQTc4QixJQUFBb0UsR0FBQTA0QixLQUFBOThCLElBQUFtRSxFQUFBdU8saUJBQUEsZ0JBQUF0TyxHQUFBMDRCLEtBQUE5OEIsTUFBQTBGLEVBQUF5SyxNQUFBekssRUFBQXk0QixZQUFBejRCLEVBQUF1M0IsZUFBQSxHQUFBejRCLEVBQUF5NEIsY0FBQTk0QixFQUFBdU8saUJBQUEsZUFBQWhOLEVBQUF1M0IsYUFBQTk0QixFQUFBdU8saUJBQUEsU0FBQWhOLEVBQUFnYyxVQUFBLElBQUFoYyxFQUFBdzNCLFFBQUF4M0IsRUFBQWdjLFVBQUEsSUFBQWhjLEVBQUF3M0IsUUFBQXgzQixFQUFBZ2MsVUFBQSxLQUFBLE1BQUFoYyxFQUFBZ2MsVUFBQSxHQUFBLEtBQUFnYixHQUFBLFdBQUEsSUFBQWgzQixFQUFBdzNCLFFBQUEsS0FBQSxLQUFBMTVCLElBQUFrQyxHQUFBc0wsUUFBQTdNLEVBQUF1TyxpQkFBQWxQLEVBQUFrQyxFQUFBc0wsUUFBQXhOLEdBQUEsSUFBQWtDLEVBQUEwNEIsYUFBQTE0QixFQUFBMDRCLFdBQUF2N0IsS0FBQWpCLEVBQUF1QyxFQUFBdUIsTUFBQSxHQUFBLElBQUF0RixHQUFBLE1BQUErRCxHQUFBNk8sT0FBQXBTLEdBQUEsT0FBQSxLQUFBNEMsS0FBQXc2QixRQUFBLEVBQUFob0IsTUFBQSxFQUFBc0wsU0FBQSxHQUFBbmQsRUFBQVgsR0FBQWtDLEVBQUFsQyxHQUFBLElBQUFsRCxFQUFBbWhCLEVBQUFFLEdBQUFqYyxFQUFBbEIsRUFBQUwsR0FBQSxDQUFBQSxFQUFBNk4sV0FBQSxFQUFBL04sR0FBQTVELEVBQUE2dEIsUUFBQSxZQUFBL3BCLEVBQUF1QixJQUFBQSxFQUFBbzJCLE9BQUFwMkIsRUFBQWlMLFFBQUEsSUFBQTNNLEVBQUF1UixXQUFBLFdBQUFwUixFQUFBNk8sTUFBQSxZQUFBdE4sRUFBQWlMLFNBQUEsS0FBQXZRLEVBQUEsRUFBQUUsRUFBQTJTLEtBQUFoVCxFQUFBbUgsR0FBQSxNQUFBNUIsR0FBQSxLQUFBLEVBQUFwRixHQUFBLEtBQUFvRixFQUFBNEIsSUFBQSxFQUFBNUIsUUFBQTRCLElBQUEsRUFBQSxlQUFBLE9BQUFqRCxJQUFBazZCLFFBQUEsU0FBQTk5QixFQUFBaUUsRUFBQWhELEdBQUEsTUFBQTRDLElBQUF3WSxJQUFBcmMsRUFBQWlFLEVBQUFoRCxFQUFBLFNBQUE4OEIsVUFBQSxTQUFBLzlCLEVBQUFpRSxHQUFBLE1BQUFKLElBQUF3WSxJQUFBcmMsRUFBQSxPQUFBaUUsRUFBQSxhQUFBSixHQUFBZ1UsTUFBQSxNQUFBLFFBQUEsU0FBQTdYLEVBQUFpRSxHQUFBSixHQUFBSSxHQUFBLFNBQUFqRSxFQUFBaUIsRUFBQWdDLEVBQUF4RCxHQUFBLE1BQUFvRSxJQUFBNkssV0FBQXpOLEtBQUF4QixFQUFBQSxHQUFBd0QsRUFBQUEsRUFBQWhDLEVBQUFBLEVBQUEsUUFBQTRDLEdBQUF3NUIsTUFBQTUyQixJQUFBekcsRUFBQXVFLEtBQUFOLEVBQUErZCxTQUFBdmlCLEVBQUFtUSxLQUFBM08sRUFBQXc4QixRQUFBeDZCLE9BQUFZLEdBQUFtdkIsU0FBQSxTQUFBaHpCLEdBQUEsTUFBQTZELElBQUF3NUIsTUFBQTUyQixJQUFBekcsRUFBQXVFLEtBQUEsTUFBQXlkLFNBQUEsU0FBQXVaLE9BQUEsRUFBQWpsQixRQUFBLEVBQUEwbkIsUUFBQSxLQUFBbjZCLEdBQUE2ZSxHQUFBOVYsUUFBQXF4QixRQUFBLFNBQUFqK0IsR0FBQSxHQUFBNkQsR0FBQTZLLFdBQUExTyxHQUFBLE1BQUFtSyxNQUFBME4sS0FBQSxTQUFBNVQsR0FBQUosR0FBQXNHLE1BQUE4ekIsUUFBQWorQixFQUFBc0MsS0FBQTZILEtBQUFsRyxLQUFBLElBQUFrRyxLQUFBLEdBQUEsQ0FBQSxHQUFBbEcsR0FBQUosR0FBQTdELEVBQUFtSyxLQUFBLEdBQUEyUCxlQUFBb0osR0FBQSxHQUFBa1AsT0FBQSxFQUFBam9CLE1BQUEsR0FBQTRRLFlBQUE5VyxFQUFBd3VCLGFBQUF0b0IsS0FBQSxJQUFBbEcsRUFBQTJVLElBQUEsV0FBQSxJQUFBLEdBQUE1WSxHQUFBbUssS0FBQW5LLEVBQUE0WixZQUFBLElBQUE1WixFQUFBNFosV0FBQW5DLFVBQUF6WCxFQUFBQSxFQUFBNFosVUFBQSxPQUFBNVosS0FBQXN5QixPQUFBbm9CLE1BQUEsTUFBQUEsT0FBQSt6QixVQUFBLFNBQUFsK0IsR0FBQSxNQUFBbUssTUFBQTBOLEtBQUFoVSxHQUFBNkssV0FBQTFPLEdBQUEsU0FBQWlFLEdBQUFKLEdBQUFzRyxNQUFBK3pCLFVBQUFsK0IsRUFBQXNDLEtBQUE2SCxLQUFBbEcsS0FBQSxXQUFBLEdBQUFBLEdBQUFKLEdBQUFzRyxNQUFBbEosRUFBQWdELEVBQUF3ZCxVQUFBeGdCLEdBQUFiLE9BQUFhLEVBQUFnOUIsUUFBQWorQixHQUFBaUUsRUFBQXF1QixPQUFBdHlCLE1BQUFtK0IsS0FBQSxTQUFBbitCLEdBQUEsR0FBQWlFLEdBQUFKLEdBQUE2SyxXQUFBMU8sRUFBQSxPQUFBbUssTUFBQTBOLEtBQUEsU0FBQTVXLEdBQUE0QyxHQUFBc0csTUFBQTh6QixRQUFBaDZCLEVBQUFqRSxFQUFBc0MsS0FBQTZILEtBQUFsSixHQUFBakIsTUFBQW8rQixPQUFBLFdBQUEsTUFBQWowQixNQUFBdkYsU0FBQWlULEtBQUEsV0FBQWhVLEdBQUFvSCxTQUFBZCxLQUFBLFNBQUF0RyxHQUFBc0csTUFBQTJvQixZQUFBM29CLEtBQUFvUCxjQUFBNEYsU0FBQXRiLEdBQUE0bEIsS0FBQUosUUFBQXhLLE9BQUEsU0FBQTdlLEdBQUEsTUFBQUEsR0FBQStjLGFBQUEsR0FBQS9jLEVBQUFnZCxjQUFBLElBQUE3WCxHQUFBa3ZCLHlCQUFBLFVBQUFyMEIsRUFBQXljLE9BQUF6YyxFQUFBeWMsTUFBQWYsU0FBQTdYLEdBQUE4WCxJQUFBM2IsRUFBQSxhQUFBNkQsR0FBQTRsQixLQUFBSixRQUFBZ1YsUUFBQSxTQUFBcitCLEdBQUEsT0FBQTZELEdBQUE0bEIsS0FBQUosUUFBQXhLLE9BQUE3ZSxHQUFBLElBQUFzK0IsSUFBQSxPQUFBbmMsR0FBQSxRQUFBb2MsR0FBQSxTQUFBQyxHQUFBLHdDQUFBQyxHQUFBLG9DQUFBNTZCLElBQUE2dEIsTUFBQSxTQUFBMXhCLEVBQUFpRSxHQUFBLEdBQUFoRCxHQUFBZ0MsS0FBQXhELEVBQUEsU0FBQU8sRUFBQWlFLEdBQUFBLEVBQUFKLEdBQUE2SyxXQUFBekssR0FBQUEsSUFBQSxNQUFBQSxFQUFBLEdBQUFBLEVBQUFoQixFQUFBQSxFQUFBN0MsUUFBQTBJLG1CQUFBOUksR0FBQSxJQUFBOEksbUJBQUE3RSxHQUFBLElBQUEsU0FBQUEsSUFBQUEsRUFBQUosR0FBQXlkLGNBQUF6ZCxHQUFBeWQsYUFBQXFjLGFBQUE5NUIsR0FBQW1HLFFBQUFoSyxJQUFBQSxFQUFBMmlCLFNBQUE5ZSxHQUFBdWYsY0FBQXBqQixHQUFBNkQsR0FBQWdVLEtBQUE3WCxFQUFBLFdBQUFQLEVBQUEwSyxLQUFBakwsS0FBQWlMLEtBQUFZLGFBQUEsS0FBQTlKLElBQUFqQixHQUFBa2lCLEVBQUFqaEIsRUFBQWpCLEVBQUFpQixHQUFBZ0QsRUFBQXhFLEVBQUEsT0FBQXdELEdBQUE2UCxLQUFBLEtBQUFqRixRQUFBeXdCLEdBQUEsTUFBQXo2QixHQUFBNmUsR0FBQTlWLFFBQUE4eEIsVUFBQSxXQUFBLE1BQUE3NkIsSUFBQTZ0QixNQUFBdm5CLEtBQUF3MEIsbUJBQUFBLGVBQUEsV0FBQSxNQUFBeDBCLE1BQUF5TyxJQUFBLFdBQUEsR0FBQTVZLEdBQUE2RCxHQUFBd3lCLEtBQUFsc0IsS0FBQSxXQUFBLE9BQUFuSyxHQUFBNkQsR0FBQThmLFVBQUEzakIsR0FBQW1LLE9BQUF3TixPQUFBLFdBQUEsR0FBQTNYLEdBQUFtSyxLQUFBNUYsSUFBQSxPQUFBNEYsTUFBQWpMLE9BQUEyRSxHQUFBc0csTUFBQXlmLEdBQUEsY0FBQTZVLEdBQUFsL0IsS0FBQTRLLEtBQUFjLFlBQUF1ekIsR0FBQWovQixLQUFBUyxLQUFBbUssS0FBQXVQLFVBQUF2USxHQUFBNUosS0FBQVMsTUFBQTRZLElBQUEsU0FBQTVZLEVBQUFpRSxHQUFBLEdBQUFoRCxHQUFBNEMsR0FBQXNHLE1BQUFndkIsS0FBQSxPQUFBLE9BQUFsNEIsRUFBQSxLQUFBNEMsR0FBQW1HLFFBQUEvSSxHQUFBNEMsR0FBQStVLElBQUEzWCxFQUFBLFNBQUFqQixHQUFBLE9BQUFkLEtBQUErRSxFQUFBL0UsS0FBQTZMLE1BQUEvSyxFQUFBNk4sUUFBQTB3QixHQUFBLFlBQUFyL0IsS0FBQStFLEVBQUEvRSxLQUFBNkwsTUFBQTlKLEVBQUE0TSxRQUFBMHdCLEdBQUEsV0FBQWxpQixTQUFBeFksR0FBQXlkLGFBQUFzZCxJQUFBLFNBQUE1K0IsRUFBQXNpQixjQUFBLFdBQUEsT0FBQW5ZLEtBQUFxeUIsU0FBQSx3Q0FBQWo5QixLQUFBNEssS0FBQTVGLE9BQUE2ZCxLQUFBQyxLQUFBRCxDQUFBLElBQUF5YyxJQUFBLEVBQUFDLE1BQUFDLEdBQUFsN0IsR0FBQXlkLGFBQUFzZCxLQUFBNStCLEdBQUFzRSxhQUFBdEUsRUFBQXNFLFlBQUEsV0FBQSxXQUFBLElBQUEsR0FBQXRFLEtBQUE4K0IsSUFBQUEsR0FBQTkrQixHQUFBLFFBQUEsS0FBQW1GLEdBQUE2NUIsT0FBQUQsSUFBQSxtQkFBQUEsSUFBQUEsR0FBQTU1QixHQUFBazRCLE9BQUEwQixHQUFBQSxJQUFBbDdCLEdBQUF1NUIsY0FBQSxTQUFBcDlCLEdBQUEsSUFBQUEsRUFBQTA5QixhQUFBdjRCLEdBQUE2NUIsS0FBQSxDQUFBLEdBQUEvNkIsRUFBQSxRQUFBeU8sS0FBQSxTQUFBelIsRUFBQWdDLEdBQUEsR0FBQXhELEdBQUFvQixFQUFBYixFQUFBNCtCLE1BQUFuN0IsSUFBQW83QixFQUFBLElBQUFoK0IsRUFBQXlRLEtBQUF0UixFQUFBdUUsS0FBQXZFLEVBQUF5RyxJQUFBekcsRUFBQXU3QixNQUFBdjdCLEVBQUFtUixTQUFBblIsRUFBQW9SLFVBQUFwUixFQUFBaS9CLFVBQUEsSUFBQXgvQixJQUFBTyxHQUFBaS9CLFVBQUFwK0IsRUFBQXBCLEdBQUFPLEVBQUFpL0IsVUFBQXgvQixFQUFBTyxHQUFBMGhCLFVBQUE3Z0IsRUFBQTI4QixrQkFBQTM4QixFQUFBMjhCLGlCQUFBeDlCLEVBQUEwaEIsVUFBQTFoQixFQUFBMDlCLGFBQUF6OEIsRUFBQSxzQkFBQUEsRUFBQSxvQkFBQSxpQkFBQSxLQUFBeEIsSUFBQXdCLEdBQUEsU0FBQUEsRUFBQXhCLElBQUFvQixFQUFBc1IsaUJBQUExUyxFQUFBd0IsRUFBQXhCLEdBQUEsR0FBQW9CLEdBQUE2UixLQUFBMVMsRUFBQTQ5QixZQUFBNTlCLEVBQUE0UCxNQUFBLE1BQUEzTCxFQUFBLFNBQUFoRCxFQUFBeEIsR0FBQSxHQUFBaUUsR0FBQTNELEVBQUFzSCxDQUFBLElBQUFwRCxJQUFBeEUsR0FBQSxJQUFBb0IsRUFBQTRRLFlBQUEsU0FBQXF0QixJQUFBcjdCLEdBQUFRLEVBQUEsT0FBQXBELEVBQUFxK0IsbUJBQUFyN0IsR0FBQTZVLEtBQUFqWixFQUFBLElBQUFvQixFQUFBNFEsWUFBQTVRLEVBQUE0UixZQUFBLENBQUFwTCxLQUFBM0QsRUFBQTdDLEVBQUE2USxPQUFBLGdCQUFBN1EsR0FBQWlSLGVBQUF6SyxFQUFBeVQsS0FBQWphLEVBQUFpUixhQUFBLEtBQUEvUixFQUFBYyxFQUFBa1IsV0FBQSxNQUFBNU0sR0FBQXBGLEVBQUEsR0FBQTJELElBQUExRCxFQUFBdzhCLFNBQUF4OEIsRUFBQTA5QixZQUFBLE9BQUFoNkIsSUFBQUEsRUFBQSxLQUFBQSxFQUFBMkQsRUFBQXlULEtBQUEsSUFBQSxJQUFBelQsR0FBQXBFLEVBQUFTLEVBQUEzRCxFQUFBc0gsRUFBQXhHLEVBQUErUSwwQkFBQTVSLEVBQUF1N0IsTUFBQSxJQUFBMTZCLEVBQUE0USxXQUFBdUQsV0FBQS9RLEdBQUFwRCxFQUFBcStCLG1CQUFBSixHQUFBcjdCLEdBQUFRLEVBQUFBLEtBQUF3TyxNQUFBLFdBQUF4TyxHQUFBQSxFQUFBLFFBQUEsUUFBQUosR0FBQXE1QixXQUFBUCxTQUFBd0MsT0FBQSw2RkFBQTFkLFVBQUEwZCxPQUFBLHVCQUFBdmQsWUFBQXdkLGNBQUEsU0FBQXAvQixHQUFBLE1BQUE2RCxJQUFBMmYsV0FBQXhqQixHQUFBQSxNQUFBNkQsR0FBQXM1QixjQUFBLFNBQUEsU0FBQW45QixHQUFBLFNBQUFBLEVBQUFzWSxRQUFBdFksRUFBQXNZLE9BQUEsR0FBQXRZLEVBQUEwOUIsY0FBQTE5QixFQUFBdUUsS0FBQSxNQUFBdkUsRUFBQXNXLFFBQUEsS0FBQXpTLEdBQUF1NUIsY0FBQSxTQUFBLFNBQUFwOUIsR0FBQSxHQUFBQSxFQUFBMDlCLFlBQUEsQ0FBQSxHQUFBejVCLEdBQUFoRCxFQUFBK0MsR0FBQXE3QixNQUFBeDdCLEdBQUEsUUFBQSxJQUFBRyxHQUFBZ1ksZUFBQSxRQUFBdEosS0FBQSxTQUFBelAsRUFBQXhELEdBQUF3RSxFQUFBRCxHQUFBOEosY0FBQSxVQUFBN0osRUFBQXMzQixPQUFBLEVBQUF2N0IsRUFBQXMvQixnQkFBQXI3QixFQUFBczdCLFFBQUF2L0IsRUFBQXMvQixlQUFBcjdCLEVBQUFzQixJQUFBdkYsRUFBQXlHLElBQUF4QyxFQUFBb0IsT0FBQXBCLEVBQUFpN0IsbUJBQUEsU0FBQWwvQixFQUFBaUIsSUFBQUEsSUFBQWdELEVBQUF3TixZQUFBLGtCQUFBbFMsS0FBQTBFLEVBQUF3TixlQUFBeE4sRUFBQW9CLE9BQUFwQixFQUFBaTdCLG1CQUFBLEtBQUFqN0IsRUFBQThXLFlBQUE5VyxFQUFBOFcsV0FBQXVKLFlBQUFyZ0IsR0FBQUEsRUFBQSxLQUFBaEQsR0FBQXhCLEVBQUEsSUFBQSxhQUFBd0IsRUFBQXd4QixhQUFBeHVCLEVBQUFoRCxFQUFBMlksYUFBQW5ILE1BQUEsV0FBQXhPLEdBQUFBLEVBQUFvQixPQUFBLFFBQUEsT0FBQSxJQUFBbTZCLE9BQUFDLEdBQUEsbUJBQUE1N0IsSUFBQXE1QixXQUFBd0MsTUFBQSxXQUFBQyxjQUFBLFdBQUEsR0FBQTMvQixHQUFBdy9CLEdBQUFqbkIsT0FBQTFVLEdBQUF3VSxRQUFBLElBQUE0aUIsSUFBQSxPQUFBOXdCLE1BQUFuSyxJQUFBLEVBQUFBLEtBQUE2RCxHQUFBczVCLGNBQUEsYUFBQSxTQUFBbDVCLEVBQUFoRCxFQUFBZ0MsR0FBQSxHQUFBeEQsR0FBQW9CLEVBQUE0QyxFQUFBQyxFQUFBTyxFQUFBeTdCLFNBQUEsSUFBQUQsR0FBQWxnQyxLQUFBMEUsRUFBQXdDLEtBQUEsTUFBQSxnQkFBQXhDLEdBQUEyTCxRQUFBM0wsRUFBQXk0QixhQUFBLElBQUFsM0IsUUFBQSxzQ0FBQWk2QixHQUFBbGdDLEtBQUEwRSxFQUFBMkwsT0FBQSxPQUFBLE9BQUFsTSxJQUFBLFVBQUFPLEVBQUFrZCxVQUFBLElBQUExaEIsRUFBQXdFLEVBQUEwN0IsY0FBQTk3QixHQUFBNkssV0FBQXpLLEVBQUEwN0IsZUFBQTE3QixFQUFBMDdCLGdCQUFBMTdCLEVBQUEwN0IsY0FBQWo4QixFQUFBTyxFQUFBUCxHQUFBTyxFQUFBUCxHQUFBbUssUUFBQTR4QixHQUFBLEtBQUFoZ0MsR0FBQXdFLEVBQUF5N0IsU0FBQSxJQUFBejdCLEVBQUF3QyxNQUFBeTBCLEdBQUEzN0IsS0FBQTBFLEVBQUF3QyxLQUFBLElBQUEsS0FBQXhDLEVBQUF5N0IsTUFBQSxJQUFBamdDLEdBQUF3RSxFQUFBMmQsV0FBQSxlQUFBLFdBQUEsTUFBQW5lLElBQUFJLEdBQUE0UixNQUFBaFcsRUFBQSxtQkFBQWdFLEVBQUEsSUFBQVEsRUFBQWtkLFVBQUEsR0FBQSxPQUFBdGdCLEVBQUFiLEVBQUFQLEdBQUFPLEVBQUFQLEdBQUEsV0FBQWdFLEVBQUFzSyxXQUFBOUssRUFBQW9iLE9BQUEsV0FBQXJlLEVBQUFQLEdBQUFvQixFQUFBb0QsRUFBQXhFLEtBQUF3RSxFQUFBMDdCLGNBQUExK0IsRUFBQTArQixjQUFBSCxHQUFBcjdCLEtBQUExRSxJQUFBZ0UsR0FBQUksR0FBQTZLLFdBQUE3TixJQUFBQSxFQUFBNEMsRUFBQSxJQUFBQSxFQUFBNUMsRUFBQSxTQUFBLFVBQUEsU0FBQWdELEdBQUFnbUIsVUFBQSxTQUFBN3BCLEVBQUFpRSxFQUFBaEQsR0FBQSxJQUFBakIsR0FBQSxnQkFBQUEsR0FBQSxNQUFBLEtBQUEsa0JBQUFpRSxLQUFBaEQsRUFBQWdELEVBQUFBLEdBQUEsR0FBQUEsRUFBQUEsR0FBQUQsRUFBQSxJQUFBZixHQUFBNUMsR0FBQVUsS0FBQWYsR0FBQVAsR0FBQXdCLEtBQUEsT0FBQWdDLElBQUFnQixFQUFBNkosY0FBQTdLLEVBQUEsTUFBQUEsRUFBQVksR0FBQXd1QixlQUFBcnlCLEdBQUFpRSxFQUFBeEUsR0FBQUEsR0FBQUEsRUFBQVcsUUFBQXlELEdBQUFwRSxHQUFBaVUsU0FBQTdQLEdBQUFrSixTQUFBOUosRUFBQXNXLGFBQUEsSUFBQXFtQixJQUFBLzdCLEdBQUE2ZSxHQUFBcU4sSUFBQWxzQixJQUFBNmUsR0FBQXFOLEtBQUEsU0FBQS92QixFQUFBaUUsRUFBQWhELEdBQUEsR0FBQSxnQkFBQWpCLElBQUE0L0IsR0FBQSxNQUFBQSxJQUFBNXdCLE1BQUE3RSxLQUFBNEQsVUFBQSxJQUFBOUssR0FBQXhELEVBQUFvQixFQUFBNEMsRUFBQTBHLEtBQUF6RyxFQUFBMUQsRUFBQXdGLFFBQUEsSUFBQSxPQUFBOUIsSUFBQSxJQUFBVCxFQUFBWSxHQUFBa0wsS0FBQS9PLEVBQUF3RCxNQUFBRSxFQUFBMUQsRUFBQUksU0FBQUosRUFBQUEsRUFBQXdELE1BQUEsRUFBQUUsSUFBQUcsR0FBQTZLLFdBQUF6SyxJQUFBaEQsRUFBQWdELEVBQUFBLEVBQUEsUUFBQUEsR0FBQSxnQkFBQUEsS0FBQXBELEVBQUEsUUFBQTRDLEVBQUFyRCxPQUFBLEdBQUF5RCxHQUFBdzVCLE1BQUE1MkIsSUFBQXpHLEVBQUF1RSxLQUFBMUQsRUFBQW1oQixTQUFBLE9BQUFwUyxLQUFBM0wsSUFBQThhLEtBQUEsU0FBQS9lLEdBQUFQLEVBQUFzTyxVQUFBdEssRUFBQW92QixLQUFBNXZCLEVBQUFZLEdBQUEsU0FBQXl1QixPQUFBenVCLEdBQUFnbUIsVUFBQTdwQixJQUFBa0ksS0FBQWpGLEdBQUFqRCxLQUFBK2dCLFNBQUE5ZixHQUFBLFNBQUFqQixFQUFBaUUsR0FBQVIsRUFBQW9VLEtBQUE1VyxFQUFBeEIsSUFBQU8sRUFBQThSLGFBQUE3TixFQUFBakUsTUFBQW1LLE1BQUF0RyxHQUFBZ1UsTUFBQSxZQUFBLFdBQUEsZUFBQSxZQUFBLGNBQUEsWUFBQSxTQUFBN1gsRUFBQWlFLEdBQUFKLEdBQUE2ZSxHQUFBemUsR0FBQSxTQUFBakUsR0FBQSxNQUFBbUssTUFBQWtuQixHQUFBcHRCLEVBQUFqRSxNQUFBNkQsR0FBQTRsQixLQUFBSixRQUFBd1csU0FBQSxTQUFBNy9CLEdBQUEsTUFBQTZELElBQUE2VCxLQUFBN1QsR0FBQSt6QixPQUFBLFNBQUEzekIsR0FBQSxNQUFBakUsS0FBQWlFLEVBQUF5YixPQUFBdGYsT0FBQSxJQUFBMC9CLElBQUE5L0IsRUFBQTBFLFNBQUFzWCxlQUFBblksSUFBQWs4QixRQUFBQyxVQUFBLFNBQUFoZ0MsRUFBQWlFLEVBQUFoRCxHQUFBLEdBQUFnQyxHQUFBeEQsRUFBQW9CLEVBQUE0QyxFQUFBQyxFQUFBM0QsRUFBQXNILEVBQUFsQyxFQUFBdEIsR0FBQThYLElBQUEzYixFQUFBLFlBQUFxQixFQUFBd0MsR0FBQTdELEdBQUFGLElBQUEsWUFBQXFGLElBQUFuRixFQUFBeWMsTUFBQXFZLFNBQUEsWUFBQXB4QixFQUFBckMsRUFBQTArQixTQUFBbC9CLEVBQUFnRCxHQUFBOFgsSUFBQTNiLEVBQUEsT0FBQUQsRUFBQThELEdBQUE4WCxJQUFBM2IsRUFBQSxRQUFBcUgsR0FBQSxhQUFBbEMsR0FBQSxVQUFBQSxJQUFBdEIsR0FBQStULFFBQUEsUUFBQS9XLEVBQUFkLEtBQUEsRUFBQXNILEdBQUFwRSxFQUFBNUIsRUFBQXl6QixXQUFBcnhCLEVBQUFSLEVBQUF3QixJQUFBaEYsRUFBQXdELEVBQUEyd0IsT0FBQW53QixFQUFBNlosV0FBQXpjLElBQUEsRUFBQXBCLEVBQUE2ZCxXQUFBdmQsSUFBQSxHQUFBOEQsR0FBQTZLLFdBQUF6SyxLQUFBQSxFQUFBQSxFQUFBM0IsS0FBQXRDLEVBQUFpQixFQUFBeUMsSUFBQSxNQUFBTyxFQUFBUSxNQUFBM0UsRUFBQTJFLElBQUFSLEVBQUFRLElBQUFmLEVBQUFlLElBQUFoQixHQUFBLE1BQUFRLEVBQUEydkIsT0FBQTl6QixFQUFBOHpCLEtBQUEzdkIsRUFBQTJ2QixLQUFBbHdCLEVBQUFrd0IsS0FBQW4wQixHQUFBLFNBQUF3RSxHQUFBQSxFQUFBZzhCLE1BQUEzOUIsS0FBQXRDLEVBQUFGLEdBQUF1QixFQUFBc2EsSUFBQTdiLEtBQUErRCxHQUFBNmUsR0FBQTlWLFFBQUFtekIsT0FBQSxTQUFBLy9CLEdBQUEsR0FBQStOLFVBQUEzTixPQUFBLE1BQUEsVUFBQUosRUFBQW1LLEtBQUFBLEtBQUEwTixLQUFBLFNBQUE1VCxHQUFBSixHQUFBazhCLE9BQUFDLFVBQUE3MUIsS0FBQW5LLEVBQUFpRSxJQUFBLElBQUFBLEdBQUFoRCxFQUFBZ0MsR0FBQXdCLElBQUEsRUFBQW12QixLQUFBLEdBQUFuMEIsRUFBQTBLLEtBQUEsR0FBQXRKLEVBQUFwQixHQUFBQSxFQUFBcWEsYUFBQSxPQUFBalosSUFBQW9ELEVBQUFwRCxFQUFBbWIsZ0JBQUFuWSxHQUFBK2lCLFNBQUEzaUIsRUFBQXhFLFVBQUFBLEdBQUF5Z0Msd0JBQUFsM0IsS0FBQS9GLEVBQUF4RCxFQUFBeWdDLHlCQUFBai9CLEVBQUFzaEIsRUFBQTFoQixJQUFBNEQsSUFBQXhCLEVBQUF3QixLQUFBeEQsRUFBQWsvQixhQUFBbDhCLEVBQUEwckIsWUFBQTFyQixFQUFBMnJCLFdBQUEsR0FBQWdFLEtBQUEzd0IsRUFBQTJ3QixNQUFBM3lCLEVBQUFtL0IsYUFBQW44QixFQUFBc3JCLGFBQUF0ckIsRUFBQXVyQixZQUFBLEtBQUF2c0IsR0FBQSxRQUFBNnhCLFNBQUEsV0FBQSxHQUFBM3FCLEtBQUEsR0FBQSxDQUFBLEdBQUFuSyxHQUFBaUUsRUFBQWhELEdBQUF3RCxJQUFBLEVBQUFtdkIsS0FBQSxHQUFBM3dCLEVBQUFrSCxLQUFBLEVBQUEsT0FBQSxVQUFBdEcsR0FBQThYLElBQUExWSxFQUFBLFlBQUFnQixFQUFBaEIsRUFBQWk5Qix5QkFBQWxnQyxFQUFBbUssS0FBQWsyQixlQUFBcDhCLEVBQUFrRyxLQUFBNDFCLFNBQUFsOEIsR0FBQW9ILFNBQUFqTCxFQUFBLEdBQUEsVUFBQWlCLEVBQUFqQixFQUFBKy9CLFVBQUE5K0IsRUFBQXdELEtBQUFaLEdBQUE4WCxJQUFBM2IsRUFBQSxHQUFBLGtCQUFBLEdBQUFpQixFQUFBMnlCLE1BQUEvdkIsR0FBQThYLElBQUEzYixFQUFBLEdBQUEsbUJBQUEsS0FBQXlFLElBQUFSLEVBQUFRLElBQUF4RCxFQUFBd0QsSUFBQVosR0FBQThYLElBQUExWSxFQUFBLGFBQUEsR0FBQTJ3QixLQUFBM3ZCLEVBQUEydkIsS0FBQTN5QixFQUFBMnlCLEtBQUEvdkIsR0FBQThYLElBQUExWSxFQUFBLGNBQUEsTUFBQW85QixhQUFBLFdBQUEsTUFBQWwyQixNQUFBeU8sSUFBQSxXQUFBLElBQUEsR0FBQTVZLEdBQUFtSyxLQUFBazJCLGNBQUFQLEdBQUE5L0IsSUFBQTZELEdBQUFvSCxTQUFBakwsRUFBQSxTQUFBLFdBQUE2RCxHQUFBOFgsSUFBQTNiLEVBQUEsYUFBQUEsRUFBQUEsRUFBQXFnQyxZQUFBLE9BQUFyZ0MsSUFBQTgvQixRQUFBajhCLEdBQUFnVSxNQUFBMFgsV0FBQSxjQUFBSSxVQUFBLGVBQUEsU0FBQTN2QixFQUFBaUUsR0FBQSxHQUFBaEQsR0FBQSxJQUFBMUIsS0FBQTBFLEVBQUFKLElBQUE2ZSxHQUFBMWlCLEdBQUEsU0FBQWlELEdBQUEsTUFBQTRFLElBQUFzQyxLQUFBLFNBQUFuSyxFQUFBaUQsRUFBQXhELEdBQUEsR0FBQW9CLEdBQUEwaEIsRUFBQXZpQixFQUFBLE9BQUEsVUFBQVAsRUFBQW9CLEVBQUFvRCxJQUFBcEQsR0FBQUEsRUFBQW9ELEdBQUFwRCxFQUFBNkQsU0FBQXNYLGdCQUFBL1ksR0FBQWpELEVBQUFpRCxRQUFBcEMsRUFBQUEsRUFBQXkvQixTQUFBci9CLEVBQUE0QyxHQUFBaEQsR0FBQTB1QixhQUFBOXZCLEVBQUF3QixFQUFBeEIsRUFBQW9FLEdBQUFoRCxHQUFBOHVCLGFBQUEzdkIsRUFBQWlELEdBQUF4RCxJQUFBTyxFQUFBaUQsRUFBQThLLFVBQUEzTixPQUFBLFNBQUF5RCxHQUFBZ1UsTUFBQSxNQUFBLFFBQUEsU0FBQTdYLEVBQUFpRSxHQUFBSixHQUFBd2IsU0FBQXBiLEdBQUFtWSxFQUFBalgsR0FBQW12QixjQUFBLFNBQUF0MEIsRUFBQWlCLEdBQUEsTUFBQUEsSUFBQUEsRUFBQWtjLEdBQUFuZCxFQUFBaUUsR0FBQW1aLEdBQUE3ZCxLQUFBMEIsR0FBQTRDLEdBQUE3RCxHQUFBODBCLFdBQUE3d0IsR0FBQSxLQUFBaEQsR0FBQSxXQUFBNEMsR0FBQWdVLE1BQUEwb0IsT0FBQSxTQUFBQyxNQUFBLFNBQUEsU0FBQXhnQyxFQUFBaUUsR0FBQUosR0FBQWdVLE1BQUFxZSxRQUFBLFFBQUFsMkIsRUFBQXlnQyxRQUFBeDhCLEVBQUF5OEIsR0FBQSxRQUFBMWdDLEdBQUEsU0FBQWlCLEVBQUFnQyxHQUFBWSxHQUFBNmUsR0FBQXpmLEdBQUEsU0FBQUEsRUFBQXhELEdBQUEsR0FBQW9CLEdBQUFrTixVQUFBM04sU0FBQWEsR0FBQSxpQkFBQWdDLElBQUFRLEVBQUF4QyxJQUFBZ0MsS0FBQSxHQUFBeEQsS0FBQSxFQUFBLFNBQUEsU0FBQSxPQUFBb0ksSUFBQXNDLEtBQUEsU0FBQWxHLEVBQUFoRCxFQUFBZ0MsR0FBQSxHQUFBeEQsRUFBQSxPQUFBb0UsSUFBQTJULFNBQUF2VCxHQUFBQSxFQUFBUyxTQUFBc1gsZ0JBQUEsU0FBQWhjLEdBQUEsSUFBQWlFLEVBQUF3VCxVQUFBaFksRUFBQXdFLEVBQUErWCxnQkFBQTFZLEtBQUFzWixJQUFBM1ksRUFBQXVYLEtBQUEsU0FBQXhiLEdBQUFQLEVBQUEsU0FBQU8sR0FBQWlFLEVBQUF1WCxLQUFBLFNBQUF4YixHQUFBUCxFQUFBLFNBQUFPLEdBQUFQLEVBQUEsU0FBQU8sS0FBQSxTQUFBaUQsRUFBQVksR0FBQThYLElBQUExWCxFQUFBaEQsRUFBQXdDLEdBQUFJLEdBQUE0WSxNQUFBeFksRUFBQWhELEVBQUFnQyxFQUFBUSxJQUFBUSxFQUFBcEQsRUFBQW9DLEVBQUEsT0FBQXBDLEVBQUEsV0FBQWdELEdBQUE2ZSxHQUFBaWUsS0FBQSxXQUFBLE1BQUF4MkIsTUFBQS9KLFFBQUF5RCxHQUFBNmUsR0FBQWtlLFFBQUEvOEIsR0FBQTZlLEdBQUEySCxRQUFBLGtCQUFBL2QsU0FBQUEsT0FBQUMsS0FBQUQsT0FBQSxZQUFBLFdBQUEsTUFBQXpJLEtBQUEsSUFBQWc5QixJQUFBN2dDLEVBQUE4Z0MsT0FBQUMsR0FBQS9nQyxFQUFBakIsQ0FBQSxPQUFBOEUsSUFBQW05QixXQUFBLFNBQUEvOEIsR0FBQSxNQUFBakUsR0FBQWpCLElBQUE4RSxLQUFBN0QsRUFBQWpCLEVBQUFnaUMsSUFBQTk4QixHQUFBakUsRUFBQThnQyxTQUFBajlCLEtBQUE3RCxFQUFBOGdDLE9BQUFELElBQUFoOUIsVUFBQUksS0FBQStFLEtBQUFoSixFQUFBOGdDLE9BQUE5Z0MsRUFBQWpCLEVBQUE4RSxJQUFBQSxJSENBLElBQUFvOUIsTUFBQSxNQUNBQyxPQUFBLE1BR0FDLEtBb0JBQyxhQUFBLEdBQUF4ekIsaUJBQUFsSSxPQUFBVSxTQUFBNk0sT0FBQXpQLE1BQUEsR0FJQWdKLE9BQUE2UCxJQUFBLG9CQUNBM00sS0FBQSxTQUFBUCxHQUNBLE1BQUFBLEdBQUFTLE9BQ0FGLEtBQUEsU0FBQUUsTUFDQSxHQUFBaXRCLE1BQUFuWixLQUFBLElBQUE5VCxLQUFBLElBRUEsT0FBQWl0QixNQUFBd0UsV0FDQTN4QixLQUFBLFNBQUEyeEIsR0FJQSxJQUFBLEdBSEFDLEdBQ0FDLEVBQUFILGFBQUEva0IsSUFBQSxXQUNBbWxCLEVBQUFILEVBQUFqaEMsT0FDQUwsRUFBQSxFQUFBQSxFQUFBeWhDLEVBQUF6aEMsSUFDQSxHQUFBc2hDLEVBQUF0aEMsR0FBQXdoQyxXQUFBQSxFQUFBLENBQ0EsR0FBQUUsR0FBQUosRUFBQXRoQyxFQUdBdWhDLEdBQUFHLEVBQUFoQixRQUFBcDRCLFNBQUFxNUIsV0FRQSxHQUFBQyxNQUNBQyxHQUFBLE9BQ0FoeUIsTUFDQTZ4QixRQUFBQSxFQUNBM2lCLE1BQUEsRUFDQStpQixPQUFBLGVBQ0FILFdBQUEsZUFDQUksYUFFQUMsUUFBQSxXQUNBLEdBQUFDLEdBQUE3M0IsSUFFQWczQixNQUFBQSxRQUNBLElBQUFjLEdBQUF2OUIsU0FBQW9KLGNBQUEsU0FDQW0wQixHQUFBMThCLElBQUEsOEJBQUFrOEIsRUFBQWhCLFFBQUF5QixhQUNBLElBQUE1aEMsR0FBQW9FLFNBQUE2RixxQkFBQSxVQUFBLEVBQ0FqSyxHQUFBeWEsV0FBQTBYLGFBQUF3UCxFQUFBM2hDLEdBRUEwaEMsRUFBQUYsVUFDQUssV0FBQSxZQUFBVixFQUFBaEIsUUFBQTJCLE1BQUEsZ0JBR0FDLFNBQ0FDLGFBQUEsV0FDQWxqQyxZQUFBRSxVQUNBNkssS0FBQTJVLE1BQUEsRUFHQXBaLE9BQUFVLFNBQUF5SCxRQUFBNHpCLEVBQUFoQixRQUFBcDRCLFNBQUFxNUIsWUFFQWg4QixPQUFBeTdCLEtBQUFoOUIsTUFBQSxjQUFBLFdBQUEsZUFBQSxjQUVBbytCLFNBQUEsV0FDQW5qQyxZQUFBRSxVQUNBNkssS0FBQTJVLE1BQUEsRUFFQXBaLE9BQUFVLFNBQUF5SCxRQUFBNHpCLEVBQUFoQixRQUFBcDRCLFNBQUF3NUIsUUFHQW44QixPQUFBeTdCLEtBQUFoOUIsTUFBQSxjQUFBLFdBQUEsV0FBQSxjQUVBcStCLFNBQUEsV0FDQXI0QixLQUFBMlUsTUFBQSxLQUtBLE9BQUF3aUIsS0FFQTV4QixLQUFBLFNBQUE0eEIsR0FDQSxHQUFBbUIsSUFDQXY1QixzQkFBQSxFQUNBUSxlQUNBdEIsVUFBQSxrQ0FDQVIsT0FBQSxtQ0FFQXlCLGFBQUEsR0FDQVMsWUFDQS9DLFlBQ0EyN0Isa0NBQUEsU0FBQSxNQUFBLFVBQUEsU0FBQSxPQUFBLFNBQUEsY0FBQSxRQUVBMTdCLHNCQUFBLEdBRUFXLGNBQ0FnN0IsT0FBQSxVQUNBMUIsS0FBQUEsS0FDQUMsT0FBQUEsT0FDQTBCLFFBQUFsK0IsU0FBQUMsU0FBQUQsU0FBQUMsU0FBQSxHQUNBaytCLElBQUEsUUFDQXZCLFlBQUEsSUFFQTkzQixpQkFDQTdJLE9BQUEsYUFFQThJLHVCQUNBcTVCLFNBQUEsb0JBQ0FDLFVBQUEsc0JBRUFsNUIsaUJBQ0EvQixVQUFBLFFBQ0FDLFdBQUEsbUJBQ0FKLGNBQ0FxN0IsV0FBQSxnQkFDQUgsSUFBQSxRQUNBdkIsWUFBQUEsS0FJQSxPQUFBbUIsS0FDQS95QixLQUFBLFNBQUEreUIsR0FDQWpqQyxPQUFBaWpDLEtBQ0FuckIsTUFBQSxjSWhKQTVSLE9BQUF1OUIsVUFBQSxTQUFBampDLEVBQUFpRSxFQUFBaEQsR0FBQSxRQUFBZ0csR0FBQWpILEdBQUFxSCxFQUFBeWtCLFFBQUE5ckIsRUFBQSxRQUFBd0UsR0FBQXhFLEVBQUFpRSxHQUFBLE1BQUFnRCxHQUFBbkgsRUFBQWdULEtBQUE5UyxFQUFBLE1BQUFpRSxHQUFBLEtBQUEsUUFBQS9DLEdBQUFsQixFQUFBaUUsR0FBQSxhQUFBakUsS0FBQWlFLEVBQUEsUUFBQWtDLEdBQUFuRyxFQUFBaUUsR0FBQSxVQUFBLEdBQUFqRSxHQUFBd0YsUUFBQXZCLEdBQUEsUUFBQXNFLEdBQUF2SSxFQUFBaUUsR0FBQSxJQUFBLEdBQUFoQixLQUFBakQsR0FBQSxDQUFBLEdBQUFQLEdBQUFPLEVBQUFpRCxFQUFBLEtBQUFrRCxFQUFBMUcsRUFBQSxNQUFBNEgsRUFBQTVILEtBQUF3QixFQUFBLE1BQUEsT0FBQWdELEdBQUF4RSxFQUFBLE9BQUEsRUFBQSxRQUFBaUIsR0FBQVYsRUFBQWlFLEVBQUFoQixHQUFBLElBQUEsR0FBQXhELEtBQUFPLEdBQUEsQ0FBQSxHQUFBYSxHQUFBb0QsRUFBQWpFLEVBQUFQLEdBQUEsSUFBQW9CLElBQUFJLEVBQUEsTUFBQWdDLE1BQUEsRUFBQWpELEVBQUFQLEdBQUF5QixFQUFBTCxFQUFBLFlBQUFBLEVBQUFpUSxLQUFBN04sR0FBQWdCLEdBQUFwRCxFQUFBLE9BQUEsRUFBQSxRQUFBcUYsR0FBQWxHLEVBQUFpRSxFQUFBaEQsR0FBQSxHQUFBZ0MsR0FBQWpELEVBQUFzVCxPQUFBLEdBQUExQyxjQUFBNVEsRUFBQXdELE1BQUEsR0FBQS9ELEdBQUFPLEVBQUEsSUFBQThELEVBQUFnUCxLQUFBN1AsRUFBQSxLQUFBQSxHQUFBcUksTUFBQSxJQUFBLE9BQUFwSyxHQUFBK0MsRUFBQSxXQUFBL0MsRUFBQStDLEVBQUEsYUFBQXNFLEVBQUE5SSxFQUFBd0UsSUFBQXhFLEdBQUFPLEVBQUEsSUFBQStGLEVBQUErTSxLQUFBN1AsRUFBQSxLQUFBQSxHQUFBcUksTUFBQSxLQUFBNUssRUFBQWpCLEVBQUF3RSxFQUFBaEQsSUFBQSxRQUFBK0gsS0FBQXZKLEVBQUErb0IsTUFBQSxTQUFBdm5CLEdBQUEsSUFBQSxHQUFBZ0MsR0FBQSxFQUFBeEQsRUFBQXdCLEVBQUFiLE9BQUE2QyxFQUFBeEQsRUFBQXdELElBQUE1QyxFQUFBWSxFQUFBZ0MsSUFBQWhDLEVBQUFnQyxJQUFBa0MsRUFBQSxPQUFBOUUsR0FBQTZpQyxPQUFBN2lDLEVBQUE2aUMsT0FBQWovQixFQUFBNkosY0FBQSxlQUFBOU4sRUFBQW1qQyxxQkFBQTlpQyxHQUFBLGlGQUFBaUwsTUFBQSxNQUFBN0wsRUFBQTJqQyxXQUFBLFNBQUFwakMsR0FBQSxJQUFBLEdBQUFQLEdBQUFvQixFQUFBNkMsRUFBQVQsRUFBQSxFQUFBbEQsRUFBQUMsRUFBQUksT0FBQTZDLEVBQUFsRCxFQUFBa0QsSUFBQWtDLEVBQUE2RyxhQUFBLE9BQUFuTCxFQUFBYixFQUFBaUQsSUFBQXhELEVBQUEsU0FBQTBGLEVBQUFaLEtBQUE5RSxJQUFBMEYsRUFBQTRGLE1BQUExSixFQUFBOEQsRUFBQXNYLE1BQUFxUCxRQUFBLHVDQUFBLFVBQUF2c0IsS0FBQXNCLElBQUFzRSxFQUFBc1gsTUFBQTRtQixtQkFBQXBpQyxHQUFBd0MsRUFBQW9XLFlBQUExVSxHQUFBekIsRUFBQU8sRUFBQXVlLFlBQUEvaUIsRUFBQWlFLEVBQUE0dkIsa0JBQUEsY0FBQTV2QixFQUFBNHZCLGlCQUFBbnVCLEVBQUEsTUFBQWsrQixrQkFBQSxJQUFBbCtCLEVBQUE2WDtBQUFBdlosRUFBQTZnQixZQUFBbmYsSUFBQSxpQkFBQTVGLEtBQUFzQixLQUFBcEIsRUFBQSxnQkFBQUYsS0FBQXNCLEdBQUFzRSxFQUFBbStCLGVBQUFuK0IsRUFBQW0rQixtQkFBQSxFQUFBbitCLEVBQUE0RixPQUFBMUosSUFBQXhCLEVBQUFHLEVBQUFpRCxNQUFBeEQsQ0FBQSxPQUFBSSxJQUFBLHVGQUFBeUwsTUFBQSxNQUFBLEdBQUF6RSxHQUFBcEIsRUFBQXhDLEVBQUEsUUFBQXhELEtBQUFvQixHQUFBLEVBQUE0QyxFQUFBUSxFQUFBK1gsZ0JBQUF0WSxFQUFBLFlBQUEzRCxFQUFBa0UsRUFBQTZKLGNBQUFwSyxHQUFBMkQsRUFBQXRILEVBQUEwYyxNQUFBdFgsRUFBQWxCLEVBQUE2SixjQUFBLFNBQUF6TSxFQUFBLEtBQUF3QyxLQUFBRixTQUFBN0QsRUFBQSw0QkFBQXdMLE1BQUEsS0FBQXBMLEVBQUEsa0JBQUE0RCxFQUFBNUQsRUFBQW9MLE1BQUEsS0FBQXZGLEVBQUE3RixFQUFBa0UsY0FBQWtILE1BQUEsS0FBQTVMLEdBQUE2akMsSUFBQSw4QkFBQWpqQyxLQUFBVCxLQUFBUSxLQUFBdUQsS0FBQXFCLEVBQUFyQixFQUFBSixNQUFBUSxFQUFBLFNBQUFoRSxFQUFBaUIsRUFBQWdDLEVBQUF4RCxHQUFBLEdBQUFvQixHQUFBZCxFQUFBc0gsRUFBQWxDLEVBQUE5RCxFQUFBNEMsRUFBQTZKLGNBQUEsT0FBQWpLLEVBQUFJLEVBQUF1WCxLQUFBMWIsRUFBQStELEdBQUFJLEVBQUE2SixjQUFBLE9BQUEsSUFBQWxMLFNBQUFLLEVBQUEsSUFBQSxLQUFBQSxLQUFBb0UsRUFBQXBELEVBQUE2SixjQUFBLE9BQUF6RyxFQUFBb0YsR0FBQWhOLEVBQUFBLEVBQUF3RCxHQUFBUyxHQUFBVCxFQUFBLEdBQUE1QixFQUFBd1ksWUFBQXhTLEVBQUEsT0FBQXhHLElBQUEsU0FBQSxlQUFBNkMsRUFBQSxLQUFBMUQsRUFBQSxZQUFBOFMsS0FBQSxJQUFBelIsRUFBQW9MLEdBQUEvSSxHQUFBRyxFQUFBeEMsRUFBQXZCLEdBQUFvYixXQUFBcmEsRUFBQWYsRUFBQStaLFlBQUF4WSxHQUFBd0MsSUFBQS9ELEVBQUEyYyxNQUFBMGxCLFdBQUEsR0FBQXJpQyxFQUFBMmMsTUFBQTZCLFNBQUEsU0FBQW5aLEVBQUExQixFQUFBZ1osTUFBQTZCLFNBQUE3YSxFQUFBZ1osTUFBQTZCLFNBQUEsU0FBQTdhLEVBQUFvVyxZQUFBL1osSUFBQUMsRUFBQWtCLEVBQUFJLEVBQUFyQixHQUFBNkQsRUFBQXhDLEVBQUEwWixXQUFBdUosWUFBQWpqQixJQUFBdkIsRUFBQWliLFdBQUF1SixZQUFBeGtCLEdBQUEyRCxFQUFBZ1osTUFBQTZCLFNBQUFuWixLQUFBcEYsR0FBQWlHLEVBQUEsU0FBQS9CLEdBQUEsR0FBQWhELEdBQUFqQixFQUFBd2pDLFlBQUF4akMsRUFBQXlqQyxZQUFBLElBQUF4aUMsRUFBQSxNQUFBQSxHQUFBZ0QsSUFBQWhELEVBQUFnRCxHQUFBa2hCLFVBQUEsQ0FBQSxJQUFBbGlCLEVBQUEsT0FBQWUsR0FBQSxVQUFBQyxFQUFBLE9BQUFQLEVBQUEsNkJBQUEsU0FBQU8sR0FBQWhCLEVBQUEsYUFBQWpELEVBQUFzekIsaUJBQUFBLGlCQUFBcnZCLEVBQUEsTUFBQUEsRUFBQTB2QixjQUFBLFdBQUExd0IsR0FBQWMsRUFBQSxXQUFBLFFBQUFkLEdBQUFBLEVBQUF4RCxHQUFBQSxFQUFBQSxHQUFBd0UsRUFBQTZKLGNBQUE5TixFQUFBaUQsSUFBQSxPQUFBQSxFQUFBLEtBQUFBLENBQUEsSUFBQXBDLEdBQUFvQyxJQUFBeEQsRUFBQSxPQUFBb0IsS0FBQXBCLEVBQUF1TSxlQUFBdk0sRUFBQXdFLEVBQUE2SixjQUFBLFFBQUFyTyxFQUFBdU0sY0FBQXZNLEVBQUEwYSxrQkFBQTFhLEVBQUF1TSxhQUFBL0ksRUFBQSxJQUFBcEMsRUFBQUssRUFBQXpCLEVBQUF3RCxHQUFBLFlBQUEvQixFQUFBekIsRUFBQXdELEdBQUEsZUFBQXhELEVBQUF3RCxHQUFBaEMsR0FBQXhCLEVBQUEwYSxnQkFBQWxYLEtBQUF4RCxFQUFBLEtBQUFvQixFQUFBLEdBQUFiLElBQUF3cEIsT0FBQSxRQUFBc0QsT0FBQSxRQUFBM0QsT0FBQSxPQUFBQyxNQUFBLE9BQUEzVCxNQUFBLE1BQUFzYSxLQUFBLE1BQUF0ZCxNQUFBLE1BQUEsT0FBQXhQLE1BQUFDLEtBQUFiLGNBQUFvRCxHQUFBdkUsRUFBQWdDLEVBQUEsY0FBQWhDLEVBQUFnQyxFQUFBWixLQUFBLGFBQUEsU0FBQXRDLEVBQUFpRSxHQUFBLE1BQUFBLEtBQUFqRSxJQUFBa0IsRUFBQWxCLEVBQUFvVixZQUFBaFQsVUFBQTZCLEdBQUEsY0FBQSxTQUFBakUsRUFBQWlFLEdBQUEsTUFBQWYsR0FBQVosS0FBQXRDLEVBQUFpRSxJQUFBdVMsU0FBQXBVLFVBQUEwTyxPQUFBMEYsU0FBQXBVLFVBQUEwTyxLQUFBLFNBQUE3TSxHQUFBLEdBQUFoRCxHQUFBa0osSUFBQSxJQUFBLGtCQUFBbEosR0FBQSxLQUFBLElBQUFnVCxVQUFBLElBQUFoUixHQUFBZ0MsRUFBQTNDLEtBQUF5TCxVQUFBLEdBQUF0TyxFQUFBLFdBQUEsR0FBQTBLLGVBQUExSyxHQUFBLENBQUEsR0FBQU8sR0FBQSxZQUFBQSxHQUFBb0MsVUFBQW5CLEVBQUFtQixTQUFBLElBQUF2QixHQUFBLEdBQUFiLEdBQUF5RCxFQUFBeEMsRUFBQStOLE1BQUFuTyxFQUFBb0MsRUFBQStFLE9BQUEvQyxFQUFBM0MsS0FBQXlMLFlBQUEsT0FBQTVMLFFBQUFzQixLQUFBQSxFQUFBQSxFQUFBNUMsRUFBQSxNQUFBSSxHQUFBK04sTUFBQS9LLEVBQUFoQixFQUFBK0UsT0FBQS9DLEVBQUEzQyxLQUFBeUwsYUFBQSxPQUFBdE8sS0FBQWEsRUFBQW9qQyxRQUFBLFdBQUEsTUFBQXg5QixHQUFBLGFBQUE1RixFQUFBcWpDLE9BQUEsV0FBQSxHQUFBM2pDLEdBQUFpRSxFQUFBNkosY0FBQSxTQUFBLFNBQUE5TixFQUFBNGpDLGNBQUE1akMsRUFBQTRqQyxXQUFBLE9BQUF0akMsRUFBQXVqQyxXQUFBLFdBQUEsUUFBQXBrQyxFQUFBa2tDLFVBQUF6aUMsRUFBQStDLEVBQUE2SixjQUFBLFVBQUE4MUIsV0FBQSxNQUFBRSxTQUFBLGFBQUF4akMsRUFBQXlqQyxNQUFBLFdBQUEsUUFBQS9qQyxFQUFBZ2tDLHVCQUFBMWpDLEVBQUEyakMsTUFBQSxXQUFBLEdBQUFoakMsRUFBQSxPQUFBLGdCQUFBakIsSUFBQUEsRUFBQWtrQyxlQUFBamdDLFlBQUFpZ0MsZUFBQWpqQyxHQUFBLEVBQUErQyxHQUFBLFdBQUFsRSxFQUFBZ1QsS0FBQSxvQkFBQXBQLEVBQUEsSUFBQSwyQ0FBQW9QLEtBQUEsSUFBQSxTQUFBOVMsR0FBQWlCLEVBQUEsSUFBQWpCLEVBQUFta0MsWUFBQWxqQyxHQUFBWCxFQUFBOGpDLFlBQUEsV0FBQSxNQUFBLGVBQUEzaEMsWUFBQW5DLEVBQUErakMsWUFBQSxXQUFBLFFBQUFya0MsRUFBQStVLGFBQUF6VSxFQUFBZ2tDLGVBQUEsV0FBQSxRQUFBdGtDLEVBQUF1a0MsY0FBQWprQyxFQUFBa2tDLFVBQUEsV0FBQSxRQUFBdCtCLEVBQUEsWUFBQWxHLElBQUFNLEVBQUFta0MsV0FBQSxXQUFBLE1BQUExZ0MsR0FBQSxhQUFBL0QsS0FBQWlFLEVBQUF5Z0MsZUFBQXpqQyxHQUFBZ0QsRUFBQXlnQyxhQUFBLElBQUFwa0MsRUFBQXFrQyxRQUFBLFdBQUEsUUFBQTNrQyxFQUFBMmtDLFdBQUFBLFFBQUFDLFdBQUF0a0MsRUFBQXVrQyxZQUFBLFdBQUEsR0FBQTdrQyxHQUFBaUUsRUFBQTZKLGNBQUEsTUFBQSxPQUFBLGFBQUE5TixJQUFBLGVBQUFBLElBQUEsVUFBQUEsSUFBQU0sRUFBQXdrQyxXQUFBLFdBQUEsTUFBQSxhQUFBOWtDLElBQUEsZ0JBQUFBLElBQUFNLEVBQUF5a0MsS0FBQSxXQUFBLE1BQUE5OUIsR0FBQSx5Q0FBQWQsRUFBQWtCLEVBQUEyOUIsZ0JBQUEsU0FBQTFrQyxFQUFBMmtDLEtBQUEsV0FBQSxNQUFBaCtCLEdBQUEsMENBQUFkLEVBQUFrQixFQUFBMjlCLGdCQUFBLFNBQUE3K0IsRUFBQWtCLEVBQUEyOUIsZ0JBQUEsU0FBQTFrQyxFQUFBNGtDLFlBQUEsV0FBQSxNQUFBaitCLEdBQUEsNERBQUEsbUJBQUExSCxLQUFBOEgsRUFBQTg2QixhQUFBN2hDLEVBQUE2a0MsZUFBQSxXQUFBLE1BQUFqL0IsR0FBQSxtQkFBQTVGLEVBQUE4a0MsWUFBQSxXQUFBLE1BQUFsL0IsR0FBQSxnQkFBQTVGLEVBQUEra0MsYUFBQSxXQUFBLE1BQUFuL0IsR0FBQSxpQkFBQTVGLEVBQUFnbEMsVUFBQSxXQUFBLE1BQUFwL0IsR0FBQSxjQUFBNUYsRUFBQWlsQyxXQUFBLFdBQUEsTUFBQSxLQUFBdGhDLEVBQUE2SixjQUFBLE9BQUEyTyxNQUFBK29CLFlBQUFsbEMsRUFBQXNkLFFBQUEsV0FBQSxNQUFBcFosR0FBQSxlQUFBLFNBQUFqRixLQUFBOEgsRUFBQXVXLFVBQUF0ZCxFQUFBbWxDLGNBQUEsV0FBQSxNQUFBdi9CLEdBQUEsa0JBQUE1RixFQUFBb2xDLFdBQUEsV0FBQSxNQUFBeC9CLEdBQUEsZ0JBQUE1RixFQUFBcWxDLGFBQUEsV0FBQSxHQUFBM2xDLEdBQUEsb0JBQUFpRSxFQUFBLCtEQUFBaEQsRUFBQSx3Q0FBQSxPQUFBZ0csSUFBQWpILEVBQUEsWUFBQXNMLE1BQUEsS0FBQXdILEtBQUE3TyxFQUFBakUsR0FBQUYsRUFBQWdULEtBQUE3UixFQUFBakIsSUFBQXdELE1BQUEsR0FBQXhELEVBQUFJLFNBQUErRixFQUFBa0IsRUFBQXUrQixnQkFBQSxhQUFBdGxDLEVBQUF1bEMsZUFBQSxXQUFBLE1BQUEzL0IsR0FBQSxlQUFBNUYsRUFBQXdsQyxjQUFBLFdBQUEsUUFBQTUvQixFQUFBLGNBQUE1RixFQUFBeWxDLGdCQUFBLFdBQUEsR0FBQS9sQyxLQUFBa0csRUFBQSxjQUFBLE9BQUFsRyxJQUFBLHFCQUFBeUQsR0FBQWdaLE9BQUF6WSxFQUFBLG1HQUFBLFNBQUFDLEVBQUFoRCxHQUFBakIsRUFBQSxJQUFBaUUsRUFBQStoQyxZQUFBLElBQUEvaEMsRUFBQStZLGVBQUFoZCxHQUFBTSxFQUFBMmxDLGVBQUEsV0FBQSxNQUFBLy9CLEdBQUEsZUFBQTVGLEVBQUE0bEMsU0FBQSxXQUFBLEdBQUFsbUMsRUFBQSxPQUFBZ0UsR0FBQSxzREFBQSxTQUFBL0MsRUFBQWdDLEdBQUEsR0FBQXhELEdBQUF3RSxFQUFBOGYsZUFBQSxjQUFBbGpCLEVBQUFwQixFQUFBMG1DLE9BQUExbUMsRUFBQTJtQyxXQUFBM2lDLEVBQUE1QyxFQUFBQSxFQUFBd2xDLFVBQUF4bEMsRUFBQXdsQyxTQUFBLEdBQUF4bEMsRUFBQXdsQyxTQUFBLEdBQUF2YSxRQUFBanJCLEVBQUFpckIsU0FBQSxHQUFBLEVBQUE5ckIsR0FBQSxPQUFBVCxLQUFBa0UsSUFBQSxJQUFBQSxFQUFBK0IsUUFBQXZDLEVBQUFxSSxNQUFBLEtBQUEsTUFBQXRMLEdBQUFNLEVBQUFnbUMsaUJBQUEsV0FBQSxHQUFBdG1DLEVBQUEsT0FBQWdFLElBQUEsSUFBQU4sRUFBQSxnQkFBQUEsRUFBQSxtQkFBQXJDLEVBQUEscUNBQUF5UixLQUFBLElBQUEsU0FBQTdPLEdBQUFqRSxFQUFBaUUsRUFBQStZLGNBQUEsSUFBQWhkLEdBQUFNLEVBQUFpbUMsTUFBQSxXQUFBLEdBQUF2bUMsR0FBQWlFLEVBQUE2SixjQUFBLFNBQUE3TSxHQUFBLENBQUEsTUFBQUEsSUFBQWpCLEVBQUF3bUMsZUFBQXZsQyxFQUFBLEdBQUF3bEMsU0FBQXhsQyxHQUFBQSxFQUFBeWxDLElBQUExbUMsRUFBQXdtQyxZQUFBLDhCQUFBMzRCLFFBQUEsT0FBQSxJQUFBNU0sRUFBQTBsQyxLQUFBM21DLEVBQUF3bUMsWUFBQSxtQ0FBQTM0QixRQUFBLE9BQUEsSUFBQTVNLEVBQUEybEMsS0FBQTVtQyxFQUFBd21DLFlBQUEsb0NBQUEzNEIsUUFBQSxPQUFBLEtBQUEsTUFBQTVLLElBQUEsTUFBQWhDLElBQUFYLEVBQUF1bUMsTUFBQSxXQUFBLEdBQUE3bUMsR0FBQWlFLEVBQUE2SixjQUFBLFNBQUE3TSxHQUFBLENBQUEsTUFBQUEsSUFBQWpCLEVBQUF3bUMsZUFBQXZsQyxFQUFBLEdBQUF3bEMsU0FBQXhsQyxHQUFBQSxFQUFBeWxDLElBQUExbUMsRUFBQXdtQyxZQUFBLDhCQUFBMzRCLFFBQUEsT0FBQSxJQUFBNU0sRUFBQTZsQyxJQUFBOW1DLEVBQUF3bUMsWUFBQSxlQUFBMzRCLFFBQUEsT0FBQSxJQUFBNU0sRUFBQThsQyxJQUFBL21DLEVBQUF3bUMsWUFBQSx5QkFBQTM0QixRQUFBLE9BQUEsSUFBQTVNLEVBQUErbEMsS0FBQWhuQyxFQUFBd21DLFlBQUEsaUJBQUF4bUMsRUFBQXdtQyxZQUFBLGVBQUEzNEIsUUFBQSxPQUFBLEtBQUEsTUFBQTVLLElBQUEsTUFBQWhDLElBQUFYLEVBQUEybUMsYUFBQSxXQUFBLElBQUEsTUFBQXgrQixjQUFBeStCLFFBQUF4akMsRUFBQUEsR0FBQStFLGFBQUEwK0IsV0FBQXpqQyxJQUFBLEVBQUEsTUFBQTFELEdBQUEsT0FBQSxJQUFBTSxFQUFBOG1DLGVBQUEsV0FBQSxJQUFBLE1BQUFDLGdCQUFBSCxRQUFBeGpDLEVBQUFBLEdBQUEyakMsZUFBQUYsV0FBQXpqQyxJQUFBLEVBQUEsTUFBQTFELEdBQUEsT0FBQSxJQUFBTSxFQUFBZ25DLFdBQUEsV0FBQSxRQUFBdG5DLEVBQUF1bkMsUUFBQWpuQyxFQUFBa25DLGlCQUFBLFdBQUEsUUFBQXhuQyxFQUFBeW5DLGtCQUFBbm5DLEVBQUFpakMsSUFBQSxXQUFBLFFBQUF0L0IsRUFBQXlqQyxtQkFBQXpqQyxFQUFBeWpDLGdCQUFBaG9DLEVBQUE2akMsSUFBQSxPQUFBb0UsZUFBQXJuQyxFQUFBc25DLFVBQUEsV0FBQSxHQUFBNW5DLEdBQUFpRSxFQUFBNkosY0FBQSxNQUFBLE9BQUE5TixHQUFBa2IsVUFBQSxVQUFBbGIsRUFBQTRaLFlBQUE1WixFQUFBNFosV0FBQWl1QixlQUFBbm9DLEVBQUE2akMsS0FBQWpqQyxFQUFBd25DLEtBQUEsV0FBQSxRQUFBN2pDLEVBQUF5akMsaUJBQUEsYUFBQW5vQyxLQUFBc0UsRUFBQXZCLEtBQUEyQixFQUFBeWpDLGdCQUFBaG9DLEVBQUE2akMsSUFBQSxjQUFBampDLEVBQUF5bkMsYUFBQSxXQUFBLFFBQUE5akMsRUFBQXlqQyxpQkFBQSxjQUFBbm9DLEtBQUFzRSxFQUFBdkIsS0FBQTJCLEVBQUF5akMsZ0JBQUFob0MsRUFBQTZqQyxJQUFBLGNBQUEsS0FBQSxHQUFBeGhDLEtBQUF6QixHQUFBbUYsRUFBQW5GLEVBQUF5QixLQUFBOEUsRUFBQTlFLEVBQUFxQyxjQUFBM0UsRUFBQW9ILEdBQUF2RyxFQUFBeUIsS0FBQTZCLEVBQUFPLE1BQUExRSxFQUFBb0gsR0FBQSxHQUFBLE9BQUFBLEdBQUEsT0FBQXBILEdBQUErb0IsT0FBQXhmLElBQUF2SixFQUFBdW9DLFFBQUEsU0FBQWhvQyxFQUFBaUUsR0FBQSxHQUFBLGdCQUFBakUsR0FBQSxJQUFBLEdBQUFpRCxLQUFBakQsR0FBQXlGLEVBQUF6RixFQUFBaUQsSUFBQXhELEVBQUF1b0MsUUFBQS9rQyxFQUFBakQsRUFBQWlELFFBQUEsQ0FBQSxHQUFBakQsRUFBQUEsRUFBQW9FLGNBQUEzRSxFQUFBTyxLQUFBaUIsRUFBQSxNQUFBeEIsRUFBQXdFLEdBQUEsa0JBQUFBLEdBQUFBLElBQUFBLEVBQUEsbUJBQUFwRCxJQUFBQSxJQUFBNEMsRUFBQTRILFdBQUEsS0FBQXBILEVBQUEsR0FBQSxPQUFBakUsR0FBQVAsRUFBQU8sR0FBQWlFLEVBQUEsTUFBQXhFLElBQUF3SCxFQUFBLElBQUFsSCxFQUFBb0YsRUFBQSxLQUFBLFNBQUFuRixFQUFBaUUsR0FBQSxRQUFBNUMsR0FBQXJCLEVBQUFpRSxHQUFBLEdBQUFoRCxHQUFBakIsRUFBQThOLGNBQUEsS0FBQTdLLEVBQUFqRCxFQUFBdUsscUJBQUEsUUFBQSxJQUFBdkssRUFBQWdjLGVBQUEsT0FBQS9hLEdBQUFpYSxVQUFBLFdBQUFqWCxFQUFBLFdBQUFoQixFQUFBd3ZCLGFBQUF4eEIsRUFBQXdtQixVQUFBeGtCLEVBQUEyVyxZQUFBLFFBQUEvVixLQUFBLEdBQUE3RCxHQUFBTSxFQUFBMm5DLFFBQUEsT0FBQSxnQkFBQWpvQyxHQUFBQSxFQUFBc0wsTUFBQSxLQUFBdEwsRUFBQSxRQUFBRixHQUFBRSxHQUFBLEdBQUFpRSxHQUFBb0QsRUFBQXJILEVBQUEwRCxHQUFBLE9BQUFPLEtBQUFBLEtBQUFsRSxJQUFBQyxFQUFBMEQsR0FBQTNELEVBQUFzSCxFQUFBdEgsR0FBQWtFLEdBQUFBLEVBQUEsUUFBQS9ELEdBQUFGLEVBQUFpQixFQUFBZ0MsR0FBQSxHQUFBaEMsSUFBQUEsRUFBQWdELEdBQUFrQixFQUFBLE1BQUFsRSxHQUFBNk0sY0FBQTlOLEVBQUFpRCxLQUFBQSxFQUFBbkQsRUFBQW1CLEdBQUEsSUFBQXdDLEVBQUEsT0FBQUEsR0FBQVIsRUFBQXFWLE1BQUF0WSxHQUFBaUQsRUFBQXFWLE1BQUF0WSxHQUFBMHNCLFlBQUE3ckIsRUFBQXRCLEtBQUFTLElBQUFpRCxFQUFBcVYsTUFBQXRZLEdBQUFpRCxFQUFBaWxDLFdBQUFsb0MsSUFBQTBzQixZQUFBenBCLEVBQUFpbEMsV0FBQWxvQyxJQUFBeUQsRUFBQTBrQyxpQkFBQTFvQyxFQUFBRixLQUFBUyxJQUFBeUQsRUFBQTJrQyxPQUFBM2tDLEVBQUFSLEVBQUFvbEMsS0FBQXh1QixZQUFBcFcsR0FBQSxRQUFBSyxHQUFBOUQsRUFBQWlCLEdBQUEsR0FBQWpCLElBQUFBLEVBQUFpRSxHQUFBa0IsRUFBQSxNQUFBbkYsR0FBQXFaLHdCQUFBcFksR0FBQUEsR0FBQW5CLEVBQUFFLEVBQUEsS0FBQSxHQUFBaUQsR0FBQWhDLEVBQUFvbkMsS0FBQTNiLFlBQUFqdEIsRUFBQSxFQUFBb0IsRUFBQWdELElBQUFKLEVBQUE1QyxFQUFBVCxPQUFBWCxFQUFBZ0UsRUFBQWhFLElBQUF3RCxFQUFBNkssY0FBQWpOLEVBQUFwQixHQUFBLE9BQUF3RCxHQUFBLFFBQUE4QyxHQUFBL0YsRUFBQWlFLEdBQUFBLEVBQUFxVSxRQUFBclUsRUFBQXFVLFNBQUFyVSxFQUFBaWtDLFdBQUFsb0MsRUFBQThOLGNBQUE3SixFQUFBcWtDLFdBQUF0b0MsRUFBQXFaLHVCQUFBcFYsRUFBQW9rQyxLQUFBcGtDLEVBQUFxa0MsY0FBQXRvQyxFQUFBOE4sY0FBQSxTQUFBN00sR0FBQSxNQUFBWCxHQUFBaW9DLFlBQUFyb0MsRUFBQWUsRUFBQWpCLEVBQUFpRSxHQUFBQSxFQUFBaWtDLFdBQUFqbkMsSUFBQWpCLEVBQUFxWix1QkFBQTdDLFNBQUEsTUFBQSwyRUFBQTNTLElBQUFpUCxPQUFBakYsUUFBQSxXQUFBLFNBQUE3TixHQUFBLE1BQUFpRSxHQUFBaWtDLFdBQUFsb0MsR0FBQWlFLEVBQUFva0MsS0FBQXY2QixjQUFBOU4sR0FBQSxNQUFBQSxFQUFBLE9BQUEsZUFBQU0sRUFBQTJELEVBQUFva0MsTUFBQSxRQUFBM29DLEdBQUFNLEdBQUFBLElBQUFBLEVBQUFpRSxFQUFBLElBQUFoRCxHQUFBbkIsRUFBQUUsRUFBQSxPQUFBTSxHQUFBa29DLFVBQUEva0MsSUFBQXhDLEVBQUF3bkMsU0FBQXhuQyxFQUFBd25DLFNBQUFwbkMsRUFBQXJCLEVBQUEsc0pBQUFtRixHQUFBWSxFQUFBL0YsRUFBQWlCLEdBQUFqQixFQUFBLEdBQUF5RCxHQUFBMEIsRUFBQWxFLEVBQUEsUUFBQWdDLEVBQUFqRCxFQUFBMG9DLFVBQUFqcEMsRUFBQSxxRUFBQW9CLEVBQUEsNkdBQUE2QyxFQUFBLGFBQUEzRCxFQUFBLEVBQUFzSCxNQUFBLFdBQUEsSUFBQSxHQUFBckgsR0FBQWlFLEVBQUE2SixjQUFBLElBQUE5TixHQUFBa2IsVUFBQSxjQUFBelgsRUFBQSxVQUFBekQsR0FBQW1GLEVBQUEsR0FBQW5GLEVBQUF1WixXQUFBblosUUFBQSxXQUFBNkQsRUFBQTZKLGNBQUEsSUFBQSxJQUFBOU4sR0FBQWlFLEVBQUFvVix3QkFBQSxPQUFBLG1CQUFBclosR0FBQTBzQixXQUFBLG1CQUFBMXNCLEdBQUFxWix3QkFBQSxtQkFBQXJaLEdBQUE4TixpQkFBQSxNQUFBN00sR0FBQXdDLEdBQUEsRUFBQTBCLEdBQUEsS0FBQSxJQUFBN0UsSUFBQTJuQyxTQUFBaGxDLEVBQUFnbEMsVUFBQSxrTEFBQVUsUUFBQTFuQyxFQUFBdW5DLFFBQUF2bEMsRUFBQXVsQyxXQUFBLEVBQUFJLHdCQUFBempDLEVBQUFvakMsWUFBQXRsQyxFQUFBc2xDLGVBQUEsRUFBQWhrQyxLQUFBLFVBQUFza0MsYUFBQW5wQyxFQUFBb08sY0FBQTVOLEVBQUFtWix1QkFBQXZWLEVBQUE5RCxHQUFBMG9DLE1BQUFwb0MsRUFBQVosRUFBQXVFLElBQUFrRyxLQUFBbEcsR0FBQXhFLEVBQUFxcEMsU0FBQTdsQyxFQUFBeEQsRUFBQXNwQyxVQUFBanBDLEVBQUFMLEVBQUF1cEMsYUFBQWpqQyxFQUFBdEcsRUFBQXdwQyxlQUFBbmxDLEVBQUFyRSxFQUFBeXBDLEdBQUFsakMsRUFBQXZHLEVBQUEwcEMsU0FBQXBsQyxFQUFBdEUsRUFBQTJwQyxTQUFBLFNBQUFwcEMsR0FBQSxNQUFBdUksSUFBQXZJLEtBQUFQLEVBQUE0cEMsYUFBQW5qQyxFQUFBekcsRUFBQTZwQyxXQUFBdGxDLEVBQUF2RSxFQUFBOHBDLFNBQUEsU0FBQXZwQyxFQUFBaUUsRUFBQWhELEdBQUEsTUFBQWdELEdBQUFpQyxFQUFBbEcsRUFBQWlFLEVBQUFoRCxHQUFBaUYsRUFBQWxHLEVBQUEsUUFBQXlELEVBQUE0SCxVQUFBNUgsRUFBQTRILFVBQUF3QyxRQUFBLG9CQUFBLFNBQUFoTixFQUFBLE9BQUErQyxFQUFBa1AsS0FBQSxLQUFBLElBQUFyVCxHQUFBMEssS0FBQUEsS0FBQXpGLFVBQUEsU0FBQTFFLEVBQUFpRSxFQUFBaEQsR0FBQSxRQUFBZ0MsR0FBQWpELEdBQUEsTUFBQSxxQkFBQUUsRUFBQW9DLEtBQUF0QyxHQUFBLFFBQUFQLEdBQUFPLEdBQUEsTUFBQSxnQkFBQUEsR0FBQSxRQUFBYSxNQUFBLFFBQUE0QyxHQUFBekQsR0FBQSxPQUFBQSxHQUFBLFVBQUFBLEdBQUEsWUFBQUEsR0FBQSxpQkFBQUEsRUFBQSxRQUFBMEQsS0FBQSxHQUFBMUQsR0FBQThELEVBQUE2TCxPQUFBNUosR0FBQSxFQUFBL0YsRUFBQUEsRUFBQUgsRUFBQWdFLEVBQUEsWUFBQSxLQUFBN0QsRUFBQUgsRUFBQXFELEVBQUFzbUMsVUFBQXRtQyxFQUFBdW1DLFVBQUF6cEMsRUFBQU0sRUFBQSxFQUFBTixFQUFBQSxFQUFBQSxFQUFBNkcsRUFBQTdHLEVBQUFQLEVBQUEsSUFBQSxJQUFBTyxJQUFBMEQsS0FBQXFDLEVBQUEsRUFBQSxRQUFBaEcsR0FBQUMsRUFBQWlCLEVBQUFnQyxFQUFBeEQsRUFBQW9CLEVBQUFkLEVBQUFzSCxHQUFBLFFBQUFsQyxHQUFBbEIsR0FBQSxJQUFBL0QsR0FBQXVELEVBQUFwQyxFQUFBb1EsY0FBQXBSLEVBQUFYLEVBQUFRLEVBQUEsR0FBQTZGLEdBQUFyQyxJQUFBckMsRUFBQWdFLE9BQUFoRSxFQUFBNjlCLG1CQUFBLEtBQUFqN0IsR0FBQSxDQUFBLE9BQUFqRSxHQUFBNkQsRUFBQSxXQUFBaEUsRUFBQXlrQixZQUFBampCLElBQUEsR0FBQSxLQUFBLEdBQUE0QixLQUFBZSxHQUFBL0MsR0FBQStDLEVBQUEvQyxHQUFBb0IsZUFBQVksSUFBQWUsRUFBQS9DLEdBQUFnQyxHQUFBb0MsVUFBQSxHQUFBZ0MsR0FBQUEsR0FBQW5FLEVBQUF3bUMsYUFBQXJvQyxFQUFBNEMsRUFBQTZKLGNBQUE5TixHQUFBRSxFQUFBLEVBQUFSLEVBQUEsRUFBQVcsR0FBQVIsRUFBQW9ELEVBQUEzQyxFQUFBVyxFQUFBeEIsRUFBQW9CLEVBQUFiLEVBQUFELEVBQUE4RyxFQUFBUSxFQUFBLEtBQUFyRCxFQUFBL0MsS0FBQXZCLEVBQUEsRUFBQXNFLEVBQUEvQyxPQUFBLFVBQUFqQixFQUFBcUIsRUFBQXVPLEtBQUEzTyxHQUFBSSxFQUFBa0UsSUFBQXRFLEVBQUFJLEVBQUFrRCxLQUFBdkUsR0FBQXFCLEVBQUF5QixNQUFBekIsRUFBQTBCLE9BQUEsSUFBQTFCLEVBQUEyUSxRQUFBM1EsRUFBQWdFLE9BQUFoRSxFQUFBNjlCLG1CQUFBLFdBQUEvNUIsRUFBQTdDLEtBQUE2SCxLQUFBekssSUFBQW9FLEVBQUE0RyxPQUFBakwsRUFBQSxFQUFBWSxHQUFBLE9BQUFMLElBQUFOLEdBQUEsSUFBQXNFLEVBQUEvQyxJQUFBcEIsRUFBQTR5QixhQUFBcHhCLEVBQUFmLEVBQUEsS0FBQVIsR0FBQStELEVBQUFzQixFQUFBa0MsSUFBQXJELEVBQUEvQyxHQUFBa0QsS0FBQTlDLElBQUEsUUFBQWdHLEdBQUFySCxFQUFBaUUsRUFBQWhELEVBQUFnQyxFQUFBcEMsR0FBQSxNQUFBa0YsR0FBQSxFQUFBOUIsRUFBQUEsR0FBQSxJQUFBeEUsRUFBQU8sR0FBQUQsRUFBQSxLQUFBa0UsRUFBQUwsRUFBQXZELEVBQUFMLEVBQUFpRSxFQUFBa0csS0FBQXBLLElBQUFrQixFQUFBZ0MsRUFBQXBDLElBQUFpRCxFQUFBNEcsT0FBQVAsS0FBQXBLLElBQUEsRUFBQUMsR0FBQSxHQUFBOEQsRUFBQTFELFFBQUFzRCxLQUFBeUcsS0FBQSxRQUFBaEYsS0FBQSxHQUFBbkYsR0FBQWtELENBQUEsT0FBQWxELEdBQUEycEMsUUFBQTVaLEtBQUExb0IsRUFBQXRILEVBQUEsR0FBQUMsRUFBQSxHQUFBK0QsR0FBQWIsRUFBQTdCLEVBQUE0QyxFQUFBK1gsZ0JBQUFuWSxFQUFBN0QsRUFBQWdWLFdBQUFsVixFQUFBbUUsRUFBQXNHLHFCQUFBLFVBQUEsR0FBQXJLLEtBQUF5RCxTQUFBRyxLQUFBaUMsRUFBQSxFQUFBckcsRUFBQSxpQkFBQTJCLEdBQUFvYixNQUFBbmMsRUFBQVosS0FBQXVFLEVBQUEybEMsY0FBQUMsWUFBQWhxQyxFQUFBUyxFQUFBZSxFQUFBdkIsRUFBQWliLFdBQUExWixFQUFBckIsRUFBQThwQyxPQUFBLGtCQUFBNXBDLEVBQUFvQyxLQUFBdEMsRUFBQThwQyxPQUFBem9DLElBQUE0QyxFQUFBSyxjQUFBakQsRUFBQWhCLEVBQUFYLEVBQUEsU0FBQTJCLEVBQUEsU0FBQSxNQUFBdUMsRUFBQXZDLEVBQUEsU0FBQWhCLEVBQUE0RSxFQUFBOEUsTUFBQUMsU0FBQSxTQUFBaEssR0FBQSxNQUFBLGtCQUFBRSxFQUFBb0MsS0FBQXRDLElBQUE2RyxLQUFBN0MsS0FBQWdDLEdBQUFvSyxRQUFBLFNBQUFwUSxFQUFBaUUsR0FBQSxNQUFBQSxHQUFBN0QsU0FBQUosRUFBQW9RLFFBQUFuTSxFQUFBLElBQUFqRSxHQUFBa0QsR0FBQSxTQUFBbEQsR0FBQSxRQUFBaUUsR0FBQWpFLEdBQUEsR0FBQVAsR0FBQW9CLEVBQUE0QyxFQUFBekQsRUFBQUEsRUFBQXNMLE1BQUEsS0FBQXJILEVBQUE0QyxFQUFBekcsT0FBQWEsRUFBQWpCLEVBQUF1WSxNQUFBdFYsRUFBQWpELEVBQUFJLE9BQUFhLEdBQUF3RixJQUFBeEYsRUFBQThvQyxRQUFBOW9DLEVBQUErb0MsU0FBQWhxQyxFQUFBLEtBQUFhLEVBQUEsRUFBQUEsRUFBQW9DLEVBQUFwQyxJQUFBNEMsRUFBQXpELEVBQUFhLEdBQUF5SyxNQUFBLE1BQUE3TCxFQUFBdUcsRUFBQXZDLEVBQUFrTSxZQUFBMU8sRUFBQXhCLEVBQUF3QixFQUFBd0MsR0FBQSxLQUFBNUMsRUFBQSxFQUFBQSxFQUFBb0QsRUFBQXBELElBQUFJLEVBQUE0RixFQUFBaEcsR0FBQUksRUFBQSxPQUFBQSxHQUFBLFFBQUF3QyxHQUFBekQsRUFBQVAsRUFBQW9CLEVBQUE0QyxFQUFBQyxHQUFBLEdBQUEzRCxHQUFBa0UsRUFBQWpFLEdBQUFxSCxFQUFBdEgsRUFBQWtxQyxZQUFBbHFDLEdBQUEwRyxJQUFBNkUsTUFBQSxLQUFBaU4sTUFBQWpOLE1BQUEsS0FBQXFFLFFBQUE1UCxFQUFBbXFDLFNBQUF6cUMsSUFBQUEsRUFBQXdELEVBQUF4RCxHQUFBQSxFQUFBQSxFQUFBTyxJQUFBUCxFQUFBZ0UsSUFBQWhFLEVBQUFPLEVBQUFzTCxNQUFBLEtBQUFpTixNQUFBak4sTUFBQSxLQUFBLEtBQUF2TCxFQUFBb3FDLFFBQUFwcUMsRUFBQW9xQyxRQUFBbnFDLEVBQUFQLEVBQUFvQixFQUFBNEMsRUFBQUMsSUFBQU0sRUFBQWpFLEVBQUEwRyxLQUFBMUcsRUFBQXFxQyxRQUFBLEVBQUFwbUMsRUFBQWpFLEVBQUEwRyxLQUFBLEVBQUE1RixFQUFBa3ZCLEtBQUFod0IsRUFBQTBHLElBQUExRyxFQUFBc3FDLFdBQUF0cUMsRUFBQXVxQyxTQUFBLE9BQUF2cUMsRUFBQTBHLElBQUE2RSxNQUFBLEtBQUFpTixNQUFBak4sTUFBQSxLQUFBcUUsUUFBQSxJQUFBMU8sRUFBQWxCLEVBQUFxcUMsT0FBQXJxQyxFQUFBd3FDLE1BQUF4cUMsRUFBQXFRLFVBQUFuTixFQUFBeEQsSUFBQXdELEVBQUFvRSxLQUFBeEcsRUFBQWt2QixLQUFBLFdBQUE1cUIsSUFBQTFGLEdBQUFBLEVBQUFNLEVBQUFncUMsUUFBQXJtQyxFQUFBRCxHQUFBNEQsR0FBQUEsRUFBQXRILEVBQUFncUMsUUFBQXJtQyxFQUFBRCxHQUFBTyxFQUFBakUsRUFBQTBHLEtBQUEsTUFBQSxRQUFBL0MsR0FBQTFELEVBQUFpRSxHQUFBLFFBQUFoRCxHQUFBakIsRUFBQWlCLEdBQUEsR0FBQWpCLEdBQUEsR0FBQVAsRUFBQU8sR0FBQWlCLElBQUFvRyxFQUFBLFdBQUEsR0FBQXJILE1BQUF3RCxNQUFBbEIsS0FBQXlMLFVBQUE1SSxHQUFBNkosTUFBQTdFLEtBQUFuSyxHQUFBcUIsTUFBQW9DLEVBQUF6RCxFQUFBcUgsRUFBQXBELEVBQUEsRUFBQVAsT0FBQSxJQUFBdkIsT0FBQW5DLEtBQUFBLEVBQUEsSUFBQUYsSUFBQStELEdBQUEsV0FBQSxHQUFBNUMsR0FBQWdELEVBQUEsQ0FBQSxLQUFBaEQsSUFBQWpCLEdBQUFBLEVBQUFxQyxlQUFBcEIsSUFBQWdELEdBQUEsT0FBQUEsTUFBQWpFLEVBQUFBLEVBQUFxQyxlQUFBdkMsTUFBQW1CLE1BQUE0QyxJQUFBWixFQUFBb0UsR0FBQUEsRUFBQSxXQUFBLEdBQUFySCxNQUFBd0QsTUFBQWxCLEtBQUF5TCxVQUFBNUksR0FBQTZKLE1BQUE3RSxLQUFBbkssR0FBQXFCLEtBQUFnRyxFQUFBdkgsR0FBQSxTQUFBRSxHQUFBLE1BQUEsWUFBQSxHQUFBaUUsTUFBQVQsTUFBQWxCLEtBQUF5TCxVQUFBL04sSUFBQUEsRUFBQWdQLE1BQUE3RSxLQUFBbEcsR0FBQTVDLE1BQUE4RCxFQUFBckYsS0FBQTJELEVBQUF6RCxFQUFBRixHQUFBdUgsRUFBQXBELEVBQUFuRSxFQUFBNEQsU0FBQXpDLEdBQUFJLElBQUEsR0FBQXdDLEdBQUEvRCxFQUFBNEQsSUFBQTFELEVBQUFULEtBQUFRLEVBQUFDLEVBQUErdkIsTUFBQS92QixFQUFBd3FDLEtBQUFuakMsRUFBQXJILEVBQUF5cUMsVUFBQTVwQyxFQUFBc0UsRUFBQWtDLEVBQUFoRyxFQUFBckIsRUFBQStnQixVQUFBbGdCLENBQUFJLEdBQUF5QyxFQUFBMUQsRUFBQTBxQyxJQUFBMXFDLEVBQUEycUMsT0FBQTVxQyxHQUFBQSxHQUFBa0IsRUFBQWxCLEdBQUEsR0FBQUEsR0FBQXNILEVBQUFoRyxFQUFBOEksS0FBQXlnQyxRQUFBakIsTUFBQSxJQUFBbHFDLEVBQUFPLEdBQUF5RCxFQUFBekQsRUFBQSxFQUFBcUIsRUFBQSxPQUFBLElBQUE0RCxFQUFBakYsR0FBQSxJQUFBRCxFQUFBLEVBQUFBLEVBQUFDLEVBQUFJLE9BQUFMLElBQUFzSCxFQUFBckgsRUFBQUQsR0FBQU4sRUFBQTRILEdBQUE1RCxFQUFBNEQsRUFBQSxFQUFBaEcsRUFBQSxHQUFBNEQsRUFBQW9DLEdBQUFuRSxFQUFBbUUsR0FBQWxGLE9BQUFrRixLQUFBQSxHQUFBM0QsRUFBQTJELEVBQUFoRyxPQUFBYyxRQUFBbkMsS0FBQUEsR0FBQTBELEVBQUExRCxFQUFBcUIsSUFBQTZCLEVBQUEybkMsVUFBQSxTQUFBN3FDLEVBQUFpRSxHQUFBK0IsRUFBQWhHLEdBQUFpRSxHQUFBZixFQUFBNG5DLFVBQUEsU0FBQTlxQyxHQUFBNkcsRUFBQTFDLEtBQUFuRSxJQUFBa0QsRUFBQXdtQyxhQUFBLElBQUEsTUFBQXpsQyxFQUFBd04sWUFBQXhOLEVBQUFJLG1CQUFBSixFQUFBd04sV0FBQSxVQUFBeE4sRUFBQUksaUJBQUEsbUJBQUFOLEVBQUEsV0FBQUUsRUFBQTZULG9CQUFBLG1CQUFBL1QsRUFBQSxHQUFBRSxFQUFBd04sV0FBQSxZQUFBLElBQUF6UixFQUFBNHFDLFFBQUF6bEMsSUFBQW5GLEVBQUE0cUMsUUFBQUcsYUFBQXJuQyxFQUFBMUQsRUFBQTRxQyxRQUFBbkIsU0FBQSxTQUFBenBDLEVBQUFpQixFQUFBZ0MsRUFBQXhELEVBQUFNLEVBQUFzSCxHQUFBLEdBQUFoRyxHQUFBbkIsRUFBQWlGLEVBQUFsQixFQUFBNkosY0FBQSxVQUFBck8sRUFBQUEsR0FBQXlELEVBQUF3bUMsWUFBQXZrQyxHQUFBSSxJQUFBdkYsQ0FBQSxLQUFBRSxJQUFBK0MsR0FBQWtDLEVBQUE2RyxhQUFBOUwsRUFBQStDLEVBQUEvQyxHQUFBZSxHQUFBb0csRUFBQTNELEVBQUF6QyxHQUFBSixFQUFBc0UsRUFBQSs1QixtQkFBQS81QixFQUFBRSxPQUFBLFlBQUFoRSxHQUFBb0MsRUFBQTBCLEVBQUFzTSxjQUFBcFEsRUFBQSxFQUFBSixJQUFBa0UsRUFBQUUsT0FBQUYsRUFBQSs1QixtQkFBQSxPQUFBcjdCLEVBQUEsV0FBQXhDLElBQUFBLEVBQUEsRUFBQUosRUFBQSxLQUFBeEIsR0FBQU0sRUFBQW9GLEVBQUFFLFNBQUF2RixFQUFBaWIsV0FBQTBYLGFBQUF0dEIsRUFBQXJGLElBQUFFLEVBQUE0cUMsUUFBQXBCLFVBQUEsU0FBQXhwQyxFQUFBaUIsRUFBQWdDLEVBQUF4RCxFQUFBZ0UsRUFBQTFELEdBQUEsR0FBQXNILEdBQUE1SCxFQUFBd0UsRUFBQTZKLGNBQUEsUUFBQTdNLEVBQUFsQixFQUFBMkQsRUFBQXpDLEdBQUFKLENBQUFwQixHQUFBNEcsS0FBQXJHLEVBQUFQLEVBQUF1ckMsSUFBQSxhQUFBdnJDLEVBQUE4RSxLQUFBLFVBQUEsS0FBQThDLElBQUFwRSxHQUFBeEQsRUFBQXVNLGFBQUEzRSxFQUFBcEUsRUFBQW9FLEdBQUE1RCxLQUFBM0QsRUFBQWliLFdBQUEwWCxhQUFBaHpCLEVBQUFLLEdBQUErRCxFQUFBNUMsRUFBQSxNQUFBa0osS0FBQXpGLFVBQUF1K0IsVUFBQWxULEtBQUEsV0FBQTZhLFFBQUE1N0IsTUFBQXRKLFVBQUFsQyxNQUFBbEIsS0FBQXlMLFVBQUEsS0NGQSxXQVlBLElBWEEsR0FBQXFCLEdBQ0FzSixFQUFBLGFBQ0EycEIsR0FDQSxTQUFBLFFBQUEsUUFBQSxRQUFBLE1BQUEsU0FBQSxRQUNBLFlBQUEsUUFBQSxpQkFBQSxXQUFBLE9BQUEsTUFDQSxlQUFBLFVBQUEsYUFBQSxRQUFBLE9BQUEsVUFDQSxXQUFBLGNBQUEsWUFBQSxRQUFBLFFBRUFqaUMsRUFBQWlpQyxFQUFBamlDLE9BQ0E2cUMsRUFBQXZsQyxPQUFBdWxDLFFBQUF2bEMsT0FBQXVsQyxZQUVBN3FDLEtBQ0FnUCxFQUFBaXpCLEVBQUFqaUMsR0FHQTZxQyxFQUFBNzdCLEtBQ0E2N0IsRUFBQTc3QixHQUFBc0osT0NUQSxTQUFBMVksRUFBQWlFLEdBQUEsa0JBQUFxSSxTQUFBQSxPQUFBQyxJQUFBRCxRQUFBLFVBQUEsU0FBQXJMLEdBQUEsTUFBQWdELEdBQUFqRSxFQUFBaUIsS0FBQSxnQkFBQW1MLFNBQUFuSSxFQUFBakUsRUFBQWlWLFFBQUEsV0FBQWhSLEVBQUFqRSxFQUFBQSxFQUFBOGdDLFFBQUE5Z0MsRUFBQWtyQyxRQUFBL2dDLEtBQUEsU0FBQW5LLEVBQUFpRSxHQUFBLFlBQUEsU0FBQWhELEdBQUFqQixHQUFBLEdBQUFpRixHQUFBLFNBQUFqRixFQUFBMmIsSUFBQSxtQkFBQSxTQUFBM2IsRUFBQTJiLElBQUEsMkJBQUEsU0FBQTNiLEVBQUEyYixJQUFBLHdCQUFBLFNBQUEzYixFQUFBMmIsSUFBQSxzQkFBQSxTQUFBM2IsRUFBQTJiLElBQUEsc0JBQUEsTUFBQSxFQUFBLElBQUExWCxHQUFBaEQsRUFBQWdDLEVBQUF4RCxFQUFBb0IsRUFBQWIsRUFBQTJiLElBQUEsdUJBQUEzYixFQUFBMmIsSUFBQSwrQkFBQTNiLEVBQUEyYixJQUFBLDRCQUFBM2IsRUFBQTJiLElBQUEsMEJBQUEzYixFQUFBMmIsSUFBQSwyQkFBQSxLQUFBbFksRUFBQXpELEVBQUEyYixJQUFBLG9CQUFBM2IsRUFBQTJiLElBQUEsNEJBQUEzYixFQUFBMmIsSUFBQSx5QkFBQTNiLEVBQUEyYixJQUFBLHVCQUFBM2IsRUFBQTJiLElBQUEsd0JBQUEsS0FBQWpZLEVBQUExRCxFQUFBMmIsSUFBQSw4QkFBQTNiLEVBQUEyYixJQUFBLHNDQUFBM2IsRUFBQTJiLElBQUEsbUNBQUEzYixFQUFBMmIsSUFBQSxpQ0FBQTNiLEVBQUEyYixJQUFBLGtDQUFBLEdBQUEsS0FBQTlhLEVBQUFBLEVBQUF5SyxNQUFBLE1BQUE3SCxFQUFBQSxFQUFBNkgsTUFBQSxNQUFBNUgsRUFBQUEsRUFBQTRILE1BQUEsTUFBQTdMLEVBQUEsRUFBQXdCLEVBQUFKLEVBQUFULE9BQUE2RCxFQUFBa25DLE9BQUFDLGtCQUFBM3JDLEVBQUF3QixFQUFBeEIsSUFBQXdELEVBQUFxYSxXQUFBemMsRUFBQXBCLElBQUFtRCxTQUFBYyxFQUFBakUsR0FBQSxJQUFBNmQsV0FBQTdaLEVBQUFoRSxJQUFBd0QsRUFBQWdCLElBQUFBLEVBQUFoQixFQUFBLE9BQUFnQixHQUFBLFFBQUFoQixLQUFBLEdBQUFnQixFQUFBUyxTQUFBOFcsTUFBQXpZLFVBQUFrQixFQUFBeUIsUUFBQTNDLFNBQUEsTUFBQSxFQUFBLElBQUEvQyxHQUFBaUIsRUFBQWdDLEVBQUF5QixTQUFBb0osY0FBQSxPQUFBck8sRUFBQWlGLFNBQUFvSixjQUFBLE1BQUEsT0FBQTdLLEdBQUF3WixNQUFBc1ksV0FBQSxTQUFBOXhCLEVBQUF3WixNQUFBM1osTUFBQSxRQUFBNEIsU0FBQThXLEtBQUEzQixZQUFBNVcsR0FBQWpELEVBQUFpRCxFQUFBOFosWUFBQTlaLEVBQUF3WixNQUFBNkIsU0FBQSxTQUFBN2UsRUFBQWdkLE1BQUEzWixNQUFBLE9BQUFHLEVBQUE0VyxZQUFBcGEsR0FBQXdCLEVBQUF4QixFQUFBc2QsWUFBQTlaLEVBQUE4WCxXQUFBdUosWUFBQXJoQixHQUFBakQsRUFBQWlCLEVBQUEsUUFBQXhCLEtBQUEsSUFBQW9ILEVBQUEsQ0FBQSxHQUFBN0csR0FBQWlCLEVBQUF4QixFQUFBd0UsRUFBQSxRQUFBcEQsRUFBQXNFLEVBQUEsWUFBQTFGLEdBQUFtN0IsU0FBQS81QixLQUFBSSxFQUFBZ0QsRUFBQVMsU0FBQThXLE1BQUF4YixFQUFBNEMsU0FBQTNCLEVBQUEwYSxJQUFBLGlCQUFBLElBQUExWSxJQUFBaEMsRUFBQTBhLElBQUEsZ0JBQUEzYixFQUFBLE1BQUFQLEVBQUFnN0IsU0FBQTU1QixLQUFBLFFBQUFBLEtBQUEsSUFBQWdHLEVBQUEsQ0FBQSxHQUFBN0csR0FBQWlCLEVBQUF4QixFQUFBd0UsRUFBQSxRQUFBcEQsRUFBQXNFLEVBQUEsWUFBQTFGLEdBQUFtN0IsU0FBQS81QixLQUFBSSxFQUFBZ0QsRUFBQVMsU0FBQThXLE1BQUF4YixFQUFBNEMsU0FBQTNCLEVBQUEwYSxJQUFBLGlCQUFBLElBQUExWSxJQUFBaEMsRUFBQTBhLElBQUEsZ0JBQUEzYixFQUFBLE1BQUFQLEVBQUFpN0IsWUFBQTc1QixLQUFBLFFBQUE0QyxHQUFBekQsRUFBQWlFLEVBQUFoRCxFQUFBZ0MsR0FBQSxHQUFBeEQsR0FBQTBGLEVBQUEsS0FBQWxCLEdBQUFwRCxHQUFBc0UsRUFBQSxLQUFBOUUsRUFBQWdyQyxTQUFBbG1DLEVBQUEsS0FBQTlFLEVBQUFpckMsU0FBQW5tQyxFQUFBLEtBQUE5RSxFQUFBa3JDLFFBQUFwbUMsRUFBQSxLQUFBOUUsRUFBQW1yQyxTQUFBMTRCLEtBQUEsSUFBQTlTLEdBQUF5ckMsSUFBQS9RLFlBQUE3NUIsR0FBQTQ1QixTQUFBaDdCLEdBQUFPLEVBQUEwckMsU0FBQWhSLFlBQUE3NUIsR0FBQTQ1QixTQUFBaDdCLEdBQUFPLEVBQUEyckMsU0FBQWpSLFlBQUE3NUIsR0FBQTQ1QixTQUFBaDdCLEdBQUFPLEVBQUE0ckMsT0FBQWxSLFlBQUE3NUIsR0FBQTQ1QixTQUFBaDdCLEdBQUFPLEVBQUFpaUIsTUFBQWhlLEdBQUFoRCxHQUFBakIsRUFBQTRyQyxPQUFBamUsU0FBQXBwQixLQUFBTixFQUFBaVEsT0FBQWpSLEtBQUFpUixPQUFBalIsS0FBQSxRQUFBUyxHQUFBMUQsRUFBQWlELEVBQUF4RCxHQUFBLEdBQUFvQixHQUFBLEVBQUE0QyxFQUFBLFNBQUF6RCxHQUFBQSxFQUFBeUgsU0FBQTBDLE1BQUF0SixLQUFBNkMsRUFBQSxTQUFBMUQsR0FBQUEsRUFBQXlILFNBQUEwQyxNQUFBLE1BQUF0SixJQUFBb0QsRUFBQTRULE1BQUEsTUFBQSxXQUFBLFdBQUEsVUFBQSxTQUFBN1gsRUFBQWlFLEdBQUF4RSxFQUFBd0UsR0FBQTBuQixJQUFBanNCLEVBQUEsSUFBQVksS0FBQTJDLEtBQUFnQixHQUFBNFQsTUFBQSxNQUFBLFdBQUEsV0FBQSxVQUFBLFNBQUE3WCxFQUFBaUUsR0FBQXhFLEVBQUF3RSxHQUFBb3RCLEdBQUEzeEIsRUFBQStELEdBQUE0dEIsR0FBQS93QixFQUFBb0QsS0FBQTFELElBQUEsSUFBQWlCLEVBQUF4QixFQUFBZ3NDLE1BQUEsSUFBQXhxQyxFQUFBeEIsRUFBQWlzQyxXQUFBLElBQUF6cUMsRUFBQXhCLEVBQUFrc0MsV0FBQSxJQUFBMXFDLEVBQUF4QixFQUFBbXNDLFVBQUEzbkMsRUFBQTRULE1BQUEsTUFBQSxXQUFBLFdBQUEsVUFBQSxTQUFBN1gsRUFBQWlFLEdBQUF4RSxFQUFBd0UsR0FBQTBuQixJQUFBanNCLEVBQUEsSUFBQVksS0FBQTJDLEtBQUEsUUFBQWxELEdBQUFDLEdBQUFBLEVBQUFpaUIsUUFBQTVoQixFQUFBa3JDLFNBQUF0bkMsRUFBQTRULE1BQUEsTUFBQSxXQUFBLFdBQUEsVUFBQSxTQUFBNVQsRUFBQWhELEdBQUFqQixFQUFBaUIsR0FBQTBxQixJQUFBanNCLEVBQUEsSUFBQVksS0FBQU4sRUFBQXlyQyxJQUFBL1EsWUFBQTE2QixFQUFBNnJDLFNBQUFDLFVBQUE5ckMsRUFBQTByQyxTQUFBaFIsWUFBQTE2QixFQUFBNnJDLFNBQUFDLFVBQUE5c0IsT0FBQWhmLEVBQUEyckMsU0FBQTNzQixPQUFBbmUsSUFBQTRDLEVBQUF6RCxFQUFBSyxFQUFBa3JDLFFBQUEsSUFBQSxRQUFBbGtDLEdBQUFySCxHQUFBLEdBQUFpRSxHQUFBaEQsRUFBQWdDLEVBQUF4RCxFQUFBb0IsSUFBQSxLQUFBYixFQUFBQSxFQUFBNk4sUUFBQSxXQUFBLEtBQUFBLFFBQUEsV0FBQSxLQUFBNUosRUFBQWpFLEVBQUFzTCxNQUFBLEtBQUE3TCxFQUFBLEVBQUF3QixFQUFBZ0QsRUFBQTdELE9BQUFYLEVBQUF3QixFQUFBeEIsSUFBQXdFLEVBQUF4RSxHQUFBd0UsRUFBQXhFLEdBQUE2TCxNQUFBLEtBQUFySSxFQUFBZ0IsRUFBQXhFLEdBQUEsSUFBQSxnQkFBQXdELElBQUFBLFlBQUFoRCxXQUFBZ0QsRUFBQSxTQUFBQSxHQUFBLFVBQUFBLEdBQUFBLElBQUEsZ0JBQUFBLElBQUFBLFlBQUFoRCxXQUFBZ0QsRUFBQThvQyxNQUFBOW9DLEdBQUFBLEdBQUFBLEdBQUFwQyxFQUFBb0QsRUFBQXhFLEdBQUEsSUFBQXdELENBQUEsT0FBQXBDLEdBQUEsUUFBQXNFLEtBQUEsSUFBQSxHQUFBbkYsR0FBQStGLEVBQUE5QixFQUFBLEVBQUFBLEVBQUE4SixVQUFBM04sU0FBQTZELEVBQUFqRSxHQUFBLElBQUErTixVQUFBOUosRUFBQSxPQUFBakUsR0FBQSxRQUFBcUIsS0FBQSxHQUFBckIsR0FBQWlCLEVBQUFnQyxFQUFBbUQsU0FBQThNLEtBQUFyRixRQUFBLElBQUEsR0FBQSxJQUFBNUssRUFBQSxDQUFBLElBQUFoQyxFQUFBZ0QsRUFBQSxxQkFBQWhCLEVBQUEsTUFBQSxNQUFBeEQsSUFBQXdCLEdBQUFBLEVBQUFiLFNBQUFKLEVBQUFpRSxFQUFBSCxHQUFBa29DLE9BQUEvcUMsRUFBQTJPLEtBQUE5TCxJQUFBOUQsR0FBQUEsRUFBQTZyQyxTQUFBSSxjQUFBanNDLEVBQUFzUixZQUFBeFIsSUFBQUEsRUFBQW1pQixRQUFBNWhCLEVBQUFtckMsUUFBQTFyQyxFQUFBK3JDLFNBQUFJLGNBQUFuc0MsRUFBQXFjLFFBQUEsUUFBQXRZLEdBQUE3RCxFQUFBaUIsR0FBQSxHQUFBZ0MsR0FBQWdCLEVBQUFTLFNBQUE4VyxNQUFBL2IsRUFBQXdELEVBQUFwQyxFQUFBc0osSUFBQXRKLEdBQUFnckMsU0FBQTVuQyxFQUFBMkksVUFBQS9NLEVBQUFvQixHQUFBSixFQUFBc3BCLE1BQUFsbUIsRUFBQUgsR0FBQWtvQyxPQUFBN25DLEtBQUF0RCxHQUFBLEVBQUFBLEVBQUFvaEIsTUFBQTVoQixFQUFBa3JDLE9BQUExcUMsRUFBQTZxQyxTQUFBem5DLEVBQUEsSUFBQWtCLEVBQUEsWUFBQSxPQUFBdEUsRUFBQWdyQyxTQUFBdHdCLFVBQUExYSxFQUFBZ3JDLFNBQUF0d0IsU0FBQW5iLFNBQUFYLEVBQUF3RSxFQUFBcEQsRUFBQWdyQyxTQUFBdHdCLFdBQUExYSxFQUFBNnFDLFNBQUF0ckMsU0FBQVMsRUFBQTZxQyxTQUFBem5DLEVBQUEsU0FBQXcyQixTQUFBdDFCLEVBQUEsV0FBQSxJQUFBQSxFQUFBLEtBQUE5RSxFQUFBa3JDLFNBQUF2c0IsT0FBQXZmLEVBQUE2eUIsT0FBQXp4QixFQUFBNnFDLFdBQUE3cUMsRUFBQTRxQyxJQUFBeG5DLEVBQUEsSUFBQWtCLEVBQUEsT0FBQXMxQixTQUFBdDFCLEVBQUEsS0FBQTlFLEVBQUFrckMsU0FBQTFxQyxFQUFBK3FDLE9BQUE1ckMsRUFBQXk2QixTQUFBMTBCLEVBQUEsSUFBQVosRUFBQSxrQkFBQSxJQUFBdEUsRUFBQWdyQyxTQUFBQyxTQUFBLElBQUEzbUMsRUFBQSxLQUFBOUUsRUFBQWtyQyxTQUFBdnhCLEtBQUEsV0FBQSxNQUFBblosRUFBQThxQyxTQUFBMW5DLEVBQUEsU0FBQXcyQixTQUFBdDFCLEVBQUEsV0FBQSxJQUFBdEUsRUFBQWdyQyxTQUFBQyxTQUFBLElBQUEzbUMsRUFBQSxLQUFBOUUsRUFBQWtyQyxTQUFBdnNCLE9BQUFzVCxPQUFBenhCLEVBQUErcUMsUUFBQW5zQyxFQUFBNnlCLE9BQUF6eEIsRUFBQThxQyxVQUFBOXFDLEVBQUE4cUMsU0FBQXRhLEdBQUEsU0FBQXRyQixFQUFBLGdDQUFBLFNBQUEvRixHQUFBQSxFQUFBa3VCLGlCQUFBcnRCLEVBQUFzYixVQUFBdGIsRUFBQThxQyxTQUFBdGEsR0FBQSxTQUFBdHJCLEVBQUEsaUNBQUEsU0FBQS9GLEdBQUFBLEVBQUFrdUIsaUJBQUFydEIsRUFBQStxQyxPQUFBamUsUUFBQS9wQixFQUFBc29DLGNBQUFyckMsRUFBQWdyQyxTQUFBTSxlQUFBdHJDLEVBQUFzYixNQUFBdlksRUFBQXNvQyxnQkFBQXJyQyxFQUFBOHFDLFNBQUF0YSxHQUFBLFNBQUF0ckIsRUFBQSxrQ0FBQSxTQUFBL0YsR0FBQUEsRUFBQWt1QixpQkFBQXJ0QixFQUFBK3FDLE9BQUFqZSxRQUFBL3BCLEVBQUF3b0MsY0FBQXZyQyxFQUFBZ3JDLFNBQUFRLGdCQUFBeHJDLEVBQUFzYixNQUFBdlksRUFBQXdvQyxnQkFBQXZyQyxFQUFBOHFDLFNBQUF0YSxHQUFBLFNBQUF0ckIsRUFBQSxTQUFBL0YsR0FBQSxHQUFBaUIsR0FBQWdELEVBQUFqRSxFQUFBeUgsT0FBQXhHLEdBQUEyNUIsU0FBQXoxQixFQUFBLGFBQUF0RSxFQUFBZ3JDLFNBQUFTLHFCQUFBenJDLEVBQUFzYixVQUFBLEdBQUFyYyxHQUFBSSxFQUFBNEQsRUFBQSxVQUFBaUMsRUFBQS9GLEVBQUF1c0MsaUJBQUF2c0MsRUFBQXVzQyxnQkFBQUMsV0FBQTFvQyxFQUFBcEUsRUFBQXVFLEVBQUEyVSxLQUFBLGlCQUFBLHVCQUFBLG1CQUFBLG1CQUFBLFNBQUE1WSxHQUFBLE1BQUFBLEdBQUEsSUFBQStGLElBQUErTSxLQUFBLEtBQUF4UyxFQUFBMkQsRUFBQTJVLEtBQUEsZUFBQSxxQkFBQSxpQkFBQSxpQkFBQSxTQUFBNVksR0FBQSxNQUFBQSxHQUFBLElBQUErRixJQUFBK00sS0FBQSxLQUFBalQsRUFBQW9FLEVBQUEySSxRQUFBcS9CLGNBQUEsRUFBQUksZ0JBQUEsRUFBQUYsZUFBQSxFQUFBTSxlQUFBLEVBQUFILHFCQUFBLEVBQUFSLFNBQUEsR0FBQXZ3QixTQUFBLE1BQUF2YixFQUFBdXNDLGlCQUFBdnNDLEVBQUF1c0MsZ0JBQUFHLFVBQUFyc0MsR0FBQWdyQyxRQUFBLFVBQUFFLE9BQUEsU0FBQUQsUUFBQSxVQUFBRSxPQUFBLFVBQUE1bkMsR0FBQXdvQyxhQUFBLGVBQUFGLGFBQUEsZ0JBQUFqbkMsRUFBQSxXQUFBLEdBQUFqRixHQUFBMEUsU0FBQW9KLGNBQUEsT0FBQTJPLEtBQUEsT0FBQSxVQUFBemMsRUFBQTJzQyxlQUFBLFNBQUEzc0MsRUFBQTRzQyxxQkFBQSxTQUFBNXNDLEVBQUE2c0Msa0JBQUEsU0FBQTdzQyxFQUFBOHNDLGlCQUFBLFNBQUE5c0MsRUFBQStzQyxrQkFBQWxtQyxFQUFBLG1CQUFBdEgsS0FBQWtELFVBQUFVLFNBQUFVLEdBQUF6QixVQUFBa1AsS0FBQSxXQUFBLEdBQUF0UixHQUFBaUIsRUFBQWtKLElBQUFsSixHQUFBZ2hCLFFBQUE1aEIsRUFBQWlyQyxTQUFBcnFDLEVBQUFnaEIsUUFBQTVoQixFQUFBZ3JDLFVBQUFyckMsRUFBQWlCLEVBQUEycUMsT0FBQTV4QixLQUFBLG1CQUFBaGEsR0FBQWlCLEVBQUE0cUMsU0FBQUksZUFBQS9yQyxFQUFBK0QsRUFBQXlCLFFBQUFpcUIsWUFBQXZwQixTQUFBOE0sS0FBQWxULEdBQUFGLEdBQUFBLElBQUFtQixHQUFBbEIsRUFBQUQsR0FBQUEsRUFBQW1CLEVBQUF4QixJQUFBd0IsRUFBQXdxQyxJQUFBaFIsU0FBQXg1QixFQUFBNHFDLFNBQUFDLFVBQUE3cUMsRUFBQXlxQyxTQUFBalIsU0FBQXg1QixFQUFBNHFDLFNBQUFDLFVBQUFodEIsT0FBQTdkLEVBQUEwcUMsU0FBQTdzQixPQUFBNlEsVUFBQSxHQUFBMXVCLEVBQUEycUMsT0FBQTNqQixRQUFBdmtCLEVBQUEsV0FBQUQsRUFBQXhDLEVBQUFaLEVBQUFpckMsVUFBQSxXQUFBN25DLEVBQUF4QyxFQUFBWixFQUFBbXJDLFNBQUF2cUMsS0FBQTRDLEVBQUF6QixVQUFBK1osTUFBQSxTQUFBbmMsR0FBQSxHQUFBaUIsR0FBQWtKLElBQUFsSixHQUFBZ2hCLFFBQUE1aEIsRUFBQWlyQyxTQUFBcnFDLEVBQUFnaEIsUUFBQTVoQixFQUFBZ3JDLFVBQUFwcUMsRUFBQTRxQyxTQUFBSSxjQUFBaHJDLEVBQUEycUMsT0FBQTV4QixLQUFBLHFCQUFBNVQsU0FBQThNLEtBQUEzTSxPQUFBLEtBQUFILFNBQUE4TSxLQUFBLEdBQUFqUCxFQUFBeUIsUUFBQWlxQixVQUFBenZCLElBQUF3RCxFQUFBLFdBQUFELEVBQUF4QyxFQUFBWixFQUFBZ3JDLFNBQUEsRUFBQXJyQyxJQUFBLFdBQUFpQixFQUFBd3FDLElBQUEvUSxZQUFBejVCLEVBQUE0cUMsU0FBQUMsVUFBQTdxQyxFQUFBeXFDLFNBQUFoUixZQUFBejVCLEVBQUE0cUMsU0FBQUMsVUFBQTlzQixPQUFBL2QsRUFBQTBxQyxTQUFBM3NCLE9BQUFuZSxJQUFBNEMsRUFBQXhDLEVBQUFaLEVBQUFrckMsUUFBQSxFQUFBdnJDLElBQUFpQixLQUFBNEMsRUFBQXpCLFVBQUE0cUMsU0FBQSxXQUFBLE1BQUE3aUMsTUFBQThYLE9BQUFwZSxFQUFBekIsVUFBQTZxQyxRQUFBLFdBQUEsR0FBQWp0QyxHQUFBaUIsRUFBQWdELEVBQUFILEdBQUFrb0MsTUFBQWpzQyxHQUFBb0ssTUFBQUEsS0FBQXdoQyxTQUFBajRCLGVBQUF6UyxHQUFBa0osS0FBQWdnQixPQUFBbnFCLEVBQUFpRSxFQUFBeVQsS0FBQXpXLEVBQUEsU0FBQWpCLEdBQUEsUUFBQUEsSUFBQUksT0FBQSxJQUFBSixJQUFBbUssS0FBQXVoQyxTQUFBaDRCLFNBQUF2SixLQUFBc2hDLElBQUEvUSxZQUFBdjFCLEVBQUEsS0FBQTlFLEVBQUFnckMsU0FBQSxJQUFBbG1DLEVBQUEsS0FBQTlFLEVBQUFpckMsU0FBQSxJQUFBbm1DLEVBQUEsS0FBQTlFLEVBQUFrckMsUUFBQSxJQUFBcG1DLEVBQUEsS0FBQTlFLEVBQUFtckMsV0FBQXZuQyxFQUFBSCxJQUFBa29DLFdBQUEvbkMsRUFBQXllLEdBQUE1ZSxHQUFBLFNBQUE5RCxHQUFBLEdBQUFpQixHQUFBZ0MsQ0FBQSxPQUFBa0gsTUFBQTBOLEtBQUEsU0FBQXBZLEVBQUFvQixHQUFBb0MsRUFBQWdCLEVBQUFwRCxHQUFBLE1BQUFvQyxFQUFBMk0sS0FBQTlMLElBQUE3QyxFQUFBLEdBQUE0QyxHQUFBWixFQUFBakQsR0FBQWlELEVBQUEyTSxLQUFBOUwsRUFBQTdDLEVBQUFrcEIsT0FBQWxwQixFQUFBNHFDLFNBQUFJLGNBQUFocEMsRUFBQStXLEtBQUEscUJBQUE1VCxTQUFBOE0sS0FBQTNNLE9BQUEsSUFBQXRGLEVBQUFxUSxRQUFBclEsRUFBQWdELEVBQUFILEdBQUFrb0MsT0FBQS9vQyxFQUFBMk0sS0FBQTlMLE1BQUE3QyxHQUFBZ0QsRUFBQVMsVUFBQXVULE1BQUEsV0FBQWhVLEVBQUFTLFVBQUEyc0IsR0FBQSxRQUFBLHdCQUFBLFNBQUFyeEIsR0FBQUEsRUFBQWt1QixnQkFBQSxJQUFBanRCLEdBQUFqQixFQUFBd0gsY0FBQXZFLEVBQUFoQyxFQUFBNEosYUFBQSx1QkFBQXBMLEVBQUF3RSxFQUFBLHFCQUFBaEIsRUFBQSxLQUFBZ0IsR0FBQUgsR0FBQWtvQyxPQUFBdnNDLEVBQUFtUSxLQUFBOUwsSUFBQXdOLFNBQUFyTixFQUFBUyxVQUFBd0QsS0FBQSxJQUFBbkMsR0FBQThSLEtBQUEsU0FBQTdYLEVBQUFpQixHQUFBLEdBQUFnQyxHQUFBZ0IsRUFBQWhELEdBQUF4QixFQUFBd0QsRUFBQTJNLEtBQUEsa0JBQUFuUSxJQUFBLGdCQUFBQSxJQUFBQSxZQUFBUSxXQUFBUixFQUFBNEgsRUFBQTVILElBQUFBLEtBQUF3RCxFQUFBYSxHQUFBckUsS0FBQXdFLEVBQUFTLFVBQUEyc0IsR0FBQSxXQUFBdHJCLEVBQUEsU0FBQS9GLEdBQUFGLEdBQUFBLEVBQUErckMsU0FBQVksZUFBQTNzQyxFQUFBbWlCLFFBQUE1aEIsRUFBQW1yQyxRQUFBLEtBQUF4ckMsRUFBQW12QixTQUFBcnZCLEVBQUFxYyxVQUFBbFksRUFBQXlCLFFBQUEyckIsR0FBQSxjQUFBdHJCLEVBQUExRSxRQ1RBLFNBQUE1QixFQUFBSSxHQUFBLGdCQUFBdU0sVUFBQSxtQkFBQUMsUUFBQUEsT0FBQUQsUUFBQXZNLElBQUEsa0JBQUF5TSxTQUFBQSxPQUFBQyxJQUFBRCxPQUFBek0sR0FBQUosRUFBQXl0QyxZQUFBcnRDLEtBQUFzSyxLQUFBLFdBQUEsWUFBQSxJQUFBMUssR0FBQSxTQUFBSSxFQUFBLFNBQUFBLEdBQUEsR0FBQUMsS0FBQSxLQUFBLEdBQUFJLEtBQUFMLEdBQUFDLEVBQUFELEVBQUFLLElBQUFULEVBQUFJLEVBQUFLLEVBQUEsT0FBQUosSUFBQUEsRUFBQUQsR0FBQSxZQUFBLEtBQUEsU0FBQSxRQUFBLFVBQUEsT0FBQSxPQUFBLE9BQUEsY0FBQSxRQUFBLFFBQUEsVUFBQSxTQUFBLFVBQUEsU0FBQSxPQUFBLFFBQUEsUUFBQSxPQUFBLFFBQUEsU0FBQSxRQUFBLFdBQUEsV0FBQSxhQUFBLGtCQUFBLGdCQUFBLHFCQUFBLGlCQUFBLGVBQUEsVUFBQSxXQUFBSyxFQUFBTCxHQUFBLFVBQUEsVUFBQSxPQUFBLFdBQUEsVUFBQUgsR0FBQWtLLE1BQUEsR0FBQXVqQyxVQUFBLEdBQUFyeUIsS0FBQSxHQUFBK1gsS0FBQSxHQUFBdHVCLEtBQUEsS0FBQTZvQyxZQUFBLEdBQUFDLFdBQUEsRUFBQUMsbUJBQUEsRUFBQUMsZ0JBQUEsRUFBQUMsbUJBQUEsRUFBQUMsa0JBQUEsRUFBQUMsV0FBQSxLQUFBQyxrQkFBQSxLQUFBQyxtQkFBQSxVQUFBQyxtQkFBQSxLQUFBQyxpQkFBQSxTQUFBQyxrQkFBQSxPQUFBQyxrQkFBQSxLQUFBQyxnQkFBQSxFQUFBQyxnQkFBQSxFQUFBQyxhQUFBLEVBQUFDLGlCQUFBLEVBQUFDLHFCQUFBLEVBQUFDLFNBQUEsS0FBQUMsV0FBQSxLQUFBQyxZQUFBLEtBQUFDLFdBQUEsS0FBQTd0QixNQUFBLEtBQUE5ZCxNQUFBLElBQUFvekIsUUFBQSxHQUFBaU0sV0FBQSxPQUFBM1osTUFBQSxLQUFBa21CLGlCQUFBLEdBQUFDLFdBQUEsR0FBQUMsZ0JBQUFDLGVBQUEsRUFBQUMsV0FBQSxLQUFBQyxtQkFBQUMsZUFBQSxLQUFBQyxpQkFBQUMsb0JBQUEsS0FBQUMsc0JBQUEsT0FBQUMsT0FBQSxLQUFBQyxRQUFBLE1BQUF0dkMsR0FBQSxtQkFBQUQsRUFBQXd2QyxNQUFBLG9DQUFBeHZDLEVBQUF5dkMsY0FBQSw0QkFBQXp2QyxFQUFBMHZDLEtBQUEsSUFBQXR2QyxFQUFBdVYsTUFBQSxzSUFBQTNWLEVBQUEwdkMsS0FBQSxJQUFBdHZDLEVBQUF1dkMsU0FBQSw4QkFBQTN2QyxFQUFBMHZDLEtBQUEsSUFBQXR2QyxFQUFBd3ZDLFFBQUEsOEJBQUE1dkMsRUFBQTB2QyxLQUFBLElBQUF0dkMsRUFBQXl2QyxLQUFBLDhCQUFBN3ZDLEVBQUEwdkMsS0FBQSxJQUFBdHZDLEVBQUF1OUIsUUFBQSx3S0FBQTM5QixFQUFBb3BCLE1BQUEsc0JBQUFwcEIsRUFBQThKLE1BQUEsNEJBQUE5SixFQUFBMmdDLFFBQUEsK0JBQUEzZ0MsRUFBQTBvQixNQUFBLHFDQUFBMW9CLEVBQUFtcEIsS0FBQSx1QkFBQW5wQixFQUFBOHZDLE1BQUEsMkZBQUE5dkMsRUFBQTBwQixPQUFBLGdDQUFBMXBCLEVBQUFpcEIsTUFBQSw2QkFBQWpwQixFQUFBa3BCLFNBQUEsWUFBQWxwQixFQUFBa3BCLFNBQUEseUVBQUFscEIsRUFBQSt2QyxTQUFBLGtDQUFBL3ZDLEVBQUFnd0MsZ0JBQUEsNEJBQUFod0MsRUFBQWl3QyxPQUFBLHdDQUFBandDLEVBQUFrd0MsUUFBQSxtREFBQWx3QyxFQUFBdVUsT0FBQSx1Q0FBQXZVLEVBQUFxYyxNQUFBLGdDQUFBdE8sUUFBQSxhQUFBLElBQUE3TixFQUFBLE9BQUFxQixFQUFBcUQsU0FBQWtILHVCQUFBOUwsRUFBQW13QyxVQUFBNXVDLEdBQUFqQixPQUFBSixFQUFBcUIsRUFBQSxJQUFBckIsRUFBQTBFLFNBQUFvSixjQUFBLE9BQUE5TixFQUFBcUwsVUFBQXZMLEVBQUFtd0MsVUFBQWp3QyxFQUFBa2IsVUFBQW5iLEVBQUEsSUFBQU8sR0FBQSxTQUFBYixFQUFBSSxHQUFBSixFQUFBUSxPQUFBUixHQUFBb08sUUFBQSxjQUFBLElBQUFwTyxFQUFBVyxPQUFBLElBQUFYLEVBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQUFJLEVBQUFBLEdBQUEsQ0FBQSxLQUFBLEdBQUFDLEdBQUEsSUFBQUksRUFBQSxFQUFBQSxFQUFBLEVBQUFBLElBQUEsQ0FBQSxHQUFBUixHQUFBa0QsU0FBQW5ELEVBQUE4RyxPQUFBLEVBQUFyRyxFQUFBLEdBQUEsR0FBQVIsR0FBQTRELEtBQUE0c0MsTUFBQTVzQyxLQUFBNnNDLElBQUE3c0MsS0FBQXNaLElBQUEsRUFBQWxkLEVBQUFBLEVBQUFHLEdBQUEsTUFBQThELFNBQUEsSUFBQTdELElBQUEsS0FBQUosR0FBQTZHLE9BQUE3RyxFQUFBVSxRQUFBLE1BQUFOLElBQUFtQixHQUFBbXZDLHNCQUFBLEtBQUFDLHNCQUFBLEtBQUFDLG9CQUFBLE1BQUFqd0MsRUFBQSxXQUFBLEdBQUEsbUJBQUFxRSxVQUFBLFdBQUF1bUMsU0FBQXgxQixNQUFBLDhDQUFBLEtBQUEvUSxTQUFBa0gsdUJBQUE5TCxFQUFBbXdDLFdBQUE3dkMsT0FBQSxDQUFBc0UsU0FBQThXLEtBQUEzQixZQUFBN1osRUFBQSxJQUFBUCxHQUFBcUUsSUFBQWpFLEVBQUFzSCxFQUFBMUgsRUFBQUssRUFBQTBvQixPQUFBdG9CLEVBQUFpSCxFQUFBMUgsRUFBQUssRUFBQW1wQixNQUFBdnBCLEVBQUFELEVBQUE4d0MsY0FBQSxJQUFBendDLEVBQUE4dkMsTUFBQSxVQUFBN3ZDLEVBQUFOLEVBQUE4d0MsY0FBQSxJQUFBendDLEVBQUE4dkMsTUFBQSxXQUFBdnVDLEVBQUE4RixFQUFBMUgsRUFBQUssRUFBQTBwQixRQUFBbHBCLEVBQUFiLEVBQUE4d0MsY0FBQSxJQUFBendDLEVBQUFrcEIsU0FBQSxVQUFBL25CLEVBQUFrRyxFQUFBMUgsRUFBQUssRUFBQSt2QyxTQUFBLE9BQUFod0MsR0FBQTJ3QyxRQUFBLFdBQUF0dkMsRUFBQXV2Qyx3QkFBQTV3QyxFQUFBNndDLFVBQUEsU0FBQWp4QyxHQUFBdVYsV0FBQSxXQUFBLEtBQUF2VixFQUFBMHZCLFVBQUExdkIsRUFBQWl2QixrQkFBQXh0QixFQUFBeXZDLGlCQUFBLElBQUF6d0MsRUFBQTB3QyxTQUFBLFdBQUExdkMsRUFBQXV2Qyx3QkFBQS93QyxFQUFBOHdDLFFBQUEsV0FBQXR2QyxFQUFBdXZDLHVCQUFBMXdDLEVBQUFnTCxNQUFBckwsRUFBQXFMLE9BQUFyTCxFQUFBa3hDLFNBQUEsV0FBQTF2QyxFQUFBdXZDLHVCQUFBL3dDLEVBQUFteEMsZ0JBQUE5bEMsTUFBQXJMLEVBQUFxTCxPQUFBMUosRUFBQXV2QyxTQUFBLFdBQUExdkMsRUFBQXV2Qyx3QkFBQW53QyxFQUFBc3dDLFNBQUEsV0FBQTF2QyxFQUFBdXZDLHdCQUFBeHZDLEVBQUF1dkMsUUFBQSxXQUFBdHZDLEVBQUF1dkMsd0JBQUFoeEMsSUFBQXdELEVBQUEsU0FBQXhELEdBQUEsTUFBQU8sR0FBQXV3QyxjQUFBLElBQUE5d0MsSUFBQXFFLEVBQUEsV0FBQSxNQUFBWSxVQUFBOFcsS0FBQSswQixjQUFBLElBQUF6d0MsRUFBQXd2QyxRQUFBanZDLEtBQUFRLEVBQUEsV0FBQSxHQUFBcEIsR0FBQXFFLEdBQUEsT0FBQXJFLEdBQUF5SyxpQkFBQSxJQUFBcEssRUFBQTB2QyxPQUFBM3JDLEVBQUEsV0FBQSxNQUFBWixHQUFBbkQsRUFBQThKLFFBQUFoRyxFQUFBLFdBQUEsTUFBQVgsR0FBQW5ELEVBQUEyZ0MsVUFBQS84QixFQUFBLFdBQUEsTUFBQVQsR0FBQW5ELEVBQUFvcEIsUUFBQWxsQixFQUFBLFdBQUEsTUFBQWYsR0FBQW5ELEVBQUFpd0MsU0FBQXRzQyxFQUFBLFdBQUEsTUFBQVIsR0FBQW5ELEVBQUF5dkMsZ0JBQUF0ckMsRUFBQSxXQUFBLE1BQUFoQixHQUFBbkQsRUFBQWd3QyxrQkFBQTdxQyxFQUFBLFdBQUEsTUFBQWhDLEdBQUFuRCxFQUFBa3dDLFVBQUF2cUMsRUFBQSxXQUFBLE1BQUF4QyxHQUFBbkQsRUFBQXVVLFNBQUFsUCxFQUFBLFdBQUEsTUFBQWxDLEdBQUFuRCxFQUFBcWMsUUFBQTdXLEVBQUEsU0FBQXpGLEdBQUEsR0FBQUMsSUFBQW1GLElBQUFRLElBQUEsT0FBQTVGLElBQUFDLEVBQUE4cUIsVUFBQTlxQixFQUFBa0ksT0FBQStCLE1BQUEzSCxVQUFBb0IsTUFBQWxCLEtBQUF3QixJQUFBb0csaUJBQUEsc0JBQUF6SyxFQUFBLHFEQUFBb0gsRUFBQSxTQUFBcEgsRUFBQUksR0FBQSxRQUFBSixFQUFBcXhDLFdBQUFyeEMsRUFBQXF4QyxVQUFBbHFCLFNBQUEvbUIsSUFBQTJFLEVBQUEsU0FBQS9FLEdBQUEsR0FBQUEsRUFBQXdvQixRQUFBLFNBQUF4b0IsRUFBQThFLEtBQUEsQ0FBQSxHQUFBMUUsR0FBQUosRUFBQXNMLEtBQUF0TCxHQUFBc0wsTUFBQSxHQUFBdEwsRUFBQXNMLE1BQUFsTCxJQUFBa0UsRUFBQSxTQUFBdEUsRUFBQUksR0FBQSxHQUFBSixHQUFBSSxFQUFBLENBQUEsR0FBQUMsR0FBQUQsRUFBQXlMLE1BQUEsT0FBQXFNLE9BQUE4dUIsUUFBQTNtQyxHQUFBZ1AsUUFBQSxTQUFBalAsR0FBQUosRUFBQXF4QyxVQUFBcDJCLElBQUE3YSxPQUFBcUQsRUFBQSxTQUFBekQsRUFBQUksR0FBQSxHQUFBSixHQUFBSSxFQUFBLENBQUEsR0FBQUMsR0FBQUQsRUFBQXlMLE1BQUEsT0FBQXFNLE9BQUE4dUIsUUFBQTNtQyxHQUFBZ1AsUUFBQSxTQUFBalAsR0FBQUosRUFBQXF4QyxVQUFBcDlCLE9BQUE3VCxPQUFBc0gsRUFBQSxTQUFBMUgsRUFBQUksR0FBQSxJQUFBLEdBQUFDLEdBQUEsRUFBQUEsRUFBQUwsRUFBQThaLFdBQUFuWixPQUFBTixJQUFBLEdBQUErRyxFQUFBcEgsRUFBQThaLFdBQUF6WixHQUFBRCxHQUFBLE1BQUFKLEdBQUE4WixXQUFBelosSUFBQWlDLEVBQUEsU0FBQXRDLEVBQUFJLEdBQUFBLElBQUFBLEVBQUEsU0FBQUosRUFBQWdkLE1BQUFtQixRQUFBLEdBQUFuZSxFQUFBZ2QsTUFBQWYsUUFBQTdiLEdBQUFrRyxFQUFBLFNBQUF0RyxHQUFBQSxFQUFBZ2QsTUFBQW1CLFFBQUEsR0FBQW5lLEVBQUFnZCxNQUFBZixRQUFBLFFBQUF4VSxFQUFBLFNBQUF6SCxHQUFBLEtBQUFBLEVBQUFtYSxZQUFBbmEsRUFBQTZrQixZQUFBN2tCLEVBQUFtYSxhQUFBN1UsRUFBQSxTQUFBdEYsR0FBQSxNQUFBQSxHQUFBc2QsYUFBQXRkLEVBQUF1ZCxjQUFBdmQsRUFBQXN4QyxpQkFBQTN3QyxRQUFBeUgsRUFBQSxTQUFBcEksRUFBQUksR0FBQUosRUFBQWdkLE1BQUF1MEIsZUFBQXZ4QyxFQUFBZ2QsTUFBQXUwQixlQUFBbnhDLEdBQUFKLEVBQUFnZCxNQUFBdEMsZ0JBQUF0YSxJQUFBMEksRUFBQSxTQUFBOUksR0FBQSxJQUFBc0YsRUFBQXRGLEdBQUEsT0FBQSxDQUFBLElBQUEsa0JBQUF3eEMsWUFBQSxDQUFBLEdBQUFweEMsR0FBQSxHQUFBb3hDLFlBQUEsU0FBQUMsS0FBQXhyQyxPQUFBeXJDLFNBQUEsRUFBQUMsWUFBQSxHQUFBM3hDLEdBQUE0eEMsY0FBQXh4QyxPQUFBLElBQUE2RSxTQUFBNHNDLFlBQUEsQ0FBQSxHQUFBeHhDLEdBQUE0RSxTQUFBNHNDLFlBQUEsY0FBQXh4QyxHQUFBeXhDLFVBQUEsU0FBQSxHQUFBLEdBQUE5eEMsRUFBQTR4QyxjQUFBdnhDLE9BQUE0RSxVQUFBOHNDLGtCQUFBL3hDLEVBQUFneUMsVUFBQSxXQUFBLGtCQUFBaHlDLEdBQUFpeUMsU0FBQWp5QyxFQUFBaXlDLFdBQUFudkMsRUFBQSxXQUFBLEdBQUE5QyxHQUFBaUYsU0FBQW9KLGNBQUEsT0FBQWpPLEdBQUE4eEMsZ0JBQUEscUJBQUFDLFdBQUEsOEJBQUFDLFlBQUEsaUJBQUF4RSxVQUFBLGVBQUEsS0FBQSxHQUFBdnRDLEtBQUFELEdBQUEsR0FBQUEsRUFBQXdDLGVBQUF2QyxJQUFBLFNBQUFMLEVBQUFnZCxNQUFBM2MsR0FBQSxNQUFBRCxHQUFBQyxFQUFBLFFBQUEsS0FBQWdHLEVBQUEsV0FBQSxHQUFBckcsR0FBQXFFLEdBQUE0QixRQUFBZ3JDLFVBQUF6dkMsRUFBQW12QyxzQkFBQW52QyxFQUFBb3ZDLHVCQUFBcHZDLEVBQUFvdkMsc0JBQUFwb0IsT0FBQWhuQixFQUFBb3ZDLHNCQUFBcG9CLFFBQUF5USxhQUFBajVCLEVBQUEyUSxVQUFBL0ksRUFBQSxXQUFBLEdBQUE1SCxHQUFBaUYsU0FBQW9KLGNBQUEsTUFBQXJPLEdBQUFnZCxNQUFBM1osTUFBQSxPQUFBckQsRUFBQWdkLE1BQUExWixPQUFBLE9BQUF0RCxFQUFBZ2QsTUFBQTZCLFNBQUEsU0FBQTVaLFNBQUE4VyxLQUFBM0IsWUFBQXBhLEVBQUEsSUFBQUksR0FBQUosRUFBQXNkLFlBQUF0ZCxFQUFBcXlDLFdBQUEsT0FBQXB0QyxVQUFBOFcsS0FBQThJLFlBQUE3a0IsR0FBQUksR0FBQWEsRUFBQSxTQUFBakIsRUFBQUksR0FBQSxHQUFBQyxHQUFBLE1BQUEsT0FBQSxZQUFBLEdBQUFJLEdBQUEsV0FBQUosRUFBQSxLQUFBTCxJQUFBaTVCLGNBQUE1NEIsR0FBQUEsRUFBQWtWLFdBQUE5VSxFQUFBTCxLQUFBb0gsRUFBQSxrQkFBQThxQyxTQUFBLGdCQUFBQSxRQUFBQyxTQUFBLFNBQUF2eUMsR0FBQSxhQUFBQSxJQUFBLFNBQUFBLEdBQUEsTUFBQUEsSUFBQSxrQkFBQXN5QyxTQUFBdHlDLEVBQUEyVixjQUFBMjhCLFFBQUF0eUMsSUFBQXN5QyxPQUFBM3ZDLFVBQUEsZUFBQTNDLElBQUEwSixHQUFBLFdBQUEsUUFBQTFKLEdBQUFBLEdBQUEwSyxLQUFBWSxNQUFBdEwsRUFBQSxRQUFBSSxHQUFBQSxHQUFBLFFBQUFDLEdBQUFMLEVBQUFJLEdBQUEsTUFBQSxJQUFBdU4sU0FBQSxTQUFBdE4sRUFBQUosR0FBQSxHQUFBMkIsSUFBQTR3QyxJQUFBeHlDLEVBQUF5eUMsSUFBQXJ5QyxFQUFBeVAsUUFBQXhQLEVBQUFpVSxPQUFBclUsRUFBQXFxQixLQUFBLEtBQUEvcEIsR0FBQUEsRUFBQUEsRUFBQStwQixLQUFBMW9CLEdBQUF0QixFQUFBQyxFQUFBcUIsRUFBQW5CLEVBQUFULEVBQUFJLE1BQUEsUUFBQUssR0FBQUosRUFBQUMsR0FBQSxJQUFBLEdBQUFDLEdBQUFILEVBQUFDLEdBQUFDLEdBQUFzQixFQUFBckIsRUFBQStLLEtBQUExSixhQUFBNUIsR0FBQTJOLFFBQUFrQyxRQUFBak8sRUFBQTBKLE9BQUEyRSxLQUFBLFNBQUFqUSxHQUFBUyxFQUFBLE9BQUFULElBQUEsU0FBQUEsR0FBQVMsRUFBQSxRQUFBVCxLQUFBQyxFQUFBTSxFQUFBK2UsS0FBQSxTQUFBLFNBQUEvZSxFQUFBK0ssT0FBQSxNQUFBdEwsR0FBQUMsRUFBQSxRQUFBRCxJQUFBLFFBQUFDLEdBQUFELEVBQUFJLEdBQUEsT0FBQUosR0FBQSxJQUFBLFNBQUFNLEVBQUF1UCxTQUFBdkUsTUFBQWxMLEVBQUFrZixNQUFBLEdBQUEsTUFBQSxLQUFBLFFBQUFoZixFQUFBZ1UsT0FBQWxVLEVBQUEsTUFBQSxTQUFBRSxFQUFBdVAsU0FBQXZFLE1BQUFsTCxFQUFBa2YsTUFBQSxJQUFBaGYsRUFBQUEsRUFBQWdxQixLQUFBaHFCLEVBQUFHLEVBQUFILEVBQUFreUMsSUFBQWx5QyxFQUFBbXlDLEtBQUFseUMsRUFBQSxLQUFBLEdBQUFELEdBQUFDLENBQUFtSyxNQUFBZ29DLFFBQUFyeUMsRUFBQSxrQkFBQUQsR0FBQXV5QyxTQUFBam9DLEtBQUFpb0MsT0FBQSxRQUFBLE1BQUEsa0JBQUFMLFNBQUFBLE9BQUFNLGdCQUFBeHlDLEVBQUF1QyxVQUFBMnZDLE9BQUFNLGVBQUEsV0FBQSxNQUFBbG9DLFFBQUF0SyxFQUFBdUMsVUFBQTJuQixLQUFBLFNBQUF0cUIsR0FBQSxNQUFBMEssTUFBQWdvQyxRQUFBLE9BQUExeUMsSUFBQUksRUFBQXVDLFVBQUFrd0MsTUFBQSxTQUFBN3lDLEdBQUEsTUFBQTBLLE1BQUFnb0MsUUFBQSxRQUFBMXlDLElBQUFJLEVBQUF1QyxVQUFBZ3dDLE9BQUEsU0FBQTN5QyxHQUFBLE1BQUEwSyxNQUFBZ29DLFFBQUEsU0FBQTF5QyxLQUFBMCtCLEtBQUEsU0FBQTErQixHQUFBLE1BQUEsWUFBQSxNQUFBLElBQUFJLEdBQUFKLEVBQUF1UCxNQUFBN0UsS0FBQTRELGNBQUF3a0MsTUFBQSxTQUFBMXlDLEdBQUEsTUFBQSxJQUFBSixHQUFBSSxRQUFBc0MsT0FBQThKLFFBQUEsU0FBQXhNLEdBQUEsSUFBQSxHQUFBSSxHQUFBLEVBQUFBLEVBQUFrTyxVQUFBM04sT0FBQVAsSUFBQSxDQUFBLEdBQUFDLEdBQUFpTyxVQUFBbE8sRUFBQSxLQUFBLEdBQUFLLEtBQUFKLEdBQUFxQyxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBeEMsRUFBQUksS0FBQVQsRUFBQVMsR0FBQUosRUFBQUksSUFBQSxNQUFBVCxLQUFBb0QsRUFBQXNHLEtBQUF6SixHQUFBc0osS0FBQXBKLEVBQUEsT0FBQW9CLEVBQUEsU0FBQXZCLEdBQUEsR0FBQUksR0FBQWlFLEdBQUEsS0FBQSxHQUFBL0QsS0FBQU4sR0FBQUMsRUFBQTJDLGVBQUF0QyxJQUFBLGdCQUFBQSxHQUFBa3JDLFFBQUF1SCxLQUFBLG1DQUFBenlDLEVBQUEsSUFBQUYsR0FBQTRjLE1BQUEzWixNQUFBLGdCQUFBckQsR0FBQXFELE1BQUFyRCxFQUFBcUQsTUFBQSxLQUFBckQsRUFBQXFELE1BQUFqRCxFQUFBNGMsTUFBQXlaLFFBQUF6MkIsRUFBQXkyQixRQUFBLEtBQUFyMkIsRUFBQTRjLE1BQUEwbEIsV0FBQTFpQyxFQUFBMGlDLFVBQUEsSUFBQW5pQyxHQUFBNkQsSUFBQXhDLEVBQUF1QyxJQUFBdEQsRUFBQTJFLElBQUFoRSxFQUFBd0UsSUFBQXBGLEVBQUE4RSxHQUFBLElBQUExRixFQUFBMHRDLFVBQUFudEMsRUFBQThuQixVQUFBcm9CLEVBQUEwdEMsVUFBQW50QyxFQUFBa2IsVUFBQXpiLEVBQUFtSyxNQUFBMEIsTUFBQSxNQUFBd0gsS0FBQSxRQUFBclQsRUFBQXFiLE1BQUFyYixFQUFBb3pCLEtBQUEsQ0FBQSxHQUFBLFdBQUE1ckIsRUFBQXhILEVBQUFvekIsTUFBQSxHQUFBeHhCLEVBQUE2WixVQUFBLEdBQUEsSUFBQXpiLEdBQUFvekIsS0FBQSxJQUFBLEdBQUE1dkIsR0FBQSxFQUFBQSxJQUFBeEQsR0FBQW96QixLQUFBNXZCLElBQUE1QixFQUFBd1ksWUFBQXBhLEVBQUFvekIsS0FBQTV2QixHQUFBeXBCLFdBQUEsUUFBQXJyQixHQUFBd1ksWUFBQXBhLEVBQUFvekIsS0FBQW5HLFdBQUEsUUFBQWp0QixHQUFBb3pCLEtBQUF4eEIsRUFBQTZaLFVBQUF6YixFQUFBb3pCLEtBQUFwekIsRUFBQXFiLE9BQUF6WixFQUFBNmxCLFlBQUF6bkIsRUFBQXFiLEtBQUEvWSxHQUFBVixPQUFBMEUsR0FBQTFFLEVBQUE1QixHQUFBMnVDLGdCQUFBcnNDLEVBQUExQixHQUFBMEYsRUFBQTFGLEdBQUFSLEVBQUF3TCxVQUFBdkwsRUFBQXd2QyxNQUFBN3ZDLEVBQUEydEMsYUFBQXJwQyxFQUFBbEUsRUFBQUosRUFBQTJ0QyxZQUFBLElBQUFucEMsR0FBQVIsSUFBQTZCLEVBQUExQyxTQUFBLE9BQUFuRCxFQUFBeXZDLG9CQUFBaHVDLEVBQUF1eEMsZUFBQWh6QyxFQUFBeXZDLG9CQUFBLEdBQUF6dkMsR0FBQXd2QyxjQUFBN3VDLFFBQUEyQixFQUFBa0MsR0FBQWlELEVBQUFqRCxHQUFBcUIsR0FBQTdGLEVBQUF3dkMsY0FBQTd1QyxRQUFBNnFDLFFBQUF1SCxLQUFBLHNKQUFBL3lDLEVBQUF3dkMsY0FBQW5nQyxRQUFBLFNBQUFqUCxFQUFBSyxHQUFBLEdBQUFSLEdBQUFnRixTQUFBb0osY0FBQSxLQUFBLElBQUEvSixFQUFBckUsRUFBQUksRUFBQTR5QyxnQkFBQWh6QyxFQUFBd2IsVUFBQXJiLEVBQUFLLElBQUFvRixHQUFBdkIsRUFBQXJFLEVBQUFJLEVBQUE2eUMsb0JBQUExdUMsRUFBQTRWLFlBQUFuYSxHQUFBUSxJQUFBVCxFQUFBd3ZDLGNBQUE3dUMsT0FBQSxFQUFBLENBQUEsR0FBQUwsR0FBQTJFLFNBQUFvSixjQUFBLEtBQUEvSixHQUFBaEUsRUFBQUQsRUFBQTh5QyxjQUFBN3lDLEVBQUEwYyxNQUFBM1osTUFBQXJELEVBQUEwdkMsc0JBQUFsckMsRUFBQTRWLFlBQUE5WixPQUFBZ0csRUFBQTlCLEVBQUEsS0FBQSxHQUFBNEMsR0FBQWhHLElBQUEyRCxFQUFBLEVBQUFBLEVBQUFxQyxFQUFBekcsT0FBQW9FLElBQUF1QixFQUFBYyxFQUFBckMsR0FBQSxJQUFBL0UsRUFBQThFLEtBQUEsQ0FBQSxHQUFBNEMsSUFBQSxDQUFBLEtBQUEsR0FBQXBDLEtBQUE3RSxHQUFBLEdBQUFULEVBQUE4RSxPQUFBUSxFQUFBLENBQUFvQyxHQUFBLENBQUEsT0FBQSxJQUFBQSxFQUFBLE1BQUE4akMsU0FBQXgxQixNQUFBLG9DQUFBaFcsRUFBQThFLE9BQUEsQ0FBQSxJQUFBZ0UsR0FBQTFJLEVBQUEwd0MsY0FBQSxJQUFBendDLEVBQUEwdkMsS0FBQSxJQUFBdHZDLEVBQUFULEVBQUE4RSxNQUFBLFFBQUF4QyxFQUFBd0csR0FBQTlJLEVBQUE4RSxNQUFBLElBQUEsVUFBQVIsRUFBQXdFLEVBQUEsV0FBQXhFLEVBQUF3RSxFQUFBZ29DLGNBQUEsUUFBQSx1QkFBQXhzQyxFQUFBd0UsRUFBQWdvQyxjQUFBLFNBQUEsdUJBQUEsTUFBQSxLQUFBLFFBQUF4c0MsRUFBQXdFLEVBQUEsc0JBQUF4RSxFQUFBd0UsRUFBQWdvQyxjQUFBLFdBQUEsaUJBQUEsTUFBQSxLQUFBLFVBQUF4c0MsRUFBQXdFLEVBQUEsa0JBQUEsR0FBQWhHLEdBQUFtQixHQUFBakUsR0FBQTZ1QyxVQUFBL3JDLEVBQUF5SixhQUFBLE1BQUF2TSxFQUFBNnVDLFVBQUF2c0MsRUFBQVEsR0FBQTlDLEVBQUE4dUMsV0FBQWhzQyxFQUFBeUosYUFBQSxRQUFBdk0sRUFBQTh1QyxZQUFBaHNDLEVBQUE0WCxnQkFBQSxTQUFBMWEsRUFBQSt1QyxZQUFBanNDLEVBQUF5SixhQUFBLFNBQUF2TSxFQUFBK3VDLGFBQUFqc0MsRUFBQTRYLGdCQUFBLFVBQUE1WCxFQUFBOEksVUFBQXZMLEVBQUFvcEIsTUFBQXpwQixFQUFBZ3ZDLFlBQUExcUMsRUFBQXhCLEVBQUE5QyxFQUFBZ3ZDLGFBQUExb0MsRUFBQXhELEdBQUE5QyxFQUFBZ3VDLGlCQUFBeHNDLEVBQUF3YixNQUFBZixRQUFBLGVBQUEzVixFQUFBOUUsR0FBQXhCLEVBQUErdEMsa0JBQUEzbEMsRUFBQXZILEVBQUEsV0FBQXlGLEVBQUF6RixFQUFBLElBQUF3RixHQUFBOUI7QUFBQXZFLEVBQUErdEMsbUJBQUEvdEMsRUFBQWd1QyxpQkFBQTFyQyxFQUFBK0QsR0FBQUMsRUFBQUQsR0FBQXhGLEVBQUE0YSxVQUFBemIsRUFBQWt1QyxrQkFBQTFzQyxFQUFBaWEsVUFBQXpiLEVBQUFxdUMsaUJBQUFydUMsRUFBQXd1QyxpQkFBQTN0QyxFQUFBbWMsTUFBQXVvQixnQkFBQXZsQyxFQUFBbXVDLG1CQUFBM3NDLEVBQUF3YixNQUFBdW9CLGdCQUFBdmxDLEVBQUFzdUMsbUJBQUF6dEMsRUFBQStLLFVBQUF2TCxFQUFBa3dDLFFBQUFqc0MsRUFBQXpELEVBQUFiLEVBQUFvdUMsb0JBQUE1c0MsRUFBQW9LLFVBQUF2TCxFQUFBdVUsT0FBQXRRLEVBQUE5QyxFQUFBeEIsRUFBQXV1QyxtQkFBQXZ1QyxFQUFBd3VDLGdCQUFBbHFDLEVBQUF6RCxFQUFBUixFQUFBK3lDLFFBQUE5dUMsRUFBQTlDLEVBQUFuQixFQUFBK3lDLFVBQUEzdkMsRUFBQTVDLEVBQUFSLEVBQUEreUMsUUFBQTN2QyxFQUFBakMsRUFBQW5CLEVBQUEreUMsUUFBQXZ5QyxFQUFBbWMsTUFBQXVvQixnQkFBQTFrQyxFQUFBbWMsTUFBQXEyQixnQkFBQXh5QyxFQUFBbWMsTUFBQXMyQixpQkFBQSxHQUFBOXhDLEVBQUF3YixNQUFBdW9CLGdCQUFBL2pDLEVBQUF3YixNQUFBcTJCLGdCQUFBN3hDLEVBQUF3YixNQUFBczJCLGlCQUFBLElBQUF0ekMsRUFBQTR0QyxhQUFBLEVBQUFucUMsRUFBQXJELEVBQUFDLEVBQUFrekMsYUFBQWp2QyxFQUFBbEUsRUFBQUMsRUFBQWt6QyxjQUFBaHRDLEVBQUEsU0FBQXZHLEVBQUFJLEdBQUEsR0FBQUssR0FBQTRELEdBQUFyRSxJQUFBc0UsRUFBQTdELEVBQUFKLEVBQUFnZixNQUFBL2EsRUFBQS9ELEVBQUFGLEVBQUFtekMsTUFBQS92QyxFQUFBaEQsRUFBQUosRUFBQWtmLE9BQUE5YixFQUFBaEQsRUFBQUosRUFBQW16QyxNQUFBbHhDLEVBQUE3QixHQUFBRixFQUFBeWMsTUFBQStCLFVBQUEsU0FBQWpjLElBQUFzRSxFQUFBM0csRUFBQUosRUFBQWt6QyxhQUFBOXlDLEVBQUFtRSxpQkFBQTlCLEVBQUEsUUFBQTlDLEtBQUFTLEVBQUE0WCxvQkFBQXZWLEVBQUE5QyxHQUFBTyxFQUFBeWMsTUFBQStCLFVBQUEsU0FBQXhlLEVBQUF5YyxNQUFBK0IsVUFBQSxPQUFBemEsRUFBQS9ELEVBQUFGLEVBQUFvekMsSUFBQW52QyxFQUFBVyxTQUFBOFcsS0FBQTFiLEVBQUFvekMsSUFBQXJ1QyxJQUFBMEMsSUFBQXRHLEVBQUFvdkMsc0JBQUEzckMsU0FBQXdVLGNBQUEsT0FBQXJaLEdBQUEsa0JBQUFBLElBQUFBLEVBQUFLLElBQUEyRSxFQUFBLFdBQUEsT0FBQTVELEVBQUFxdkMscUJBQUE1ckMsU0FBQThXLEtBQUE2ZCxhQUFBM3pCLE9BQUF5dEMsY0FBQWx5QyxFQUFBcXZDLG9CQUFBNXJDLFNBQUE4VyxLQUFBaUIsTUFBQTIyQixhQUFBMXVDLFNBQUE4VyxLQUFBaUIsTUFBQTIyQixhQUFBL3JDLElBQUEsT0FBQXBCLEVBQUEsV0FBQSxPQUFBaEYsRUFBQXF2QyxzQkFBQTVyQyxTQUFBOFcsS0FBQWlCLE1BQUEyMkIsYUFBQW55QyxFQUFBcXZDLG9CQUFBcnZDLEVBQUFxdkMsb0JBQUEsT0FBQS9vQyxFQUFBLFdBQUEsR0FBQTlILEdBQUEsbUJBQUFGLEtBQUFrRCxVQUFBUixhQUFBeUQsT0FBQTJ0QyxRQUFBLElBQUE1ekMsSUFBQW9ILEVBQUFuQyxTQUFBOFcsS0FBQTFiLEVBQUF3ekMsUUFBQSxDQUFBLEdBQUF6ekMsR0FBQTZFLFNBQUE4VyxLQUFBbVUsU0FBQWpyQixVQUFBOFcsS0FBQWlCLE1BQUFoWSxJQUFBNUUsR0FBQSxFQUFBLEtBQUFrRSxFQUFBVyxTQUFBOFcsS0FBQTFiLEVBQUF3ekMsVUFBQXB0QyxFQUFBLFdBQUEsR0FBQVcsRUFBQW5DLFNBQUE4VyxLQUFBMWIsRUFBQXd6QyxRQUFBLENBQUEsR0FBQTd6QyxHQUFBbUQsU0FBQThCLFNBQUE4VyxLQUFBaUIsTUFBQWhZLElBQUEsR0FBQXZCLEdBQUF3QixTQUFBOFcsS0FBQTFiLEVBQUF3ekMsUUFBQTV1QyxTQUFBOFcsS0FBQWlCLE1BQUFoWSxJQUFBLEdBQUFDLFNBQUE4VyxLQUFBbVUsVUFBQWx3QixHQUFBLElBQUFWLEVBQUEsV0FBQSxJQUFBLEdBQUFVLEdBQUFzTyxVQUFBM04sT0FBQVAsRUFBQWtLLE1BQUF0SyxHQUFBUyxFQUFBLEVBQUFBLEVBQUFULEVBQUFTLElBQUFMLEVBQUFLLEdBQUE2TixVQUFBN04sRUFBQSxJQUFBLFNBQUFMLEVBQUEsR0FBQSxNQUFBb3JDLFNBQUF4MUIsTUFBQSw4Q0FBQSxDQUFBLElBQUEvVixHQUFBeUosS0FBQXRHLEVBQUEsUUFBQW9FLEVBQUFwSCxFQUFBLEtBQUEsSUFBQSxTQUFBSCxFQUFBa0ssTUFBQS9KLEVBQUEsR0FBQUgsRUFBQW16QixLQUFBaHpCLEVBQUEsR0FBQUgsRUFBQTZFLEtBQUExRSxFQUFBLEVBQUEsTUFBQSxLQUFBLFNBQUFzSixFQUFBekosRUFBQUcsRUFBQSxJQUFBSCxFQUFBNnpDLFlBQUExekMsRUFBQSxHQUFBMHpDLFlBQUEsVUFBQTd6QyxFQUFBOG9CLE9BQUEsT0FBQTlvQixFQUFBc3ZDLGlCQUFBdHZDLEVBQUFzdkMsZUFBQSxTQUFBdnZDLEdBQUEsTUFBQSxJQUFBMk4sU0FBQSxTQUFBdk4sRUFBQUMsR0FBQSxHQUFBSSxHQUFBLGlEQUFBQSxHQUFBWCxLQUFBRSxHQUFBSSxJQUFBQyxFQUFBLDRCQUFBLE1BQUEsU0FBQSxNQUFBbXJDLFNBQUF4MUIsTUFBQSxnRkFBQXhPLEVBQUFwSCxFQUFBLE1BQUEsRUFBQW1CLEVBQUF0QixFQUFBLElBQUFLLEdBQUErRCxHQUFBLE9BQUEsSUFBQXNKLFNBQUEsU0FBQTNOLEVBQUFJLEdBQUFILEVBQUFraEIsUUFBQTdnQixFQUFBcVEsUUFBQTRFLFdBQUEsV0FBQTlULEVBQUFzeUMsV0FBQTl6QyxFQUFBMnZDLFNBQUF4dkMsRUFBQSxVQUFBSCxFQUFBa2hCLE9BQUEsSUFBQTFnQixHQUFBLFNBQUFULEdBQUEsT0FBQUEsRUFBQUEsR0FBQUMsRUFBQThvQixPQUFBLElBQUEsU0FBQSxJQUFBLFdBQUEsSUFBQSxPQUFBLE1BQUFyaEIsR0FBQXBILEVBQUFELEVBQUFMLEdBQUEsS0FBQSxXQUFBLE1BQUFNLEdBQUF3d0MsY0FBQSxJQUFBendDLEVBQUFrcEIsU0FBQSxTQUFBLEtBQUEsUUFBQSxNQUFBanBCLEdBQUF3d0MsY0FBQSxJQUFBendDLEVBQUFpcEIsTUFBQSxtQkFBQWhwQixFQUFBd3dDLGNBQUEsSUFBQXp3QyxFQUFBaXBCLE1BQUEscUJBQUEsS0FBQSxRQUFBLE1BQUFocEIsR0FBQXd3QyxjQUFBLElBQUF6d0MsRUFBQTh2QyxNQUFBLFNBQUEsU0FBQSxNQUFBem9DLEdBQUFwSCxFQUFBRCxFQUFBMG9CLFNBQUFubkIsRUFBQSxXQUFBLEdBQUE1QixHQUFBUyxHQUFBLEtBQUFULEVBQUEsTUFBQSxLQUFBLFFBQUFDLEVBQUE4b0IsT0FBQSxJQUFBLFdBQUEsTUFBQS9vQixHQUFBaWEsUUFBQSxFQUFBLENBQUEsS0FBQSxRQUFBLE1BQUFqYSxHQUFBaWEsUUFBQWphLEVBQUFzTCxNQUFBLElBQUEsS0FBQSxPQUFBLE1BQUF0TCxHQUFBZzBDLE1BQUFyekMsT0FBQVgsRUFBQWcwQyxNQUFBLEdBQUEsSUFBQSxTQUFBLE1BQUEvekMsR0FBQW12QyxjQUFBcHZDLEVBQUFzTCxNQUFBZ0UsT0FBQXRQLEVBQUFzTCxPQUFBckwsR0FBQThvQixPQUFBeFQsV0FBQSxXQUFBLEdBQUF2VixHQUFBUyxHQUFBVCxJQUFBK0UsRUFBQS9FLElBQUEsRUFBQSxLQUFBLEdBQUFZLEdBQUEsU0FBQVIsR0FBQUgsRUFBQTJ1QyxxQkFBQW50QyxFQUFBd3lDLGNBQUFoMEMsRUFBQWd1QyxXQUFBaHVDLEVBQUFndUMsV0FBQTd0QyxFQUFBSCxFQUFBNnpDLGFBQUE3akMsS0FBQSxTQUFBNVAsR0FBQW9CLEVBQUFzeUMsV0FBQTl6QyxFQUFBMnZDLFNBQUE1dkMsRUFBQUssR0FBQUQsSUFBQSxTQUFBSixHQUFBeUIsRUFBQXl5QyxjQUFBbDBDLEdBQUF5QixFQUFBMHlDLG9CQUFBbjBDLE1BQUF5QixFQUFBc3lDLFdBQUE5ekMsRUFBQTJ2QyxTQUFBNXZDLEVBQUFJLEtBQUFvRCxFQUFBLFNBQUF4RCxHQUFBLEdBQUFLLEdBQUFMLEdBQUFpRyxPQUFBc1MsTUFBQTlYLEVBQUFKLEVBQUEySCxRQUFBM0gsRUFBQWl2QixXQUFBaHZCLEVBQUFrRixJQUFBakYsRUFBQXlGLElBQUF4RSxFQUFBbEIsSUFBQUcsR0FBQUgsRUFBQTZtQixTQUFBMW1CLEdBQUErQyxFQUFBakQsSUFBQUUsR0FBQUYsRUFBQTRtQixTQUFBMW1CLEVBQUEsUUFBQUosRUFBQXlFLE1BQUEsSUFBQSxZQUFBLElBQUEsVUFBQTdFLEVBQUF1dUMsaUJBQUFodEMsRUFBQWxCLEVBQUEwYyxNQUFBdW9CLGdCQUFBMWtDLEVBQUFaLEVBQUFrdUMsb0JBQUEsSUFBQTNxQyxJQUFBakQsRUFBQXljLE1BQUF1b0IsZ0JBQUExa0MsRUFBQVosRUFBQXF1QyxtQkFBQSxLQUFBLE1BQUEsS0FBQSxXQUFBcnVDLEVBQUF1dUMsaUJBQUFodEMsRUFBQWxCLEVBQUEwYyxNQUFBdW9CLGdCQUFBdGxDLEVBQUFrdUMsbUJBQUEzcUMsSUFBQWpELEVBQUF5YyxNQUFBdW9CLGdCQUFBdGxDLEVBQUFxdUMsbUJBQUEsTUFBQSxLQUFBLFlBQUFydUMsRUFBQXV1QyxpQkFBQWh0QyxFQUFBbEIsRUFBQTBjLE1BQUF1b0IsZ0JBQUExa0MsRUFBQVosRUFBQWt1QyxvQkFBQSxJQUFBM3FDLElBQUFqRCxFQUFBeWMsTUFBQXVvQixnQkFBQTFrQyxFQUFBWixFQUFBcXVDLG1CQUFBLEtBQUEsTUFBQSxLQUFBLFFBQUE5c0MsR0FBQUMsRUFBQTJ5QyxZQUFBbjBDLEVBQUE4b0IsT0FBQSxXQUFBLEdBQUEvb0IsR0FBQTRCLEdBQUEzQixHQUFBc3ZDLGdCQUFBOXRDLEVBQUE0eUMsZUFBQXAwQyxFQUFBc3ZDLGVBQUF2dkMsRUFBQUMsRUFBQTZ6QyxhQUFBN2pDLEtBQUEsV0FBQXhPLEVBQUE2eUMsY0FBQTF6QyxFQUFBWixJQUFBLFNBQUFBLEdBQUF5QixFQUFBNnlDLGNBQUF0MEMsR0FBQXlCLEVBQUEweUMsb0JBQUFuMEMsTUFBQVksRUFBQVosTUFBQVksR0FBQSxHQUFBNEMsR0FBQS9CLEVBQUEyeUMsY0FBQTN5QyxFQUFBc3lDLFdBQUE5ekMsRUFBQTJ2QyxTQUFBeHZDLEVBQUEsYUFBQWdCLEVBQUFkLEVBQUFtSyxpQkFBQSxVQUFBckcsRUFBQSxFQUFBQSxFQUFBaEQsRUFBQVQsT0FBQXlELElBQUFoRCxFQUFBZ0QsR0FBQTZ0QyxRQUFBenVDLEVBQUFwQyxFQUFBZ0QsR0FBQW13QyxZQUFBL3dDLEVBQUFwQyxFQUFBZ0QsR0FBQW93QyxXQUFBaHhDLEVBQUFwQyxFQUFBZ0QsR0FBQXF3QyxZQUFBanhDLENBQUFrQyxLQUFBdXNDLFFBQUEsV0FBQXh3QyxFQUFBc3lDLFdBQUE5ekMsRUFBQTJ2QyxTQUFBeHZDLEVBQUEsVUFBQUcsRUFBQTB4QyxRQUFBLFNBQUFqeUMsR0FBQUEsRUFBQWdJLFNBQUF6SCxHQUFBTixFQUFBNHRDLG9CQUFBcHNDLEVBQUFzeUMsV0FBQTl6QyxFQUFBMnZDLFNBQUF4dkMsRUFBQSxZQUFBLElBQUErRCxHQUFBcUIsSUFBQXZCLEVBQUErQixHQUFBL0YsR0FBQXd1QyxlQUFBdHFDLEVBQUFtWCxXQUFBMFgsYUFBQS91QixFQUFBRSxHQUFBQSxFQUFBbVgsV0FBQTBYLGFBQUE3dUIsRUFBQUYsRUFBQSxJQUFBbUQsR0FBQSxTQUFBcEgsRUFBQUksR0FBQSxJQUFBLEdBQUFDLEdBQUF3RixFQUFBNUYsRUFBQXl1QyxhQUFBanVDLEVBQUEsRUFBQUEsRUFBQUosRUFBQU0sT0FBQUYsSUFBQSxDQUFBVCxHQUFBSSxFQUFBSixJQUFBSyxFQUFBTSxPQUFBWCxFQUFBLEVBQUFBLEtBQUEsSUFBQUEsRUFBQUssRUFBQU0sT0FBQSxFQUFBLElBQUFMLEdBQUFELEVBQUFMLEVBQUEsSUFBQXNGLEVBQUFoRixHQUFBLE1BQUFBLEdBQUFrb0IsVUFBQS9nQixFQUFBLFNBQUF6SCxHQUFBLEdBQUFLLEdBQUFMLEdBQUFpRyxPQUFBc1MsTUFBQTlYLEVBQUFKLEVBQUFxdkIsU0FBQXJ2QixFQUFBbXZCLEtBQUEsS0FBQSxFQUFBLEdBQUEsR0FBQSxJQUFBenBCLFFBQUF0RixNQUFBLEVBQUEsQ0FBQSxJQUFBLEdBQUFILEdBQUFELEVBQUEySCxRQUFBM0gsRUFBQWl2QixXQUFBL3VCLEVBQUFzRixFQUFBNUYsRUFBQXl1QyxhQUFBOXNDLEdBQUEsRUFBQWYsRUFBQSxFQUFBQSxFQUFBTixFQUFBSSxPQUFBRSxJQUFBLEdBQUFQLElBQUFDLEVBQUFNLEdBQUEsQ0FBQWUsRUFBQWYsQ0FBQSxPQUFBLElBQUFKLEdBQUFKLEVBQUFxMEMsU0FBQXR0QyxFQUFBeEYsR0FBQSxHQUFBd0YsRUFBQXhGLEVBQUEsR0FBQXZCLEVBQUE0dUIsa0JBQUE1dUIsRUFBQW91QixrQkFBQSxLQUFBaHVCLEdBQUEsS0FBQUEsRUFBQW1CLEtBQUEsSUFBQTNCLEVBQUF5dUMsWUFBQTVsQyxFQUFBN0UsRUFBQTVELEdBQUF5SSxFQUFBM0UsRUFBQTlELElBQUEsS0FBQUksR0FBQVIsRUFBQTZ0QyxrQkFBQSxJQUFBcnNDLEVBQUFzeUMsV0FBQTl6QyxFQUFBMnZDLFNBQUF4dkMsRUFBQSxTQUFBb0IsR0FBQW12QyxzQkFBQTFxQyxPQUFBZ3JDLFVBQUFockMsT0FBQWdyQyxVQUFBeHBDLEVBQUF4SCxFQUFBdXVDLGlCQUFBcnFDLEVBQUE2WSxNQUFBcTJCLGdCQUFBcHpDLEVBQUFrdUMsbUJBQUFocUMsRUFBQTZZLE1BQUFzMkIsaUJBQUFyekMsRUFBQWt1QyxvQkFBQTFzQyxFQUFBd3lDLFlBQUF4eUMsRUFBQWt6QyxjQUFBLFdBQUFyeUMsRUFBQWlDLEtBQUFqQyxFQUFBNkIsRUFBQSxnQkFBQUcsRUFBQUgsRUFBQTlELEVBQUF1MEMsU0FBQXR3QyxFQUFBaEUsRUFBQUQsRUFBQXUwQyxTQUFBendDLEVBQUF5a0IsVUFBQSxFQUFBM2tCLEVBQUEya0IsVUFBQSxHQUFBbm5CLEVBQUF5eUMsWUFBQXp5QyxFQUFBb3pDLGVBQUEsV0FBQTUwQyxFQUFBOHRDLG9CQUFBem5DLEVBQUFuQyxHQUFBbEUsRUFBQSt0QyxrQkFBQTFuQyxFQUFBL0IsTUFBQWQsRUFBQVUsRUFBQTlELEVBQUF1MEMsU0FBQW54QyxFQUFBbkQsRUFBQUQsRUFBQXUwQyxTQUFBendDLEVBQUF5a0IsVUFBQSxFQUFBM2tCLEVBQUEya0IsVUFBQSxHQUFBbm5CLEVBQUFxekMsY0FBQSxXQUFBM3dDLEVBQUF5a0IsVUFBQSxFQUFBM2tCLEVBQUEya0IsVUFBQSxHQUFBbm5CLEVBQUFzekMsZUFBQSxXQUFBNXdDLEVBQUF5a0IsVUFBQSxFQUFBM2tCLEVBQUEya0IsVUFBQSxHQUFBbm5CLEVBQUF1ekMsb0JBQUEsV0FBQTd3QyxFQUFBeWtCLFVBQUEsR0FBQW5uQixFQUFBd3pDLHFCQUFBLFdBQUE5d0MsRUFBQXlrQixVQUFBLEdBQUFubkIsRUFBQTZ5QyxZQUFBLFdBQUEsR0FBQXQwQyxHQUFBUyxHQUFBLEtBQUFULEVBQUEsT0FBQSxDQUFBLElBQUEsVUFBQUEsRUFBQThFLEtBQUEsSUFBQSxHQUFBMUUsR0FBQUosRUFBQXNiLFdBQUFBLFdBQUFqYixFQUFBRCxFQUFBcUssaUJBQUEsU0FBQXhLLEVBQUEsRUFBQUEsRUFBQUksRUFBQU0sT0FBQVYsSUFBQUksRUFBQUosR0FBQTJvQixVQUFBLE1BQUE1b0IsR0FBQTRvQixVQUFBLEdBQUFubkIsRUFBQTR5QyxhQUFBLFdBQUEsR0FBQXIwQyxHQUFBUyxHQUFBLEtBQUFULEVBQUEsT0FBQSxDQUFBLElBQUFBLEdBQUEsVUFBQUEsRUFBQThFLEtBQUEsSUFBQSxHQUFBMUUsR0FBQUosRUFBQXNiLFdBQUFBLFdBQUFqYixFQUFBRCxFQUFBcUssaUJBQUEsU0FBQXhLLEVBQUEsRUFBQUEsRUFBQUksRUFBQU0sT0FBQVYsSUFBQUksRUFBQUosR0FBQTJvQixVQUFBLE1BQUE1b0IsR0FBQTRvQixVQUFBLEdBQUFubkIsRUFBQXl6QyxrQkFBQWowQyxFQUFBLFdBQUEsR0FBQWpCLEdBQUFxRSxJQUFBakUsRUFBQUosRUFBQWdkLE1BQUFmLE9BQUFqYyxHQUFBZ2QsTUFBQW00QixVQUFBLEdBQUE3eUMsRUFBQXRDLEdBQUFBLEVBQUFnZCxNQUFBbTRCLFVBQUFuMUMsRUFBQTQ1QixhQUFBLEVBQUEsS0FBQTU1QixFQUFBZ2QsTUFBQWYsUUFBQTdiLEdBQUEsSUFBQXFCLEVBQUEweUMsb0JBQUEsU0FBQW4wQyxHQUFBLEdBQUFJLEdBQUFvRSxHQUFBcEUsR0FBQXFiLFVBQUF6YixFQUFBc0MsRUFBQWxDLEVBQUEsSUFBQUgsR0FBQVEsR0FBQXNFLEdBQUE5RSxHQUFBcUUsRUFBQXJFLEVBQUFJLEVBQUErMEMsYUFBQTN6QyxFQUFBdXZDLHFCQUFBLFdBQUEsR0FBQWh4QyxHQUFBd0UsR0FBQThCLEdBQUF0RyxHQUFBeUIsRUFBQXl6QyxtQkFBQSxJQUFBOTBDLEdBQUFLLEdBQUFMLElBQUFxRCxFQUFBckQsRUFBQUMsRUFBQSswQyxhQUFBM3pDLEVBQUE0ekMsaUJBQUEsV0FBQSxNQUFBcDFDLEdBQUF1dkMsZUFBQS90QyxFQUFBNnpDLGlCQUFBLFNBQUF0MUMsR0FBQUMsRUFBQXV2QyxjQUFBeHZDLEVBQUF1QixFQUFBdEIsSUFBQXdCLEVBQUE4ekMsa0JBQUEsV0FBQWp6QyxFQUFBMEIsTUFBQXZDLEVBQUErekMsa0JBQUEsV0FBQWx2QyxFQUFBdEMsTUFBQXZDLEVBQUFxekMsZ0JBQUFyekMsRUFBQXl5QyxjQUFBenlDLEVBQUF1dkMsc0JBQUEsS0FBQSxHQUFBNW9DLElBQUEsUUFBQSxPQUFBLFFBQUEsU0FBQSxRQUFBLFdBQUEsWUFBQXRGLEVBQUEsT0FBQXVELEVBQUEsRUFBQUEsRUFBQStCLEVBQUF6SCxPQUFBMEYsSUFBQSxDQUFBLEdBQUF1QixHQUFBdkgsRUFBQStILEVBQUEvQixJQUFBcUQsRUFBQWhDLEVBQUFwSCxFQUFBc0gsRUFBQSxJQUFBOUUsRUFBQXJDLEVBQUEySCxFQUFBL0IsSUFBQSxDQUFBLElBQUEsR0FBQWpELEtBQUFOLEdBQUF1SSxXQUFBLEdBQUF2SSxFQUFBdUksV0FBQXpJLGVBQUFRLEdBQUEsQ0FBQSxHQUFBbUcsR0FBQXpHLEVBQUF1SSxXQUFBakksR0FBQTNELElBQUEsVUFBQThKLEdBQUEsVUFBQUEsR0FBQXpHLEVBQUE0WCxnQkFBQW5SLEdBQUEsSUFBQSxHQUFBbkUsS0FBQW5GLEdBQUFxdkMsZ0JBQUF4c0MsRUFBQXlKLGFBQUFuSCxFQUFBbkYsRUFBQXF2QyxnQkFBQWxxQyxJQUFBc0UsRUFBQWtDLFVBQUFoRSxFQUFBM0gsRUFBQW92QyxZQUFBL3FDLEVBQUFvRixFQUFBekosRUFBQW92QyxZQUFBL29DLEVBQUFvRCxHQUFBLEdBQUFsRCxHQUFBLFFBQUEsV0FBQSxPQUFBdkcsRUFBQThvQixPQUFBLElBQUEsT0FBQSxJQUFBLFFBQUEsSUFBQSxXQUFBLElBQUEsU0FBQSxJQUFBLE1BQUFqbUIsRUFBQTRFLEVBQUFwSCxFQUFBRCxFQUFBMG9CLE9BQUFqbUIsRUFBQXdJLE1BQUFyTCxFQUFBaXZDLFdBQUFwc0MsRUFBQTJ5QyxZQUFBeDFDLEVBQUFndkMsaUJBQUFuc0MsRUFBQWdDLEtBQUE3RSxFQUFBOG9CLE1BQUF6bUIsRUFBQVEsRUFBQSxNQUFBLEtBQUEsT0FBQUEsRUFBQTRFLEVBQUFwSCxFQUFBRCxFQUFBbXBCLE1BQUExbUIsRUFBQTJ5QyxZQUFBeDFDLEVBQUFndkMsaUJBQUFuc0MsRUFBQWdDLEtBQUE3RSxFQUFBOG9CLE1BQUF6bUIsRUFBQVEsRUFBQSxNQUFBLEtBQUEsUUFBQSxHQUFBOUMsR0FBQTBILEVBQUFwSCxFQUFBRCxFQUFBOHZDLE9BQUEvdkMsRUFBQUosRUFBQTh3QyxjQUFBLFNBQUF2d0MsRUFBQVAsRUFBQTh3QyxjQUFBLFNBQUExd0MsR0FBQWtMLE1BQUFyTCxFQUFBaXZDLFdBQUE5dUMsRUFBQTBFLEtBQUE3RSxFQUFBOG9CLE1BQUF4b0IsRUFBQStLLE1BQUFyTCxFQUFBaXZDLFdBQUE1c0MsRUFBQXRDLEVBQUEsTUFBQSxLQUFBLFNBQUEsR0FBQTRCLEdBQUE4RixFQUFBcEgsRUFBQUQsRUFBQTBwQixPQUFBLElBQUFub0IsRUFBQTZaLFVBQUEsR0FBQXhiLEVBQUFndkMsaUJBQUEsQ0FBQSxHQUFBcHVDLEdBQUFvRSxTQUFBb0osY0FBQSxTQUFBeE4sR0FBQTRhLFVBQUF4YixFQUFBZ3ZDLGlCQUFBcHVDLEVBQUF5SyxNQUFBLEdBQUF6SyxFQUFBK25CLFVBQUEsRUFBQS9uQixFQUFBOGEsVUFBQSxFQUFBL1osRUFBQXdZLFlBQUF2WixHQUFBMkYsRUFBQSxTQUFBeEcsR0FBQSxJQUFBLEdBQUFJLEtBQUFKLEdBQUEsQ0FBQSxHQUFBSyxHQUFBNEUsU0FBQW9KLGNBQUEsU0FBQWhPLEdBQUFpTCxNQUFBbEwsRUFBQUMsRUFBQW9iLFVBQUF6YixFQUFBSSxHQUFBSCxFQUFBaXZDLGFBQUE5dUMsSUFBQUMsRUFBQXNiLFVBQUEsR0FBQS9aLEVBQUF3WSxZQUFBL1osR0FBQWlDLEVBQUFWLEdBQUFBLEVBQUE0bUIsUUFBQSxNQUFBLEtBQUEsUUFBQSxHQUFBaG5CLEdBQUFrRyxFQUFBcEgsRUFBQUQsRUFBQWlwQixNQUFBOW5CLEdBQUFpYSxVQUFBLEdBQUFqVixFQUFBLFNBQUF4RyxHQUFBLElBQUEsR0FBQUksS0FBQUosR0FBQSxDQUFBLEdBQUFTLEdBQUEsRUFBQUgsRUFBQTJFLFNBQUFvSixjQUFBLFNBQUE5TixFQUFBMEUsU0FBQW9KLGNBQUEsU0FBQXpNLEVBQUFxRCxTQUFBb0osY0FBQSxPQUFBL04sR0FBQXdFLEtBQUEsUUFBQXhFLEVBQUFiLEtBQUFZLEVBQUFpcEIsTUFBQWhwQixFQUFBZ0wsTUFBQWxMLEVBQUFFLEVBQUEwTSxHQUFBM00sRUFBQWlwQixNQUFBLElBQUE3b0IsSUFBQVIsRUFBQWl2QyxhQUFBOXVDLElBQUFFLEVBQUEyWixTQUFBLEdBQUFyWSxFQUFBNlosVUFBQXpiLEVBQUFJLEdBQUFHLEVBQUE2WixZQUFBOVosR0FBQUMsRUFBQTZaLFlBQUF4WSxHQUFBckIsRUFBQXM2QixJQUFBdjZCLEVBQUEwTSxHQUFBeEwsRUFBQTRZLFlBQUE3WixHQUFBK0IsRUFBQWQsRUFBQSxJQUFBWCxHQUFBVyxFQUFBaUosaUJBQUEsUUFBQTVKLEdBQUFGLFFBQUFFLEVBQUEsR0FBQTJuQixRQUFBLE1BQUEsS0FBQSxXQUFBLEdBQUE1bkIsR0FBQThHLEVBQUFwSCxFQUFBRCxFQUFBa3BCLFVBQUEvbEIsRUFBQS9DLEVBQUEsV0FBQStDLEdBQUFzQixLQUFBLFdBQUF0QixFQUFBOEgsTUFBQSxFQUFBOUgsRUFBQXdKLEdBQUEzTSxFQUFBa3BCLFNBQUEvbEIsRUFBQXlXLFFBQUErc0IsUUFBQS9tQyxFQUFBaXZDLFdBQUEsSUFBQTdxQyxHQUFBekQsRUFBQWtLLHFCQUFBLE9BQUF6RyxHQUFBMUQsUUFBQUMsRUFBQWlrQixZQUFBeGdCLEVBQUEsSUFBQUEsRUFBQVksU0FBQW9KLGNBQUEsUUFBQWhLLEVBQUFvWCxVQUFBeGIsRUFBQWd2QyxpQkFBQXJ1QyxFQUFBd1osWUFBQS9WLEdBQUEvQixFQUFBMUIsRUFBQSxNQUFBLEtBQUEsV0FBQSxHQUFBUSxHQUFBc0csRUFBQXBILEVBQUFELEVBQUErdkMsU0FBQWh2QyxHQUFBa0ssTUFBQXJMLEVBQUFpdkMsV0FBQTl0QyxFQUFBcTBDLFlBQUF4MUMsRUFBQWd2QyxpQkFBQTNzQyxFQUFBbEIsRUFBQSxNQUFBLEtBQUEsTUFBQSxLQUFBLFNBQUFvcUMsUUFBQXgxQixNQUFBLGlJQUFBL1YsRUFBQThvQixNQUFBLFNBQUEsV0FBQTlvQixFQUFBOG9CLE9BQUEsVUFBQTlvQixFQUFBOG9CLFFBQUE5b0IsRUFBQWt2Qyx1QkFBQXhoQyxVQUFBbE0sRUFBQXd5QyxjQUFBaDBDLEVBQUFrdkMsYUFBQWwvQixLQUFBLFNBQUFqUSxHQUFBeUIsRUFBQXl5QyxjQUFBMXRDLEVBQUF4RyxNQUFBLFdBQUF3SCxFQUFBdkgsRUFBQWt2QyxjQUFBM29DLEVBQUF2RyxFQUFBa3ZDLGNBQUEzRCxRQUFBeDFCLE1BQUEsaUZBQUF4TyxFQUFBdkgsRUFBQWt2QyxnQkFBQTVvQyxFQUFBdEcsRUFBQTJ0QyxVQUFBM3RDLEVBQUEwdkMsUUFBQXZvQyxHQUFBLEVBQUEsR0FBQTdHLEVBQUEydkIsVUFBQSxFQUFBLG1CQUFBaFosbUJBQUEvVyxJQUFBQSxFQUFBLEdBQUErVyxrQkFBQXpWLEVBQUF5ekMsbUJBQUEvMEMsRUFBQTZVLFFBQUExVSxHQUFBbzFDLFdBQUEsRUFBQXpnQyxlQUFBLEVBQUEwZ0MsU0FBQSxRQUFBbDBDLEVBQUEsUUFBQXpCLEtBQUEsSUFBQSxHQUFBSSxHQUFBa08sVUFBQTNOLE9BQUFOLEVBQUFpSyxNQUFBbEssR0FBQUssRUFBQSxFQUFBQSxFQUFBTCxFQUFBSyxJQUFBSixFQUFBSSxHQUFBNk4sVUFBQTdOLEVBQUEsT0FBQVQsR0FBQW8wQyxhQUFBcDBDLEVBQUEwYyxRQUFBcGQsRUFBQWlRLE1BQUEsT0FBQWxQLEdBQUEsT0FBQW9CLEdBQUEyeUMsVUFBQSxXQUFBLEdBQUFwMEMsR0FBQXFFLEdBQUEsT0FBQWlCLEdBQUF0RixJQUFBeUIsRUFBQThjLE1BQUEsU0FBQXZlLEdBQUF1SixFQUFBdkosQ0FBQSxJQUFBSSxHQUFBaUUsSUFBQWhFLEVBQUEsV0FBQWtKLEtBQUFuSixFQUFBc2EsZ0JBQUEsb0JBQUFqYSxJQUFBLE9BQUEsSUFBQWtOLFNBQUEsU0FBQTNOLEVBQUFDLElBQUEsUUFBQUssR0FBQUMsRUFBQXFCLEdBQUFyQixFQUFBZ0osRUFBQTVJLFFBQUFQLEVBQUFtTSxhQUFBLGtCQUFBaE0sR0FBQWtCLEVBQUE4SCxFQUFBaEosSUFBQTBQLEtBQUEsU0FBQWpRLEdBQUFTLEVBQUFpRSxLQUFBMUUsR0FBQU0sRUFBQUMsRUFBQSxFQUFBcUIsSUFBQSxTQUFBNUIsR0FBQUssSUFBQUosRUFBQUQsT0FBQUssSUFBQUwsRUFBQVMsS0FBQSxNQUFBZ0IsRUFBQXV4QyxhQUFBLFdBQUEsTUFBQTN1QyxLQUFBK0csYUFBQSxvQkFBQTNKLEVBQUFtMEMsZ0JBQUEsU0FBQTUxQyxFQUFBSSxHQUFBLE1BQUFBLElBQUFBLEVBQUFtSixFQUFBNUksT0FBQTRJLEVBQUEwQixPQUFBN0ssRUFBQSxFQUFBSixHQUFBdUosRUFBQTdFLEtBQUExRSxJQUFBeUIsRUFBQW8wQyxnQkFBQSxTQUFBNzFDLEdBQUEsbUJBQUF1SixHQUFBdkosSUFBQXVKLEVBQUEwQixPQUFBakwsRUFBQSxJQUFBeUIsRUFBQWliLE1BQUFqYixFQUFBc3lDLFdBQUEsU0FBQS96QyxHQUFBLEdBQUFJLEdBQUFpRSxHQUFBWixHQUFBckQsRUFBQUMsRUFBQWdmLE1BQUEvYSxFQUFBbEUsRUFBQUMsRUFBQWtmLEtBQUEsSUFBQXRmLEdBQUFHLEVBQUEwd0MsY0FBQSxJQUFBendDLEVBQUEwdkMsS0FBQSxJQUFBdHZDLEVBQUF1OUIsUUFBQXY2QixHQUFBeEQsRUFBQSxXQUFBd0QsRUFBQXhELEVBQUE2d0MsY0FBQSxRQUFBLHVCQUFBcnRDLEVBQUF4RCxFQUFBNndDLGNBQUEsU0FBQSx1QkFBQSxJQUFBeHdDLEdBQUFGLEVBQUEwd0MsY0FBQSxJQUFBendDLEVBQUEwdkMsS0FBQSxJQUFBdHZDLEVBQUF1VixNQUFBdlMsR0FBQW5ELEVBQUEsc0JBQUFtRCxFQUFBbkQsRUFBQXd3QyxjQUFBLFdBQUEsaUJBQUEsSUFBQWx2QyxHQUFBeEIsRUFBQTB3QyxjQUFBLElBQUF6d0MsRUFBQTB2QyxLQUFBLElBQUF0dkMsRUFBQXd2QyxRQUFBeHNDLEdBQUE3QixFQUFBLGlCQUFBeUUsR0FBQSxJQUFBeEYsR0FBQSxXQUFBeUYsRUFBQWxHLEdBQUFBLEVBQUE0YyxNQUFBbTRCLFVBQUEsR0FBQTF4QyxFQUFBbEQsRUFBQUYsRUFBQW96QyxJQUFBaHdDLEVBQUF3QixTQUFBOFcsS0FBQTFiLEVBQUFvekMsSUFBQWp0QyxJQUFBQyxJQUFBM0QsS0FBQXNFLEVBQUFoSCxFQUFBQyxFQUFBa3pDLGFBQUFuekMsRUFBQXdFLGlCQUFBOUIsRUFBQSxRQUFBOUMsS0FBQUksRUFBQWlZLG9CQUFBdlYsRUFBQTlDLEdBQUFvSCxFQUFBaEgsRUFBQUMsRUFBQWtmLE9BQUExZSxNQUFBQSxJQUFBLE9BQUFiLEdBQUEsa0JBQUFBLElBQUFBLEVBQUFJLElBQUFxQixFQUFBeXZDLGFBQUEsV0FBQSxNQUFBMXJDLEtBQUEyQyxTQUFBMUcsRUFBQXEwQyxZQUFBLFdBQUEsTUFBQTl2QyxLQUFBbUMsU0FBQTFHLEVBQUFzMEMsWUFBQSxTQUFBLzFDLEdBQUEsSUFBQUEsR0FBQSxZQUFBLG1CQUFBQSxHQUFBLFlBQUF3SCxFQUFBeEgsSUFBQSxNQUFBd3JDLFNBQUF4MUIsTUFBQSxpRkFBQSxLQUFBLEdBQUE1VixLQUFBSixHQUFBQyxFQUFBMkMsZUFBQXhDLElBQUEsZ0JBQUFBLElBQUFvckMsUUFBQXVILEtBQUEsbUNBQUEzeUMsRUFBQSxXQUFBSixHQUFBSSxHQUFBc0osR0FBQXRHLEVBQUFwRCxJQUFBeUIsRUFBQXUwQyxjQUFBLFdBQUE1eUMsRUFBQXNHLEtBQUF6SixJQUFBd0IsRUFBQXdYLEtBQUEsYUFBQXhYLEVBQUF5bkMsUUFBQSxRQUFBem5DLElBQUF3RSxPQUFBd25DLGNBQUF4bkMsT0FBQWd3QyxXQUFBaHdDLE9BQUFpd0MsS0FBQWp3QyxPQUFBd25DLGFDT0EsU0FBQXp0QyxFQUFBSSxHQUFBLFlBQUEsSUFBQUMsR0FBQSxTQUFBSixFQUFBLEdBQUFLLEVBQUEsSUFBQU8sRUFBQSxXQUFBSixFQUFBLFlBQUFHLEVBQUEsU0FBQUwsRUFBQSxTQUFBYSxFQUFBLFFBQUFRLEVBQUEsUUFBQUosRUFBQSxPQUFBeUMsRUFBQSxPQUFBSSxFQUFBLFNBQUFiLEVBQUEsVUFBQVcsRUFBQSxlQUFBQyxFQUFBLFVBQUFKLEVBQUEsU0FBQU8sRUFBQSxTQUFBQyxFQUFBLFVBQUFnQixFQUFBLFdBQUFULEVBQUEsV0FBQWMsR0FBQXNILE9BQUEsU0FBQW5OLEVBQUFJLEdBQUEsR0FBQUMsS0FBQSxLQUFBLEdBQUFKLEtBQUFELEdBQUFJLEVBQUFILElBQUFHLEVBQUFILEdBQUFVLE9BQUEsSUFBQSxFQUFBTixFQUFBSixHQUFBRyxFQUFBSCxHQUFBc0ksT0FBQXZJLEVBQUFDLElBQUFJLEVBQUFKLEdBQUFELEVBQUFDLEVBQUEsT0FBQUksSUFBQStuQixJQUFBLFNBQUFwb0IsRUFBQUksR0FBQSxNQUFBLGdCQUFBSixJQUFBSSxFQUFBdUUsY0FBQW9CLFFBQUEvRixFQUFBMkUsa0JBQUEsR0FBQXd4QyxTQUFBLFNBQUFuMkMsR0FBQSxNQUFBQSxHQUFBMkUsZUFBQXl4QyxNQUFBLFNBQUFwMkMsR0FBQSxhQUFBQSxLQUFBTyxFQUFBUCxFQUFBb08sUUFBQSxXQUFBLElBQUF2QyxNQUFBLEtBQUEsR0FBQXpMLEdBQUFrUCxLQUFBLFNBQUF0UCxHQUFBLE1BQUFBLEdBQUFvTyxRQUFBLHFDQUFBLE1BQUFoSCxHQUFBaXZDLElBQUEsV0FBQSxJQUFBLEdBQUFyMkMsR0FBQUMsRUFBQUssRUFBQUMsRUFBQWEsRUFBQVEsRUFBQUosRUFBQW5CLEVBQUEsRUFBQTRELEVBQUFxSyxVQUFBak8sRUFBQTRELEVBQUF0RCxTQUFBaUIsR0FBQSxDQUFBLEdBQUF5QyxHQUFBSixFQUFBNUQsR0FBQW1ELEVBQUFTLEVBQUE1RCxFQUFBLEVBQUEsVUFBQUwsS0FBQVMsRUFBQSxDQUFBVCxJQUFBLEtBQUFPLElBQUFpRCxHQUFBQSxFQUFBWixlQUFBckMsS0FBQWEsRUFBQW9DLEVBQUFqRCxTQUFBYSxLQUFBUixFQUFBWixFQUFBb0IsRUFBQSxJQUFBaEIsRUFBQUosRUFBQW9CLEdBQUFoQixHQUFBLElBQUFILEVBQUFLLEVBQUEsRUFBQUwsRUFBQW9FLEVBQUExRCxTQUFBaUIsR0FBQSxHQUFBQSxFQUFBeUMsRUFBQXBFLEtBQUFxQixLQUFBb0osS0FBQTRyQyxTQUFBLElBQUEvMUMsRUFBQSxFQUFBQSxFQUFBaUQsRUFBQTdDLE9BQUFKLElBQUFpQixFQUFBSSxJQUFBdEIsR0FBQWMsRUFBQW9DLEVBQUFqRCxTQUFBYSxLQUFBUixHQUFBUSxFQUFBVCxPQUFBLEVBQUEsR0FBQVMsRUFBQVQsYUFBQVMsR0FBQSxJQUFBUCxFQUFBYixFQUFBb0IsRUFBQSxJQUFBQSxFQUFBLEdBQUF5QixLQUFBNkgsS0FBQWxKLEdBQUF4QixFQUFBb0IsRUFBQSxJQUFBQSxFQUFBLEdBQUEsR0FBQUEsRUFBQVQsYUFBQVMsR0FBQSxLQUFBUCxHQUFBTyxFQUFBLEdBQUFFLE1BQUFGLEVBQUEsR0FBQXRCLEtBQUFFLEVBQUFvQixFQUFBLElBQUFJLEVBQUFBLEVBQUE0TSxRQUFBaE4sRUFBQSxHQUFBQSxFQUFBLElBQUFoQixFQUFBSixFQUFBb0IsRUFBQSxJQUFBSSxFQUFBSixFQUFBLEdBQUF5QixLQUFBNkgsS0FBQWxKLEVBQUFKLEVBQUEsSUFBQWhCLEVBQUEsR0FBQWdCLEVBQUFULFNBQUFYLEVBQUFvQixFQUFBLElBQUFJLEVBQUFKLEVBQUEsR0FBQXlCLEtBQUE2SCxLQUFBbEosRUFBQTRNLFFBQUFoTixFQUFBLEdBQUFBLEVBQUEsS0FBQWhCLEdBQUFKLEVBQUFvQixHQUFBSSxFQUFBQSxFQUFBcEIsQ0FBQUMsSUFBQSxFQUFBLE1BQUFMLElBQUF1MkMsSUFBQSxTQUFBdjJDLEVBQUFLLEdBQUEsSUFBQSxHQUFBSixLQUFBSSxHQUFBLFNBQUFBLEdBQUFKLEtBQUFXLEdBQUFQLEVBQUFKLEdBQUFVLE9BQUEsR0FBQSxJQUFBLEdBQUFFLEdBQUEsRUFBQUEsRUFBQVIsRUFBQUosR0FBQVUsT0FBQUUsSUFBQSxHQUFBZ0YsRUFBQXVpQixJQUFBL25CLEVBQUFKLEdBQUFZLEdBQUFiLEdBQUEsTUFBQUMsS0FBQUssRUFBQUYsRUFBQUgsTUFBQSxJQUFBNEYsRUFBQXVpQixJQUFBL25CLEVBQUFKLEdBQUFELEdBQUEsTUFBQUMsS0FBQUssRUFBQUYsRUFBQUgsQ0FBQSxPQUFBRCxLQUFBeUgsR0FBQTdILFNBQUE0MkMsV0FBQXROLFNBQUF1TixNQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxNQUFBLE9BQUFDLFFBQUEsT0FBQUMsUUFBQSxPQUFBQyxRQUFBLE9BQUFDLElBQUEsT0FBQUMsUUFBQUMsUUFBQUMsT0FBQUMsY0FBQSxLQUFBLFFBQUFDLFFBQUFGLE9BQUFHLGVBQUEsVUFBQUMsUUFBQUMsSUFBQSxNQUFBQyxPQUFBLFlBQUFqNEMsSUFBQWs0QyxTQUFBeE8sU0FBQXlPLEdBQUEsT0FBQUMsVUFBQSxTQUFBQyxTQUFBLFFBQUFDLElBQUEsU0FBQUMsSUFBQSxTQUFBLFVBQUFDLE1BQUEsU0FBQUMsRUFBQSxTQUFBQyxFQUFBLFNBQUFDLElBQUEsU0FBQUMsSUFBQSxTQUFBLFdBQUFDLEdBQUEsVUFBQWh5QyxHQUFBekcsVUFBQSw2QkFBQSw4Q0FBQSwrQkFBQSw2QkFBQTRCLEVBQUFnQyxJQUFBLDhCQUFBaEMsRUFBQSxjQUFBZ0MsSUFBQSx5QkFBQWhDLEVBQUEsU0FBQWdDLElBQUEsdUJBQUEsZ0VBQUEsNkRBQUEsNEJBQUEsd0JBQUEsdUhBQUFoQyxFQUFBZ0MsSUFBQSwrQ0FBQWhDLEVBQUEsTUFBQWdDLElBQUEsNkJBQUFoQyxFQUFBZ0MsSUFBQSw2QkFBQWhDLEVBQUEsVUFBQWdDLElBQUEsaUNBQUFoQyxFQUFBLEtBQUEsS0FBQWdDLElBQUEsa0NBQUFoQyxFQUFBLFVBQUFnQyxJQUFBLG9DQUFBQSxHQUFBaEMsRUFBQSxrQkFBQSxrQ0FBQUEsRUFBQSxPQUFBLGNBQUFnQyxJQUFBLHNDQUFBLCtEQUFBQSxHQUFBaEMsRUFBQSxxQkFBQSwrREFBQSxpQ0FBQUEsRUFBQWdDLElBQUEsa0NBQUEsc0NBQUEsbUNBQUFoQyxFQUFBLGFBQUFnQyxJQUFBLDBCQUFBaEMsRUFBQSxXQUFBZ0MsSUFBQSwyQ0FBQWhDLEVBQUEsVUFBQWdDLElBQUEsdUJBQUFBLEdBQUFoQyxFQUFBLGNBQUEsdUJBQUFnQyxHQUFBaEMsRUFBQSxhQUFBLGdEQUFBZ0MsR0FBQWhDLEVBQUEsbUJBQUEsbURBQUFnQyxFQUFBaEMsSUFBQSxrREFBQUEsR0FBQWdDLEVBQUE0RCxFQUFBbXZDLElBQUE5dUMsRUFBQTdILFFBQUE0MkMsVUFBQXROLFdBQUEsMEJBQUEsK0JBQUExbkMsRUFBQWdDLElBQUEsdUNBQUFoQyxFQUFBLFlBQUFnQyxJQUFBLGNBQUEsZ0dBQUEsMkVBQUEsMENBQUEsOEVBQUEsd0JBQUEsNEJBQUEsaUNBQUEsNkJBQUFoQyxFQUFBZ0MsSUFBQTgwQyxNQUFBLG1EQUFBbjBDLEVBQUEsV0FBQSxrQkFBQUEsRUFBQTBCLEVBQUFzd0MsWUFBQSw0QkFBQWh5QyxFQUFBLFVBQUEsa0NBQUFBLEVBQUEsU0FBQSw2Q0FBQUEsRUFBQSxPQUFBLEdBQUEwQixFQUFBc3dDLFlBQUEsb0JBQUFoeUMsRUFBQSxXQUFBLGlIQUFBQSxFQUFBMEIsRUFBQXN3QyxZQUFBYyxTQUFBLDhDQUFBcjFDLEVBQUF5QyxHQUFBSixFQUFBTSxLQUFBLHFDQUFBM0MsR0FBQXlDLEVBQUEsVUFBQUosRUFBQU0sS0FBQSx1QkFBQTNDLEVBQUEsYUFBQXlDLEVBQUEsV0FBQSx5QkFBQSxvQkFBQSxrQkFBQSx1QkFBQSwrQkFBQSxxQ0FBQUEsRUFBQXpDLEdBQUFxQyxFQUFBTSxLQUFBLHdDQUFBM0MsR0FBQXlDLEVBQUEsV0FBQUosRUFBQU0sS0FBQSxzREFBQTNDLEVBQUF3RixFQUFBbXZDLElBQUE5dUMsRUFBQXd2QyxPQUFBQyxPQUFBQyxRQUFBOXlDLEVBQUEsV0FBQUosRUFBQUQsS0FBQSxvQ0FBQXBDLEVBQUF5QyxHQUFBSixFQUFBRCxLQUFBLDJCQUFBcEMsR0FBQXlDLEVBQUEsVUFBQUosRUFBQUQsS0FBQSwyQkFBQSwyR0FBQSxxQkFBQSxtQkFBQUssRUFBQXpDLEdBQUFxQyxFQUFBRCxLQUFBLG9CQUFBcEMsR0FBQXlDLEVBQUEsZUFBQUosRUFBQUQsS0FBQSw4RUFBQXBDLEdBQUF5QyxFQUFBLFNBQUFKLEVBQUFNLEtBQUEsbUNBQUEsZ0NBQUFGLEVBQUEsU0FBQXpDLEVBQUEsa0JBQUFxQyxFQUFBTSxLQUFBLDBEQUFBRixFQUFBLFNBQUF6QyxFQUFBLGlCQUFBcUMsRUFBQUQsS0FBQSxjQUFBLDZCQUFBSyxFQUFBekMsR0FBQXFDLEVBQUFHLEtBQUEsaUNBQUF4QyxHQUFBeUMsRUFBQSxXQUFBSixFQUFBRyxLQUFBLG9DQUFBeEMsR0FBQXlDLEVBQUEsU0FBQUosRUFBQUcsS0FBQSxzQkFBQUMsRUFBQStDLEVBQUFtdkMsSUFBQTl1QyxFQUFBd3ZDLE9BQUFJLE9BQUFFLFNBQUEzMUMsRUFBQXdGLEVBQUFtdkMsSUFBQTl1QyxFQUFBd3ZDLE9BQUFJLE9BQUFGLFFBQUFsekMsRUFBQUQsS0FBQSw4Q0FBQUssRUFBQXpDLEdBQUFxQyxFQUFBTSxLQUFBLHFDQUFBLGdCQUFBLHFGQUFBRixHQUFBekMsRUFBQSxLQUFBLE1BQUFxQyxFQUFBRCxLQUFBLGdCQUFBcEMsR0FBQXlDLEVBQUEsUUFBQUosRUFBQU0sS0FBQSxpQkFBQTNDLEdBQUF5QyxFQUFBLFdBQUFKLEVBQUFELEtBQUEsa0NBQUFLLEVBQUF6QyxHQUFBcUMsRUFBQUQsS0FBQSxvQ0FBQXBDLEdBQUF5QyxFQUFBLGNBQUFKLEVBQUFHLEtBQUEsd0JBQUF4QyxFQUFBLE1BQUEsTUFBQXlDLEVBQUEsY0FBQUosRUFBQUQsS0FBQSxrRkFBQSxtQkFBQSx1QkFBQSxnQkFBQXBDLEdBQUF5QyxFQUFBLGFBQUFKLEVBQUFELEtBQUEsaURBQUFwQyxHQUFBeUMsRUFBQSxhQUFBSixFQUFBTSxLQUFBLDREQUFBRixFQUFBd0IsRUFBQXlKLE9BQUExTixFQUFBaUUsRUFBQXlKLE9BQUFyTCxFQUFBTyxLQUFBLHlCQUFBNUMsRUFBQSxJQUFBLFlBQUF5QyxFQUFBLFlBQUFKLEVBQUFPLEtBQUEseUJBQUE1QyxHQUFBeUMsRUFBQSxVQUFBSixFQUFBTyxLQUFBLDhFQUFBLGtCQUFBSCxFQUFBLFdBQUF6QyxHQUFBcUMsRUFBQU0sS0FBQSx5QkFBQUYsR0FBQUosRUFBQU8sR0FBQTVDLElBQUEscURBQUEsb0NBQUEscUJBQUF5QyxFQUFBLFdBQUF6QyxHQUFBcUMsRUFBQUQsS0FBQSxnQkFBQXBDLEdBQUF5QyxFQUFBLFlBQUFKLEVBQUFELEtBQUEsb0NBQUEsOEJBQUFLLEVBQUEsU0FBQXpDLEdBQUFxQyxFQUFBRCxLQUFBLHNDQUFBcEMsR0FBQXlDLEVBQUEsU0FBQUosRUFBQU0sS0FBQSxtREFBQUYsRUFBQSxNQUFBekMsR0FBQXFDLEVBQUFNLEtBQUEsc0JBQUFGLEVBQUF6QyxHQUFBcUMsRUFBQU8sS0FBQSxpQkFBQSx3QkFBQTVDLEdBQUF5QyxFQUFBLE9BQUFKLEVBQUFELEtBQUEscUNBQUFwQyxHQUFBeUMsRUFBQSxXQUFBSixFQUFBTSxLQUFBLHdCQUFBRixFQUFBekMsR0FBQXFDLEVBQUFELEtBQUEsOEJBQUFLLEVBQUF6QyxHQUFBcUMsRUFBQXVCLEtBQUEsNkJBQUE1RCxHQUFBeUMsRUFBQSxXQUFBSixFQUFBdUIsS0FBQSxnQ0FBQSxxREFBQSxpRkFBQTVELEVBQUEsS0FBQSxNQUFBeUMsRUFBQSxXQUFBSixFQUFBRCxLQUFBLDhCQUFBcEMsR0FBQXlDLEVBQUEsWUFBQUosRUFBQUQsS0FBQSxtQkFBQSxtQ0FBQUMsRUFBQTRCLEVBQUFzd0MsVUFBQTl4QyxFQUFBekMsSUFBQTIyQyxTQUFBLGdDQUFBLzBDLEdBQUFoQyxFQUFBLGNBQUEsdUJBQUEsK0RBQUEsMENBQUEsaUNBQUFBLEVBQUFnQyxJQUFBLDRCQUFBQSxFQUFBaEMsSUFBQWhDLEtBQUEsc0NBQUFnQyxFQUFBZ0MsSUFBQSwrQkFBQSxrREFBQSx1REFBQWhDLEdBQUFnQyxFQUFBNEQsRUFBQW12QyxJQUFBOXVDLEVBQUFqSSxHQUFBazRDLFFBQUF4TyxXQUFBLDBDQUFBMW5DLEVBQUEsWUFBQWdDLEVBQUE0RCxFQUFBbXZDLElBQUE5dUMsRUFBQWpJLEdBQUFrNEMsUUFBQXhPLFdBQUEsa0JBQUExbkMsRUFBQSxjQUFBZ0MsSUFBQSxnQ0FBQSwwQkFBQSxxRkFBQSx5QkFBQWhDLEVBQUFnQyxJQUFBLHVEQUFBaEMsRUFBQSxXQUFBZ0MsSUFBQSxtQkFBQWhDLElBQUEseUNBQUFBLEVBQUEsY0FBQWdDLElBQUEsaURBQUEseUJBQUEsNkJBQUEsMEpBQUEsNkJBQUEsd0JBQUFoQyxFQUFBZ0MsSUFBQSxpQ0FBQWhDLEVBQUEsZUFBQWdDLElBQUEsNkJBQUFoQyxFQUFBLFdBQUFnQyxJQUFBLG9EQUFBaEMsRUFBQWdDLElBQUEsb0JBQUFoQyxFQUFBZ0MsSUFBQSwwREFBQWhDLEVBQUEsUUFBQWdDLEVBQUEsS0FBQSxPQUFBLGlDQUFBLG9DQUFBaEMsRUFBQSxXQUFBZ0MsRUFBQSxLQUFBLE9BQUEsd0NBQUEscUNBQUEsK0RBQUEseUJBQUFoQyxFQUFBZ0MsS0FBQXdDLEVBQUEsU0FBQTVGLEVBQUFDLEdBQUEsR0FBQXFLLGVBQUExRSxHQUFBLENBQUEsR0FBQTFGLEdBQUFGLElBQUFKLEdBQUFBLEVBQUFnRCxXQUFBaEQsRUFBQWdELFVBQUFSLFVBQUF4QyxFQUFBZ0QsVUFBQVIsVUFBQXZDLEdBQUFZLEVBQUFSLEVBQUF3RixFQUFBc0gsT0FBQTlHLEVBQUFoRyxHQUFBZ0csQ0FBQSxPQUFBcUUsTUFBQTh0QyxXQUFBLFdBQUEsR0FBQXg0QyxHQUFBb0gsRUFBQWl2QyxJQUFBOW1DLE1BQUE3RSxLQUFBN0osRUFBQWpCLFFBQUEsT0FBQUksR0FBQW8yQyxNQUFBdndDLEVBQUF1d0MsTUFBQXAyQyxFQUFBa3BDLFNBQUFscEMsR0FBQTBLLEtBQUErdEMsT0FBQSxXQUFBLE1BQUFyeEMsR0FBQWl2QyxJQUFBOW1DLE1BQUE3RSxLQUFBN0osRUFBQXkzQyxNQUFBNXRDLEtBQUFndUMsVUFBQSxXQUFBLE1BQUF0eEMsR0FBQWl2QyxJQUFBOW1DLE1BQUE3RSxLQUFBN0osRUFBQW8yQyxTQUFBdnNDLEtBQUFpdUMsVUFBQSxXQUFBLE1BQUF2eEMsR0FBQWl2QyxJQUFBOW1DLE1BQUE3RSxLQUFBN0osRUFBQTAzQyxTQUFBN3RDLEtBQUFrdUMsTUFBQSxXQUFBLE1BQUF4eEMsR0FBQWl2QyxJQUFBOW1DLE1BQUE3RSxLQUFBN0osRUFBQXJCLEtBQUFrTCxLQUFBbXVDLFVBQUEsV0FBQSxPQUFBdDVDLEdBQUFtTCxLQUFBNHJDLFFBQUExMkMsUUFBQThLLEtBQUE4dEMsYUFBQUQsT0FBQTd0QyxLQUFBaXVDLFlBQUFuNUMsR0FBQWtMLEtBQUFrdUMsUUFBQTNCLE9BQUF2c0MsS0FBQWd1QyxZQUFBSixJQUFBNXRDLEtBQUErdEMsV0FBQS90QyxLQUFBNHJDLE1BQUEsV0FBQSxNQUFBaDJDLElBQUFvSyxLQUFBb3VDLE1BQUEsU0FBQTk0QyxHQUFBLE1BQUFNLEdBQUFOLEVBQUEwSyxNQUFBQSxLQUFBLE1BQUEsSUFBQTFFLEdBQUE1RixFQUFBQyxHQUFBdzRDLFlBQUE3eUMsR0FBQSt5QyxRQUFBMTRDLEVBQUEyRixFQUFBZ3pDLFNBQUFDLEtBQUF6M0MsRUFBQTAzQyxNQUFBOTNDLEVBQUEyM0MsUUFBQXYxQyxHQUFBd0MsRUFBQW16QyxLQUFBQyxhQUFBajFDLEdBQUE2QixFQUFBcXpDLFFBQUFDLE1BQUExM0MsRUFBQTIzQyxPQUFBbDFDLEVBQUFtMUMsS0FBQXYxQyxFQUFBdzFDLFFBQUFyMUMsRUFBQXMxQyxPQUFBMTFDLEVBQUEyMUMsUUFBQW4xQyxFQUFBbzFDLE9BQUFyMUMsRUFBQXMxQyxTQUFBcjBDLEVBQUFzMEMsU0FBQS8wQyxHQUFBaUIsRUFBQSt6QyxRQUFBZCxLQUFBejNDLEVBQUF1M0MsUUFBQXYxQyxHQUFBd0MsRUFBQWcwQyxJQUFBZixLQUFBejNDLEVBQUF1M0MsUUFBQXYxQyxTQUFBbUosV0FBQWxNLFNBQUFtTSxVQUFBbk0sR0FBQW1NLE9BQUFELFVBQUFBLFFBQUFDLE9BQUFELFFBQUEzRyxHQUFBMkcsUUFBQXN0QyxTQUFBajBDLFNBQUE2RyxVQUFBaE0sR0FBQWdNLE9BQUFDLElBQUFELE9BQUEsV0FBQSxNQUFBN0csS0FBQWhHLEVBQUFpNkMsU0FBQWowQyxDQUFBLElBQUFOLEdBQUExRixFQUFBcWhDLFFBQUFyaEMsRUFBQXlyQyxLQUFBLFVBQUEvbEMsS0FBQWpGLEVBQUEsQ0FBQSxHQUFBNkIsR0FBQSxHQUFBMEQsRUFBQU4sR0FBQW5HLEdBQUErQyxFQUFBdTJDLFlBQUFuekMsRUFBQW5HLEdBQUFxZCxJQUFBLFdBQUEsTUFBQXRhLEdBQUFnMEMsU0FBQTV3QyxFQUFBbkcsR0FBQSsyQixJQUFBLFNBQUF0MkIsR0FBQXNDLEVBQUF3MkMsTUFBQTk0QyxFQUFBLElBQUFJLEdBQUFrQyxFQUFBdTJDLFdBQUEsS0FBQSxHQUFBeDRDLEtBQUFELEdBQUFzRixFQUFBbkcsR0FBQWMsR0FBQUQsRUFBQUMsTUFBQSxnQkFBQTRGLFFBQUFBLE9BQUF5RSxLQ05BLElBQUF5RCxpQkFBQUEsaUJBQUEsV0FBQSxZQUFBLFNBQUFuTyxHQUFBQSxHQUFBLE1BQUFxSixvQkFBQXJKLEdBQUFvTyxRQUFBOU4sRUFBQU0sR0FBQSxRQUFBUixHQUFBSixHQUFBLE1BQUFzSixvQkFBQXRKLEVBQUFvTyxRQUFBdk4sRUFBQSxNQUFBLFFBQUFSLEdBQUFMLEdBQUEsR0FBQTBLLEtBQUF0SixHQUFBc0IsT0FBQTJLLE9BQUEsTUFBQXJOLEVBQUEsQ0FBQSxNQUFBQSxFQUFBNlQsT0FBQSxLQUFBN1QsRUFBQUEsRUFBQStELE1BQUEsR0FBQSxLQUFBLEdBQUExRCxHQUFBSixFQUFBSyxHQUFBTixHQUFBLElBQUE2TCxNQUFBLEtBQUFoTCxFQUFBLEVBQUFKLEVBQUFILEVBQUFLLE9BQUFFLEVBQUFKLEVBQUFJLElBQUFaLEVBQUFLLEVBQUFPLEdBQUFSLEVBQUFKLEVBQUE4RixRQUFBLE1BQUEsRUFBQTFGLEVBQUFxSyxLQUFBbW9CLE9BQUF6eUIsRUFBQUgsRUFBQThELE1BQUEsRUFBQTFELElBQUFELEVBQUFILEVBQUE4RCxNQUFBMUQsRUFBQSxLQUFBSixFQUFBVSxRQUFBK0osS0FBQW1vQixPQUFBenlCLEVBQUFILEdBQUEsS0FBQSxRQUFBMkIsS0FBQSxJQUFBLFFBQUEwd0MsT0FBQUMsU0FBQSxNQUFBdnlDLEdBQUEsT0FBQSxHQUFBLEdBQUFDLEdBQUFJLEVBQUFzQyxVQUFBckMsRUFBQSxxQkFBQU8sRUFBQSxNQUFBSixHQUFBeTVDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQXZ5QixJQUFBLE1BQUF3eUIsTUFBQSxJQUFBQyxNQUFBLE1BQUEzNUMsRUFBQSxTQUFBWixHQUFBLE1BQUFTLEdBQUFULElBQUFPLEVBQUFxQixJQUFBUixFQUFBLHVCQUFBeUMsS0FBQUMsUUFBQTdELEdBQUE0eUIsT0FBQSxTQUFBenlCLEVBQUFDLEdBQUEsR0FBQUosR0FBQXlLLEtBQUF0SixFQUFBaEIsS0FBQUgsR0FBQUEsRUFBQUcsR0FBQXNFLEtBQUEsR0FBQXJFLEdBQUFKLEVBQUFHLElBQUEsR0FBQUMsSUFBQUosRUFBQXU2QyxPQUFBLFNBQUFwNkMsU0FBQXNLLE1BQUF0SixHQUFBaEIsSUFBQUgsRUFBQTJjLElBQUEsU0FBQXhjLEdBQUEsR0FBQUMsR0FBQXFLLEtBQUF0SixFQUFBLE9BQUFoQixLQUFBQyxHQUFBQSxFQUFBRCxHQUFBLEdBQUEsTUFBQUgsRUFBQXc2QyxPQUFBLFNBQUFyNkMsR0FBQSxHQUFBQyxHQUFBcUssS0FBQXRKLEVBQUEsT0FBQWhCLEtBQUFDLEdBQUFBLEVBQUFELEdBQUEyRCxNQUFBLE9BQUE5RCxFQUFBbW9CLElBQUEsU0FBQWhvQixHQUFBLE1BQUFBLEtBQUFzSyxNQUFBdEosSUFBQW5CLEVBQUFxMkIsSUFBQSxTQUFBbDJCLEVBQUFDLEdBQUFxSyxLQUFBdEosR0FBQWhCLElBQUEsR0FBQUMsSUFBQUosRUFBQW9QLFFBQUEsU0FBQWpQLEVBQUFDLEdBQUEsR0FBQUosR0FBQXlLLEtBQUF0SixFQUFBc0IsUUFBQWc0QyxvQkFBQXo2QyxHQUFBb1AsUUFBQSxTQUFBclAsR0FBQUMsRUFBQUQsR0FBQXFQLFFBQUEsU0FBQXBQLEdBQUFHLEVBQUF5QyxLQUFBeEMsRUFBQUosRUFBQUQsRUFBQTBLLE9BQUFBLE9BQUFBLE9BQUF6SyxFQUFBMDZDLEtBQUEsV0FBQSxHQUFBdjZDLEtBQUFzSyxNQUFBMkUsUUFBQSxTQUFBclAsRUFBQUssR0FBQUQsRUFBQXNFLEtBQUFyRSxJQUFBLElBQUFBLElBQUFpcUIsS0FBQSxXQUFBLEdBQUF0cUIsR0FBQUksRUFBQThQLE9BQUEsUUFBQW9QLEtBQUFzN0IsU0FBQTU2QyxFQUFBc0wsTUFBQXRMLElBQUEsT0FBQU8sS0FBQUYsRUFBQWl5QyxPQUFBQyxVQUFBLFdBQUEsTUFBQWx5QyxLQUFBQSxHQUFBSixFQUFBNDZDLE9BQUEsV0FBQSxHQUFBejZDLEtBQUFzSyxNQUFBMkUsUUFBQSxTQUFBclAsR0FBQUksRUFBQXNFLEtBQUExRSxJQUFBLElBQUFLLElBQUFpcUIsS0FBQSxXQUFBLEdBQUF0cUIsR0FBQUksRUFBQThQLE9BQUEsUUFBQW9QLEtBQUFzN0IsU0FBQTU2QyxFQUFBc0wsTUFBQXRMLElBQUEsT0FBQU8sS0FBQUYsRUFBQWl5QyxPQUFBQyxVQUFBLFdBQUEsTUFBQWx5QyxLQUFBQSxHQUFBSixFQUFBNjZDLFFBQUEsV0FBQSxHQUFBMTZDLEtBQUFzSyxNQUFBMkUsUUFBQSxTQUFBclAsRUFBQUssR0FBQUQsRUFBQXNFLE1BQUFyRSxFQUFBTCxLQUFBLElBQUFLLElBQUFpcUIsS0FBQSxXQUFBLEdBQUF0cUIsR0FBQUksRUFBQThQLE9BQUEsUUFBQW9QLEtBQUFzN0IsU0FBQTU2QyxFQUFBc0wsTUFBQXRMLElBQUEsT0FBQU8sS0FBQUYsRUFBQWl5QyxPQUFBQyxVQUFBLFdBQUEsTUFBQWx5QyxLQUFBQSxHQUFBRSxJQUFBTixFQUFBcXlDLE9BQUFDLFVBQUF0eUMsRUFBQTY2QyxTQUFBNzZDLEVBQUErWSxPQUFBLFdBQUEsVUFBQS9ZLEVBQUFpRSxTQUFBLFdBQUEsR0FBQWpFLEdBQUFLLEVBQUFPLEVBQUFKLEVBQUFMLEVBQUFzSyxLQUFBdEosR0FBQWYsSUFBQSxLQUFBQyxJQUFBRixHQUFBLElBQUFTLEVBQUFiLEVBQUFNLEdBQUFMLEVBQUEsRUFBQVEsRUFBQUwsRUFBQUUsR0FBQUwsRUFBQVEsRUFBQUUsT0FBQVYsSUFBQUksRUFBQXFFLEtBQUE3RCxFQUFBLElBQUFiLEVBQUFTLEVBQUFSLElBQUEsT0FBQUksR0FBQWdULEtBQUEsS0FBQSxJQUFBN1IsR0FBQWtCLE9BQUFxNEMsZUFBQTkyQyxFQUFBdkIsT0FBQXM0Qyx5QkFBQTMyQyxFQUFBLFNBQUFyRSxHQUFBLFFBQUFJLEdBQUFBLEVBQUFDLEdBQUFKLEVBQUE0eUIsT0FBQWh3QixLQUFBNkgsS0FBQXRLLEVBQUFDLEdBQUFELEVBQUFzSyxLQUFBeEcsV0FBQWxFLEVBQUFzMkIsSUFBQXp6QixLQUFBNkgsS0FBQXV3QyxLQUFBNzZDLEVBQUEsSUFBQUEsRUFBQSxJQUFBLFFBQUFDLEdBQUFELEdBQUFILEVBQUF1NkMsT0FBQTMzQyxLQUFBNkgsS0FBQXRLLEdBQUFBLEVBQUFzSyxLQUFBeEcsV0FBQWxFLEVBQUFzMkIsSUFBQXp6QixLQUFBNkgsS0FBQXV3QyxLQUFBNzZDLEVBQUEsSUFBQUEsRUFBQSxJQUFBLFFBQUFFLEdBQUFGLEVBQUFDLEdBQUFKLEVBQUFxMkIsSUFBQXp6QixLQUFBNkgsS0FBQXRLLEVBQUFDLEdBQUFELEVBQUFzSyxLQUFBeEcsV0FBQWxFLEVBQUFzMkIsSUFBQXp6QixLQUFBNkgsS0FBQXV3QyxLQUFBNzZDLEVBQUEsSUFBQUEsRUFBQSxJQUFBLE1BQUEsVUFBQUosRUFBQUMsR0FBQSxNQUFBRCxHQUFBNnlCLE9BQUF6eUIsRUFBQUosRUFBQXc2QyxPQUFBbjZDLEVBQUFMLEVBQUFzMkIsSUFBQWgyQixFQUFBa0IsRUFBQXhCLEVBQUEsUUFBQWs3QyxjQUFBLEVBQUFDLFVBQUEsRUFBQTd2QyxNQUFBckwsTUFBQXVELEVBQUEsU0FBQXhELEdBQUEsTUFBQSxVQUFBSSxFQUFBQyxHQUFBLE1BQUFtQixHQUFBcEIsRUFBQSxpQkFBQTg2QyxjQUFBLEVBQUFDLFVBQUEsRUFBQTd2QyxNQUFBdEwsRUFBQUssRUFBQUQsS0FBQUMsSUFBQThELEVBQUEsU0FBQW5FLEdBQUEsR0FBQUksR0FBQUosRUFBQTZ5QixNQUFBN3lCLEdBQUE2eUIsT0FBQTV5QixFQUFBNHlCLE9BQUF4eUIsRUFBQXdDLEtBQUE3QyxFQUFBQSxFQUFBaTdDLEtBQUF6bkMsT0FBQXpQLE1BQUEsSUFBQS9ELEVBQUE2eUIsT0FBQXp5QixHQUFBZ0UsRUFBQSxTQUFBcEUsRUFBQUksR0FBQSxLQUFBSixZQUFBSSxJQUFBLEtBQUEsSUFBQW9VLFdBQUEsMEVBQUFwVSxFQUFBWCxPQUFBdUUsRUFBQSxTQUFBaEUsR0FBQSxHQUFBUyxHQUFBTCxFQUFBSixFQUFBMkMsVUFBQTFDLEVBQUFnRSxFQUFBN0QsRUFBQSxnQkFBQUUsRUFBQTJELEVBQUE3RCxFQUFBLFFBQUFTLEVBQUFvRCxFQUFBN0QsRUFBQSxXQUFBSCxHQUFBWSxHQUFBQSxFQUFBeTFCLE1BQUE3MUIsRUFBQStDLEVBQUFhLEVBQUF4RCxJQUFBNkIsT0FBQTA0QyxpQkFBQWg3QyxHQUFBd0csTUFBQWdXLElBQUEsV0FBQSxNQUFBdGMsR0FBQXNjLElBQUEvWixLQUFBNkgsT0FBQTRyQixJQUFBLFNBQUF0MkIsR0FBQSxHQUFBSSxHQUFBc0ssS0FBQTJ3QyxhQUFBLzZDLEdBQUFnMkIsSUFBQXp6QixLQUFBNkgsS0FBQTFLLEdBQUFJLEdBQUErRCxFQUFBL0QsS0FBQW9ULFFBQUFvSixJQUFBLFdBQUEsTUFBQS9iLEdBQUErYixJQUFBL1osS0FBQTZILE9BQUE0ckIsSUFBQSxTQUFBdDJCLEdBQUEsR0FBQUksR0FBQXNLLEtBQUEyd0MsYUFBQXg2QyxHQUFBeTFCLElBQUF6ekIsS0FBQTZILEtBQUExSyxHQUFBSSxHQUFBK0QsRUFBQS9ELEtBQUF1aEMsY0FBQS9rQixJQUFBLFdBQUEsTUFBQXhZLEdBQUFzRyxLQUFBMUssR0FBQTBLLEtBQUEyd0MsZUFBQTU2QyxFQUFBaUssS0FBQSxHQUFBckssR0FBQXFLLEtBQUE4SSxPQUFBelAsTUFBQSxNQUFBdXlCLElBQUEsU0FBQWwyQixHQUFBZ0UsRUFBQXNHLEtBQUExSyxHQUFBUyxFQUFBaUssS0FBQXRLLFFBQUEsT0FBQTRELEdBQUFzM0MsbUJBQUEsb0JBQUF4N0MsV0FBQW1ILE9BQUFBLElBQUF0RSxXQUFBcUIsRUFBQWlELEtBQUE1RyxNQ0lBLFNBQUF3VyxFQUFBMGtDLEdBQ0EsZ0JBQUE1dUMsVUFBQSxtQkFBQUMsUUFBQUEsT0FBQUQsUUFBQTR1QyxJQUNBLGtCQUFBMXVDLFNBQUFBLE9BQUFDLElBQUFELE9BQUEwdUMsR0FDQTFrQyxFQUFBcXJCLElBQUFxWixLQUNBN3dDLEtBQUEsV0FDQSxZQUVBLFNBQUE0ckIsR0FBQWtsQixFQUFBaEosRUFBQTlZLEdBQ0EsR0FBQStoQixFQUFBRCxFQUFBaEosR0FFQSxZQURBZ0osRUFBQWhKLEdBQUE5WSxFQUdBLElBQUE4aEIsRUFBQUUsT0FFQSxXQURBcGxCLEdBQUFrbEIsRUFBQTVnQyxNQUFBNDNCLEVBQUE5WSxFQUdBLElBQUFyVSxHQUFBbTJCLEVBQUFHLE1BQ0EsS0FBQXQyQixFQUVBLFlBREFtMkIsRUFBQWhKLEdBQUE5WSxFQUtBLElBRkFyVSxFQUFBdTJCLFFBQUFwSixFQUFBOVksR0FDQXJVLEVBQUF3MkIsSUFBQWh3QixTQUNBeEcsRUFBQXkyQixJQUVBLElBREEsR0FBQXg3QyxHQUFBK2tCLEVBQUF5MkIsSUFBQW43QyxPQUNBTCxLQUFBLENBQ0EsR0FBQXk3QyxHQUFBMTJCLEVBQUF5MkIsSUFBQXg3QyxFQUNBeTdDLEdBQUFDLE9BQUF4SixHQUNBdUosRUFBQUUsVUFHQSxNQUFBdmlCLEdBVUEsUUFBQXdpQixHQUFBVixFQUFBaEosR0FDQSxHQUFBaUosRUFBQUQsRUFBQWhKLEdBQUEsT0FHQWdKLEdBQUFoSixFQUNBLElBQUFudEIsR0FBQW0yQixFQUFBRyxNQUNBLEtBQUF0MkIsRUFLQSxZQUpBbTJCLEVBQUFFLGVBQ0FGLEdBQUE1Z0MsTUFBQTQzQixHQUNBZ0osRUFBQVMsV0FLQSxJQURBNTJCLEVBQUF3MkIsSUFBQWh3QixTQUNBeEcsRUFBQXkyQixJQUVBLElBREEsR0FBQXg3QyxHQUFBK2tCLEVBQUF5MkIsSUFBQW43QyxPQUNBTCxLQUFBLENBQ0EsR0FBQXk3QyxHQUFBMTJCLEVBQUF5MkIsSUFBQXg3QyxFQUNBeTdDLEdBQUFJLFNBQUEzSixHQUNBdUosRUFBQUUsWUFjQSxRQUFBUixHQUFBRCxFQUFBaEosR0FDQSxNQUFBNXZDLElBQUFDLEtBQUEyNEMsRUFBQWhKLEdBWUEsUUFBQTRKLEdBQUFDLEdBQ0EsTUFBQUMsSUFBQXg4QyxLQUFBdThDLEdBVUEsUUFBQUUsR0FBQWhHLEdBQ0EsR0FBQS8wQyxJQUFBKzBDLEVBQUEsSUFBQTl4QyxXQUFBLEVBQ0EsT0FBQSxNQUFBakQsR0FBQSxLQUFBQSxFQVdBLFFBQUFnN0MsR0FBQWx4QyxHQUNBLE1BQUEsT0FBQUEsRUFBQSxHQUFBQSxFQUFBcEgsV0FXQSxRQUFBdTRDLEdBQUFueEMsR0FDQSxHQUFBLGdCQUFBQSxHQUNBLE1BQUFBLEVBRUEsSUFBQW94QyxHQUFBaFIsT0FBQXBnQyxFQUNBLE9BQUFnaEMsT0FBQW9RLEdBQUFweEMsRUFBQW94QyxFQVdBLFFBQUFDLEdBQUFyeEMsR0FDQSxNQUFBLFNBQUFBLEdBQUEsVUFBQUEsR0FBQUEsRUFVQSxRQUFBc3hDLEdBQUFyRyxHQUNBLEdBQUFoMkMsR0FBQWcyQyxFQUFBOXhDLFdBQUEsR0FDQUQsRUFBQSt4QyxFQUFBOXhDLFdBQUE4eEMsRUFBQTUxQyxPQUFBLEVBQ0EsT0FBQUosS0FBQWlFLEdBQUEsS0FBQWpFLEdBQUEsS0FBQUEsRUFBQWcyQyxFQUFBQSxFQUFBeHlDLE1BQUEsR0FBQSxHQVlBLFFBQUE4NEMsR0FBQXRHLEdBQ0EsTUFBQUEsR0FBQW5vQyxRQUFBMHVDLEdBQUFDLEdBR0EsUUFBQUEsR0FBQXg3QyxFQUFBQyxHQUNBLE1BQUFBLEdBQUFBLEVBQUEyUCxjQUFBLEdBWUEsUUFBQTZyQyxHQUFBekcsR0FDQSxNQUFBQSxHQUFBbm9DLFFBQUE2dUMsR0FBQSxTQUFBdDRDLGNBaUJBLFFBQUF1NEMsR0FBQTNHLEdBQ0EsTUFBQUEsR0FBQW5vQyxRQUFBK3VDLEdBQUFKLEdBV0EsUUFBQTFyQyxHQUFBNFIsRUFBQW02QixHQUNBLE1BQUEsVUFBQTc4QyxHQUNBLEdBQUFxQixHQUFBME0sVUFBQTNOLE1BQ0EsT0FBQWlCLEdBQUFBLEVBQUEsRUFBQXFoQixFQUFBMVQsTUFBQTZ0QyxFQUFBOXVDLFdBQUEyVSxFQUFBcGdCLEtBQUF1NkMsRUFBQTc4QyxHQUFBMGlCLEVBQUFwZ0IsS0FBQXU2QyxJQVlBLFFBQUFoNkIsR0FBQXFnQixFQUFBaGtCLEdBQ0FBLEVBQUFBLEdBQUEsQ0FHQSxLQUZBLEdBQUFuZixHQUFBbWpDLEVBQUE5aUMsT0FBQThlLEVBQ0E0OUIsRUFBQSxHQUFBL3lDLE9BQUFoSyxHQUNBQSxLQUNBKzhDLEVBQUEvOEMsR0FBQW1qQyxFQUFBbmpDLEVBQUFtZixFQUVBLE9BQUE0OUIsR0FVQSxRQUFBbHdDLEdBQUFtd0MsRUFBQUMsR0FHQSxJQUZBLEdBQUE1QyxHQUFBajRDLE9BQUFpNEMsS0FBQTRDLEdBQ0FqOUMsRUFBQXE2QyxFQUFBaDZDLE9BQ0FMLEtBQ0FnOUMsRUFBQTNDLEVBQUFyNkMsSUFBQWk5QyxFQUFBNUMsRUFBQXI2QyxHQUVBLE9BQUFnOUMsR0FZQSxRQUFBMXVDLEdBQUE0c0MsR0FDQSxNQUFBLFFBQUFBLEdBQUEsZ0JBQUFBLEdBY0EsUUFBQTczQixHQUFBNjNCLEdBQ0EsTUFBQXQzQyxJQUFBckIsS0FBQTI0QyxLQUFBZ0MsR0FxQkEsUUFBQUMsR0FBQWpDLEVBQUFoSixFQUFBOVksRUFBQWdrQixHQUNBaDdDLE9BQUFxNEMsZUFBQVMsRUFBQWhKLEdBQ0FsbkMsTUFBQW91QixFQUNBZ2tCLGFBQUFBLEVBQ0F2QyxVQUFBLEVBQ0FELGNBQUEsSUFhQSxRQUFBeUMsR0FBQUMsRUFBQUMsR0FDQSxHQUFBbHRDLEdBQUFtdEMsRUFBQXY2QixFQUFBdzZCLEVBQUF6dkIsRUFDQTB2QixFQUFBLFFBQUFBLEtBQ0EsR0FBQXQ2QixHQUFBNWlCLEtBQUErRixNQUFBazNDLENBQ0FyNkIsR0FBQW02QixHQUFBbjZCLEdBQUEsRUFDQS9TLEVBQUE0RSxXQUFBeW9DLEVBQUFILEVBQUFuNkIsSUFFQS9TLEVBQUEsS0FDQTJkLEVBQUFzdkIsRUFBQXJ1QyxNQUFBZ1UsRUFBQXU2QixHQUNBbnRDLElBQUE0UyxFQUFBdTZCLEVBQUEsT0FHQSxPQUFBLFlBT0EsTUFOQXY2QixHQUFBN1ksS0FDQW96QyxFQUFBeHZDLFVBQ0F5dkMsRUFBQWo5QyxLQUFBK0YsTUFDQThKLElBQ0FBLEVBQUE0RSxXQUFBeW9DLEVBQUFILElBRUF2dkIsR0FZQSxRQUFBdm9CLEdBQUFrNEMsRUFBQXpDLEdBRUEsSUFEQSxHQUFBbDdDLEdBQUEyOUMsRUFBQXQ5QyxPQUNBTCxLQUNBLEdBQUEyOUMsRUFBQTM5QyxLQUFBazdDLEVBQUEsTUFBQWw3QyxFQUVBLFFBQUEsRUFVQSxRQUFBNDlDLEdBQUFqN0IsR0FDQSxHQUFBekosR0FBQSxRQUFBQSxLQUNBLElBQUFBLEVBQUEya0MsVUFDQSxNQUFBbDdCLEdBQUExVCxNQUFBN0UsS0FBQTRELFdBTUEsT0FIQWtMLEdBQUE1RSxPQUFBLFdBQ0E0RSxFQUFBMmtDLFdBQUEsR0FFQTNrQyxFQVlBLFFBQUE0a0MsR0FBQTc5QyxFQUFBaUUsR0FFQSxNQUFBakUsSUFBQWlFLE1BQUFvSyxFQUFBck8sS0FBQXFPLEVBQUFwSyxLQUFBYixLQUFBQyxVQUFBckQsS0FBQW9ELEtBQUFDLFVBQUFZLEdBa0hBLFFBQUE2NUMsR0FBQUMsR0FDQTV6QyxLQUFBdzJCLEtBQUEsRUFDQXgyQixLQUFBNHpDLE1BQUFBLEVBQ0E1ekMsS0FBQWsxQixLQUFBbDFCLEtBQUE2ekMsS0FBQTNELE9BQ0Fsd0MsS0FBQTh6QyxRQUFBOTdDLE9BQUEySyxPQUFBLE1BeUhBLFFBQUFveEMsS0FDQSxHQUNBdm1DLEdBREFta0MsRUFBQTlGLEdBQUF4eUMsTUFBQTI2QyxHQUFBcCtDLElBQUFnUCxNQUVBLElBQUErc0MsRUFBQSxDQUNBbmtDLElBQ0EsSUFBQXltQyxHQUFBdEMsRUFBQXJvQyxNQUFBNHFDLEdBQ0ExbUMsR0FBQXpZLEtBQUFrL0MsRUFBQSxHQUNBQSxFQUFBaCtDLE9BQUEsSUFDQXVYLEVBQUE0bEMsS0FBQWEsRUFBQTU2QyxNQUFBLEdBQUFvVixJQUFBMGxDLElBR0EzbUMsSUFDQWpXLEdBQUEybkIsUUFBQTNuQixHQUFBMm5CLGFBQUFsbEIsS0FBQXdULEdBRUF3bUMsR0FBQXArQyxHQUFBLEVBVUEsUUFBQXUrQyxHQUFBcE0sR0FDQSxHQUFBcU0sR0FBQWgvQyxLQUFBMnlDLEdBQ0EsT0FDQW5uQyxNQUFBbXhDLEVBQUFoSyxHQUNBc00sU0FBQSxFQUdBLElBQUFDLEdBQUFwQyxFQUFBbkssR0FDQXNNLEVBQUFDLElBQUF2TSxDQUNBLFFBQ0FubkMsTUFBQXl6QyxFQUFBdE0sRUFBQXVNLEVBQ0FELFFBQUFBLEdBdUJBLFFBQUFFLEdBQUFwK0MsR0FDQSxHQUFBcStDLEdBQUFDLEdBQUF2aUMsSUFBQS9iLEVBQ0EsSUFBQXErQyxFQUNBLE1BQUFBLEVBVUEsS0FOQTNJLEdBQUExMUMsRUFDQXUrQyxHQUFBQyxJQUFBLEVBQ0FDLEdBQUFDLEdBQUFDLEdBQUEsRUFDQWQsR0FBQSxFQUNBejhDLE1BRUEzQixHQUFBLEVBQUFzQixHQUFBMjBDLEdBQUE1MUMsT0FBQUwsR0FBQXNCLEdBQUF0QixLQUdBLEdBRkFpcUIsR0FBQS9vQixHQUNBQSxHQUFBKzBDLEdBQUE5eEMsV0FBQW5FLElBQ0E4K0MsR0FFQSxLQUFBNTlDLElBQUEsS0FBQStvQixLQUFBNjBCLElBQUFBLFFBQ0EsSUFBQUMsR0FFQSxLQUFBNzlDLElBQUEsS0FBQStvQixLQUFBODBCLElBQUFBLFFBQ0EsSUFBQSxNQUFBNzlDLElBQ0EsTUFBQSswQyxHQUFBOXhDLFdBQUFuRSxHQUFBLElBQUEsTUFBQWkyQyxHQUFBOXhDLFdBQUFuRSxHQUFBLEdBQ0EsTUFBQTJCLEdBQUF3OUMsWUFFQWYsR0FBQXArQyxHQUFBLEVBQ0EyQixHQUFBdzlDLFdBQUFsSixHQUFBeHlDLE1BQUEsRUFBQXpELElBQUFnUCxRQUdBbXZDLFFBR0EsUUFBQWo5QyxJQUNBLElBQUEsSUFDQTY5QyxJQUFBLENBQ0EsTUFDQSxLQUFBLElBQ0FELElBQUEsQ0FDQSxNQUNBLEtBQUEsSUFDQUksSUFDQSxNQUNBLEtBQUEsSUFDQUEsSUFDQSxNQUNBLEtBQUEsSUFDQUQsSUFDQSxNQUNBLEtBQUEsSUFDQUEsSUFDQSxNQUNBLEtBQUEsS0FDQUQsSUFDQSxNQUNBLEtBQUEsS0FDQUEsS0FhQSxNQVBBLE9BQUFyOUMsR0FBQXc5QyxXQUNBeDlDLEdBQUF3OUMsV0FBQWxKLEdBQUF4eUMsTUFBQSxFQUFBekQsSUFBQWdQLE9BQ0EsSUFBQW92QyxJQUNBRCxJQUdBVSxHQUFBTyxJQUFBNytDLEVBQUFvQixJQUNBQSxHQWtCQSxRQUFBMDlDLEdBQUFwSixHQUNBLE1BQUFBLEdBQUFub0MsUUFBQXd4QyxHQUFBLFFBR0EsUUFBQUMsS0FDQSxHQUFBaHVDLEdBQUE4dEMsRUFBQXg1QyxHQUFBMjVDLFdBQUEsSUFDQXBqQyxFQUFBaWpDLEVBQUF4NUMsR0FBQTI1QyxXQUFBLElBQ0FDLEVBQUFKLEVBQUF4NUMsR0FBQTY1QyxpQkFBQSxJQUNBQyxFQUFBTixFQUFBeDVDLEdBQUE2NUMsaUJBQUEsR0FDQUUsSUFBQSxHQUFBNytDLFFBQUEwK0MsRUFBQSxnQkFBQUUsRUFBQSxJQUFBcHVDLEVBQUEsZ0JBQUE2SyxFQUFBLEtBQ0F5akMsR0FBQSxHQUFBOStDLFFBQUEsSUFBQTArQyxFQUFBLGdCQUFBRSxFQUFBLEtBRUFwbkMsR0FBQSxHQUFBd2xDLEdBQUEsS0FjQSxRQUFBK0IsR0FBQS9rQyxHQUNBeEMsSUFDQWduQyxHQUVBLElBQUFYLEdBQUFybUMsR0FBQStELElBQUF2QixFQUNBLElBQUE2akMsRUFDQSxNQUFBQSxFQUVBLEtBQUFnQixHQUFBcGdELEtBQUF1YixHQUNBLE1BQUEsS0FNQSxLQUpBLEdBRUFySCxHQUFBMFcsRUFBQTBJLEVBQUE5bkIsRUFBQWtZLEVBQUE2OEIsRUFGQTFCLEtBQ0EyQixFQUFBSixHQUFBSSxVQUFBLEVBR0F0c0MsRUFBQWtzQyxHQUFBNStDLEtBQUErWixJQUVBcVAsRUFBQTFXLEVBQUEwVyxNQUVBQSxFQUFBNDFCLEdBQ0EzQixFQUFBajZDLE1BQ0E0RyxNQUFBK1AsRUFBQXRYLE1BQUF1OEMsRUFBQTUxQixLQUlBMEksRUFBQStzQixHQUFBcmdELEtBQUFrVSxFQUFBLElBQ0ExSSxFQUFBOG5CLEVBQUFwZixFQUFBLEdBQUFBLEVBQUEsR0FDQXdQLEVBQUFsWSxFQUFBN0csV0FBQSxHQUNBNDdDLEVBQUEsS0FBQTc4QixFQUNBbFksRUFBQSswQyxFQUFBLzBDLEVBQUF2SCxNQUFBLEdBQUF1SCxFQUNBcXpDLEVBQUFqNkMsTUFDQTY3QyxLQUFBLEVBQ0FqMUMsTUFBQUEsRUFBQWdFLE9BQ0E4akIsS0FBQUEsRUFDQWl0QixRQUFBQSxJQUVBQyxFQUFBNTFCLEVBQUExVyxFQUFBLEdBQUFyVCxNQVFBLE9BTkEyL0MsR0FBQWpsQyxFQUFBMWEsUUFDQWcrQyxFQUFBajZDLE1BQ0E0RyxNQUFBK1AsRUFBQXRYLE1BQUF1OEMsS0FHQXpuQyxHQUFBNm1DLElBQUFya0MsRUFBQXNqQyxHQUNBQSxFQWFBLFFBQUE2QixHQUFBN0IsRUFBQTVDLEdBQ0EsTUFBQTRDLEdBQUFoK0MsT0FBQSxFQUNBZytDLEVBQUF4bEMsSUFBQSxTQUFBeEUsR0FDQSxNQUFBOHJDLEdBQUE5ckMsRUFBQW9uQyxLQUNBMW9DLEtBQUEsS0FFQW90QyxFQUFBOUIsRUFBQSxHQUFBNUMsR0FBQSxHQWFBLFFBQUEwRSxHQUFBOXJDLEVBQUFvbkMsRUFBQTJFLEdBQ0EsTUFBQS9yQyxHQUFBNHJDLElBQUE1ckMsRUFBQTByQyxTQUFBdEUsRUFBQSxJQUFBQSxFQUFBNEUsTUFBQWhzQyxFQUFBckosT0FBQSxJQUFBczFDLEVBQUFqc0MsRUFBQXJKLE1BQUFvMUMsR0FBQSxJQUFBL3JDLEVBQUFySixNQUFBLElBa0JBLFFBQUFzMUMsR0FBQXZFLEVBQUFxRSxHQUNBLEdBQUFHLEdBQUEvZ0QsS0FBQXU4QyxHQUVBLENBQ0EsR0FBQXA2QyxHQUFBZzlDLEVBQUE1QyxFQUNBLE9BQUFwNkMsR0FBQTJuQixRQUdBLHNCQUFBM25CLEVBQUF3OUMsV0FDQSxTQUNBOTdDLEtBQUFDLFVBQUEzQixFQUFBMm5CLFNBQ0EsVUFMQSxJQUFBeXlCLEVBQUEsSUFKQSxNQUFBcUUsR0FBQXJFLEVBQUEsSUFBQUEsRUFBQSxJQTRKQSxRQUFBeUUsR0FBQTNlLEVBQUFuNkIsRUFBQSt6QyxFQUFBdmlDLEdBQ0F1bkMsRUFBQTVlLEVBQUEsRUFBQSxXQUNBbjZCLEVBQUFvUyxZQUFBK25CLElBQ0E0WixFQUFBdmlDLEdBWUEsUUFBQXduQyxHQUFBN2UsRUFBQW42QixFQUFBK3pDLEVBQUF2aUMsR0FDQXVuQyxFQUFBNWUsRUFBQSxFQUFBLFdBQ0FsUCxFQUFBa1AsRUFBQW42QixJQUNBK3pDLEVBQUF2aUMsR0FXQSxRQUFBeW5DLEdBQUE5ZSxFQUFBNFosRUFBQXZpQyxHQUNBdW5DLEVBQUE1ZSxHQUFBLEVBQUEsV0FDQWx1QixFQUFBa3VCLElBQ0E0WixFQUFBdmlDLEdBZUEsUUFBQXVuQyxHQUFBNWUsRUFBQStlLEVBQUFDLEVBQUFwRixFQUFBdmlDLEdBQ0EsR0FBQTRuQyxHQUFBamYsRUFBQWtmLFNBQ0EsS0FBQUQsSUFHQUEsRUFBQUUsUUFBQUMsS0FFQXhGLEVBQUF5RixhQUlBekYsRUFBQTBGLFVBQUExRixFQUFBMEYsUUFBQUQsWUFHQSxNQUZBTCxVQUNBM25DLEdBQUFBLElBR0EsSUFBQTdSLEdBQUF1NUMsRUFBQSxFQUFBLFFBQUEsT0FDQUUsR0FBQXo1QyxHQUFBdzVDLEVBQUEzbkMsR0FpQkEsUUFBQWtvQyxHQUFBdmYsR0FDQSxHQUFBLGdCQUFBQSxHQUFBLENBQ0EsR0FBQWhmLEdBQUFnZixDQUNBQSxHQUFBbDlCLFNBQUE2ckMsY0FBQTNPLEdBQ0FBLEdBQ0E0USxHQUFBLHdCQUFBNXZCLEdBR0EsTUFBQWdmLEdBZUEsUUFBQXdmLEdBQUFDLEdBQ0EsSUFBQUEsRUFBQSxPQUFBLENBQ0EsSUFBQUMsR0FBQUQsRUFBQXZuQyxjQUFBa0MsZ0JBQ0FwWCxFQUFBeThDLEVBQUF0bUMsVUFDQSxPQUFBdW1DLEtBQUFELEdBQUFDLElBQUExOEMsTUFBQUEsR0FBQSxJQUFBQSxFQUFBNlMsV0FBQTZwQyxFQUFBMTZCLFNBQUFoaUIsSUFVQSxRQUFBMjhDLEdBQUFGLEVBQUFHLEdBQ0EsR0FBQXJvQixHQUFBa29CLEVBQUF4MkMsYUFBQTIyQyxFQUlBLE9BSEEsUUFBQXJvQixHQUNBa29CLEVBQUFsbkMsZ0JBQUFxbkMsR0FFQXJvQixFQVdBLFFBQUFzb0IsR0FBQUosRUFBQW5pRCxHQUNBLEdBQUFpNkIsR0FBQW9vQixFQUFBRixFQUFBLElBQUFuaUQsRUFJQSxPQUhBLFFBQUFpNkIsSUFDQUEsRUFBQW9vQixFQUFBRixFQUFBLFVBQUFuaUQsSUFFQWk2QixFQVdBLFFBQUF1b0IsR0FBQUwsRUFBQW5pRCxHQUNBLE1BQUFtaUQsR0FBQWwyQyxhQUFBak0sSUFBQW1pRCxFQUFBbDJDLGFBQUEsSUFBQWpNLElBQUFtaUQsRUFBQWwyQyxhQUFBLFVBQUFqTSxHQVVBLFFBQUF3ekIsR0FBQWtQLEVBQUFuNkIsR0FDQUEsRUFBQXNULFdBQUEwWCxhQUFBbVAsRUFBQW42QixHQVVBLFFBQUFrckIsR0FBQWlQLEVBQUFuNkIsR0FDQUEsRUFBQWtkLFlBQ0ErTixFQUFBa1AsRUFBQW42QixFQUFBa2QsYUFFQWxkLEVBQUFzVCxXQUFBbEIsWUFBQStuQixHQVVBLFFBQUFsdUIsR0FBQWt1QixHQUNBQSxFQUFBN21CLFdBQUF1SixZQUFBc2QsR0FVQSxRQUFBcFAsR0FBQW9QLEVBQUFuNkIsR0FDQUEsRUFBQW1TLFdBQ0E4WSxFQUFBa1AsRUFBQW42QixFQUFBbVMsWUFFQW5TLEVBQUFvUyxZQUFBK25CLEdBV0EsUUFBQS96QixHQUFBcEcsRUFBQW02QixHQUNBLEdBQUFoOUIsR0FBQTZDLEVBQUFzVCxVQUNBblcsSUFDQUEsRUFBQW11QixhQUFBNk8sRUFBQW42QixHQWFBLFFBQUE0cEIsR0FBQXVRLEVBQUE1cEIsRUFBQWlCLEVBQUEwb0MsR0FDQS9mLEVBQUF2OUIsaUJBQUEyVCxFQUFBaUIsRUFBQTBvQyxHQVdBLFFBQUFoMkIsR0FBQWlXLEVBQUE1cEIsRUFBQWlCLEdBQ0Eyb0IsRUFBQTlwQixvQkFBQUUsRUFBQWlCLEdBV0EsUUFBQTJvQyxHQUFBaGdCLEdBQ0EsR0FBQWlnQixHQUFBamdCLEVBQUF2MkIsU0FJQSxPQUhBLGdCQUFBdzJDLEtBQ0FBLEVBQUFBLEVBQUFDLFNBQUEsSUFFQUQsRUFhQSxRQUFBRSxHQUFBbmdCLEVBQUFvZ0IsR0FFQUMsS0FBQSxPQUFBMWlELEtBQUFxaUMsRUFBQWlHLGNBQ0FqRyxFQUFBdjJCLFVBQUEyMkMsRUFFQXBnQixFQUFBNTFCLGFBQUEsUUFBQWcyQyxHQVdBLFFBQUF2bkIsR0FBQW1ILEVBQUFvZ0IsR0FDQSxHQUFBcGdCLEVBQUFrUCxVQUNBbFAsRUFBQWtQLFVBQUFwMkIsSUFBQXNuQyxPQUNBLENBQ0EsR0FBQTFyQixHQUFBLElBQUFzckIsRUFBQWhnQixHQUFBLEdBQ0F0TCxHQUFBOXdCLFFBQUEsSUFBQXc4QyxFQUFBLEtBQUEsR0FDQUQsRUFBQW5nQixHQUFBdEwsRUFBQTByQixHQUFBanpDLFNBWUEsUUFBQTJyQixHQUFBa0gsRUFBQW9nQixHQUNBLEdBQUFwZ0IsRUFBQWtQLFVBQ0FsUCxFQUFBa1AsVUFBQXA5QixPQUFBc3VDLE9BQ0EsQ0FHQSxJQUZBLEdBQUExckIsR0FBQSxJQUFBc3JCLEVBQUFoZ0IsR0FBQSxJQUNBc2dCLEVBQUEsSUFBQUYsRUFBQSxJQUNBMXJCLEVBQUE5d0IsUUFBQTA4QyxJQUFBLEdBQ0E1ckIsRUFBQUEsRUFBQXpvQixRQUFBcTBDLEVBQUEsSUFFQUgsR0FBQW5nQixFQUFBdEwsRUFBQXZuQixRQUVBNnlCLEVBQUF2MkIsV0FDQXUyQixFQUFBem5CLGdCQUFBLFNBYUEsUUFBQWdvQyxHQUFBdmdCLEVBQUF3Z0IsR0FDQSxHQUFBQyxHQUNBQyxDQUtBLElBSEFDLEdBQUEzZ0IsSUFBQTRnQixHQUFBNWdCLEVBQUFuQixXQUNBbUIsRUFBQUEsRUFBQW5CLFNBRUFtQixFQUFBNmdCLGdCQUlBLElBSEFDLEdBQUE5Z0IsR0FDQTBnQixFQUFBRixFQUFBMTlDLFNBQUEyVSx5QkFBQTNVLFNBQUFvSixjQUFBLE9BRUF1MEMsRUFBQXpnQixFQUFBaG9CLFlBRUEwb0MsRUFBQXpvQyxZQUFBd29DLEVBR0EsT0FBQUMsR0FVQSxRQUFBSSxJQUFBckIsR0FHQSxJQUZBLEdBQUFnQixHQUVBQSxFQUFBaEIsRUFBQXpuQyxXQUFBK29DLEdBQUFOLElBQ0FoQixFQUFBLzhCLFlBQUErOUIsRUFFQSxNQUFBQSxFQUFBaEIsRUFBQTU1QixVQUFBazdCLEdBQUFOLElBQ0FoQixFQUFBLzhCLFlBQUErOUI7Q0FLQSxRQUFBTSxJQUFBdEIsR0FDQSxNQUFBQSxLQUFBLElBQUFBLEVBQUE1cEMsV0FBQTRwQyxFQUFBenhDLEtBQUFiLFFBQUEsSUFBQXN5QyxFQUFBNXBDLFVBV0EsUUFBQThxQyxJQUFBM2dCLEdBQ0EsTUFBQUEsR0FBQWdoQixTQUFBLGFBQUFoaEIsRUFBQWdoQixRQUFBeCtDLGNBcUJBLFFBQUF5K0MsSUFBQXBpQixFQUFBcWlCLEdBQ0EsR0FBQUMsR0FBQW45QyxHQUFBbzlDLE1BQUF0K0MsU0FBQXVoQixjQUFBd2EsR0FBQS83QixTQUFBOFAsZUFBQXN1QyxFQUFBLElBQUEsR0FFQSxPQURBQyxHQUFBRSxZQUFBLEVBQ0FGLEVBWUEsUUFBQUcsSUFBQTdCLEdBQ0EsR0FBQUEsRUFBQThCLGdCQUVBLElBQUEsR0FEQTVZLEdBQUE4VyxFQUFBdjJDLFdBQ0EvSyxFQUFBLEVBQUFzQixFQUFBa3BDLEVBQUFucUMsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUFBLENBQ0EsR0FBQWIsR0FBQXFyQyxFQUFBeHFDLEdBQUFiLElBQ0EsSUFBQWtrRCxHQUFBN2pELEtBQUFMLEdBQ0EsTUFBQW85QyxHQUFBcDlDLEVBQUEyTyxRQUFBdTFDLEdBQUEsTUFjQSxRQUFBQyxJQUFBaEMsRUFBQWxpQyxFQUFBeWhDLEdBRUEsSUFEQSxHQUFBNzJCLEdBQ0FzM0IsSUFBQWxpQyxHQUNBNEssRUFBQXMzQixFQUFBMThCLFlBQ0FpOEIsRUFBQVMsR0FDQUEsRUFBQXQzQixDQUVBNjJCLEdBQUF6aEMsR0FlQSxRQUFBbWtDLElBQUFwa0MsRUFBQUMsRUFBQXE4QixFQUFBblQsRUFBQXB2QixHQVVBLFFBQUFzcUMsS0FFQSxHQURBQyxJQUNBemtDLEdBQUF5a0MsR0FBQUMsRUFBQXJqRCxPQUFBLENBQ0EsSUFBQSxHQUFBTCxHQUFBLEVBQUFBLEVBQUEwakQsRUFBQXJqRCxPQUFBTCxJQUNBc29DLEVBQUF4dUIsWUFBQTRwQyxFQUFBMWpELEdBRUFrWixJQUFBQSxLQWZBLEdBQUE4RixJQUFBLEVBQ0F5a0MsRUFBQSxFQUNBQyxJQUNBSixJQUFBbmtDLEVBQUFDLEVBQUEsU0FBQWtpQyxHQUNBQSxJQUFBbGlDLElBQUFKLEdBQUEsR0FDQTBrQyxFQUFBdC9DLEtBQUFrOUMsR0FDQVgsRUFBQVcsRUFBQTdGLEVBQUErSCxLQXFCQSxRQUFBZixJQUFBbkIsR0FDQSxNQUFBQSxJQUFBLEtBQUFBLEVBQUE1cEMsU0FXQSxRQUFBaXNDLElBQUE5aEIsR0FDQSxHQUFBQSxFQUFBNW1CLFVBQ0EsTUFBQTRtQixHQUFBNW1CLFNBRUEsSUFBQWkxQixHQUFBdnJDLFNBQUFvSixjQUFBLE1BRUEsT0FEQW1pQyxHQUFBcDJCLFlBQUErbkIsRUFBQWxWLFdBQUEsSUFDQXVqQixFQUFBLzBCLFVBaUNBLFFBQUF5b0MsSUFBQS9oQixFQUFBaFAsR0FDQSxHQUFBb3RCLEdBQUFwZSxFQUFBZ2hCLFFBQUF4K0MsY0FDQXcvQyxFQUFBaGlCLEVBQUF1aEIsZUFDQSxJQUFBVSxHQUFBdGtELEtBQUF5Z0QsSUFBQThELEdBQUF2a0QsS0FBQXlnRCxJQWtCQSxHQUFBNEQsRUFDQSxNQUFBRyxJQUFBbmlCLEVBQUFoUCxPQW5CQSxDQUNBLEdBQUFveEIsR0FBQXB4QixFQUFBLGFBQUFvdEIsR0FDQSxPQUNBdnpDLEdBQUF1ekMsRUFHQSxJQUFBcDJCLEdBQUFnNkIsR0FBQUcsR0FBQW5pQixFQUFBaFAsRUFDQSxJQUFBaEosRUFDQSxNQUFBQSxFQUVBLElBQUFxNkIsR0FBQXJ4QixFQUFBc3hCLG1CQUFBdHhCLEVBQUFzeEIsa0JBQUFsRSxFQUNBaUUsR0FDQXpSLEdBQUEsNEJBQUF3TixFQUFBLHFCQUFBaUUsRUFBQSx5RUFDQUUsR0FBQXZpQixFQUFBb2UsSUFDQXhOLEdBQUEsNEJBQUF3TixFQUFBLG9IQWlCQSxRQUFBK0QsSUFBQW5pQixFQUFBaFAsR0FFQSxHQUFBa3BCLEdBQUFsYSxFQUFBLzJCLGFBQUEsS0FDQSxJQUFBLE1BQUFpeEMsR0FDQSxHQUFBa0ksR0FBQXB4QixFQUFBLGFBQUFrcEIsR0FFQSxNQURBbGEsR0FBQXpuQixnQkFBQSxPQUVBMU4sR0FBQXF2QyxPQUtBLElBREFBLEVBQUEyRixFQUFBN2YsRUFBQSxNQUNBLE1BQUFrYSxFQUNBLE9BQ0FydkMsR0FBQXF2QyxFQUNBMEMsU0FBQSxHQXdCQSxRQUFBNEYsSUFBQXJILEVBQUFDLEdBQ0EsR0FBQS9LLEdBQUFvUyxFQUFBQyxDQUNBLEtBQUFyUyxJQUFBK0ssR0FDQXFILEVBQUF0SCxFQUFBOUssR0FDQXFTLEVBQUF0SCxFQUFBL0ssR0FDQWlKLEVBQUE2QixFQUFBOUssR0FFQTVqQyxFQUFBZzJDLElBQUFoMkMsRUFBQWkyQyxJQUNBRixHQUFBQyxFQUFBQyxHQUZBdnVCLEVBQUFnbkIsRUFBQTlLLEVBQUFxUyxFQUtBLE9BQUF2SCxHQXdFQSxRQUFBd0gsSUFBQUMsRUFBQUMsR0FDQSxHQUFBemhELEdBQUFiLE9BQUEySyxPQUFBMDNDLEdBQUEsS0FDQSxPQUFBQyxHQUFBNzNDLEVBQUE1SixFQUFBMGhELEdBQUFELElBQUF6aEQsRUEwREEsUUFBQTJoRCxJQUFBL3hCLEdBQ0EsR0FBQUEsRUFBQWd5QixXQU9BLElBQUEsR0FKQTFILEdBRkEwSCxFQUFBaHlCLEVBQUFneUIsV0FBQUYsR0FBQTl4QixFQUFBZ3lCLFlBQ0FDLEVBQUExaUQsT0FBQWk0QyxLQUFBd0ssR0FHQWhzQyxFQUFBZ2EsRUFBQXN4QixxQkFFQW5rRCxFQUFBLEVBQUFzQixFQUFBd2pELEVBQUF6a0QsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUFBLENBQ0EsR0FBQWt5QyxHQUFBNFMsRUFBQTlrRCxFQUNBOGpELElBQUF0a0QsS0FBQTB5QyxJQUFBNlIsR0FBQXZrRCxLQUFBMHlDLEdBQ0FPLEdBQUEsa0VBQUFQLElBTUFyNUIsRUFBQXE1QixFQUFBcGtDLFFBQUEsS0FBQSxJQUFBekosZUFBQXE0QyxFQUFBeEssR0FFQWlMLEVBQUEwSCxFQUFBM1MsR0FDQTd1QixFQUFBODVCLEtBQ0EwSCxFQUFBM1MsR0FBQXRRLEdBQUEvMEIsT0FBQXN3QyxNQWFBLFFBQUE0SCxJQUFBbHlCLEdBQ0EsR0FDQTd5QixHQUFBbzVCLEVBREFsWixFQUFBMlMsRUFBQTNTLEtBRUEsSUFBQWpXLEdBQUFpVyxHQUdBLElBRkEyUyxFQUFBM1MsU0FDQWxnQixFQUFBa2dCLEVBQUE3ZixPQUNBTCxLQUNBbzVCLEVBQUFsWixFQUFBbGdCLEdBQ0EsZ0JBQUFvNUIsR0FDQXZHLEVBQUEzUyxNQUFBa1osR0FBQSxLQUNBQSxFQUFBajZCLE9BQ0EwekIsRUFBQTNTLE1BQUFrWixFQUFBajZCLE1BQUFpNkIsT0FHQSxJQUFBL1YsRUFBQW5ELEdBQUEsQ0FDQSxHQUFBbTZCLEdBQUFqNEMsT0FBQWk0QyxLQUFBbjZCLEVBRUEsS0FEQWxnQixFQUFBcTZDLEVBQUFoNkMsT0FDQUwsS0FDQW81QixFQUFBbFosRUFBQW02QixFQUFBcjZDLElBQ0Esa0JBQUFvNUIsS0FDQWxaLEVBQUFtNkIsRUFBQXI2QyxLQUNBd0UsS0FBQTQwQixLQWVBLFFBQUF1ckIsSUFBQUssR0FDQSxHQUFBLzZDLEdBQUErNkMsR0FBQSxDQUlBLElBSEEsR0FFQUMsR0FGQWhpRCxLQUNBakQsRUFBQWdsRCxFQUFBM2tELE9BRUFMLEtBQUEsQ0FDQWlsRCxFQUFBRCxFQUFBaGxELEVBQ0EsSUFBQTBNLEdBQUEsa0JBQUF1NEMsR0FBQUEsRUFBQXB5QixTQUFBb3lCLEVBQUFweUIsUUFBQTF6QixNQUFBOGxELEVBQUF2NEMsR0FBQXU0QyxFQUFBOWxELE1BQUE4bEQsRUFBQXY0QyxFQUNBQSxHQUdBekosRUFBQXlKLEdBQUF1NEMsRUFGQXhTLEdBQUEsNERBS0EsTUFBQXh2QyxHQUVBLE1BQUEraEQsR0FhQSxRQUFBRSxJQUFBcmdELEVBQUF5OUMsRUFBQTdHLEdBNkJBLFFBQUEwSixHQUFBalQsR0FDQSxHQUFBa1QsR0FBQUMsR0FBQW5ULElBQUFvVCxFQUNBenlCLEdBQUFxZixHQUFBa1QsRUFBQXZnRCxFQUFBcXRDLEdBQUFvUSxFQUFBcFEsR0FBQXVKLEVBQUF2SixHQTlCQTBTLEdBQUF0QyxHQUNBeUMsR0FBQXpDLEdBRUFBLEVBQUFpRCxZQUFBOUosR0FDQWhKLEdBQUEseURBR0EsSUFDQVAsR0FEQXJmLElBS0EsSUFIQXl2QixFQUFBLFVBQ0F6OUMsRUFBQSxrQkFBQXk5QyxHQUFBLFFBQUE0QyxHQUFBcmdELEVBQUF5OUMsRUFBQSxRQUFBenZCLFFBQUE0b0IsR0FBQXlKLEdBQUFyZ0QsRUFBQXk5QyxFQUFBLFFBQUE3RyxJQUVBNkcsRUFBQWtELE9BQ0EsSUFBQSxHQUFBeGxELEdBQUEsRUFBQXNCLEVBQUFnaEQsRUFBQWtELE9BQUFubEQsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUFBLENBQ0EsR0FBQXlsRCxHQUFBbkQsRUFBQWtELE9BQUF4bEQsR0FDQTBsRCxFQUFBRCxFQUFBcGpELG9CQUFBdS9CLElBQUE2akIsRUFBQTV5QixRQUFBNHlCLENBQ0E1Z0QsR0FBQXFnRCxHQUFBcmdELEVBQUE2Z0QsRUFBQWpLLEdBR0EsSUFBQXZKLElBQUFydEMsR0FDQXNnRCxFQUFBalQsRUFFQSxLQUFBQSxJQUFBb1EsR0FDQW5ILEVBQUF0MkMsRUFBQXF0QyxJQUNBaVQsRUFBQWpULEVBUUEsT0FBQXJmLEdBZUEsUUFBQW94QixJQUFBcHhCLEVBQUFydUIsRUFBQWtJLEVBQUFpNUMsR0FFQSxHQUFBLGdCQUFBajVDLEdBQUEsQ0FHQSxHQUNBazVDLEdBREFaLEVBQUFueUIsRUFBQXJ1QixHQUVBdkIsRUFBQStoRCxFQUFBdDRDLElBRUFzNEMsRUFBQVksRUFBQXJKLEVBQUE3dkMsS0FFQXM0QyxFQUFBWSxFQUFBcnlDLE9BQUEsR0FBQTFDLGNBQUErMEMsRUFBQW5pRCxNQUFBLEdBSUEsT0FIQWtpRCxLQUFBMWlELEdBQ0F3dkMsR0FBQSxxQkFBQWp1QyxFQUFBZixNQUFBLEdBQUEsR0FBQSxLQUFBaUosRUFBQW1tQixHQUVBNXZCLEdBV0EsUUFBQTRpRCxNQUNBejdDLEtBQUFzQyxHQUFBbzVDLEtBQ0ExN0MsS0FBQTI3QyxRQXFJQSxRQUFBQyxJQUFBcmpDLEdBQ0FzakMsSUFBQSxFQUNBdGpDLElBQ0FzakMsSUFBQSxFQWFBLFFBQUFDLElBQUFsN0MsR0FJQSxHQUhBWixLQUFBWSxNQUFBQSxFQUNBWixLQUFBbXhDLElBQUEsR0FBQXNLLElBQ0ExSSxFQUFBbnlDLEVBQUEsU0FBQVosTUFDQUgsR0FBQWUsR0FBQSxDQUNBLEdBQUFtN0MsR0FBQUMsR0FBQUMsR0FBQUMsRUFDQUgsR0FBQW43QyxFQUFBdTdDLEdBQUFDLElBQ0FwOEMsS0FBQXE4QyxhQUFBejdDLE9BRUFaLE1BQUFzOEMsS0FBQTE3QyxHQStFQSxRQUFBcTdDLElBQUEzK0MsRUFBQWxDLEdBRUFrQyxFQUFBaS9DLFVBQUFuaEQsRUFZQSxRQUFBOGdELElBQUE1K0MsRUFBQWxDLEVBQUE2MEMsR0FDQSxJQUFBLEdBQUFyNkMsR0FBQSxFQUFBc0IsRUFBQSs0QyxFQUFBaDZDLE9BQUFMLEVBQUFzQixFQUFBdEIsSUFBQSxDQUNBLEdBQUFreUMsR0FBQW1JLEVBQUFyNkMsRUFDQW05QyxHQUFBejFDLEVBQUF3cUMsRUFBQTFzQyxFQUFBMHNDLEtBZUEsUUFBQXg5QixJQUFBMUosRUFBQXl3QyxHQUNBLEdBQUF6d0MsR0FBQSxnQkFBQUEsR0FBQSxDQUdBLEdBQUErWixFQVNBLE9BUkFvMkIsR0FBQW53QyxFQUFBLFdBQUFBLEVBQUFxd0MsaUJBQUE2SyxJQUNBbmhDLEVBQUEvWixFQUFBcXdDLE9BQ0E0SyxLQUFBaDhDLEdBQUFlLElBQUFxWSxFQUFBclksS0FBQTVJLE9BQUF3a0QsYUFBQTU3QyxLQUFBQSxFQUFBb3dDLFNBQ0FyMkIsRUFBQSxHQUFBbWhDLElBQUFsN0MsSUFFQStaLEdBQUEwMkIsR0FDQTEyQixFQUFBOGhDLE1BQUFwTCxHQUVBMTJCLEdBV0EsUUFBQStoQyxJQUFBNUwsRUFBQWhKLEVBQUE5WSxHQUNBLEdBQUFtaUIsR0FBQSxHQUFBc0ssSUFFQWtCLEVBQUEza0QsT0FBQXM0Qyx5QkFBQVEsRUFBQWhKLEVBQ0EsS0FBQTZVLEdBQUFBLEVBQUFuTSxnQkFBQSxFQUFBLENBS0EsR0FBQW9NLEdBQUFELEdBQUFBLEVBQUF6cUMsSUFDQTJxQyxFQUFBRixHQUFBQSxFQUFBL3dCLElBRUFreEIsRUFBQXh5QyxHQUFBMGtCLEVBQ0FoM0IsUUFBQXE0QyxlQUFBUyxFQUFBaEosR0FDQWtMLFlBQUEsRUFDQXhDLGNBQUEsRUFDQXQrQixJQUFBLFdBQ0EsR0FBQXRSLEdBQUFnOEMsRUFBQUEsRUFBQXprRCxLQUFBMjRDLEdBQUE5aEIsQ0FDQSxJQUFBeXNCLEdBQUFuK0MsU0FDQTZ6QyxFQUFBNEwsU0FDQUQsR0FDQUEsRUFBQTNMLElBQUE0TCxTQUVBbDlDLEdBQUFlLElBQ0EsSUFBQSxHQUFBdEwsR0FBQU0sRUFBQSxFQUFBc0IsRUFBQTBKLEVBQUEzSyxPQUFBTCxFQUFBc0IsRUFBQXRCLElBQ0FOLEVBQUFzTCxFQUFBaEwsR0FDQU4sR0FBQUEsRUFBQTI3QyxRQUFBMzdDLEVBQUEyN0MsT0FBQUUsSUFBQTRMLFFBSUEsT0FBQW44QyxJQUVBZ3JCLElBQUEsU0FBQW94QixHQUNBLEdBQUFwOEMsR0FBQWc4QyxFQUFBQSxFQUFBemtELEtBQUEyNEMsR0FBQTloQixDQUNBZ3VCLEtBQUFwOEMsSUFHQWk4QyxFQUNBQSxFQUFBMWtELEtBQUEyNEMsRUFBQWtNLEdBRUFodUIsRUFBQWd1QixFQUVBRixFQUFBeHlDLEdBQUEweUMsR0FDQTdMLEVBQUFod0IsY0E4RkEsUUFBQTg3QixJQUFBemxCLEdBWUFBLEVBQUF2L0IsVUFBQWlsRCxNQUFBLFNBQUF6MEIsR0FDQUEsRUFBQUEsTUFFQXpvQixLQUFBbTlDLElBQUEsS0FDQW45QyxLQUFBKzJDLFFBQUF0dUIsRUFBQWh1QixPQUNBdUYsS0FBQW85QyxNQUFBcDlDLEtBQUErMkMsUUFBQS8yQyxLQUFBKzJDLFFBQUFxRyxNQUFBcDlDLEtBQ0FBLEtBQUFxOUMsYUFDQXI5QyxLQUFBczlDLFNBQ0F0OUMsS0FBQXU5QyxRQUNBdjlDLEtBQUF3OUMsYUFDQXg5QyxLQUFBeTlDLGVBR0F6OUMsS0FBQTA5QyxLQUFBQyxLQUdBMzlDLEtBQUFneEMsUUFBQSxFQUdBaHhDLEtBQUE0OUMsV0FDQTU5QyxLQUFBNjlDLGdCQUdBNzlDLEtBQUE4OUMsYUFBQSxFQUNBOTlDLEtBQUErOUMsVUFDQS85QyxLQUFBZytDLGVBQ0FoK0MsS0FBQWkrQyxhQUFBLEtBR0FqK0MsS0FBQTgyQyxZQUFBOTJDLEtBQUFrK0MsYUFBQWwrQyxLQUFBbStDLFNBQUFuK0MsS0FBQW8rQyxZQUFBcCtDLEtBQUFxK0Msa0JBQUFyK0MsS0FBQXMrQyxlQUFBLEVBQ0F0K0MsS0FBQXUrQyxVQUFBLEtBTUF2K0MsS0FBQXcrQyxTQUFBLzFCLEVBQUErMUIsVUFBQXgrQyxLQUFBKzJDLFFBT0EvMkMsS0FBQXkrQyxPQUFBaDJCLEVBQUFnMkIsT0FNQXorQyxLQUFBMCtDLE1BQUFqMkIsRUFBQWkyQixNQUNBMStDLEtBQUEwK0MsT0FDQTErQyxLQUFBMCtDLE1BQUEvK0IsU0FBQTNsQixLQUFBZ0csTUFJQUEsS0FBQSsyQyxTQUNBLzJDLEtBQUErMkMsUUFBQXNHLFVBQUFyakQsS0FBQWdHLE1BSUF5b0IsRUFBQXpvQixLQUFBMitDLFNBQUE3RCxHQUFBOTZDLEtBQUFpTCxZQUFBd2QsUUFBQUEsRUFBQXpvQixNQUdBQSxLQUFBNCtDLGFBSUE1K0MsS0FBQWtRLFNBR0FsUSxLQUFBNitDLFVBQUEsUUFHQTcrQyxLQUFBOCtDLGFBR0E5K0MsS0FBQSsrQyxjQUdBLytDLEtBQUE2K0MsVUFBQSxXQUdBcDJCLEVBQUFnUCxJQUNBejNCLEtBQUFnL0MsT0FBQXYyQixFQUFBZ1AsS0FtRkEsUUFBQXduQixJQUFBQyxHQUNBLEdBQUFoUCxTQUFBZ1AsRUFDQSxNQUFBLEtBR0EsSUFBQXoyQyxHQUFBeTJDLEVBQUFubEQsV0FBQSxFQUVBLFFBQUEwTyxHQUNBLElBQUEsSUFDQSxJQUFBLElBQ0EsSUFBQSxJQUNBLElBQUEsSUFDQSxJQUFBLElBQ0EsSUFBQSxJQUVBLE1BQUF5MkMsRUFFQSxLQUFBLElBQ0EsSUFBQSxJQUVBLE1BQUEsT0FFQSxLQUFBLElBQ0EsSUFBQSxHQUNBLElBQUEsSUFDQSxJQUFBLElBQ0EsSUFBQSxLQUNBLElBQUEsT0FDQSxJQUFBLE1BQ0EsSUFBQSxNQUVBLE1BQUEsS0FJQSxNQUFBejJDLElBQUEsSUFBQUEsR0FBQSxLQUFBQSxHQUFBLElBQUFBLEdBQUEsR0FDQSxRQUlBQSxHQUFBLElBQUFBLEdBQUEsR0FDQSxTQUdBLE9BWUEsUUFBQTAyQyxJQUFBQyxHQUNBLEdBQUFDLEdBQUFELEVBQUF4NkMsTUFFQSxRQUFBLE1BQUF3NkMsRUFBQWoyQyxPQUFBLEtBQUF5NEIsTUFBQXdkLE1BR0ExTixFQUFBMk4sR0FBQW5OLEVBQUFtTixHQUFBLElBQUFBLEdBVUEsUUFBQXI1QyxJQUFBbzVDLEdBNkNBLFFBQUFFLEtBQ0EsR0FBQUMsR0FBQUgsRUFBQXAvQixFQUFBLEVBQ0EsSUFBQXcvQixJQUFBQyxJQUFBLE1BQUFGLEdBQUFDLElBQUFFLElBQUEsTUFBQUgsRUFJQSxNQUhBdi9CLEtBQ0EyL0IsRUFBQSxLQUFBSixFQUNBSyxFQUFBQyxPQUNBLEVBbERBLEdBSUEvb0QsR0FBQTZvRCxFQUFBN1gsRUFBQTF0QyxFQUFBczhDLEVBQUF6NUMsRUFBQTZpRCxFQUpBN1AsS0FDQWp3QixHQUFBLEVBQ0F3L0IsRUFBQU8sR0FDQUMsRUFBQSxFQUdBSixJQWdEQSxLQTlDQUEsRUFBQUssSUFBQSxXQUNBL1AsU0FBQXBJLElBQ0FtSSxFQUFBajJDLEtBQUE4dEMsR0FDQUEsRUFBQW9JLFNBSUEwUCxFQUFBQyxJQUFBLFdBQ0EzUCxTQUFBcEksRUFDQUEsRUFBQTZYLEVBRUE3WCxHQUFBNlgsR0FJQUMsRUFBQU0sSUFBQSxXQUNBTixFQUFBQyxNQUNBRyxLQUdBSixFQUFBTyxJQUFBLFdBQ0EsR0FBQUgsRUFBQSxFQUNBQSxJQUNBUixFQUFBWSxHQUNBUixFQUFBQyxVQUNBLENBR0EsR0FGQUcsRUFBQSxFQUNBbFksRUFBQXFYLEdBQUFyWCxHQUNBQSxLQUFBLEVBQ0EsT0FBQSxDQUVBOFgsR0FBQUssUUFlQSxNQUFBVCxHQUlBLEdBSEF4L0IsSUFDQWxwQixFQUFBc29ELEVBQUFwL0IsR0FFQSxPQUFBbHBCLElBQUF3b0QsSUFBQSxDQVFBLEdBSkFsbEQsRUFBQTZrRCxHQUFBbm9ELEdBQ0FncEQsRUFBQU8sR0FBQWIsR0FDQTlJLEVBQUFvSixFQUFBMWxELElBQUEwbEQsRUFBQSxNQUFBUSxHQUVBNUosSUFBQTRKLEdBQ0EsTUFLQSxJQUZBZCxFQUFBOUksRUFBQSxHQUNBejVDLEVBQUEyaUQsRUFBQWxKLEVBQUEsSUFDQXo1QyxJQUNBMGlELEVBQUFqSixFQUFBLEdBQ0FpSixFQUFBelAsU0FBQXlQLEVBQUE3b0QsRUFBQTZvRCxFQUNBMWlELE9BQUEsR0FDQSxNQUlBLElBQUF1aUQsSUFBQWUsR0FFQSxNQURBdFEsR0FBQXVRLElBQUFwQixFQUNBblAsR0FZQSxRQUFBd1EsSUFBQXJCLEdBQ0EsR0FBQTVLLEdBQUFrTSxHQUFBeHVDLElBQUFrdEMsRUFPQSxPQU5BNUssS0FDQUEsRUFBQXh1QyxHQUFBbzVDLEdBQ0E1SyxHQUNBa00sR0FBQTFMLElBQUFvSyxFQUFBNUssSUFHQUEsRUFVQSxRQUFBbU0sSUFBQTdQLEVBQUFzTyxHQUNBLE1BQUF3QixJQUFBeEIsR0FBQWx0QyxJQUFBNCtCLEdBc0JBLFFBQUErUCxJQUFBL1AsRUFBQXNPLEVBQUFwd0IsR0FDQSxHQUFBOHhCLEdBQUFoUSxDQUlBLElBSEEsZ0JBQUFzTyxLQUNBQSxFQUFBcDVDLEdBQUFvNUMsS0FFQUEsSUFBQWw3QyxFQUFBNHNDLEdBQ0EsT0FBQSxDQUdBLEtBQUEsR0FEQTkzQixHQUFBOHVCLEVBQ0FseUMsRUFBQSxFQUFBc0IsRUFBQWtvRCxFQUFBbnBELE9BQUFMLEVBQUFzQixFQUFBdEIsSUFDQW9qQixFQUFBODNCLEVBQ0FoSixFQUFBc1gsRUFBQXhwRCxHQUNBLE1BQUFreUMsRUFBQTMrQixPQUFBLEtBQ0EyK0IsRUFBQThZLEdBQUE5WSxFQUFBenVDLE1BQUEsSUFBQTZZLElBQUEvWixLQUFBMm9ELEVBQUFBLElBRUFsckQsRUFBQXNCLEVBQUEsR0FDQTQ1QyxFQUFBQSxFQUFBaEosR0FDQTVqQyxFQUFBNHNDLEtBQ0FBLEtBQ0E5M0IsRUFBQWc0QixRQUNBK1AsR0FBQTNCLEVBQUFwbUMsR0FFQTRTLEVBQUE1UyxFQUFBOHVCLEVBQUFnSixLQUdBanhDLEdBQUFpeEMsR0FDQUEsRUFBQWtRLEtBQUFsWixFQUFBOVksR0FDQThZLElBQUFnSixHQUNBQSxFQUFBaEosR0FBQTlZLEdBRUE4aEIsRUFBQUUsUUFDQStQLEdBQUEzQixFQUFBdE8sR0FFQWxsQixFQUFBa2xCLEVBQUFoSixFQUFBOVksR0FJQSxRQUFBLEVBMEJBLFFBQUF6Z0IsT0E2QkEsUUFBQTB5QyxJQUFBcFYsRUFBQTduQyxHQUNBLEdBQUFwTyxHQUFBc3JELEdBQUFqckQsTUFFQSxPQURBaXJELElBQUF0ckQsR0FBQW9PLEVBQUE2bkMsRUFBQW5vQyxRQUFBeTlDLEdBQUEsT0FBQXRWLEVBQ0EsSUFBQWoyQyxFQUFBLElBVUEsUUFBQXdyRCxJQUFBWixHQUNBLEdBQUExcEQsR0FBQTBwRCxFQUFBcjNDLE9BQUEsR0FDQWkyQyxFQUFBb0IsRUFBQW5uRCxNQUFBLEVBQ0EsT0FBQWdvRCxJQUFBanNELEtBQUFncUQsR0FDQW9CLEdBRUFwQixFQUFBQSxFQUFBL2pELFFBQUEsTUFBQSxFQUFBK2pELEVBQUExN0MsUUFBQTQ5QyxHQUFBQyxJQUFBbkMsRUFDQXRvRCxFQUFBLFNBQUFzb0QsR0FZQSxRQUFBbUMsSUFBQTFWLEVBQUFqMkMsR0FDQSxNQUFBc3JELElBQUF0ckQsR0FXQSxRQUFBNHJELElBQUE3UCxHQUNBOFAsR0FBQXJzRCxLQUFBdThDLElBQ0F0SixHQUFBLGdEQUFBc0osR0FHQXVQLEdBQUFqckQsT0FBQSxDQUVBLElBQUFvYixHQUFBc2dDLEVBQUFqdUMsUUFBQWcrQyxHQUFBVCxJQUFBdjlDLFFBQUFpK0MsR0FBQSxHQUlBLE9BREF0d0MsSUFBQSxJQUFBQSxHQUFBM04sUUFBQWsrQyxHQUFBUixJQUFBMTlDLFFBQUE0OUMsR0FBQUMsSUFDQU0sR0FBQXh3QyxHQWFBLFFBQUF3d0MsSUFBQXh3QyxHQUNBLElBRUEsTUFBQSxJQUFBaEYsVUFBQSxRQUFBLFVBQUFnRixFQUFBLEtBRUEsTUFBQS9iLEdBU0EsTUFMQSt5QyxJQURBL3lDLEVBQUFrRSxXQUFBOFAsTUFBQSxtQkFDQSxrT0FFQSxnREFBQStILEdBR0E5QyxJQVdBLFFBQUF1ekMsSUFBQW5RLEdBQ0EsR0FBQXlOLEdBQUFxQixHQUFBOU8sRUFDQSxPQUFBeU4sR0FDQSxTQUFBMkMsRUFBQS95QixHQUNBNnhCLEdBQUFrQixFQUFBM0MsRUFBQXB3QixRQUdBcVosSUFBQSw4QkFBQXNKLEdBWUEsUUFBQWlQLElBQUFqUCxFQUFBcVEsR0FDQXJRLEVBQUFBLEVBQUEvc0MsTUFFQSxJQUFBNHZDLEdBQUF5TixHQUFBL3ZDLElBQUF5L0IsRUFDQSxJQUFBNkMsRUFJQSxNQUhBd04sS0FBQXhOLEVBQUE1b0IsTUFDQTRvQixFQUFBNW9CLElBQUFrMkIsR0FBQXROLEVBQUE3QyxNQUVBNkMsQ0FFQSxJQUFBMzdDLElBQ0E4NEMsSUFBQUEsRUFXQSxPQVRBOTRDLEdBQUFxWixJQUFBZ3dDLEdBQUF2USxJQUFBQSxFQUFBdDJDLFFBQUEsS0FBQSxFQUVBd21ELEdBQUEsU0FBQWxRLEdBRUE2UCxHQUFBN1AsR0FDQXFRLElBQ0FucEQsRUFBQSt5QixJQUFBazJCLEdBQUFuUSxJQUVBc1EsR0FBQWpOLElBQUFyRCxFQUFBOTRDLEdBQ0FBLEVBVUEsUUFBQXFwRCxJQUFBdlEsR0FDQSxNQUFBd1EsSUFBQS9zRCxLQUFBdThDLEtBRUF5USxHQUFBaHRELEtBQUF1OEMsSUFFQSxVQUFBQSxFQUFBdDRDLE1BQUEsRUFBQSxHQXlCQSxRQUFBZ3BELE1BQ0F4dUMsR0FBQTVkLE9BQUEsRUFDQXFzRCxHQUFBcnNELE9BQUEsRUFDQXluQixNQUNBNmtDLE1BQ0FDLElBQUEsRUFPQSxRQUFBQyxNQUdBLElBRkEsR0FBQUMsSUFBQSxFQUVBQSxHQUNBQSxHQUFBLEVBRUFDLEdBQUE5dUMsSUFDQTh1QyxHQUFBTCxJQUdBenVDLEdBQUE1ZCxPQUNBeXNELEdBQUEsR0FLQUUsSUFBQW5uRCxHQUFBbW5ELFVBQ0FBLEdBQUFDLEtBQUEsU0FFQVIsTUFVQSxRQUFBTSxJQUFBOXVDLEdBR0EsSUFBQSxHQUFBamUsR0FBQSxFQUFBQSxFQUFBaWUsRUFBQTVkLE9BQUFMLElBQUEsQ0FDQSxHQUFBa3RELEdBQUFqdkMsRUFBQWplLEdBQ0EwTSxFQUFBd2dELEVBQUF4Z0QsRUFJQSxJQUhBb2IsR0FBQXBiLEdBQUEsS0FDQXdnRCxFQUFBbnRDLE1BRUEsTUFBQStILEdBQUFwYixLQUNBaWdELEdBQUFqZ0QsSUFBQWlnRCxHQUFBamdELElBQUEsR0FBQSxFQUNBaWdELEdBQUFqZ0QsR0FBQTdHLEdBQUFzbkQsaUJBQUEsQ0FDQTFhLEdBQUEscUVBQUF5YSxFQUFBL04sV0FBQSxJQUFBK04sRUFBQXpSLEdBQ0EsUUFJQXg5QixFQUFBNWQsT0FBQSxFQWNBLFFBQUErc0QsSUFBQUYsR0FDQSxHQUFBeGdELEdBQUF3Z0QsRUFBQXhnRCxFQUNBLElBQUEsTUFBQW9iLEdBQUFwYixHQUFBLENBRUEsR0FBQTFHLEdBQUFrbkQsRUFBQUcsS0FBQVgsR0FBQXp1QyxFQUNBNkosSUFBQXBiLEdBQUExRyxFQUFBM0YsT0FDQTJGLEVBQUE1QixLQUFBOG9ELEdBRUFOLEtBQ0FBLElBQUEsRUFDQXA0QyxHQUFBcTRDLE1BMEJBLFFBQUFTLElBQUE3UixFQUFBOFIsRUFBQXIwQyxFQUFBMlosR0FFQUEsR0FDQWhtQixFQUFBekMsS0FBQXlvQixFQUVBLElBQUEyNkIsR0FBQSxrQkFBQUQsRUFjQSxJQWJBbmpELEtBQUFxeEMsR0FBQUEsRUFDQUEsRUFBQW1NLFVBQUF4akQsS0FBQWdHLE1BQ0FBLEtBQUErMEMsV0FBQW9PLEVBQ0FuakQsS0FBQThPLEdBQUFBLEVBQ0E5TyxLQUFBc0MsS0FBQStnRCxHQUNBcmpELEtBQUFreUIsUUFBQSxFQUNBbHlCLEtBQUFzakQsTUFBQXRqRCxLQUFBdWpELEtBQ0F2akQsS0FBQXdqRCxRQUNBeGpELEtBQUF5akQsV0FDQXpqRCxLQUFBMGpELE9BQUEsR0FBQUMsSUFDQTNqRCxLQUFBNGpELFVBQUEsR0FBQUQsSUFDQTNqRCxLQUFBNmpELFVBQUEsS0FFQVQsRUFDQXBqRCxLQUFBNDhDLE9BQUF1RyxFQUNBbmpELEtBQUE2OEMsT0FBQTNNLFdBQ0EsQ0FDQSxHQUFBcjNDLEdBQUErbkQsR0FBQXVDLEVBQUFuakQsS0FBQThqRCxPQUNBOWpELE1BQUE0OEMsT0FBQS9qRCxFQUFBcVosSUFDQWxTLEtBQUE2OEMsT0FBQWhrRCxFQUFBK3lCLElBRUE1ckIsS0FBQVksTUFBQVosS0FBQXVqRCxLQUFBclQsT0FBQWx3QyxLQUFBa1MsTUFHQWxTLEtBQUErakQsT0FBQS9qRCxLQUFBZ2tELFNBQUEsRUFtUEEsUUFBQUMsSUFBQWoxQixFQUFBazFCLEdBQ0EsR0FBQXR1RCxHQUFBczZDLE9BQ0FELEVBQUFDLE1BQ0FnVSxLQUNBQSxFQUFBQyxHQUNBRCxFQUFBRSxRQUVBLElBQUFDLEdBQUF4a0QsR0FBQW12QixHQUNBczFCLEVBQUFwZ0QsRUFBQThxQixFQUNBLEtBQUFxMUIsR0FBQUMsSUFBQXRzRCxPQUFBd2tELGFBQUF4dEIsR0FBQSxDQUNBLEdBQUFBLEVBQUFpaUIsT0FBQSxDQUNBLEdBQUFzVCxHQUFBdjFCLEVBQUFpaUIsT0FBQUUsSUFBQTd1QyxFQUNBLElBQUE0aEQsRUFBQXhtQyxJQUFBNm1DLEdBQ0EsTUFFQUwsR0FBQTN6QyxJQUFBZzBDLEdBR0EsR0FBQUYsRUFFQSxJQURBenVELEVBQUFvNUIsRUFBQS80QixPQUNBTCxLQUFBcXVELEdBQUFqMUIsRUFBQXA1QixHQUFBc3VELE9BQ0EsSUFBQUksRUFHQSxJQUZBclUsRUFBQWo0QyxPQUFBaTRDLEtBQUFqaEIsR0FDQXA1QixFQUFBcTZDLEVBQUFoNkMsT0FDQUwsS0FBQXF1RCxHQUFBajFCLEVBQUFpaEIsRUFBQXI2QyxJQUFBc3VELElBMENBLFFBQUFNLElBQUF0TixHQUNBLE1BQUFrQixJQUFBbEIsSUFBQW1CLEdBQUFuQixFQUFBNWdCLFNBaUJBLFFBQUFtdUIsSUFBQUMsRUFBQWxFLEdBRUEsR0FBQW1FLEdBQUFuRSxFQUFBa0UsRUFBQUEsRUFBQTkvQyxPQUNBNHZDLEVBQUFvUSxHQUFBMXlDLElBQUF5eUMsRUFDQSxJQUFBblEsRUFDQSxNQUFBQSxFQUdBLElBQUF0VyxHQUFBM2pDLFNBQUEyVSx5QkFDQTIxQyxFQUFBSCxFQUFBcDdDLE1BQUF3N0MsSUFDQUMsRUFBQUMsR0FBQTV2RCxLQUFBc3ZELEdBQ0FPLEVBQUFDLEdBQUE5dkQsS0FBQXN2RCxFQUVBLElBQUFHLEdBQUFFLEdBQUFFLEVBR0EsQ0FDQSxHQUFBcFAsR0FBQWdQLEdBQUFBLEVBQUEsR0FDQTd3QixFQUFBdmxCLEdBQUFvbkMsSUFBQXBuQyxHQUFBMDJDLE9BQ0FDLEVBQUFweEIsRUFBQSxHQUNBcXhCLEVBQUFyeEIsRUFBQSxHQUNBc3hCLEVBQUF0eEIsRUFBQSxHQUNBa2pCLEVBQUEzOEMsU0FBQW9KLGNBQUEsTUFHQSxLQURBdXpDLEVBQUFubUMsVUFBQXMwQyxFQUFBWCxFQUFBWSxFQUNBRixLQUNBbE8sRUFBQUEsRUFBQTU1QixTQUtBLEtBRkEsR0FBQTQ2QixHQUVBQSxFQUFBaEIsRUFBQXpuQyxZQUVBeXVCLEVBQUF4dUIsWUFBQXdvQyxPQWxCQWhhLEdBQUF4dUIsWUFBQW5WLFNBQUE4UCxlQUFBcTZDLEdBeUJBLE9BSkFsRSxJQUNBakksR0FBQXJhLEdBRUEwbUIsR0FBQTVQLElBQUEyUCxFQUFBem1CLEdBQ0FBLEVBVUEsUUFBQXFuQixJQUFBck8sR0FPQSxHQUFBc04sR0FBQXROLEdBQ0EsTUFBQXVOLElBQUF2TixFQUFBbm1DLFVBR0EsSUFBQSxXQUFBbW1DLEVBQUF1QixRQUNBLE1BQUFnTSxJQUFBdk4sRUFBQW42QixZQU9BLEtBSkEsR0FFQW03QixHQUZBc04sRUFBQWpqQyxHQUFBMjBCLEdBQ0FoWixFQUFBM2pDLFNBQUEyVSx5QkFHQWdwQyxFQUFBc04sRUFBQS8xQyxZQUVBeXVCLEVBQUF4dUIsWUFBQXdvQyxFQUdBLE9BREFLLElBQUFyYSxHQUNBQSxFQXNDQSxRQUFBM2IsSUFBQTIwQixHQUVBLElBQUFBLEVBQUFuM0MsaUJBQ0EsTUFBQW0zQyxHQUFBMzBCLFdBRUEsSUFDQTNzQixHQUFBa3JELEVBQUEyRSxFQURBNXNELEVBQUFxK0MsRUFBQTMwQixXQUFBLEVBR0EsSUFBQW1qQyxHQUFBLENBQ0EsR0FBQUMsR0FBQTlzRCxDQU1BLElBTEEyckQsR0FBQXROLEtBQ0FBLEVBQUFBLEVBQUE1Z0IsUUFDQXF2QixFQUFBOXNELEVBQUF5OUIsU0FFQXdxQixFQUFBNUosRUFBQW4zQyxpQkFBQSxZQUNBK2dELEVBQUE3cUQsT0FHQSxJQUZBd3ZELEVBQUFFLEVBQUE1bEQsaUJBQUEsWUFDQW5LLEVBQUE2dkQsRUFBQXh2RCxPQUNBTCxLQUNBNnZELEVBQUE3dkQsR0FBQWdiLFdBQUFnWSxhQUFBckcsR0FBQXUrQixFQUFBbHJELElBQUE2dkQsRUFBQTd2RCxJQUtBLEdBQUFnd0QsR0FDQSxHQUFBLGFBQUExTyxFQUFBdUIsUUFDQTUvQyxFQUFBK0gsTUFBQXMyQyxFQUFBdDJDLFVBR0EsSUFEQWtnRCxFQUFBNUosRUFBQW4zQyxpQkFBQSxZQUNBK2dELEVBQUE3cUQsT0FHQSxJQUZBd3ZELEVBQUE1c0QsRUFBQWtILGlCQUFBLFlBQ0FuSyxFQUFBNnZELEVBQUF4dkQsT0FDQUwsS0FDQTZ2RCxFQUFBN3ZELEdBQUFnTCxNQUFBa2dELEVBQUFsckQsR0FBQWdMLEtBS0EsT0FBQS9ILEdBcUJBLFFBQUFndEQsSUFBQUMsRUFBQUMsRUFBQXZGLEdBQ0EsR0FBQXRKLEdBQUFoWixDQUlBLE9BQUFtYSxJQUFBeU4sSUFDQXZOLEdBQUF1TixHQUNBQyxFQUFBeGpDLEdBQUF1akMsR0FBQUEsSUFHQSxnQkFBQUEsR0FFQXRGLEdBQUEsTUFBQXNGLEVBQUEzOEMsT0FBQSxHQWFBKzBCLEVBQUF1bUIsR0FBQXFCLEVBQUF0RixJQVhBdGlCLEVBQUE4bkIsR0FBQTl6QyxJQUFBNHpDLEdBQ0E1bkIsSUFDQWdaLEVBQUEzOEMsU0FBQXFmLGVBQUFrc0MsRUFBQXpzRCxNQUFBLElBQ0E2OUMsSUFDQWhaLEVBQUFxbkIsR0FBQXJPLEdBRUE4TyxHQUFBaFIsSUFBQThRLEVBQUE1bkIsTUFPQTRuQixFQUFBeDRDLFdBRUE0d0IsRUFBQXFuQixHQUFBTyxJQUdBNW5CLEdBQUE2bkIsRUFBQXhqQyxHQUFBMmIsR0FBQUEsR0F5REEsUUFBQStuQixJQUFBQyxFQUFBN1UsRUFBQW5ULEVBQUFyMUIsRUFBQWs1QyxFQUFBb0UsR0FDQW5tRCxLQUFBMmYsWUFDQTNmLEtBQUFvbUQsY0FDQXBtRCxLQUFBcXhDLEdBQUFBLEVBQ0FyeEMsS0FBQStoRCxNQUFBQSxFQUNBL2hELEtBQUFxbUQsVUFBQSxFQUNBcm1ELEtBQUFtbUQsV0FBQUEsRUFDQUEsR0FDQUEsRUFBQUMsV0FBQXBzRCxLQUFBZ0csTUFFQUEsS0FBQXNtRCxPQUFBSixFQUFBN1UsRUFBQW5ULEVBQUFyMUIsRUFBQWs1QyxFQUFBL2hELEtBQ0EsSUFBQWcyQyxHQUFBaDJDLEtBQUFnMkMsT0FBQSxJQUFBOVgsRUFBQTl1QixXQUFBblosU0FFQWlvQyxFQUFBOXVCLFdBQUEsR0FBQTBwQyxVQUNBOUMsSUFDQWgyQyxLQUFBazNDLEtBQUFoWixFQUFBOXVCLFdBQUEsR0FDQXBQLEtBQUF1b0IsT0FBQWcrQixHQUNBdm1ELEtBQUF1SixPQUFBaTlDLEtBRUF4bUQsS0FBQWszQyxLQUFBd0IsR0FBQSxrQkFDQTE0QyxLQUFBZ1YsSUFBQTBqQyxHQUFBLGdCQUNBMTRDLEtBQUFrK0IsS0FBQUEsRUFDQTdWLEVBQUFyb0IsS0FBQWszQyxLQUFBaFosR0FDQUEsRUFBQXh1QixZQUFBMVAsS0FBQWdWLEtBQ0FoVixLQUFBdW9CLE9BQUFrK0IsR0FDQXptRCxLQUFBdUosT0FBQW05QyxJQUVBMW1ELEtBQUFrM0MsS0FBQXlQLFNBQUEzbUQsS0E0QkEsUUFBQXVtRCxJQUFBanBELEVBQUFzcEQsR0FDQTVtRCxLQUFBcW1ELFVBQUEsQ0FDQSxJQUFBcGhELEdBQUEyaEQsS0FBQSxFQUFBdFEsRUFBQS90QixDQUNBdGpCLEdBQUFqRixLQUFBazNDLEtBQUE1NUMsRUFBQTBDLEtBQUFxeEMsSUFDQTRGLEVBQUFqM0MsS0FBQWszQyxPQUNBbDNDLEtBQUE2bUQsU0FBQUMsSUFRQSxRQUFBTixNQUNBeG1ELEtBQUFxbUQsVUFBQSxDQUNBLElBQUFVLEdBQUE5UCxFQUFBajNDLEtBQUFrM0MsTUFDQTlxQyxFQUFBcE0sSUFDQUEsTUFBQWduRCxlQUNBelEsRUFBQXYyQyxLQUFBazNDLEtBQUFsM0MsS0FBQXF4QyxHQUFBLFdBQ0EwVixHQUNBMzZDLEVBQUF5NkMsU0FBQXAxQyxJQUVBckYsRUFBQTAyQixZQVdBLFFBQUEyakIsSUFBQW5wRCxFQUFBc3BELEdBQ0E1bUQsS0FBQXFtRCxVQUFBLENBQ0EsSUFBQWhWLEdBQUFyeEMsS0FBQXF4QyxHQUNBcHNDLEVBQUEyaEQsS0FBQSxFQUFBdFEsRUFBQS90QixDQUNBMndCLElBQUFsNUMsS0FBQWszQyxLQUFBbDNDLEtBQUFnVixJQUFBLFNBQUFraUMsR0FDQWp5QyxFQUFBaXlDLEVBQUE1NUMsRUFBQSt6QyxLQUVBNEYsRUFBQWozQyxLQUFBazNDLE9BQ0FsM0MsS0FBQTZtRCxTQUFBQyxJQVFBLFFBQUFKLE1BQ0ExbUQsS0FBQXFtRCxVQUFBLENBQ0EsSUFBQWo2QyxHQUFBcE0sS0FDQSttRCxFQUFBOVAsRUFBQWozQyxLQUFBazNDLEtBQ0FsM0MsTUFBQWduRCxlQUNBN04sR0FBQW41QyxLQUFBazNDLEtBQUFsM0MsS0FBQWdWLElBQUFoVixLQUFBcXhDLEdBQUFyeEMsS0FBQWsrQixLQUFBLFdBQ0E2b0IsR0FDQTM2QyxFQUFBeTZDLFNBQUFwMUMsSUFFQXJGLEVBQUEwMkIsWUFrREEsUUFBQWdrQixJQUFBNU8sSUFDQUEsRUFBQWtHLGFBQUFuSCxFQUFBaUIsRUFBQWlGLE1BQ0FqRixFQUFBMkcsVUFBQSxZQVVBLFFBQUFwdEMsSUFBQXltQyxHQUNBQSxFQUFBa0csY0FBQW5ILEVBQUFpQixFQUFBaUYsTUFDQWpGLEVBQUEyRyxVQUFBLFlBYUEsUUFBQW9JLElBQUE1VixFQUFBNVosR0FDQXozQixLQUFBcXhDLEdBQUFBLENBQ0EsSUFBQXlVLEdBQ0E5aEQsRUFBQSxnQkFBQXl6QixFQUNBenpCLElBQUFvMEMsR0FBQTNnQixLQUFBQSxFQUFBejJCLGFBQUEsUUFDQThrRCxFQUFBRCxHQUFBcHVCLEdBQUEsSUFFQXF1QixFQUFBdnJELFNBQUEyVSx5QkFDQTQyQyxFQUFBcDJDLFlBQUErbkIsSUFFQXozQixLQUFBOGxELFNBQUFBLENBRUEsSUFBQUksR0FDQWdCLEVBQUE3VixFQUFBcG1DLFlBQUFpOEMsR0FDQSxJQUFBQSxFQUFBLEVBQUEsQ0FDQSxHQUFBQyxHQUFBRCxHQUFBbGpELEVBQUF5ekIsRUFBQThoQixHQUFBOWhCLEdBQ0F5dUIsR0FBQWtCLEdBQUFsMUMsSUFBQWkxQyxHQUNBakIsSUFDQUEsRUFBQTltQyxHQUFBMG1DLEVBQUF6VSxFQUFBc04sVUFBQSxHQUNBeUksR0FBQXBTLElBQUFtUyxFQUFBakIsUUFHQUEsR0FBQTltQyxHQUFBMG1DLEVBQUF6VSxFQUFBc04sVUFBQSxFQUVBMytDLE1BQUFrbUQsT0FBQUEsRUF1akJBLFFBQUFtQixJQUFBbnBCLEVBQUEwYSxFQUFBdDJDLEdBQ0EsR0FBQW0xQixHQUFBeUcsRUFBQWdaLEtBQUF4USxlQUVBLElBQUFqUCxFQUFBLENBRUEsSUFEQXlHLEVBQUF6RyxFQUFBa3ZCLFdBQ0F6b0IsR0FBQUEsRUFBQW9wQixRQUFBaGxELEdBQUE0N0IsRUFBQW1vQixVQUFBNXVCLElBQUFtaEIsSUFBQSxDQUdBLEdBRkFuaEIsRUFBQUEsRUFBQWlQLGlCQUVBalAsRUFBQSxNQUNBeUcsR0FBQXpHLEVBQUFrdkIsU0FFQSxNQUFBem9CLElBVUEsUUFBQXFwQixJQUFBcnBCLEdBQ0EsR0FBQWdaLEdBQUFoWixFQUFBZ1osSUFFQSxJQUFBaFosRUFBQWxwQixJQUNBLE1BQUFraUMsRUFBQXNRLFNBQUF0USxJQUFBaFosRUFBQWxwQixLQUFBa2lDLEVBQUExOEIsYUFDQTA4QixFQUFBQSxFQUFBMThCLFdBR0EsT0FBQTA4QixHQUFBc1EsUUFVQSxRQUFBL2hCLElBQUE5dkMsR0FHQSxJQUZBLEdBQUFDLElBQUEsRUFDQSs4QyxFQUFBLEdBQUEveUMsT0FBQXpHLEtBQUFzdUQsTUFBQTl4RCxNQUNBQyxFQUFBRCxHQUNBZzlDLEVBQUEvOEMsR0FBQUEsQ0FFQSxPQUFBKzhDLEdBWUEsUUFBQStVLElBQUExbkMsRUFBQThuQixFQUFBbG5DLEVBQUErbUQsR0FDQSxNQUFBQSxHQUFBLFdBQUFBLEVBQUEzbkMsRUFBQTJuQyxFQUFBeCtDLE9BQUEsR0FBQUcsTUFBQSxNQUFBcTNDLEdBQUEvL0MsRUFBQSttRCxHQUFBL21ELEVBQUErbUQsR0FBQTdmLEdBQUFsbkMsRUE2VkEsUUFBQWduRCxJQUFBbndCLEVBQUFvd0IsRUFBQXgwQyxHQUdBLElBQUEsR0FEQW9qQyxHQUFBem5CLEVBQUEvZCxFQURBcFksRUFBQWd2RCxLQUFBLEtBRUFqeUQsRUFBQSxFQUFBc0IsRUFBQXVnQyxFQUFBaFAsUUFBQXh5QixPQUFBTCxFQUFBc0IsRUFBQXRCLElBR0EsR0FGQTZnRCxFQUFBaGYsRUFBQWhQLFFBQUE3eUIsR0FDQXFiLEVBQUFvQyxFQUFBb2pDLEVBQUF6MUMsYUFBQSxZQUFBeTFDLEVBQUF4bEMsU0FDQSxDQUVBLEdBREErZCxFQUFBeW5CLEVBQUF2K0MsZUFBQSxVQUFBdStDLEVBQUFxUixPQUFBclIsRUFBQTcxQyxPQUNBaW5ELEVBR0EsTUFBQTc0QixFQUZBbjJCLEdBQUFtQixLQUFBZzFCLEdBTUEsTUFBQW4yQixHQVdBLFFBQUFrdkQsSUFBQXhVLEVBQUF2a0IsR0FFQSxJQURBLEdBQUFwNUIsR0FBQTI5QyxFQUFBdDlDLE9BQ0FMLEtBQ0EsR0FBQTg5QyxFQUFBSCxFQUFBMzlDLEdBQUFvNUIsR0FDQSxNQUFBcDVCLEVBR0EsUUFBQSxFQW9KQSxRQUFBb3lELElBQUFubEMsRUFBQW90QixHQUNBLEdBQUFnWSxHQUFBaFksRUFBQXhoQyxJQUFBLFNBQUFxNUIsR0FDQSxHQUFBL2lCLEdBQUEraUIsRUFBQS90QyxXQUFBLEVBQ0EsT0FBQWdyQixHQUFBLElBQUFBLEVBQUEsR0FDQXRzQixTQUFBcXZDLEVBQUEsSUFFQSxJQUFBQSxFQUFBN3hDLFNBQ0E4dUIsRUFBQStpQixFQUFBcmhDLGNBQUExTSxXQUFBLEdBQ0FnckIsRUFBQSxJQUFBQSxFQUFBLElBQ0FBLEVBR0FtakMsR0FBQXBnQixJQUdBLE9BREFtZ0IsTUFBQXBxRCxPQUFBZ0gsU0FBQW9qRCxHQUNBLFNBQUEzeUQsR0FDQSxHQUFBMnlELEVBQUE1c0QsUUFBQS9GLEVBQUEwdkIsVUFBQSxFQUNBLE1BQUFuQyxHQUFBMXFCLEtBQUE2SCxLQUFBMUssSUFLQSxRQUFBNnlELElBQUF0bEMsR0FDQSxNQUFBLFVBQUF2dEIsR0FFQSxNQURBQSxHQUFBaXZCLGtCQUNBMUIsRUFBQTFxQixLQUFBNkgsS0FBQTFLLElBSUEsUUFBQTh5RCxJQUFBdmxDLEdBQ0EsTUFBQSxVQUFBdnRCLEdBRUEsTUFEQUEsR0FBQXl1QixpQkFDQWxCLEVBQUExcUIsS0FBQTZILEtBQUExSyxJQUlBLFFBQUEreUQsSUFBQXhsQyxHQUNBLE1BQUEsVUFBQXZ0QixHQUNBLEdBQUFBLEVBQUFnSSxTQUFBaEksRUFBQStILGNBQ0EsTUFBQXdsQixHQUFBMXFCLEtBQUE2SCxLQUFBMUssSUFxSkEsUUFBQWd6RCxJQUFBcDhCLEdBQ0EsR0FBQXE4QixHQUFBcjhCLEdBQ0EsTUFBQXE4QixJQUFBcjhCLEVBRUEsSUFBQXJ6QixHQUFBd3NELEdBQUFuNUIsRUFFQSxPQURBcThCLElBQUFyOEIsR0FBQXE4QixHQUFBMXZELEdBQUFBLEVBQ0FBLEVBV0EsUUFBQXdzRCxJQUFBbjVCLEdBQ0FBLEVBQUFvbUIsRUFBQXBtQixFQUNBLElBQUFzOEIsR0FBQXJXLEVBQUFqbUIsR0FDQXU4QixFQUFBRCxFQUFBci9DLE9BQUEsR0FBQTFDLGNBQUEraEQsRUFBQW52RCxNQUFBLEVBQ0FxdkQsTUFDQUEsR0FBQW51RCxTQUFBb0osY0FBQSxPQUVBLElBQ0F5N0IsR0FEQXhwQyxFQUFBaXFDLEdBQUE1cEMsTUFFQSxJQUFBLFdBQUF1eUQsR0FBQUEsSUFBQUUsSUFBQXAyQyxNQUNBLE9BQ0FxMkMsTUFBQXo4QixFQUNBczhCLE1BQUFBLEVBR0EsTUFBQTV5RCxLQUVBLEdBREF3cEMsRUFBQXdwQixHQUFBaHpELEdBQUE2eUQsRUFDQXJwQixJQUFBc3BCLElBQUFwMkMsTUFDQSxPQUNBcTJDLE1BQUE5b0IsR0FBQWpxQyxHQUFBczJCLEVBQ0FzOEIsTUFBQXBwQixHQThPQSxRQUFBeXBCLElBQUFqb0QsR0FDQSxHQUFBL0gsS0FDQSxJQUFBZ0gsR0FBQWUsR0FDQSxJQUFBLEdBQUFoTCxHQUFBLEVBQUFzQixFQUFBMEosRUFBQTNLLE9BQUFMLEVBQUFzQixFQUFBdEIsSUFBQSxDQUNBLEdBQUFrekQsR0FBQWxvRCxFQUFBaEwsRUFDQSxJQUFBa3pELEVBQ0EsR0FBQSxnQkFBQUEsR0FDQWp3RCxFQUFBbUIsS0FBQTh1RCxPQUVBLEtBQUEsR0FBQTl0RCxLQUFBOHRELEdBQ0FBLEVBQUE5dEQsSUFBQW5DLEVBQUFtQixLQUFBZ0IsT0FLQSxJQUFBa0osRUFBQXRELEdBQ0EsSUFBQSxHQUFBa25DLEtBQUFsbkMsR0FDQUEsRUFBQWtuQyxJQUFBanZDLEVBQUFtQixLQUFBOHRDLEVBR0EsT0FBQWp2QyxHQWNBLFFBQUFnTSxJQUFBNHlCLEVBQUFxUSxFQUFBdnZCLEdBRUEsR0FEQXV2QixFQUFBQSxFQUFBbGpDLE9BQ0FrakMsRUFBQXpzQyxRQUFBLFFBQUEsRUFFQSxXQURBa2QsR0FBQWtmLEVBQUFxUSxFQU9BLEtBQUEsR0FEQW1JLEdBQUFuSSxFQUFBM21DLE1BQUEsT0FDQXZMLEVBQUEsRUFBQXNCLEVBQUErNEMsRUFBQWg2QyxPQUFBTCxFQUFBc0IsRUFBQXRCLElBQ0EyaUIsRUFBQWtmLEVBQUF3WSxFQUFBcjZDLElBaVdBLFFBQUFtekQsSUFBQW5TLEVBQUF2RixFQUFBdmlDLEdBS0EsUUFBQThRLE9BQ0FvcEMsR0FBQUMsRUFDQW42QyxJQUVBOG5DLEVBQUFvUyxHQUFBN3dELEtBQUFrNUMsRUFBQXp4QixHQVJBLEdBQUFxcEMsR0FBQXJTLEVBQUEzZ0QsT0FDQSt5RCxFQUFBLENBQ0FwUyxHQUFBLEdBQUF6K0MsS0FBQWs1QyxFQUFBenhCLEdBNEJBLFFBQUFzcEMsSUFBQXp4QixFQUFBMHhCLEVBQUE5WCxHQUtBLElBSkEsR0FHQTVvQixHQUFBMXpCLEVBQUE4YSxFQUFBalAsRUFBQXcrQyxFQUFBcE4sRUFBQTlsQixFQUhBcFcsS0FDQXN6QyxFQUFBcHhELE9BQUFpNEMsS0FBQWtaLEdBQ0F2ekQsRUFBQXd6RCxFQUFBbnpELE9BRUFMLEtBSUEsR0FIQWIsRUFBQXEwRCxFQUFBeHpELEdBQ0E2eUIsRUFBQTBnQyxFQUFBcDBELElBQUFpZixHQUVBLFVBQUFqZixFQVNBLEdBREFxcUQsRUFBQWpOLEVBQUFwOUMsR0FDQXMwRCxHQUFBajBELEtBQUFncUQsR0FBQSxDQXNCQSxHQWpCQWx6QixHQUNBbjNCLEtBQUFBLEVBQ0FxcUQsS0FBQUEsRUFDQTMyQixRQUFBQSxFQUNBKzJCLEtBQUE4SixHQUFBQyxRQUNBL0ksSUFBQSxNQUdBM3dDLEVBQUF5aUMsRUFBQXY5QyxHQUVBLFFBQUE2TCxFQUFBMDJDLEVBQUE3ZixFQUFBNW5CLE1BQ0EsUUFBQWpQLEVBQUEwMkMsRUFBQTdmLEVBQUE1bkIsRUFBQSxVQUNBcWMsRUFBQXN6QixLQUFBOEosR0FBQUUsUUFDQSxRQUFBNW9ELEVBQUEwMkMsRUFBQTdmLEVBQUE1bkIsRUFBQSxZQUNBcWMsRUFBQXN6QixLQUFBOEosR0FBQUcsV0FHQSxPQUFBN29ELEVBRUFzckIsRUFBQXMwQixJQUFBNS9DLEVBQ0FveEMsRUFBQXVDLEVBQUEzekMsR0FDQUEsRUFBQW94QyxFQUFBK0MsV0FDQTdvQixFQUFBaE4sUUFBQTh5QixFQUFBOXlCLFFBRUF3eUIsRUFBQTl3QyxLQUFBb3hDLEVBQUE5eUIsUUFJQWdOLEVBQUF3OUIsa0JBQUEsR0FFQXg5QixFQUFBbW9CLFNBQUEsRUFFQW5vQixFQUFBc3pCLE9BQUE4SixHQUFBRSxTQUFBRyxHQUFBdjBELEtBQUF3TCxLQUNBc3JCLEVBQUFzekIsS0FBQThKLEdBQUFDLFFBQ0FsaEIsR0FBQSwyREFBQXpuQyxFQUFBeXdDLEtBR0FubEIsRUFBQTA5QixXQUFBaHBELEVBR0E2bkIsRUFBQXE3QixRQUFBNTNCLEVBQUFzekIsT0FBQThKLEdBQUFFLFNBQ0FuaEIsR0FBQSxTQUFBdHpDLEVBQUEsb0NBQUFzOEMsT0FFQSxJQUFBLFFBQUF6d0MsRUFBQXcyQyxFQUFBM2YsRUFBQTVuQixJQUVBcWMsRUFBQXMwQixJQUFBNS9DLE1BQ0EsQ0FFQSxHQUFBaXBELEdBQUF6SyxFQUFBbmxELGFBQ0EyRyxHQUFBLFVBQUF4TCxLQUFBTCxLQUFBMGlDLEVBQUEvMkIsYUFBQW1wRCxJQUFBcHlCLEVBQUEvMkIsYUFBQSxJQUFBbXBELElBQUFweUIsRUFBQS8yQixhQUFBLFVBQUFtcEQsSUFBQXB5QixFQUFBLzJCLGFBQUEsSUFBQW1wRCxFQUFBLFVBQUFweUIsRUFBQS8yQixhQUFBLFVBQUFtcEQsRUFBQSxVQUFBcHlCLEVBQUEvMkIsYUFBQSxJQUFBbXBELEVBQUEsVUFBQXB5QixFQUFBLzJCLGFBQUEsVUFBQW1wRCxFQUFBLFVBQ0FqcEQsRUFDQXluQyxHQUFBLGtDQUFBd2hCLEVBQUEscUJBQUFoNkMsRUFBQSxrRkFBQXdoQyxHQUNBNW9CLEVBQUFxaEMsVUFFQXpoQixHQUFBLDBCQUFBdHpDLEVBQUFzOEMsR0FJQXY3QixFQUFBOWIsS0FBQWt5QixPQTlEQW1jLElBQUEsc0JBQUF0ekMsRUFBQSwwQ0FBQXM4QyxPQVRBaEosSUFBQSw0QkFBQWdKLEVBeUVBLE9BQUEwWSxJQUFBajBDLEdBVUEsUUFBQWkwQyxJQUFBajBDLEdBQ0EsTUFBQSxVQUFBdTdCLEVBQUEwUSxHQUVBMVEsRUFBQTJZLFNBSUEsS0FIQSxHQUVBOTlCLEdBQUFrekIsRUFBQTMyQixFQUFBN25CLEVBQUE0L0MsRUFGQXlKLEVBQUE1WSxFQUFBc04sU0FBQXhELFVBQ0F2bEQsRUFBQWtnQixFQUFBN2YsT0FFQUwsS0FTQSxHQVJBczJCLEVBQUFwVyxFQUFBbGdCLEdBQ0E0cUQsRUFBQXQwQixFQUFBczBCLElBQ0FwQixFQUFBbHpCLEVBQUFrekIsS0FDQTMyQixFQUFBeUQsRUFBQXpELFFBQ0E0b0IsRUFBQTJZLE9BQUE1SyxHQUFBbHpCLEVBQ0ErOUIsR0FBQWxaLEVBQUFrWixFQUFBN0ssSUFDQThLLEdBQUE3WSxFQUFBbmxCLEVBQUErOUIsRUFBQTdLLElBRUEsT0FBQW9CLEVBRUEwSixHQUFBN1ksRUFBQW5sQixFQUFBZ2tCLFlBQ0EsSUFBQWhrQixFQUFBbW9CLFFBRUFub0IsRUFBQXN6QixPQUFBOEosR0FBQUcsVUFFQTdvRCxHQUFBbWhELEdBQUExUSxFQUFBbU4sVUFBQW5OLEdBQUE4WSxLQUFBaitCLEVBQUEwOUIsWUFDQU0sR0FBQTdZLEVBQUFubEIsRUFBQXRyQixJQUVBeXdDLEVBQUFtTixTQUVBbk4sRUFBQStZLFVBQ0FyMUQsS0FBQSxPQUNBZytDLElBQUFzWCxHQUNBbitCLEtBQUFBLEdBQ0EsS0FBQSxLQUFBNjFCLEdBR0FtSSxHQUFBN1ksRUFBQW5sQixFQUFBbWxCLEVBQUE4WSxLQUFBaitCLEVBQUEwOUIsaUJBR0EsSUFBQTE5QixFQUFBdzlCLGlCQUFBLENBRUEsR0FBQXBWLEdBQUFwQyxFQUFBc08sRUFDQTUvQyxHQUFBMHpDLElBQUFrTSxFQUFBdk8sRUFBQUYsRUFBQXlPLElBQUFsTSxFQUNBNFYsR0FBQTdZLEVBQUFubEIsRUFBQXRyQixPQU1BQSxHQUFBNm5CLEVBQUFydUIsT0FBQWtpQyxVQUFBLEtBQUFra0IsR0FBQUEsSUFBQWxPLEVBQUFwbUIsRUFBQW4zQixRQUFBeXJELEVBQ0EwSixHQUFBN1ksRUFBQW5sQixFQUFBdHJCLElBaUJBLFFBQUEwcEQsSUFBQWpaLEVBQUFubEIsRUFBQXErQixFQUFBaHlDLEdBQ0EsR0FBQWl5QyxHQUFBdCtCLEVBQUFtb0IsU0FBQTZOLEdBQUFoMkIsRUFBQTA5QixZQUNBaHBELEVBQUEycEQsQ0FDQXJhLFVBQUF0dkMsSUFDQUEsRUFBQTZwRCxHQUFBcFosRUFBQW5sQixJQUVBdHJCLEVBQUE4cEQsR0FBQXgrQixFQUFBdHJCLEVBQUF5d0MsRUFDQSxJQUFBc1osR0FBQS9wRCxJQUFBMnBELENBQ0FLLElBQUExK0IsRUFBQXRyQixFQUFBeXdDLEtBQ0F6d0MsRUFBQXN2QyxRQUVBc2EsSUFBQUcsRUFDQS9PLEdBQUEsV0FDQXJqQyxFQUFBM1gsS0FHQTJYLEVBQUEzWCxHQVlBLFFBQUFzcEQsSUFBQTdZLEVBQUFubEIsRUFBQXRyQixHQUNBMHBELEdBQUFqWixFQUFBbmxCLEVBQUF0ckIsRUFBQSxTQUFBQSxHQUNBODdDLEdBQUFyTCxFQUFBbmxCLEVBQUFrekIsS0FBQXgrQyxLQVlBLFFBQUFpcUQsSUFBQXhaLEVBQUFubEIsRUFBQXRyQixHQUNBMHBELEdBQUFqWixFQUFBbmxCLEVBQUF0ckIsRUFBQSxTQUFBQSxHQUNBeXdDLEVBQUFubEIsRUFBQWt6QixNQUFBeCtDLElBWUEsUUFBQTZwRCxJQUFBcFosRUFBQW5sQixHQUVBLEdBQUF6RCxHQUFBeUQsRUFBQXpELE9BQ0EsS0FBQXNvQixFQUFBdG9CLEVBQUEsV0FFQSxNQUFBQSxHQUFBcnVCLE9BQUFraUMsU0FBQTRULE1BRUEsSUFBQTZDLEdBQUF0cUIsRUFBQSxPQU1BLE9BSkF2a0IsR0FBQTZ1QyxJQUNBMUssR0FBQSxtQ0FBQW5jLEVBQUFuM0IsS0FBQSwyRkFBQXM4QyxHQUdBLGtCQUFBMEIsSUFBQXRxQixFQUFBcnVCLE9BQUFpUyxTQUFBMG1DLEVBQUE1NkMsS0FBQWs1QyxHQUFBMEIsRUFXQSxRQUFBNlgsSUFBQTErQixFQUFBdHJCLEVBQUF5d0MsR0FDQSxJQUFBbmxCLEVBQUF6RCxRQUFBcWhDLFdBQ0EsT0FBQTU5QixFQUFBczBCLEtBQ0EsTUFBQTUvQyxHQUVBLE9BQUEsQ0FFQSxJQUFBNm5CLEdBQUF5RCxFQUFBekQsUUFDQXJ1QixFQUFBcXVCLEVBQUFydUIsS0FDQTB3RCxHQUFBMXdELEVBQ0Eyd0QsSUFDQSxJQUFBM3dELEVBQUEsQ0FDQXlGLEdBQUF6RixLQUNBQSxHQUFBQSxHQUVBLEtBQUEsR0FBQXhFLEdBQUEsRUFBQUEsRUFBQXdFLEVBQUFuRSxTQUFBNjBELEVBQUFsMUQsSUFBQSxDQUNBLEdBQUFvMUQsR0FBQUMsR0FBQXJxRCxFQUFBeEcsRUFBQXhFLEdBQ0FtMUQsR0FBQS93RCxLQUFBZ3hELEVBQUFFLGNBQ0FKLEVBQUFFLEVBQUFGLE9BR0EsSUFBQUEsRUFJQSxNQUZBemlCLElBQUEsNkNBQUFuYyxFQUFBbjNCLEtBQUEsZUFBQWcyRCxFQUFBdDhDLElBQUEwOEMsSUFBQXhpRCxLQUFBLE1BQUEsU0FBQXlpRCxHQUFBeHFELEdBQUEsSUFBQXl3QyxJQUVBLENBRUEsSUFBQWdhLEdBQUE1aUMsRUFBQTRpQyxTQUNBLFNBQUFBLElBQ0FBLEVBQUF6cUQsTUFDQXluQyxHQUFBLHlEQUFBbmMsRUFBQW4zQixLQUFBLEtBQUFzOEMsSUFDQSxHQWNBLFFBQUFxWixJQUFBeCtCLEVBQUF0ckIsRUFBQXl3QyxHQUNBLEdBQUFpYSxHQUFBcC9CLEVBQUF6RCxRQUFBNmlDLE1BQ0EsT0FBQUEsR0FHQSxrQkFBQUEsR0FDQUEsRUFBQTFxRCxJQUVBeW5DLEdBQUEsNEJBQUFuYyxFQUFBbjNCLEtBQUEsbUNBQUF1MkQsR0FBQSxJQUFBamEsR0FDQXp3QyxHQU5BQSxFQWtCQSxRQUFBcXFELElBQUFycUQsRUFBQXhHLEdBQ0EsR0FBQTB3RCxHQUNBSSxDQXNCQSxPQXJCQTl3RCxLQUFBdEUsUUFDQW8xRCxFQUFBLFNBQ0FKLFFBQUFscUQsS0FBQXNxRCxHQUNBOXdELElBQUE0bUMsUUFDQWtxQixFQUFBLFNBQ0FKLFFBQUFscUQsS0FBQXNxRCxHQUNBOXdELElBQUFraUMsU0FDQTR1QixFQUFBLFVBQ0FKLFFBQUFscUQsS0FBQXNxRCxHQUNBOXdELElBQUFpUyxVQUNBNitDLEVBQUEsV0FDQUosUUFBQWxxRCxLQUFBc3FELEdBQ0E5d0QsSUFBQXBDLFFBQ0FrekQsRUFBQSxTQUNBSixFQUFBN3hDLEVBQUFyWSxJQUNBeEcsSUFBQXdGLE9BQ0FzckQsRUFBQSxRQUNBSixFQUFBanJELEdBQUFlLElBRUFrcUQsRUFBQWxxRCxZQUFBeEcsSUFHQTB3RCxNQUFBQSxFQUNBSSxhQUFBQSxHQVdBLFFBQUFDLElBQUEvd0QsR0FDQSxNQUFBQSxHQUFBQSxFQUFBK08sT0FBQSxHQUFBMUMsY0FBQXJNLEVBQUFmLE1BQUEsR0FBQSxjQVVBLFFBQUEreEQsSUFBQXA4QixHQUNBLE1BQUFoM0IsUUFBQUMsVUFBQXVCLFNBQUFyQixLQUFBNjJCLEdBQUEzMUIsTUFBQSxHQUFBLEdBZ0VBLFFBQUFreUQsSUFBQUMsR0FDQUMsR0FBQXp4RCxLQUFBd3hELEdBQ0F6SCxLQUNBQSxJQUFBLEVBQ0EzNUMsR0FBQXNoRCxLQVNBLFFBQUFBLE1BR0EsSUFBQSxHQURBaDFELEdBQUE2RCxTQUFBc1gsZ0JBQUFnQixhQUNBamQsRUFBQSxFQUFBQSxFQUFBNjFELEdBQUF4MUQsT0FBQUwsSUFDQTYxRCxHQUFBNzFELElBTUEsT0FKQTYxRCxPQUNBMUgsSUFBQSxFQUdBcnRELEVBMkNBLFFBQUFpMUQsSUFBQWwwQixFQUFBbjFCLEVBQUFzMEMsRUFBQXZGLEdBQ0FyeEMsS0FBQXNDLEdBQUFBLEVBQ0F0QyxLQUFBeTNCLEdBQUFBLEVBQ0F6M0IsS0FBQTRyRCxXQUFBaFYsR0FBQUEsRUFBQWdWLFlBQUF0cEQsRUFBQSxTQUNBdEMsS0FBQTZyRCxXQUFBalYsR0FBQUEsRUFBQWlWLFlBQUF2cEQsRUFBQSxTQUNBdEMsS0FBQTQyQyxNQUFBQSxFQUNBNTJDLEtBQUFxeEMsR0FBQUEsRUFFQXJ4QyxLQUFBOHJELGdCQUFBOXJELEtBQUErckQsYUFBQS9yRCxLQUFBa0ssT0FBQWxLLEtBQUFnc0QsWUFBQWhzRCxLQUFBeTJDLEdBQUF6MkMsS0FBQThPLEdBQUEsS0FDQTlPLEtBQUFpc0QsYUFBQSxFQUNBanNELEtBQUFrc0QsUUFBQWxzRCxLQUFBeXBCLE1BQUEsRUFDQXpwQixLQUFBbXNELGFBRUFuc0QsS0FBQTVGLEtBQUF3OEMsR0FBQUEsRUFBQXg4QyxLQUdBNEYsS0FBQTVGLE1BQUE0RixLQUFBNUYsT0FBQWd5RCxJQUFBcHNELEtBQUE1RixPQUFBaXlELElBQ0Foa0IsR0FBQSwrQ0FBQXJvQyxLQUFBc0MsR0FBQSxNQUFBdEMsS0FBQTVGLEtBQUFpM0MsRUFJQSxJQUFBamxDLEdBQUFwTSxNQUNBLGdCQUFBLFlBQUEsZ0JBQUEsYUFBQTJFLFFBQUEsU0FBQWpMLEdBQ0EwUyxFQUFBMVMsR0FBQWlOLEVBQUF5RixFQUFBMVMsR0FBQTBTLEtBNFNBLFFBQUFrZ0QsSUFBQTcwQixHQUNBLEdBQUEsT0FBQXJpQyxLQUFBcWlDLEVBQUFpRyxjQUFBLENBR0EsR0FBQTZ1QixHQUFBOTBCLEVBQUExQix1QkFDQSxTQUFBdzJCLEVBQUE1ekQsT0FBQTR6RCxFQUFBM3pELFFBRUEsUUFBQTYrQixFQUFBN2tCLGFBQUE2a0IsRUFBQTVrQixjQUFBNGtCLEVBQUFtUCxpQkFBQTN3QyxRQXdEQSxRQUFBbXBCLElBQUFxWSxFQUFBaFAsRUFBQStqQyxHQUVBLEdBQUFDLEdBQUFELElBQUEvakMsRUFBQWlrQyxhQUFBQyxHQUFBbDFCLEVBQUFoUCxHQUFBLEtBRUFta0MsRUFBQUgsR0FBQUEsRUFBQUksVUFBQUMsR0FBQXIxQixLQUFBQSxFQUFBNmdCLGdCQUFBLEtBQUF5VSxHQUFBdDFCLEVBQUFyb0IsV0FBQXFaLEVBZUEsT0FBQSxVQUFBNG9CLEVBQUE1WixFQUFBNXVCLEVBQUFrNUMsRUFBQTdqQixHQUVBLEdBQUE5dUIsR0FBQXNKLEVBQUErZSxFQUFBcm9CLFlBRUE0OUMsRUFBQUMsR0FBQSxXQUNBUixHQUFBQSxFQUFBcGIsRUFBQTVaLEVBQUE1dUIsRUFBQWs1QyxFQUFBN2pCLEdBQ0EwdUIsR0FBQUEsRUFBQXZiLEVBQUFqaUMsRUFBQXZHLEVBQUFrNUMsRUFBQTdqQixJQUNBbVQsRUFDQSxPQUFBNmIsSUFBQTdiLEVBQUEyYixJQVlBLFFBQUFDLElBQUEvRyxFQUFBN1UsR0FHQSxHQUFBOGIsR0FBQTliLEVBQUFvTSxZQUFBeG5ELE1BQ0Fpd0QsSUFDQSxJQUFBOEcsR0FBQTNiLEVBQUFvTSxZQUFBcGtELE1BQUE4ekQsRUFDQUgsR0FBQTNzRCxLQUFBK3NELEdBQ0EsS0FBQSxHQUFBeDNELEdBQUEsRUFBQXNCLEVBQUE4MUQsRUFBQS8yRCxPQUFBTCxFQUFBc0IsRUFBQXRCLElBQ0FvM0QsRUFBQXAzRCxHQUFBeTNELE9BRUEsT0FBQUwsR0FVQSxRQUFBSSxJQUFBdjNELEVBQUFpRSxHQUdBLE1BRkFqRSxHQUFBQSxFQUFBeTNELFdBQUF2YSxJQUFBd2EsVUFBQUMsR0FDQTF6RCxFQUFBQSxFQUFBd3pELFdBQUF2YSxJQUFBd2EsVUFBQUMsR0FDQTMzRCxFQUFBaUUsR0FBQSxFQUFBakUsSUFBQWlFLEVBQUEsRUFBQSxFQWtCQSxRQUFBb3pELElBQUE3YixFQUFBMmIsRUFBQW4wQyxFQUFBNDBDLEdBQ0EsUUFBQW5ILEdBQUFvSCxHQUNBQyxHQUFBdGMsRUFBQTJiLEVBQUFVLEdBQ0E3MEMsR0FBQTQwQyxHQUNBRSxHQUFBOTBDLEVBQUE0MEMsR0FLQSxNQURBbkgsR0FBQTBHLEtBQUFBLEVBQ0ExRyxFQVdBLFFBQUFxSCxJQUFBdGMsRUFBQTJiLEVBQUFVLEdBRUEsSUFEQSxHQUFBOTNELEdBQUFvM0QsRUFBQS8yRCxPQUNBTCxLQUNBbzNELEVBQUFwM0QsR0FBQWc0RCxZQUNBRixHQUNBcmMsRUFBQW9NLFlBQUFvUSxRQUFBYixFQUFBcDNELElBZUEsUUFBQWs0RCxJQUFBemMsRUFBQTVaLEVBQUEzaEIsRUFBQWlzQyxHQUNBLEdBQUFnTSxHQUFBN0UsR0FBQXp4QixFQUFBM2hCLEVBQUF1N0IsR0FDQTJjLEVBQUFmLEdBQUEsV0FDQWMsRUFBQTFjLEVBQUEwUSxJQUNBMVEsRUFDQSxPQUFBNmIsSUFBQTdiLEVBQUEyYyxHQWtCQSxRQUFBQyxJQUFBeDJCLEVBQUFoUCxFQUFBeWxDLEdBQ0EsR0FFQUMsR0FBQUMsRUFGQUMsRUFBQTVsQyxFQUFBNmxDLGdCQUNBQyxFQUFBOWxDLEVBQUErbEMsY0FLQSxJQUFBLEtBQUEvMkIsRUFBQW5xQixTQUdBbWIsRUFBQWlrQyxjQUVBMkIsR0FBQUgsSUFDQUMsRUFBQU0sR0FBQUosRUFBQUgsSUFFQUssSUFFQUgsRUFBQUssR0FBQUYsRUFBQTlsQyxLQUlBMmxDLEVBQUFLLEdBQUFoM0IsRUFBQTkyQixXQUFBOG5CLE9BRUEsSUFBQTRsQyxFQUFBLENBRUEsR0FBQWpGLEdBQUFpRixFQUFBN2dELE9BQUEsU0FBQXFDLEdBRUEsTUFBQUEsR0FBQTlhLEtBQUFzRyxRQUFBLE9BQUEsSUFFQXF6RCxHQUFBdDVELEtBQUF5YSxFQUFBOWEsT0FFQSxTQUFBOGEsRUFBQTlhLE9BQ0EwWixJQUFBLFNBQUFvQixHQUNBLE1BQUEsSUFBQUEsRUFBQTlhLEtBQUEsS0FFQSxJQUFBcTBELEVBQUFuekQsT0FBQSxDQUNBLEdBQUEwNEQsR0FBQXZGLEVBQUFuekQsT0FBQSxDQUNBb3lDLElBQUEsYUFBQXNtQixFQUFBLEtBQUEsS0FBQXZGLEVBQUF6Z0QsS0FBQSxPQUFBZ21ELEVBQUEsT0FBQSxPQUFBLDBCQUFBbG1DLEVBQUFnUCxHQUFBZ2hCLFFBQUF4K0MsY0FBQSw2R0FLQSxNQURBd3VCLEdBQUE2bEMsZ0JBQUE3bEMsRUFBQStsQyxlQUFBLEtBQ0EsU0FBQW5kLEVBQUE1WixFQUFBc3FCLEdBRUEsR0FDQTBMLEdBREE1MEMsRUFBQXc0QixFQUFBbU4sUUFFQTNsQyxJQUFBczFDLElBQ0FWLEVBQUFSLEdBQUEsV0FDQWtCLEVBQUF0MUMsRUFBQTRlLEVBQUEsS0FBQXNxQixJQUNBbHBDLEdBSUEsSUFBQSsxQyxHQUFBM0IsR0FBQSxXQUNBbUIsR0FBQUEsRUFBQS9jLEVBQUE1WixJQUNBNFosRUFJQSxPQUFBNmIsSUFBQTdiLEVBQUF1ZCxFQUFBLzFDLEVBQUE0MEMsSUFhQSxRQUFBZCxJQUFBelYsRUFBQXp1QixHQUNBLEdBQUFydUIsR0FBQTg4QyxFQUFBNXBDLFFBQ0EsT0FBQSxLQUFBbFQsR0FBQTB5RCxHQUFBNVYsR0FFQSxJQUFBOThDLEdBQUE4OEMsRUFBQXp4QyxLQUFBYixPQUNBaXFELEdBQUEzWCxFQUFBenVCLEdBRUEsS0FKQXFtQyxHQUFBNVgsRUFBQXp1QixHQWdCQSxRQUFBcW1DLElBQUFyM0IsRUFBQWhQLEdBSUEsR0FBQSxhQUFBZ1AsRUFBQWdoQixRQUFBLENBQ0EsR0FBQXhFLEdBQUF5QixFQUFBamUsRUFBQTcyQixNQUNBcXpDLEtBQ0F4YyxFQUFBNTFCLGFBQUEsU0FBQWkwQyxFQUFBN0IsSUFDQXhjLEVBQUE3MkIsTUFBQSxJQUdBLEdBQUFtdUQsR0FDQXRWLEVBQUFoaUIsRUFBQXVoQixnQkFDQTVZLEVBQUFxWixHQUFBL2dDLEVBQUErZSxFQUFBOTJCLFdBaUJBLE9BZkE4NEMsS0FDQXNWLEVBQUFDLEdBQUF2M0IsRUFBQTJJLEVBQUEzWCxJQUdBc21DLElBQ0FBLEVBQUFFLEdBQUF4M0IsRUFBQWhQLElBR0FzbUMsSUFDQUEsRUFBQUcsR0FBQXozQixFQUFBaFAsS0FHQXNtQyxHQUFBdFYsSUFDQXNWLEVBQUFOLEdBQUFydUIsRUFBQTNYLElBRUFzbUMsRUFXQSxRQUFBRixJQUFBM1gsRUFBQXp1QixHQUVBLEdBQUF5dUIsRUFBQWlZLE1BQ0EsTUFBQUMsR0FHQSxJQUFBbmIsR0FBQXlCLEVBQUF3QixFQUFBbVksVUFDQSxLQUFBcGIsRUFDQSxNQUFBLEtBU0EsS0FEQSxHQUFBcjBCLEdBQUFzM0IsRUFBQTE4QixZQUNBb0YsR0FBQSxJQUFBQSxFQUFBdFMsVUFDQXNTLEVBQUF1dkMsT0FBQSxFQUNBdnZDLEVBQUFBLEVBQUFwRixXQUtBLEtBQUEsR0FEQWlkLEdBQUF4dEIsRUFEQWkwQixFQUFBM2pDLFNBQUEyVSx5QkFFQXRaLEVBQUEsRUFBQXNCLEVBQUErOEMsRUFBQWgrQyxPQUFBTCxFQUFBc0IsRUFBQXRCLElBQ0FxVSxFQUFBZ3FDLEVBQUFyK0MsR0FDQTZoQyxFQUFBeHRCLEVBQUE0ckMsSUFBQXlaLEdBQUFybEQsRUFBQXdlLEdBQUFsdUIsU0FBQThQLGVBQUFKLEVBQUFySixPQUNBczlCLEVBQUF4dUIsWUFBQStuQixFQUVBLE9BQUE4M0IsSUFBQXRiLEVBQUEvVixFQUFBelYsR0FVQSxRQUFBMm1DLElBQUEvZCxFQUFBNkYsR0FDQTN0QyxFQUFBMnRDLEdBV0EsUUFBQW9ZLElBQUFybEQsRUFBQXdlLEdBaUJBLFFBQUErbUMsR0FBQXAxRCxHQUNBLElBQUE2UCxFQUFBcWpELFdBQUEsQ0FDQSxHQUFBdGIsR0FBQXVDLEVBQUF0cUMsRUFBQXJKLE1BQ0FxSixHQUFBcWpELFlBQ0F2NEQsS0FBQXFGLEVBQ0EyNEMsSUFBQTBjLEdBQUFyMUQsR0FDQTI2QyxXQUFBL0MsRUFBQStDLFdBQ0E3MUIsUUFBQTh5QixFQUFBOXlCLFVBdkJBLEdBQUF1WSxFQTBCQSxPQXpCQXh0QixHQUFBMHJDLFFBQ0FsZSxFQUFBbDlCLFNBQUE4UCxlQUFBSixFQUFBckosT0FFQXFKLEVBQUF5ZSxNQUNBK08sRUFBQWw5QixTQUFBdWhCLGNBQUEsVUFDQTB6QyxFQUFBLFVBS0EvM0IsRUFBQWw5QixTQUFBOFAsZUFBQSxLQUNBbWxELEVBQUEsU0FjQS8zQixFQVVBLFFBQUE4M0IsSUFBQXRiLEVBQUEvVixHQUNBLE1BQUEsVUFBQW1ULEVBQUE1WixFQUFBNXVCLEVBQUFrNUMsR0FJQSxJQUFBLEdBREE5M0MsR0FBQXJKLEVBQUFzMkMsRUFGQXdZLEVBQUF4eEIsRUFBQTNiLFdBQUEsR0FDQW5ULEVBQUFzSixFQUFBZzNDLEVBQUF0Z0QsWUFFQXhaLEVBQUEsRUFBQXNCLEVBQUErOEMsRUFBQWgrQyxPQUFBTCxFQUFBc0IsRUFBQXRCLElBQ0FxVSxFQUFBZ3FDLEVBQUFyK0MsR0FDQWdMLEVBQUFxSixFQUFBckosTUFDQXFKLEVBQUE0ckMsTUFDQXFCLEVBQUE5bkMsRUFBQXhaLEdBQ0FxVSxFQUFBMHJDLFNBQ0EvMEMsR0FBQW1oRCxHQUFBMVEsR0FBQTRFLE1BQUFyMUMsR0FDQXFKLEVBQUF5ZSxLQUNBaGxCLEVBQUF3ekMsRUFBQTJPLEdBQUFqbEQsR0FBQSxJQUVBczJDLEVBQUF6eEMsS0FBQXFzQyxFQUFBbHhDLElBR0F5d0MsRUFBQStZLFNBQUFuZ0QsRUFBQXFqRCxXQUFBcFcsRUFBQXJ1QyxFQUFBazVDLEdBSUFyK0MsR0FBQSt6QixFQUFBaTRCLElBWUEsUUFBQTNDLElBQUE0QyxFQUFBbG5DLEdBR0EsSUFBQSxHQURBZ2tDLEdBQUFHLEVBQUExVixFQURBMFksS0FFQWg2RCxFQUFBLEVBQUFzQixFQUFBeTRELEVBQUExNUQsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUNBc2hELEVBQUF5WSxFQUFBLzVELEdBQ0E2MkQsRUFBQUUsR0FBQXpWLEVBQUF6dUIsR0FDQW1rQyxFQUFBSCxHQUFBQSxFQUFBSSxVQUFBLFdBQUEzVixFQUFBdUIsVUFBQXZCLEVBQUFvQixnQkFBQSxLQUFBeVUsR0FBQTdWLEVBQUE5bkMsV0FBQXFaLEdBQ0FtbkMsRUFBQTUxRCxLQUFBeXlELEVBQUFHLEVBRUEsT0FBQWdELEdBQUEzNUQsT0FBQTQ1RCxHQUFBRCxHQUFBLEtBVUEsUUFBQUMsSUFBQUQsR0FDQSxNQUFBLFVBQUF2ZSxFQUFBaUksRUFBQXp3QyxFQUFBazVDLEVBQUE3akIsR0FFQSxJQUFBLEdBREFnWixHQUFBdVYsRUFBQXFELEVBQ0FsNkQsRUFBQSxFQUFBRCxFQUFBLEVBQUF1QixFQUFBMDRELEVBQUEzNUQsT0FBQUwsRUFBQXNCLEVBQUF2QixJQUFBLENBQ0F1aEQsRUFBQW9DLEVBQUEzakQsR0FDQTgyRCxFQUFBbUQsRUFBQWg2RCxLQUNBazZELEVBQUFGLEVBQUFoNkQsSUFFQSxJQUFBd1osR0FBQXNKLEVBQUF3K0IsRUFBQTluQyxXQUNBcTlDLElBQ0FBLEVBQUFwYixFQUFBNkYsRUFBQXJ1QyxFQUFBazVDLEVBQUE3akIsR0FFQTR4QixHQUNBQSxFQUFBemUsRUFBQWppQyxFQUFBdkcsRUFBQWs1QyxFQUFBN2pCLEtBY0EsUUFBQSt3QixJQUFBeDNCLEVBQUFoUCxHQUNBLEdBQUFvdEIsR0FBQXBlLEVBQUFnaEIsUUFBQXgrQyxhQUNBLEtBQUF5L0MsR0FBQXRrRCxLQUFBeWdELEdBQUEsQ0FHQSxHQUFBOUMsR0FBQThHLEdBQUFweEIsRUFBQSxvQkFBQW90QixFQUNBLE9BQUE5QyxHQUNBZ2QsR0FBQXQ0QixFQUFBb2UsRUFBQSxHQUFBcHRCLEVBQUFzcUIsR0FEQSxRQWNBLFFBQUFtYyxJQUFBejNCLEVBQUFoUCxHQUNBLEdBQUF1bkMsR0FBQXhXLEdBQUEvaEIsRUFBQWhQLEVBQ0EsSUFBQXVuQyxFQUFBLENBQ0EsR0FBQUMsR0FBQWxYLEdBQUF0aEIsR0FDQTYxQixHQUNBdjRELEtBQUEsWUFDQWs3RCxJQUFBQSxFQUNBbGIsV0FBQWliLEVBQUExdEQsR0FDQXl3QyxJQUFBbWQsR0FBQUYsVUFDQUcsV0FDQUMsU0FBQUosRUFBQTNiLFVBR0FnYyxFQUFBLFNBQUFoZixFQUFBNVosRUFBQTV1QixFQUFBazVDLEVBQUE3akIsR0FDQSt4QixHQUNBdlQsSUFBQXFGLEdBQUExUSxHQUFBaU0sTUFBQTJTLEVBQUEsTUFFQTVlLEVBQUErWSxTQUFBa0QsRUFBQTcxQixFQUFBNXVCLEVBQUFrNUMsRUFBQTdqQixHQUdBLE9BREFteUIsR0FBQXhELFVBQUEsRUFDQXdELEdBY0EsUUFBQXJCLElBQUF2M0IsRUFBQTJJLEVBQUEzWCxHQUVBLEdBQUEsT0FBQTJ1QixFQUFBM2YsRUFBQSxTQUNBLE1BQUE2NEIsR0FHQSxJQUFBNzRCLEVBQUF6MkIsYUFBQSxVQUFBLENBQ0EsR0FBQTZlLEdBQUE0WCxFQUFBODRCLHNCQUNBLElBQUExd0MsR0FBQUEsRUFBQTdlLGFBQUEsUUFDQSxNQUFBc3ZELElBS0EsSUFBQSxHQURBemdELEdBQUE5YSxFQUFBNkwsRUFBQXV2RCxFQUFBSyxFQUFBQyxFQUFBQyxFQUFBM29CLEVBQUFnTCxFQUFBNGQsRUFDQS82RCxFQUFBLEVBQUFzSCxFQUFBa2pDLEVBQUFucUMsT0FBQUwsRUFBQXNILEVBQUF0SCxJQUNBaWEsRUFBQXV3QixFQUFBeHFDLEdBQ0FiLEVBQUE4YSxFQUFBOWEsS0FBQTJPLFFBQUFrdEQsR0FBQSxLQUNBSixFQUFBejdELEVBQUF1VSxNQUFBdW5ELE9BQ0E5ZCxFQUFBOEcsR0FBQXB4QixFQUFBLGFBQUErbkMsRUFBQSxJQUNBemQsR0FBQUEsRUFBQThaLFlBQ0E4RCxJQUFBNWQsRUFBQXdhLFVBQUF1RCxJQUFBSCxFQUFBcEQsWUFDQW9ELEVBQUE1ZCxFQUNBMmQsRUFBQTdnRCxFQUFBOWEsS0FDQW83RCxFQUFBWSxHQUFBbGhELEVBQUE5YSxNQUNBNkwsRUFBQWlQLEVBQUFqUCxNQUNBNnZELEVBQUFELEVBQUEsR0FDQXpvQixFQUFBeW9CLEVBQUEsSUFNQSxPQUFBRyxHQUNBWixHQUFBdDRCLEVBQUFnNUIsRUFBQTd2RCxFQUFBNm5CLEVBQUFrb0MsRUFBQUQsRUFBQTNvQixFQUFBb29CLEdBREEsT0FLQSxRQUFBRyxPQW9CQSxRQUFBUCxJQUFBdDRCLEVBQUFnNUIsRUFBQTd2RCxFQUFBNm5CLEVBQUFzcUIsRUFBQTJkLEVBQUEzb0IsRUFBQW9vQixHQUNBLEdBQUFuZSxHQUFBdUMsRUFBQTN6QyxHQUNBMHNELEdBQ0F2NEQsS0FBQTA3RCxFQUNBMW9CLElBQUFBLEVBQ0FnTixXQUFBL0MsRUFBQStDLFdBQ0E3MUIsUUFBQTh5QixFQUFBOXlCLFFBQ0FzaEMsSUFBQTUvQyxFQUNBaVAsS0FBQTZnRCxFQUNBUCxVQUFBQSxFQUNBcGQsSUFBQUEsRUFHQSxTQUFBMGQsR0FBQSxnQkFBQUEsSUFDQW5ELEVBQUEyQyxJQUFBbFgsR0FBQXRoQixHQUVBLElBQUFsZixHQUFBLFNBQUE4NEIsRUFBQTVaLEVBQUE1dUIsRUFBQWs1QyxFQUFBN2pCLEdBQ0FvdkIsRUFBQTJDLEtBQ0F2VCxJQUFBcUYsR0FBQTFRLEdBQUFpTSxNQUFBZ1EsRUFBQTJDLElBQUEsTUFFQTVlLEVBQUErWSxTQUFBa0QsRUFBQTcxQixFQUFBNXVCLEVBQUFrNUMsRUFBQTdqQixHQUdBLE9BREEzbEIsR0FBQXMwQyxVQUFBLEVBQ0F0MEMsRUFXQSxRQUFBazJDLElBQUFydUIsRUFBQTNYLEdBOEVBLFFBQUF1b0MsR0FBQVAsRUFBQTFkLEVBQUFrZSxHQUNBLEdBQUFDLEdBQUFELEdBQUFFLEdBQUFGLEdBQ0FqZixHQUFBa2YsR0FBQTNjLEVBQUEzekMsRUFDQW9zRCxHQUFBaHpELE1BQ0FqRixLQUFBMDdELEVBQ0E1Z0QsS0FBQTZnRCxFQUNBbFEsSUFBQStKLEVBQ0F4WCxJQUFBQSxFQUNBaEwsSUFBQUEsRUFDQW9vQixVQUFBQSxFQUlBcGIsV0FBQS9DLEdBQUFBLEVBQUErQyxXQUNBNzFCLFFBQUE4eUIsR0FBQUEsRUFBQTl5QixRQUNBa3lDLE9BQUFILEVBQ0FFLFdBQUFELElBMUZBLElBSEEsR0FFQXJoRCxHQUFBOWEsRUFBQTZMLEVBQUE4dkQsRUFBQW5HLEVBQUFrRyxFQUFBMW9CLEVBQUFvb0IsRUFBQWtCLEVBQUFwZCxFQUFBdWMsRUFGQTU2RCxFQUFBd3FDLEVBQUFucUMsT0FDQSsyRCxLQUVBcDNELEtBWUEsR0FYQWlhLEVBQUF1d0IsRUFBQXhxQyxHQUNBYixFQUFBMjdELEVBQUE3Z0QsRUFBQTlhLEtBQ0E2TCxFQUFBMnBELEVBQUExNkMsRUFBQWpQLE1BQ0FxekMsRUFBQXlCLEVBQUE5MEMsR0FFQW1uQyxFQUFBLEtBRUFvb0IsRUFBQVksR0FBQWg4RCxHQUNBQSxFQUFBQSxFQUFBMk8sUUFBQWt0RCxHQUFBLElBR0EzYyxFQUNBcnpDLEVBQUFrMUMsRUFBQTdCLEdBQ0FsTSxFQUFBaHpDLEVBQ0FpOEQsRUFBQSxPQUFBdkIsR0FBQTlvRCxLQUFBc3RDLEdBR0EsVUFBQWwvQyxHQUFBNkssTUFBQTNILFVBQUFxNUQsS0FBQW41RCxLQUFBaW9DLEVBQUEsU0FBQXZ3QixHQUNBLE1BQUEsV0FBQUEsRUFBQTlhLE1BQUEsaUJBQUE4YSxFQUFBOWEsUUFFQXN6QyxHQUFBLFVBQUFraUIsRUFBQSx5R0FBQTloQyxPQU1BLElBQUE4b0MsR0FBQW44RCxLQUFBTCxHQUNBbzdELEVBQUFDLFNBQUFvQixHQUFBcDhELEtBQUFMLEdBQ0FpOEQsRUFBQSxhQUFBZCxHQUFBeFosZ0JBSUEsSUFBQWdZLEdBQUF0NUQsS0FBQUwsR0FDQWd6QyxFQUFBaHpDLEVBQUEyTyxRQUFBZ3JELEdBQUEsSUFDQXNDLEVBQUEsS0FBQXZCLEdBQUF2b0MsUUFJQSxJQUFBc3FDLEdBQUFwOEQsS0FBQUwsR0FDQTA3RCxFQUFBMTdELEVBQUEyTyxRQUFBOHRELEdBQUEsSUFDQSxVQUFBZixHQUFBLFVBQUFBLEVBQ0FPLEVBQUFQLEVBQUFQLEdBQUFPLEtBRUExb0IsRUFBQTBvQixFQUNBTyxFQUFBLE9BQUF2QixHQUFBOW9ELFdBS0EsSUFBQTZwRCxFQUFBejdELEVBQUF1VSxNQUFBdW5ELElBQUEsQ0FLQSxHQUpBSixFQUFBRCxFQUFBLEdBQ0F6b0IsRUFBQXlvQixFQUFBLEdBR0EsU0FBQUMsRUFDQSxRQUdBWSxHQUFBeFgsR0FBQXB4QixFQUFBLGFBQUFnb0MsR0FBQSxHQUNBWSxHQUNBTCxFQUFBUCxFQUFBWSxHQWlDQSxHQUFBckUsRUFBQS8yRCxPQUNBLE1BQUF3N0QsSUFBQXpFLEdBV0EsUUFBQStELElBQUFoOEQsR0FDQSxHQUFBOEQsR0FBQWIsT0FBQTJLLE9BQUEsTUFDQTJHLEVBQUF2VSxFQUFBdVUsTUFBQXNuRCxHQUNBLElBQUF0bkQsRUFFQSxJQURBLEdBQUExVCxHQUFBMFQsRUFBQXJULE9BQ0FMLEtBQ0FpRCxFQUFBeVEsRUFBQTFULEdBQUF5RCxNQUFBLEtBQUEsQ0FHQSxPQUFBUixHQVVBLFFBQUE0NEQsSUFBQWhDLEdBQ0EsTUFBQSxVQUFBcGUsRUFBQTVaLEVBQUE1dUIsRUFBQWs1QyxFQUFBN2pCLEdBR0EsSUFEQSxHQUFBdG9DLEdBQUE2NUQsRUFBQXg1RCxPQUNBTCxLQUNBeTdDLEVBQUErWSxTQUFBcUYsRUFBQTc1RCxHQUFBNmhDLEVBQUE1dUIsRUFBQWs1QyxFQUFBN2pCLElBWUEsUUFBQWl6QixJQUFBbGQsR0FFQSxJQURBLEdBQUFyK0MsR0FBQXErQyxFQUFBaCtDLE9BQ0FMLEtBQ0EsR0FBQXErQyxFQUFBcitDLEdBQUErL0MsUUFBQSxPQUFBLEVBSUEsUUFBQW1YLElBQUFyMUIsR0FDQSxNQUFBLFdBQUFBLEVBQUFnaEIsV0FBQWhoQixFQUFBejJCLGFBQUEsU0FBQSxvQkFBQXkyQixFQUFBLzJCLGFBQUEsU0FpQkEsUUFBQWd4RCxJQUFBajZCLEVBQUFoUCxHQThCQSxNQXhCQUEsS0FDQUEsRUFBQTZsQyxnQkFBQXFELEdBQUFsNkIsSUFJQTJnQixHQUFBM2dCLEtBQ0FBLEVBQUFvdUIsR0FBQXB1QixJQUVBaFAsSUFDQUEsRUFBQWlrQyxlQUFBamtDLEVBQUFxOUIsV0FDQXI5QixFQUFBcTlCLFNBQUEsaUJBRUFyOUIsRUFBQXE5QixXQUNBcjlCLEVBQUFtcEMsU0FBQTVaLEVBQUF2Z0IsR0FDQUEsRUFBQW82QixHQUFBcDZCLEVBQUFoUCxLQUdBNHZCLEdBQUE1Z0IsS0FJQXBQLEVBQUFxd0IsR0FBQSxXQUFBLEdBQUFqaEIsR0FDQUEsRUFBQS9uQixZQUFBZ3BDLEdBQUEsU0FBQSxLQUVBamhCLEVBWUEsUUFBQW82QixJQUFBcDZCLEVBQUFoUCxHQUNBLEdBQUFxOUIsR0FBQXI5QixFQUFBcTlCLFNBQ0E1bkIsRUFBQTJuQixHQUFBQyxHQUFBLEVBQ0EsSUFBQTVuQixFQUFBLENBQ0EsR0FBQTR6QixHQUFBNXpCLEVBQUF6dUIsV0FDQW9tQyxFQUFBaWMsRUFBQXJaLFNBQUFxWixFQUFBclosUUFBQXgrQyxhQUNBLE9BQUF3dUIsR0FBQS9rQixTQUVBK3pCLElBQUFsOUIsU0FBQThXLE1BQ0FnM0IsR0FBQSw2SUFPQW5LLEVBQUE5dUIsV0FBQW5aLE9BQUEsR0FFQSxJQUFBNjdELEVBQUF4a0QsVUFFQSxjQUFBdW9DLEdBQUFnRSxHQUFBcHhCLEVBQUEsYUFBQW90QixJQUFBMEIsRUFBQXVhLEVBQUEsT0FFQWpZLEdBQUFweEIsRUFBQSxvQkFBQW90QixJQUVBaWMsRUFBQTl3RCxhQUFBLFVBRUE4d0QsRUFBQTl3RCxhQUFBLFFBQ0FrOUIsR0FFQXpWLEVBQUErbEMsZUFBQW1ELEdBQUFHLEdBQ0FDLEdBQUF0NkIsRUFBQXE2QixHQUNBQSxLQUdBcjZCLEVBQUEvbkIsWUFBQXd1QixHQUNBekcsR0FHQTRRLEdBQUEsNEJBQUF5ZCxHQVlBLFFBQUE2TCxJQUFBbDZCLEdBQ0EsR0FBQSxJQUFBQSxFQUFBbnFCLFVBQUFtcUIsRUFBQXVoQixnQkFDQSxNQUFBdGdDLEdBQUErZSxFQUFBOTJCLFlBWUEsUUFBQW94RCxJQUFBbGYsRUFBQUQsR0FJQSxJQUhBLEdBRUE3OUMsR0FBQTZMLEVBRkF3L0IsRUFBQXlTLEVBQUFseUMsV0FDQS9LLEVBQUF3cUMsRUFBQW5xQyxPQUVBTCxLQUNBYixFQUFBcXJDLEVBQUF4cUMsR0FBQWIsS0FDQTZMLEVBQUF3L0IsRUFBQXhxQyxHQUFBZ0wsTUFDQWd5QyxFQUFBNXhDLGFBQUFqTSxJQUFBaTlELEdBQUE1OEQsS0FBQUwsR0FFQSxVQUFBQSxJQUFBMmdELEVBQUE5MEMsS0FBQUEsRUFBQUEsRUFBQWdFLFNBQ0FoRSxFQUFBTyxNQUFBLE9BQUF3RCxRQUFBLFNBQUFrekMsR0FDQXZuQixFQUFBc2lCLEVBQUFpRixLQUhBakYsRUFBQS93QyxhQUFBOU0sRUFBQTZMLEdBb0JBLFFBQUFxeEQsSUFBQTVnQixFQUFBL2EsR0FDQSxHQUFBQSxFQUFBLENBS0EsSUFBQSxHQURBbUIsR0FBQTFpQyxFQURBdWlCLEVBQUErNUIsRUFBQTZnQixjQUFBbDZELE9BQUEySyxPQUFBLE1BRUEvTSxFQUFBLEVBQUFzQixFQUFBby9CLEVBQUEzVyxTQUFBMXBCLE9BQUFMLEVBQUFzQixFQUFBdEIsSUFDQTZoQyxFQUFBbkIsRUFBQTNXLFNBQUEvcEIsSUFFQWIsRUFBQTBpQyxFQUFBLzJCLGFBQUEsV0FDQTRXLEVBQUF2aUIsS0FBQXVpQixFQUFBdmlCLFFBQUFpRixLQUFBeTlCLEdBR0E2ZixFQUFBN2YsRUFBQSxTQUNBNFEsR0FBQSx1Q0FBQWdKLEVBQUEwRixRQUdBLEtBQUFoaUQsSUFBQXVpQixHQUNBQSxFQUFBdmlCLEdBQUFvOUQsR0FBQTc2QyxFQUFBdmlCLEdBQUF1aEMsRUFFQSxJQUFBQSxFQUFBZ2lCLGdCQUFBLENBQ0EsR0FBQWdCLEdBQUFoakIsRUFBQWxuQixVQUNBLElBQUEsSUFBQWtxQyxFQUFBcmpELFFBQUEsSUFBQXFqRCxFQUFBLEdBQUFoc0MsV0FBQWdzQyxFQUFBLEdBQUE3ekMsS0FBQWIsT0FDQSxNQUVBMFMsR0FBQSxRQUFBNjZDLEdBQUE3N0IsRUFBQWxuQixXQUFBa25CLEtBV0EsUUFBQTY3QixJQUFBN1ksRUFBQTcrQyxHQUNBLEdBQUF5akMsR0FBQTNqQyxTQUFBMlUsd0JBQ0FvcUMsR0FBQTVnQyxFQUFBNGdDLEVBQ0EsS0FBQSxHQUFBMWpELEdBQUEsRUFBQXNCLEVBQUFvaUQsRUFBQXJqRCxPQUFBTCxFQUFBc0IsRUFBQXRCLElBQUEsQ0FDQSxHQUFBc2hELEdBQUFvQyxFQUFBMWpELElBQ0F3aUQsR0FBQWxCLElBQUFBLEVBQUFsMkMsYUFBQSxTQUFBazJDLEVBQUFsMkMsYUFBQSxXQUNBdkcsRUFBQTBmLFlBQUErOEIsR0FDQUEsRUFBQTJPLEdBQUEzTyxHQUFBLElBRUFoWixFQUFBeHVCLFlBQUF3bkMsR0FFQSxNQUFBaFosR0FhQSxRQUFBazBCLElBQUE1NkIsR0E4S0EsUUFBQWpwQixNQXNCQSxRQUFBOGpELEdBQUF6VixFQUFBMFYsR0FDQSxHQUFBeFAsR0FBQSxHQUFBSSxJQUFBb1AsRUFBQTFWLEVBQUEsTUFDQTJHLE1BQUEsR0FFQSxPQUFBLFlBT0EsTUFOQVQsR0FBQVEsT0FDQVIsRUFBQXlQLFdBRUE5VyxHQUFBbitDLFFBQ0F3bEQsRUFBQS9GLFNBRUErRixFQUFBbGlELE9BeE1BNUksT0FBQXE0QyxlQUFBN1ksRUFBQXYvQixVQUFBLFNBQ0FpYSxJQUFBLFdBQ0EsTUFBQWxTLE1BQUFrUSxPQUVBMGIsSUFBQSxTQUFBNG1DLEdBQ0FBLElBQUF4eUQsS0FBQWtRLE9BQ0FsUSxLQUFBeXlELFNBQUFELE1BYUFoN0IsRUFBQXYvQixVQUFBNm1ELFdBQUEsV0FDQTkrQyxLQUFBMHlELGFBQ0ExeUQsS0FBQTJ5RCxZQUNBM3lELEtBQUE0eUQsZUFDQTV5RCxLQUFBNnlELFlBQ0E3eUQsS0FBQTh5RCxpQkFPQXQ3QixFQUFBdi9CLFVBQUF5NkQsV0FBQSxXQUNBLEdBQUFqcUMsR0FBQXpvQixLQUFBMitDLFNBQ0FsbkIsRUFBQWhQLEVBQUFnUCxHQUNBM2hCLEVBQUEyUyxFQUFBM1MsS0FDQUEsS0FBQTJoQixHQUNBNFEsR0FBQSw2RUFBQXJvQyxNQUdBeTNCLEVBQUFoUCxFQUFBZ1AsR0FBQXVmLEVBQUF2ZixHQUNBejNCLEtBQUEreUQsZUFBQXQ3QixHQUFBLElBQUFBLEVBQUFucUIsVUFBQXdJLEVBRUFnNEMsR0FBQTl0RCxLQUFBeTNCLEVBQUEzaEIsRUFBQTlWLEtBQUF5K0MsUUFBQSxNQU9Bam5CLEVBQUF2L0IsVUFBQTQ2RCxVQUFBLFdBQ0EsR0FBQUcsR0FBQWh6RCxLQUFBMitDLFNBQUFsNUMsS0FDQUEsRUFBQXpGLEtBQUFrUSxNQUFBOGlELEVBQUFBLE1BQ0EvNUMsR0FBQXhULEtBQ0FBLEtBQ0E0aUMsR0FBQSwwQ0FBQXJvQyxNQUVBLElBR0FwSyxHQUFBa3lDLEVBSEFoeUIsRUFBQTlWLEtBQUFncUQsT0FFQS9aLEVBQUFqNEMsT0FBQWk0QyxLQUFBeHFDLEVBR0EsS0FEQTdQLEVBQUFxNkMsRUFBQWg2QyxPQUNBTCxLQUNBa3lDLEVBQUFtSSxFQUFBcjZDLEdBS0FrZ0IsR0FBQWk3QixFQUFBajdCLEVBQUFneUIsR0FHQU8sR0FBQSxlQUFBUCxFQUFBLDRMQUFBOW5DLE1BRkFBLEtBQUFzeEMsT0FBQXhKLEVBTUF4OUIsSUFBQTdFLEVBQUF6RixPQVNBdzNCLEVBQUF2L0IsVUFBQXc2RCxTQUFBLFNBQUFELEdBQ0FBLEVBQUFBLEtBQ0EsSUFBQVMsR0FBQWp6RCxLQUFBa1EsS0FDQWxRLE1BQUFrUSxNQUFBc2lELENBQ0EsSUFBQXZpQixHQUFBbkksRUFBQWx5QyxDQUlBLEtBRkFxNkMsRUFBQWo0QyxPQUFBaTRDLEtBQUFnakIsR0FDQXI5RCxFQUFBcTZDLEVBQUFoNkMsT0FDQUwsS0FDQWt5QyxFQUFBbUksRUFBQXI2QyxHQUNBa3lDLElBQUEwcUIsSUFDQXh5RCxLQUFBeXhDLFNBQUEzSixFQU9BLEtBRkFtSSxFQUFBajRDLE9BQUFpNEMsS0FBQXVpQixHQUNBNThELEVBQUFxNkMsRUFBQWg2QyxPQUNBTCxLQUNBa3lDLEVBQUFtSSxFQUFBcjZDLEdBQ0FtN0MsRUFBQS93QyxLQUFBOG5DLElBRUE5bkMsS0FBQXN4QyxPQUFBeEosRUFHQW1yQixHQUFBaGlCLE9BQUFpaUIsU0FBQWx6RCxNQUNBc0ssR0FBQWtvRCxFQUFBeHlELE1BQ0FBLEtBQUF1eEMsV0FVQS9aLEVBQUF2L0IsVUFBQXE1QyxPQUFBLFNBQUF4SixHQUNBLElBQUErSixFQUFBL0osR0FBQSxDQUtBLEdBQUExN0IsR0FBQXBNLElBQ0FoSSxRQUFBcTRDLGVBQUFqa0MsRUFBQTA3QixHQUNBMEksY0FBQSxFQUNBd0MsWUFBQSxFQUNBOWdDLElBQUEsV0FDQSxNQUFBOUYsR0FBQThELE1BQUE0M0IsSUFFQWxjLElBQUEsU0FBQW9ELEdBQ0E1aUIsRUFBQThELE1BQUE0M0IsR0FBQTlZLE9BWUF3SSxFQUFBdi9CLFVBQUF3NUMsU0FBQSxTQUFBM0osR0FDQStKLEVBQUEvSixVQUNBOW5DLE1BQUE4bkMsSUFRQXRRLEVBQUF2L0IsVUFBQXM1QyxRQUFBLFdBQ0EsSUFBQSxHQUFBMzdDLEdBQUEsRUFBQXNCLEVBQUE4SSxLQUFBdzlDLFVBQUF2bkQsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUNBb0ssS0FBQXc5QyxVQUFBNW5ELEdBQUF1OUQsUUFBQSxJQVVBMzdCLEVBQUF2L0IsVUFBQTY2RCxjQUFBLFdBQ0EsR0FBQU0sR0FBQXB6RCxLQUFBMitDLFNBQUF5VSxRQUNBLElBQUFBLEVBQ0EsSUFBQSxHQUFBdHJCLEtBQUFzckIsR0FBQSxDQUNBLEdBQUFDLEdBQUFELEVBQUF0ckIsR0FDQWlMLEdBQ0FDLFlBQUEsRUFDQXhDLGNBQUEsRUFFQSxtQkFBQTZpQixJQUNBdGdCLEVBQUE3Z0MsSUFBQW1nRCxFQUFBZ0IsRUFBQXJ6RCxNQUNBK3lDLEVBQUFubkIsSUFBQXJkLElBRUF3a0MsRUFBQTdnQyxJQUFBbWhELEVBQUFuaEQsSUFBQW1oRCxFQUFBbGxELFNBQUEsRUFBQWtrRCxFQUFBZ0IsRUFBQW5oRCxJQUFBbFMsTUFBQTJHLEVBQUEwc0QsRUFBQW5oRCxJQUFBbFMsTUFBQXVPLEVBQ0F3a0MsRUFBQW5uQixJQUFBeW5DLEVBQUF6bkMsSUFBQWpsQixFQUFBMHNELEVBQUF6bkMsSUFBQTVyQixNQUFBdU8sR0FFQXZXLE9BQUFxNEMsZUFBQXJ3QyxLQUFBOG5DLEVBQUFpTCxLQTBCQXZiLEVBQUF2L0IsVUFBQTI2RCxhQUFBLFdBQ0EsR0FBQTE2QixHQUFBbDRCLEtBQUEyK0MsU0FBQXptQixPQUNBLElBQUFBLEVBQ0EsSUFBQSxHQUFBNFAsS0FBQTVQLEdBQ0FsNEIsS0FBQThuQyxHQUFBbmhDLEVBQUF1eEIsRUFBQTRQLEdBQUE5bkMsT0FTQXczQixFQUFBdi9CLFVBQUEwNkQsVUFBQSxXQUNBLEdBQUFXLEdBQUF0ekQsS0FBQTIrQyxTQUFBNFUsS0FDQSxJQUFBRCxFQUNBLElBQUEsR0FBQXhyQixLQUFBd3JCLEdBQ0E1VyxHQUFBMThDLEtBQUE4bkMsRUFBQXdyQixFQUFBeHJCLEtBUUEsUUFBQTByQixJQUFBaDhCLEdBdUJBLFFBQUFpOEIsR0FBQXBpQixFQUFBNVosR0FHQSxJQUFBLEdBREExaUMsR0FBQTZMLEVBQUFpaUIsRUFEQXVkLEVBQUEzSSxFQUFBOTJCLFdBRUEvSyxFQUFBLEVBQUFzQixFQUFBa3BDLEVBQUFucUMsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUNBYixFQUFBcXJDLEVBQUF4cUMsR0FBQWIsS0FDQTIrRCxHQUFBdCtELEtBQUFMLEtBQ0FBLEVBQUFBLEVBQUEyTyxRQUFBZ3dELEdBQUEsSUFJQTl5RCxFQUFBdy9CLEVBQUF4cUMsR0FBQWdMLE1BQ0FzaEQsR0FBQXRoRCxLQUNBQSxHQUFBLDRCQUVBaWlCLEdBQUF3dUIsRUFBQW9OLFFBQUFwTixFQUFBbU4sVUFBQXZJLE1BQUFyMUMsR0FBQSxHQUNBaWlCLEVBQUE4d0MsYUFBQSxFQUNBdGlCLEVBQUF1aUIsSUFBQTcrRCxFQUFBMk8sUUFBQWd3RCxJQUFBN3dDLElBYUEsUUFBQWd4QyxHQUFBeGlCLEVBQUFwMEMsRUFBQThMLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLEdBQUFTLEdBQUFzK0IsRUFBQWx5QyxFQUFBc0gsQ0FDQSxLQUFBNHFDLElBQUEvK0IsR0FFQSxHQURBUyxFQUFBVCxFQUFBKytCLEdBQ0Fqb0MsR0FBQTJKLEdBQ0EsSUFBQTVULEVBQUEsRUFBQXNILEVBQUFzTSxFQUFBdlQsT0FBQUwsRUFBQXNILEVBQUF0SCxJQUNBaytELEVBQUF6aUIsRUFBQXAwQyxFQUFBNnFDLEVBQUF0K0IsRUFBQTVULFFBR0FrK0QsR0FBQXppQixFQUFBcDBDLEVBQUE2cUMsRUFBQXQrQixJQWVBLFFBQUFzcUQsR0FBQXppQixFQUFBcDBDLEVBQUE2cUMsRUFBQWpsQixFQUFBNEYsR0FDQSxHQUFBcnVCLFNBQUF5b0IsRUFDQSxJQUFBLGFBQUF6b0IsRUFDQWkzQyxFQUFBcDBDLEdBQUE2cUMsRUFBQWpsQixFQUFBNEYsT0FDQSxJQUFBLFdBQUFydUIsRUFBQSxDQUNBLEdBQUE4OUIsR0FBQW1aLEVBQUFzTixTQUFBem1CLFFBQ0FqekIsRUFBQWl6QixHQUFBQSxFQUFBclYsRUFDQTVkLEdBQ0Fvc0MsRUFBQXAwQyxHQUFBNnFDLEVBQUE3aUMsRUFBQXdqQixHQUVBNGYsR0FBQSxvQkFBQXhsQixFQUFBLG1DQUFBNWxCLEVBQUEsTUFBQTZxQyxFQUFBLEtBQUF1SixPQUVBeHVCLElBQUEsV0FBQXpvQixHQUNBMDVELEVBQUF6aUIsRUFBQXAwQyxFQUFBNnFDLEVBQUFqbEIsRUFBQUEsUUFBQUEsR0FpQkEsUUFBQWt4QyxLQUNBL3pELEtBQUFvK0MsY0FDQXArQyxLQUFBbytDLGFBQUEsRUFDQXArQyxLQUFBcTlDLFVBQUExNEMsUUFBQXF2RCxJQVVBLFFBQUFBLEdBQUE5YixJQUNBQSxFQUFBa0csYUFBQW5ILEVBQUFpQixFQUFBaUYsTUFDQWpGLEVBQUEyRyxVQUFBLFlBUUEsUUFBQW9WLEtBQ0FqMEQsS0FBQW8rQyxjQUNBcCtDLEtBQUFvK0MsYUFBQSxFQUNBcCtDLEtBQUFxOUMsVUFBQTE0QyxRQUFBdXZELElBVUEsUUFBQUEsR0FBQWhjLEdBQ0FBLEVBQUFrRyxjQUFBbkgsRUFBQWlCLEVBQUFpRixNQUNBakYsRUFBQTJHLFVBQUEsWUExSUFybkIsRUFBQXYvQixVQUFBOG1ELFlBQUEsV0FDQSxHQUFBdDJCLEdBQUF6b0IsS0FBQTIrQyxRQUNBbDJCLEdBQUFpa0MsY0FDQStHLEVBQUF6ekQsS0FBQXlvQixFQUFBZ1AsSUFFQW84QixFQUFBN3pELEtBQUEsTUFBQXlvQixFQUFBcFksUUFDQXdqRCxFQUFBN3pELEtBQUEsU0FBQXlvQixFQUFBMHJDLFFBcUZBMzhCLEVBQUF2L0IsVUFBQW04RCxjQUFBLFdBQ0FwMEQsS0FBQTR6RCxJQUFBLGdCQUFBRyxHQUNBL3pELEtBQUE0ekQsSUFBQSxnQkFBQUssSUF1REF6OEIsRUFBQXYvQixVQUFBNG1ELFVBQUEsU0FBQXdWLEdBQ0FyMEQsS0FBQXMwRCxNQUFBLFlBQUFELEVBQ0EsSUFBQTdxRCxHQUFBeEosS0FBQTIrQyxTQUFBMFYsRUFDQSxJQUFBN3FELEVBQ0EsSUFBQSxHQUFBNVQsR0FBQSxFQUFBc0gsRUFBQXNNLEVBQUF2VCxPQUFBTCxFQUFBc0gsRUFBQXRILElBQ0E0VCxFQUFBNVQsR0FBQXVDLEtBQUE2SCxLQUdBQSxNQUFBczBELE1BQUEsUUFBQUQsSUFJQSxRQUFBRSxPQTRCQSxRQUFBQyxJQUFBbEgsRUFBQWpjLEVBQUE1WixFQUFBNXVCLEVBQUFrNUMsRUFBQTdqQixHQUNBbCtCLEtBQUFxeEMsR0FBQUEsRUFDQXJ4QyxLQUFBeTNCLEdBQUFBLEVBRUF6M0IsS0FBQXN0RCxXQUFBQSxFQUNBdHRELEtBQUFqTCxLQUFBdTRELEVBQUF2NEQsS0FDQWlMLEtBQUErMEMsV0FBQXVZLEVBQUF2WSxXQUNBLzBDLEtBQUErbkMsSUFBQXVsQixFQUFBdmxCLElBQ0EvbkMsS0FBQW13RCxVQUFBN0MsRUFBQTZDLFVBQ0Fud0QsS0FBQWtmLFFBQUFvdUMsRUFBQXB1QyxRQUNBbGYsS0FBQW93RCxRQUFBcHdELEtBQUFtd0QsV0FBQW53RCxLQUFBbXdELFVBQUFDLFFBRUFwd0QsS0FBQXkwRCxTQUFBLEVBQ0F6MEQsS0FBQTAwRCxRQUFBLEVBQ0ExMEQsS0FBQTIwRCxXQUFBLEtBRUEzMEQsS0FBQTQwRCxNQUFBL3JELEVBQ0E3SSxLQUFBeStDLE9BQUFzRCxFQUNBL2hELEtBQUEwK0MsTUFBQXhnQixFQUVBbCtCLEtBQUF5M0IsS0FDQXozQixLQUFBeTNCLEdBQUFvOUIsZ0JBQUE3MEQsS0FBQXkzQixHQUFBbzlCLG9CQUNBNzBELEtBQUF5M0IsR0FBQW85QixnQkFBQTc2RCxLQUFBZ0csT0F3UEEsUUFBQTgwRCxJQUFBdDlCLEdBT0FBLEVBQUF2L0IsVUFBQTJtRCxXQUFBLFNBQUFyMUMsR0FDQSxHQUFBMG1ELEdBQUFqd0QsS0FBQTIrQyxTQUFBb1csSUFDQSxJQUFBOUUsRUFBQSxDQUNBLEdBQUErRSxJQUFBaDFELEtBQUF5K0MsUUFBQXorQyxLQUFBdytDLFVBQUFsQixLQUNBL3pDLEdBQ0F5ckQsRUFBQS9FLEtBQUFqd0QsT0FDQWcxRCxFQUFBL0UsR0FBQSxNQUdBK0UsRUFBQS9FLEdBQUFqd0QsT0FpQkF3M0IsRUFBQXYvQixVQUFBZzlELFNBQUEsU0FBQXg5QixHQUNBLEdBQUFoUCxHQUFBem9CLEtBQUEyK0MsU0FPQW1DLEVBQUFycEIsQ0FLQSxJQUpBQSxFQUFBaTZCLEdBQUFqNkIsRUFBQWhQLEdBQ0F6b0IsS0FBQWsxRCxhQUFBejlCLEdBR0EsSUFBQUEsRUFBQW5xQixVQUFBLE9BQUE4cEMsRUFBQTNmLEVBQUEsU0FBQSxDQU1BLEdBQUF5MkIsR0FBQWx1RCxLQUFBdytDLFVBQUF4K0MsS0FBQXcrQyxTQUFBRyxTQUNBd1csRUFBQWxILEdBQUF4MkIsRUFBQWhQLEVBQUF5bEMsRUFHQStELElBQUFqeUQsS0FBQXlvQixFQUFBbXBDLFNBR0EsSUFBQXdELEdBQ0FDLEVBQUFyMUQsS0FBQWlMLFdBR0F3ZCxHQUFBNnNDLGtCQUNBRixFQUFBQyxFQUFBblAsT0FDQWtQLElBQ0FBLEVBQUFDLEVBQUFuUCxPQUFBOW1DLEdBQUFxWSxFQUFBaFAsSUFNQSxJQUFBOHNDLEdBQUFKLEVBQUFuMUQsS0FBQXkzQixFQUFBejNCLEtBQUF5K0MsUUFDQStXLEVBQUFKLEVBQUFBLEVBQUFwMUQsS0FBQXkzQixHQUFBclksR0FBQXFZLEVBQUFoUCxHQUFBem9CLEtBQUF5M0IsRUFJQXozQixNQUFBdStDLFVBQUEsV0FDQWdYLElBR0FDLEdBQUEsSUFJQS9zQyxFQUFBL2tCLFNBQ0FBLEVBQUFvOUMsRUFBQXJwQixHQUdBejNCLEtBQUE4MkMsYUFBQSxFQUNBOTJDLEtBQUE2K0MsVUFBQSxjQVVBcm5CLEVBQUF2L0IsVUFBQWk5RCxhQUFBLFNBQUF6OUIsR0FDQTRnQixHQUFBNWdCLElBQ0F6M0IsS0FBQTg5QyxhQUFBLEVBQ0E5OUMsS0FBQW05QyxJQUFBbjlDLEtBQUFnK0MsZUFBQXZtQixFQUFBaG9CLFdBQ0F6UCxLQUFBaStDLGFBQUF4bUIsRUFBQW5hLFVBRUEsSUFBQXRkLEtBQUFnK0MsZUFBQTF3QyxXQUNBdE4sS0FBQWcrQyxlQUFBdjRDLEtBQUF6RixLQUFBaStDLGFBQUF4NEMsS0FBQSxJQUVBekYsS0FBQSs5QyxVQUFBdG1CLEdBRUF6M0IsS0FBQW05QyxJQUFBMWxCLEVBRUF6M0IsS0FBQW05QyxJQUFBcUssUUFBQXhuRCxLQUNBQSxLQUFBNitDLFVBQUEsa0JBYUFybkIsRUFBQXYvQixVQUFBbXlELFNBQUEsU0FBQWtELEVBQUFwVyxFQUFBcnVDLEVBQUFrNUMsRUFBQTdqQixHQUNBbCtCLEtBQUF5OUMsWUFBQXpqRCxLQUFBLEdBQUF3NkQsSUFBQWxILEVBQUF0dEQsS0FBQWszQyxFQUFBcnVDLEVBQUFrNUMsRUFBQTdqQixLQVlBMUcsRUFBQXYvQixVQUFBdzlELFNBQUEsU0FBQWxzRCxFQUFBbXNELEdBQ0EsR0FBQTExRCxLQUFBcStDLGtCQUlBLFlBSEFxWCxHQUNBMTFELEtBQUEyMUQsV0FLQSxJQUFBQyxHQUNBQyxFQUVBenBELEVBQUFwTSxLQUtBODFELEVBQUEsWUFDQUYsR0FBQUMsR0FBQUgsR0FDQXRwRCxFQUFBdXBELFdBS0Fwc0QsSUFBQXZKLEtBQUFtOUMsTUFDQTBZLEdBQUEsRUFDQTcxRCxLQUFBNnRELFFBQUEsV0FDQWdJLEdBQUEsRUFDQUMsT0FJQTkxRCxLQUFBNitDLFVBQUEsaUJBQ0E3K0MsS0FBQXErQyxtQkFBQSxDQUNBLElBQUF6b0QsR0FHQTZFLEVBQUF1RixLQUFBKzJDLE9BUUEsS0FQQXQ4QyxJQUFBQSxFQUFBNGpELG9CQUNBNWpELEVBQUE0aUQsVUFBQXdRLFFBQUE3dEQsTUFFQUEsS0FBQTQrQyxZQUFBLElBR0FocEQsRUFBQW9LLEtBQUFxOUMsVUFBQXBuRCxPQUNBTCxLQUNBb0ssS0FBQXE5QyxVQUFBem5ELEdBQUFtZ0UsVUFZQSxLQVRBLzFELEtBQUEreUQsZ0JBQ0EveUQsS0FBQSt5RCxpQkFJQS95RCxLQUFBdStDLFdBQ0F2K0MsS0FBQXUrQyxZQUVBM29ELEVBQUFvSyxLQUFBdzlDLFVBQUF2bkQsT0FDQUwsS0FDQW9LLEtBQUF3OUMsVUFBQTVuRCxHQUFBMnRCLFVBR0F2akIsTUFBQW05QyxNQUNBbjlDLEtBQUFtOUMsSUFBQXFLLFFBQUEsTUFHQW9PLEdBQUEsRUFDQUUsS0FTQXQrQixFQUFBdi9CLFVBQUEwOUQsU0FBQSxXQUNBMzFELEtBQUFrK0MsZUFNQWwrQyxLQUFBMCtDLE9BQ0ExK0MsS0FBQTArQyxNQUFBLytCLFNBQUFrdUMsUUFBQTd0RCxNQUlBQSxLQUFBa1EsT0FBQWxRLEtBQUFrUSxNQUFBK2dDLFFBQ0FqeEMsS0FBQWtRLE1BQUErZ0MsT0FBQWlpQixTQUFBbHpELE1BVUFBLEtBQUFtOUMsSUFBQW45QyxLQUFBKzJDLFFBQUEvMkMsS0FBQW85QyxNQUFBcDlDLEtBQUFxOUMsVUFBQXI5QyxLQUFBdzlDLFVBQUF4OUMsS0FBQXcrQyxTQUFBeCtDLEtBQUF5K0MsT0FBQXorQyxLQUFBeTlDLFlBQUEsS0FFQXo5QyxLQUFBaytDLGNBQUEsRUFDQWwrQyxLQUFBNitDLFVBQUEsYUFFQTcrQyxLQUFBZzJELFNBSUEsUUFBQUMsSUFBQXorQixHQWNBQSxFQUFBdi9CLFVBQUFpK0QsY0FBQSxTQUFBdDFELEVBQUF1MUQsRUFBQWozQyxFQUFBN1YsR0FDQSxHQUFBbUUsR0FBQStLLEVBQUE2NkIsRUFBQXJMLEVBQUFuUyxFQUFBaGdDLEVBQUFzQixFQUFBZ0csRUFBQWxDLENBQ0EsS0FBQXBGLEVBQUEsRUFBQXNCLEVBQUFnb0IsRUFBQWpwQixPQUFBTCxFQUFBc0IsRUFBQXRCLElBR0EsR0FGQTRYLEVBQUEwUixFQUFBN1YsRUFBQW5TLEVBQUF0QixFQUFBLEVBQUFBLEdBQ0EyaUIsRUFBQXNoQyxHQUFBNzVDLEtBQUEyK0MsU0FBQSxVQUFBbnhDLEVBQUF6WSxNQUFBLEdBQ0F3akIsSUFDQUEsRUFBQWxQLEVBQUFrUCxFQUFBbFAsTUFBQWtQLEVBQUF4USxNQUFBd1EsRUFDQSxrQkFBQUEsSUFBQSxDQUdBLEdBRkE2NkIsRUFBQS9wQyxHQUFBekksRUFBQXUxRCxJQUFBdjFELEdBQ0FnMUIsRUFBQXZzQixFQUFBLEVBQUEsRUFDQW1FLEVBQUE0bEMsS0FDQSxJQUFBbDJDLEVBQUEsRUFBQWxDLEVBQUF3UyxFQUFBNGxDLEtBQUFuOUMsT0FBQWlILEVBQUFsQyxFQUFBa0MsSUFDQTZxQyxFQUFBdjZCLEVBQUE0bEMsS0FBQWwyQyxHQUNBazJDLEVBQUFsMkMsRUFBQTA0QixHQUFBbVMsRUFBQXNNLFFBQUFyMEMsS0FBQW1xRCxLQUFBcGlCLEVBQUFubkMsT0FBQW1uQyxFQUFBbm5DLEtBR0FBLEdBQUEyWCxFQUFBMVQsTUFBQTdFLEtBQUFvekMsR0FFQSxNQUFBeHlDLElBY0E0MkIsRUFBQXYvQixVQUFBbStELGtCQUFBLFNBQUF4MUQsRUFBQWtPLEdBQ0EsR0FBQStoQyxFQU9BLElBTEFBLEVBREEsa0JBQUFqd0MsR0FDQUEsRUFFQWk1QyxHQUFBNzVDLEtBQUEyK0MsU0FBQSxhQUFBLzlDLEdBQUEsR0FPQSxHQUFBaXdDLEVBQUFwb0IsUUEwQkEzWixFQUFBK2hDLE9BekJBLElBQUFBLEVBQUF3bEIsU0FFQXZuRCxFQUFBK2hDLEVBQUF3bEIsY0FDQSxJQUFBeGxCLEVBQUF5bEIsVUFFQXpsQixFQUFBMGxCLGlCQUFBdjhELEtBQUE4VSxPQUNBLENBQ0EraEMsRUFBQXlsQixXQUFBLENBQ0EsSUFBQUUsR0FBQTNsQixFQUFBMGxCLGtCQUFBem5ELEVBQ0EraEMsR0FBQTE0QyxLQUFBNkgsS0FBQSxTQUFBbkgsR0FDQW9nQixFQUFBcGdCLEtBQ0FBLEVBQUEyK0IsRUFBQS8wQixPQUFBNUosSUFHQWc0QyxFQUFBd2xCLFNBQUF4OUQsQ0FFQSxLQUFBLEdBQUFqRCxHQUFBLEVBQUFzQixFQUFBcy9ELEVBQUF2Z0UsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUNBNGdFLEVBQUE1Z0UsR0FBQWlELElBRUEsU0FBQWtSLEdBQ0FzK0IsR0FBQSxxQ0FBQSxnQkFBQXpuQyxHQUFBLEtBQUFBLEVBQUEsSUFBQSxNQUFBbUosRUFBQSxhQUFBQSxFQUFBLFNBWUEsUUFBQTBzRCxJQUFBai9CLEdBeUtBLFFBQUFrL0IsR0FBQTVsQixHQUNBLE1BQUE3M0MsTUFBQStNLE1BQUEvTSxLQUFBQyxVQUFBNDNDLElBaktBdFosRUFBQXYvQixVQUFBa3lELEtBQUEsU0FBQXhZLEVBQUFnbEIsR0FDQSxHQUFBOTlELEdBQUErbkQsR0FBQWpQLEVBQ0EsSUFBQTk0QyxFQUFBLENBQ0EsR0FBQTg5RCxFQUFBLENBQ0EsR0FBQXZxRCxHQUFBcE0sSUFDQSxPQUFBLFlBQ0FvTSxFQUFBd3FELFdBQUFsK0MsRUFBQTlVLFVBQ0EsSUFBQWdnQixHQUFBL3FCLEVBQUFxWixJQUFBL1osS0FBQWlVLEVBQUFBLEVBRUEsT0FEQUEsR0FBQXdxRCxXQUFBLEtBQ0FoekMsR0FHQSxJQUNBLE1BQUEvcUIsR0FBQXFaLElBQUEvWixLQUFBNkgsS0FBQUEsTUFDQSxNQUFBMUssT0FjQWtpQyxFQUFBdi9CLFVBQUErb0QsS0FBQSxTQUFBclAsRUFBQTNpQixHQUNBLEdBQUFuMkIsR0FBQStuRCxHQUFBalAsR0FBQSxFQUNBOTRDLElBQUFBLEVBQUEreUIsS0FDQS95QixFQUFBK3lCLElBQUF6ekIsS0FBQTZILEtBQUFBLEtBQUFndkIsSUFVQXdJLEVBQUF2L0IsVUFBQTQrRCxRQUFBLFNBQUEvdUIsR0FDQTBKLEVBQUF4eEMsS0FBQWtRLE1BQUE0M0IsSUFlQXRRLEVBQUF2L0IsVUFBQTYrRCxPQUFBLFNBQUEzVCxFQUFBcjBDLEVBQUEyWjtBQUNBLEdBQ0F1cEIsR0FEQVgsRUFBQXJ4QyxJQUVBLGlCQUFBbWpELEtBQ0FuUixFQUFBdUMsRUFBQTRPLEdBQ0FBLEVBQUFuUixFQUFBK0MsV0FFQSxJQUFBK04sR0FBQSxHQUFBSSxJQUFBN1IsRUFBQThSLEVBQUFyMEMsR0FDQWlvRCxLQUFBdHVDLEdBQUFBLEVBQUFzdUMsS0FDQUMsS0FBQXZ1QyxHQUFBQSxFQUFBdXVDLEtBQ0E5M0MsUUFBQTh5QixHQUFBQSxFQUFBOXlCLFFBQ0ErakMsTUFBQXg2QixHQUFBQSxFQUFBdzZCLFFBQUEsR0FLQSxPQUhBeDZCLElBQUFBLEVBQUF3dUMsV0FDQW5vRCxFQUFBM1csS0FBQWs1QyxFQUFBeVIsRUFBQWxpRCxPQUVBLFdBQ0FraUQsRUFBQXYvQixhQVlBaVUsRUFBQXYvQixVQUFBZytDLE1BQUEsU0FBQXRsQyxFQUFBZ21ELEdBRUEsR0FBQU8sR0FBQTloRSxLQUFBdWIsR0FBQSxDQUNBLEdBQUFwWixHQUFBZzlDLEVBQUE1akMsR0FJQXFlLEVBQUFodkIsS0FBQW1xRCxLQUFBNXlELEVBQUF3OUMsV0FBQTRoQixFQUNBLE9BQUFwL0QsR0FBQTJuQixRQUFBbGYsS0FBQWsyRCxjQUFBbG5DLEVBQUEsS0FBQXozQixFQUFBMm5CLFNBQUE4UCxFQUdBLE1BQUFodkIsTUFBQW1xRCxLQUFBeDVDLEVBQUFnbUQsSUFXQW4vQixFQUFBdi9CLFVBQUFrL0QsYUFBQSxTQUFBeG1ELEdBQ0EsR0FBQXNqQyxHQUFBeUIsRUFBQS9rQyxHQUNBMGdDLEVBQUFyeEMsSUFDQSxPQUFBaTBDLEdBQ0EsSUFBQUEsRUFBQWgrQyxPQUNBbzdDLEVBQUE0RSxNQUFBaEMsRUFBQSxHQUFBcnpDLE9BQUEsR0FFQXF6QyxFQUFBeGxDLElBQUEsU0FBQXhFLEdBQ0EsTUFBQUEsR0FBQTRyQyxJQUFBeEUsRUFBQTRFLE1BQUFoc0MsRUFBQXJKLE9BQUFxSixFQUFBckosUUFDQStILEtBQUEsSUFHQWdJLEdBWUE2bUIsRUFBQXYvQixVQUFBbS9ELEtBQUEsU0FBQWhZLEdBQ0EsR0FBQTM1QyxHQUFBMjVDLEVBQUF1QixHQUFBM2dELEtBQUFrUSxNQUFBa3ZDLEdBQUFwL0MsS0FBQWtRLEtBS0EsSUFKQXpLLElBQ0FBLEVBQUFpeEQsRUFBQWp4RCxLQUdBMjVDLEVBQUEsQ0FDQSxHQUFBdFgsRUFDQSxLQUFBQSxJQUFBOW5DLE1BQUEyK0MsU0FBQXlVLFNBQ0EzdEQsRUFBQXFpQyxHQUFBNHVCLEVBQUExMkQsS0FBQThuQyxHQUVBLElBQUE5bkMsS0FBQWdxRCxPQUNBLElBQUFsaUIsSUFBQTluQyxNQUFBZ3FELE9BQ0F2a0QsRUFBQXFpQyxHQUFBNHVCLEVBQUExMkQsS0FBQThuQyxJQUlBaEgsUUFBQXUyQixJQUFBNXhELElBZ0JBLFFBQUE2eEQsSUFBQTkvQixHQWtIQSxRQUFBKy9CLEdBQUFsbUIsRUFBQS96QyxFQUFBd1IsRUFBQTgzQyxFQUFBNFEsRUFBQUMsR0FDQW42RCxFQUFBMDVDLEVBQUExNUMsRUFDQSxJQUFBbzZELElBQUF6Z0IsRUFBQTM1QyxHQUNBbTVDLEVBQUFtUSxLQUFBLEdBQUE4USxFQUFBRixFQUFBQyxFQUNBRSxHQUFBRCxJQUFBcm1CLEVBQUErTSxjQUFBbkgsRUFBQTVGLEVBQUE4TCxJQVlBLE9BWEE5TCxHQUFBeU0sYUFDQTVFLEdBQUE3SCxFQUFBMk0sZUFBQTNNLEVBQUE0TSxhQUFBLFNBQUEvRyxHQUNBVCxFQUFBUyxFQUFBNTVDLEVBQUErekMsS0FFQXZpQyxHQUFBQSxLQUVBMm5DLEVBQUFwRixFQUFBOEwsSUFBQTcvQyxFQUFBK3pDLEVBQUF2aUMsR0FFQTZvRCxHQUNBdG1CLEVBQUF3TixVQUFBLFlBRUF4TixFQVNBLFFBQUEyRixHQUFBdmYsR0FDQSxNQUFBLGdCQUFBQSxHQUFBbDlCLFNBQUE2ckMsY0FBQTNPLEdBQUFBLEVBWUEsUUFBQXRQLEdBQUFzUCxFQUFBbjZCLEVBQUErekMsRUFBQXZpQyxHQUNBeFIsRUFBQW9TLFlBQUErbkIsR0FDQTNvQixHQUFBQSxJQVlBLFFBQUE4b0QsR0FBQW5nQyxFQUFBbjZCLEVBQUErekMsRUFBQXZpQyxHQUNBeVosRUFBQWtQLEVBQUFuNkIsR0FDQXdSLEdBQUFBLElBV0EsUUFBQStvRCxHQUFBcGdDLEVBQUE0WixFQUFBdmlDLEdBQ0F2RixFQUFBa3VCLEdBQ0Ezb0IsR0FBQUEsSUE1S0Ewb0IsRUFBQXYvQixVQUFBNi9ELFVBQUEsU0FBQXYvQyxHQUNBbk8sR0FBQW1PLEVBQUF2WSxPQVdBdzNCLEVBQUF2L0IsVUFBQTgvRCxVQUFBLFNBQUF6NkQsRUFBQXdSLEVBQUE4M0MsR0FDQSxNQUFBMlEsR0FBQXYzRCxLQUFBMUMsRUFBQXdSLEVBQUE4M0MsRUFBQXorQixFQUFBaXVCLElBV0E1ZSxFQUFBdi9CLFVBQUErL0QsV0FBQSxTQUFBMTZELEVBQUF3UixFQUFBODNDLEdBT0EsTUFOQXRwRCxHQUFBMDVDLEVBQUExNUMsR0FDQUEsRUFBQWc3QyxnQkFDQXQ0QyxLQUFBaTRELFFBQUEzNkQsRUFBQW1TLFdBQUFYLEVBQUE4M0MsR0FFQTVtRCxLQUFBKzNELFVBQUF6NkQsRUFBQXdSLEVBQUE4M0MsR0FFQTVtRCxNQVdBdzNCLEVBQUF2L0IsVUFBQWdnRSxRQUFBLFNBQUEzNkQsRUFBQXdSLEVBQUE4M0MsR0FDQSxNQUFBMlEsR0FBQXYzRCxLQUFBMUMsRUFBQXdSLEVBQUE4M0MsRUFBQWdSLEVBQUF0aEIsSUFXQTllLEVBQUF2L0IsVUFBQWlnRSxPQUFBLFNBQUE1NkQsRUFBQXdSLEVBQUE4M0MsR0FPQSxNQU5BdHBELEdBQUEwNUMsRUFBQTE1QyxHQUNBQSxFQUFBa2QsWUFDQXhhLEtBQUFpNEQsUUFBQTM2RCxFQUFBa2QsWUFBQTFMLEVBQUE4M0MsR0FFQTVtRCxLQUFBKzNELFVBQUF6NkQsRUFBQXNULFdBQUE5QixFQUFBODNDLEdBRUE1bUQsTUFVQXczQixFQUFBdi9CLFVBQUE0MUQsUUFBQSxTQUFBLytDLEVBQUE4M0MsR0FDQSxJQUFBNW1ELEtBQUFtOUMsSUFBQXZzQyxXQUNBLE1BQUE5QixJQUFBQSxHQUVBLElBQUFxcEQsR0FBQW40RCxLQUFBbytDLGFBQUFuSCxFQUFBajNDLEtBQUFtOUMsSUFHQWdiLEtBQUF2UixHQUFBLEVBQ0EsSUFBQXg2QyxHQUFBcE0sS0FDQW80RCxFQUFBLFdBQ0FELEdBQUEvckQsRUFBQXl5QyxVQUFBLFlBQ0EvdkMsR0FBQUEsSUFFQSxJQUFBOU8sS0FBQTg5QyxZQUNBM0UsR0FBQW41QyxLQUFBZytDLGVBQUFoK0MsS0FBQWkrQyxhQUFBaitDLEtBQUFBLEtBQUErOUMsVUFBQXFhLE9BQ0EsQ0FDQSxHQUFBM2hCLEdBQUFtUSxLQUFBLEVBQUFpUixFQUFBdGhCLENBQ0FFLEdBQUF6MkMsS0FBQW05QyxJQUFBbjlDLEtBQUFvNEQsR0FFQSxNQUFBcDRELE9Bc0ZBLFFBQUFxNEQsSUFBQTdnQyxHQTJMQSxRQUFBOGdDLEdBQUFqbkIsRUFBQXhqQyxFQUFBMHFELEdBQ0EsR0FBQTk5RCxHQUFBNDJDLEVBQUEwRixPQUdBLElBQUF0OEMsR0FBQTg5RCxJQUFBQyxFQUFBcGpFLEtBQUF5WSxHQUNBLEtBQUFwVCxHQUNBQSxFQUFBb2pELGFBQUFod0MsSUFBQXBULEVBQUFvakQsYUFBQWh3QyxJQUFBLEdBQUEwcUQsRUFDQTk5RCxFQUFBQSxFQUFBczhDLFFBMUxBdmYsRUFBQXYvQixVQUFBMjdELElBQUEsU0FBQS9sRCxFQUFBMEssR0FHQSxPQUZBdlksS0FBQTQ5QyxRQUFBL3ZDLEtBQUE3TixLQUFBNDlDLFFBQUEvdkMsUUFBQTdULEtBQUF1ZSxHQUNBKy9DLEVBQUF0NEQsS0FBQTZOLEVBQUEsR0FDQTdOLE1BV0F3M0IsRUFBQXYvQixVQUFBd2dFLE1BQUEsU0FBQTVxRCxFQUFBMEssR0FHQSxRQUFBMk8sS0FDQTlhLEVBQUE0cEQsS0FBQW5vRCxFQUFBcVosR0FDQTNPLEVBQUExVCxNQUFBN0UsS0FBQTRELFdBSkEsR0FBQXdJLEdBQUFwTSxJQVFBLE9BRkFrbkIsR0FBQTNPLEdBQUFBLEVBQ0F2WSxLQUFBNHpELElBQUEvbEQsRUFBQXFaLEdBQ0FsbkIsTUFXQXczQixFQUFBdi9CLFVBQUErOUQsS0FBQSxTQUFBbm9ELEVBQUEwSyxHQUNBLEdBQUFpK0MsRUFFQSxLQUFBNXlELFVBQUEzTixPQUFBLENBQ0EsR0FBQStKLEtBQUErMkMsUUFDQSxJQUFBbHBDLElBQUE3TixNQUFBNDlDLFFBQ0E0WSxFQUFBeDJELEtBQUE0OUMsUUFBQS92QyxHQUNBMm9ELEdBQ0E4QixFQUFBdDRELEtBQUE2TixHQUFBMm9ELEVBQUF2Z0UsT0FLQSxPQURBK0osTUFBQTQ5QyxXQUNBNTlDLEtBSUEsR0FEQXcyRCxFQUFBeDJELEtBQUE0OUMsUUFBQS92QyxJQUNBMm9ELEVBQ0EsTUFBQXgyRCxLQUVBLElBQUEsSUFBQTRELFVBQUEzTixPQUdBLE1BRkFxaUUsR0FBQXQ0RCxLQUFBNk4sR0FBQTJvRCxFQUFBdmdFLFFBQ0ErSixLQUFBNDlDLFFBQUEvdkMsR0FBQSxLQUNBN04sSUFLQSxLQUZBLEdBQUE4TyxHQUNBbFosRUFBQTRnRSxFQUFBdmdFLE9BQ0FMLEtBRUEsR0FEQWtaLEVBQUEwbkQsRUFBQTVnRSxHQUNBa1osSUFBQXlKLEdBQUF6SixFQUFBeUosS0FBQUEsRUFBQSxDQUNBKy9DLEVBQUF0NEQsS0FBQTZOLEdBQUEsR0FDQTJvRCxFQUFBajJELE9BQUEzSyxFQUFBLEVBQ0EsT0FHQSxNQUFBb0ssT0FVQXczQixFQUFBdi9CLFVBQUFxOEQsTUFBQSxTQUFBem1ELEdBQ0EsR0FBQTZxRCxHQUFBLGdCQUFBN3FELEVBQ0FBLEdBQUE2cUQsRUFBQTdxRCxFQUFBQSxFQUFBOVksSUFDQSxJQUFBeWhFLEdBQUF4MkQsS0FBQTQ5QyxRQUFBL3ZDLEdBQ0E4cUQsRUFBQUQsSUFBQWxDLENBQ0EsSUFBQUEsRUFBQSxDQUNBQSxFQUFBQSxFQUFBdmdFLE9BQUEsRUFBQXlpQixFQUFBODlDLEdBQUFBLENBS0EsSUFBQW9DLEdBQUFGLEdBQUFsQyxFQUFBbEYsS0FBQSxTQUFBeGlELEdBQ0EsTUFBQUEsR0FBQTZrRCxhQUVBaUYsS0FDQUQsR0FBQSxFQUdBLEtBQUEsR0FEQXZsQixHQUFBMTZCLEVBQUE5VSxVQUFBLEdBQ0FoTyxFQUFBLEVBQUFzQixFQUFBcy9ELEVBQUF2Z0UsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUFBLENBQ0EsR0FBQWtaLEdBQUEwbkQsRUFBQTVnRSxHQUNBaUQsRUFBQWlXLEVBQUFqSyxNQUFBN0UsS0FBQW96QyxFQUNBdjZDLE1BQUEsR0FBQSsvRCxJQUFBOXBELEVBQUE2a0QsY0FDQWdGLEdBQUEsSUFJQSxNQUFBQSxJQVVBbmhDLEVBQUF2L0IsVUFBQTRnRSxXQUFBLFNBQUFockQsR0FDQSxHQUFBNnFELEdBQUEsZ0JBQUE3cUQsRUFJQSxJQUhBQSxFQUFBNnFELEVBQUE3cUQsRUFBQUEsRUFBQTlZLEtBR0FpTCxLQUFBNjlDLGFBQUFod0MsR0FBQSxDQUNBLEdBQUE4UixHQUFBM2YsS0FBQXE5QyxVQUNBakssRUFBQTE2QixFQUFBOVUsVUFDQTgwRCxLQUdBdGxCLEVBQUEsSUFDQXIrQyxLQUFBOFksRUFDQTdELE9BQUFoSyxNQUdBLEtBQUEsR0FBQXBLLEdBQUEsRUFBQXNCLEVBQUF5b0IsRUFBQTFwQixPQUFBTCxFQUFBc0IsRUFBQXRCLElBQUEsQ0FDQSxHQUFBc2lELEdBQUF2NEIsRUFBQS9wQixHQUNBK2lFLEVBQUF6Z0IsRUFBQW9jLE1BQUF6dkQsTUFBQXF6QyxFQUFBOUUsRUFDQXVsQixJQUNBemdCLEVBQUEyZ0IsV0FBQWgwRCxNQUFBcXpDLEVBQUE5RSxHQUdBLE1BQUFwekMsUUFVQXczQixFQUFBdi9CLFVBQUE2Z0UsVUFBQSxTQUFBanJELEdBQ0EsR0FBQThxRCxHQUFBMzRELEtBQUFzMEQsTUFBQXp2RCxNQUFBN0UsS0FBQTRELFVBQ0EsSUFBQSswRCxFQUFBLENBQ0EsR0FBQWwrRCxHQUFBdUYsS0FBQSsyQyxRQUNBM0QsRUFBQTE2QixFQUFBOVUsVUFPQSxLQUpBd3ZDLEVBQUEsSUFDQXIrQyxLQUFBOFksRUFDQTdELE9BQUFoSyxNQUVBdkYsR0FDQWsrRCxFQUFBbCtELEVBQUE2NUQsTUFBQXp2RCxNQUFBcEssRUFBQTI0QyxHQUNBMzRDLEVBQUFrK0QsRUFBQWwrRCxFQUFBczhDLFFBQUEsSUFFQSxPQUFBLzJDLE9BYUEsSUFBQXc0RCxHQUFBLFNBY0EsUUFBQU8sSUFBQXZoQyxHQW1DQSxRQUFBMXBCLEtBQ0E5TixLQUFBbytDLGFBQUEsRUFDQXArQyxLQUFBbStDLFVBQUEsRUFDQW4rQyxLQUFBNitDLFVBQUEsU0EzQkFybkIsRUFBQXYvQixVQUFBK21ELE9BQUEsU0FBQXZuQixHQUNBLE1BQUF6M0IsTUFBQTgyQyxnQkFDQXpPLElBQUEsdUNBQUFyb0MsT0FHQXkzQixFQUFBdWYsRUFBQXZmLEdBQ0FBLElBQ0FBLEVBQUFsOUIsU0FBQW9KLGNBQUEsUUFFQTNELEtBQUFpMUQsU0FBQXg5QixHQUNBejNCLEtBQUFvMEQsZ0JBQ0FuZCxFQUFBajNDLEtBQUFtOUMsTUFDQW45QyxLQUFBNitDLFVBQUEsWUFDQS93QyxFQUFBM1YsS0FBQTZILE9BRUFBLEtBQUF5NEQsTUFBQSxnQkFBQTNxRCxHQUVBOU4sT0FxQkF3M0IsRUFBQXYvQixVQUFBODlELFNBQUEsU0FBQXhzRCxFQUFBbXNELEdBQ0ExMUQsS0FBQXkxRCxTQUFBbHNELEVBQUFtc0QsSUFjQWwrQixFQUFBdi9CLFVBQUErZ0UsU0FBQSxTQUFBdmhDLEVBQUE1dUIsRUFBQWs1QyxFQUFBN2pCLEdBQ0EsTUFBQTllLElBQUFxWSxFQUFBejNCLEtBQUEyK0MsVUFBQSxHQUFBMytDLEtBQUF5M0IsRUFBQTV1QixFQUFBazVDLEVBQUE3akIsSUFrQkEsUUFBQTFHLElBQUEvTyxHQUNBem9CLEtBQUFrOUMsTUFBQXowQixHQW9IQSxRQUFBd3dDLElBQUExbEIsRUFBQTU5QyxFQUFBaWdDLEdBR0EsTUFGQUEsR0FBQUEsRUFBQW45QixTQUFBbTlCLEVBQUEsSUFBQSxFQUNBamdDLEVBQUFvOEMsRUFBQXA4QyxHQUNBLGdCQUFBQSxHQUFBNDlDLEVBQUFsNkMsTUFBQXU4QixFQUFBQSxFQUFBamdDLEdBQUE0OUMsRUFXQSxRQUFBMmxCLElBQUEzbEIsRUFBQXpxQyxFQUFBcXdELEdBRUEsR0FEQTVsQixFQUFBNmxCLEdBQUE3bEIsR0FDQSxNQUFBenFDLEVBQ0EsTUFBQXlxQyxFQUVBLElBQUEsa0JBQUF6cUMsR0FDQSxNQUFBeXFDLEdBQUEvbEMsT0FBQTFFLEVBR0FBLElBQUEsR0FBQUEsR0FBQTdPLGFBUUEsS0FBQSxHQURBby9ELEdBQUF2eEIsRUFBQTlZLEVBQUE5eEIsRUFKQXZILEVBQUEsT0FBQXdqRSxFQUFBLEVBQUEsRUFFQWxwQixFQUFBcndDLE1BQUEzSCxVQUFBNEYsT0FBQWdILFNBQUE2VCxFQUFBOVUsVUFBQWpPLElBQ0FrRCxLQUVBakQsRUFBQSxFQUFBc0IsRUFBQXE4QyxFQUFBdDlDLE9BQUFMLEVBQUFzQixFQUFBdEIsSUFJQSxHQUhBeWpFLEVBQUE5bEIsRUFBQTM5QyxHQUNBbzVCLEVBQUFxcUMsR0FBQUEsRUFBQUMsUUFBQUQsRUFDQW44RCxFQUFBK3lDLEVBQUFoNkMsUUFFQSxLQUFBaUgsS0FFQSxHQURBNHFDLEVBQUFtSSxFQUFBL3lDLEdBQ0EsU0FBQTRxQyxHQUFBcnJCLEdBQUE0OEMsRUFBQUUsS0FBQXp3RCxJQUFBMlQsR0FBQWtrQyxHQUFBM3hCLEVBQUE4WSxHQUFBaC9CLEdBQUEsQ0FDQWpRLEVBQUFtQixLQUFBcS9ELEVBQ0EsWUFHQTU4QyxJQUFBNDhDLEVBQUF2d0QsSUFDQWpRLEVBQUFtQixLQUFBcS9ELEVBR0EsT0FBQXhnRSxHQVVBLFFBQUEyZ0UsSUFBQWptQixHQWlDQSxRQUFBa21CLEdBQUE1akUsRUFBQWlFLEVBQUE0L0QsR0FDQSxHQUFBQyxHQUFBQyxFQUFBRixFQVNBLE9BUkFDLEtBQ0EsU0FBQUEsSUFDQXoxRCxFQUFBck8sSUFBQSxVQUFBQSxLQUFBQSxFQUFBQSxFQUFBeWpFLFFBQ0FwMUQsRUFBQXBLLElBQUEsVUFBQUEsS0FBQUEsRUFBQUEsRUFBQXcvRCxTQUVBempFLEVBQUFxTyxFQUFBck8sR0FBQThxRCxHQUFBOXFELEVBQUE4akUsR0FBQTlqRSxFQUNBaUUsRUFBQW9LLEVBQUFwSyxHQUFBNm1ELEdBQUE3bUQsRUFBQTYvRCxHQUFBNy9ELEdBRUFqRSxJQUFBaUUsRUFBQSxFQUFBakUsRUFBQWlFLEVBQUF3eEIsR0FBQUEsRUExQ0EsR0FBQXV1QyxHQUFBLEtBQ0FELEVBQUExcEIsTUFDQXFELEdBQUE2bEIsR0FBQTdsQixFQUdBLElBQUFILEdBQUExNkIsRUFBQTlVLFVBQUEsR0FDQTBuQixFQUFBOG5CLEVBQUFBLEVBQUFuOUMsT0FBQSxFQUNBLGlCQUFBcTFCLElBQ0FBLEVBQUFBLEVBQUEsR0FBQSxFQUFBLEVBQ0E4bkIsRUFBQUEsRUFBQW45QyxPQUFBLEVBQUFtOUMsRUFBQS81QyxNQUFBLEdBQUEsR0FBQSs1QyxHQUVBOW5CLEVBQUEsQ0FJQSxJQUFBd3VDLEdBQUExbUIsRUFBQSxFQUNBLE9BQUEwbUIsSUFFQSxrQkFBQUEsR0FFQUQsRUFBQSxTQUFBaGtFLEVBQUFpRSxHQUNBLE1BQUFnZ0UsR0FBQWprRSxFQUFBaUUsR0FBQXd4QixJQUlBc3VDLEVBQUFoNkQsTUFBQTNILFVBQUE0RixPQUFBZ0gsU0FBQXV1QyxHQUNBeW1CLEVBQUEsU0FBQWhrRSxFQUFBaUUsRUFBQWxFLEdBRUEsTUFEQUEsR0FBQUEsR0FBQSxFQUNBQSxHQUFBZ2tFLEVBQUEzakUsT0FBQSxFQUFBd2pFLEVBQUE1akUsRUFBQWlFLEVBQUFsRSxHQUFBNmpFLEVBQUE1akUsRUFBQWlFLEVBQUFsRSxJQUFBaWtFLEVBQUFoa0UsRUFBQWlFLEVBQUFsRSxFQUFBLEtBa0JBMjlDLEVBQUFsNkMsUUFBQWdILEtBQUF3NUQsSUE3QkF0bUIsRUF1Q0EsUUFBQTkyQixJQUFBdVMsRUFBQWxtQixHQUNBLEdBQUFsVCxFQUNBLElBQUFxakIsRUFBQStWLEdBQUEsQ0FDQSxHQUFBaWhCLEdBQUFqNEMsT0FBQWk0QyxLQUFBamhCLEVBRUEsS0FEQXA1QixFQUFBcTZDLEVBQUFoNkMsT0FDQUwsS0FDQSxHQUFBNm1CLEdBQUF1UyxFQUFBaWhCLEVBQUFyNkMsSUFBQWtULEdBQ0EsT0FBQSxNQUdBLElBQUFqSixHQUFBbXZCLElBRUEsSUFEQXA1QixFQUFBbzVCLEVBQUEvNEIsT0FDQUwsS0FDQSxHQUFBNm1CLEdBQUF1UyxFQUFBcDVCLEdBQUFrVCxHQUNBLE9BQUEsTUFHQSxJQUFBLE1BQUFrbUIsRUFDQSxNQUFBQSxHQUFBeDFCLFdBQUFTLGNBQUFvQixRQUFBeU4sSUFBQSxFQXdIQSxRQUFBaXhELElBQUF2aUMsR0EyR0EsUUFBQXdpQyxHQUFBamxFLEdBRUEsTUFBQSxJQUFBc1gsVUFBQSxtQkFBQW1tQyxFQUFBejlDLEdBQUEsd0NBbkdBeWlDLEVBQUEvTyxTQUNBZ25DLFdBQUFBLEdBQ0F3SyxrQkFBQUEsR0FDQS82QyxRQUFBQSxHQUNBZzdDLGVBQ0F6ZixjQUNBMGYsWUFDQXoyRCxTQUFBLEdBT0E4ekIsRUFBQTRpQyxLQUFBQSxHQUNBNWlDLEVBQUEvN0IsT0FBQUEsR0FDQSs3QixFQUFBNUwsSUFBQUEsRUFDQTRMLEVBQUEsT0FBQWdhLEVBQ0FoYSxFQUFBcHRCLFNBQUFBLEdBTUFvdEIsRUFBQTZpQyxTQUFBQSxHQUNBN2lDLEVBQUF5dkIsZ0JBQUFBLEdBQ0F6dkIsRUFBQTA0QixtQkFBQUEsR0FDQTE0QixFQUFBOGlDLFNBQ0FsYixLQUFBQSxHQUNBenVDLEtBQUFBLEdBQ0FtMUMsU0FBQUEsR0FDQXlVLFVBQUFBLEdBQ0F4bEIsV0FBQUEsSUFTQXZkLEVBQUEwdkIsSUFBQSxDQUNBLElBQUFBLEdBQUEsQ0FRQTF2QixHQUFBLzBCLE9BQUEsU0FBQSszRCxHQUNBQSxFQUFBQSxLQUNBLElBQUFDLEdBQUF6NkQsS0FDQTA2RCxFQUFBLElBQUFELEVBQUF2VCxHQUNBLElBQUF3VCxHQUFBRixFQUFBRyxNQUNBLE1BQUFILEdBQUFHLEtBRUEsSUFBQTVsRSxHQUFBeWxFLEVBQUF6bEUsTUFBQTBsRSxFQUFBaHlDLFFBQUExekIsSUFFQSxvQkFBQUssS0FBQUwsS0FDQXN6QyxHQUFBLDRCQUFBdHpDLEVBQUEsZ0ZBQ0FBLEVBQUEsS0FHQSxJQUFBNmxFLEdBQUFaLEVBQUFqbEUsR0FBQSxlQXFCQSxPQXBCQTZsRSxHQUFBM2lFLFVBQUFELE9BQUEySyxPQUFBODNELEVBQUF4aUUsV0FDQTJpRSxFQUFBM2lFLFVBQUFnVCxZQUFBMnZELEVBQ0FBLEVBQUExVCxJQUFBQSxJQUNBMFQsRUFBQW55QyxRQUFBcXlCLEdBQUEyZixFQUFBaHlDLFFBQUEreEMsR0FDQUksRUFBQSxNQUFBSCxFQUVBRyxFQUFBbjRELE9BQUFnNEQsRUFBQWg0RCxPQUdBaEgsR0FBQW8vRCxZQUFBbDJELFFBQUEsU0FBQXZLLEdBQ0F3Z0UsRUFBQXhnRSxHQUFBcWdFLEVBQUFyZ0UsS0FHQXJGLElBQ0E2bEUsRUFBQW55QyxRQUFBZ3lCLFdBQUExbEQsR0FBQTZsRSxHQUdBRixJQUNBRixFQUFBRyxNQUFBQyxHQUVBQSxHQXdCQXBqQyxFQUFBL3RCLElBQUEsU0FBQXF4RCxHQUVBLElBQUFBLEVBQUFDLFVBQUEsQ0FJQSxHQUFBM25CLEdBQUExNkIsRUFBQTlVLFVBQUEsRUFRQSxPQVBBd3ZDLEdBQUFodUMsUUFBQXBGLE1BQ0Esa0JBQUE4NkQsR0FBQUUsUUFDQUYsRUFBQUUsUUFBQW4yRCxNQUFBaTJELEVBQUExbkIsR0FFQTBuQixFQUFBajJELE1BQUEsS0FBQXV1QyxHQUVBMG5CLEVBQUFDLFdBQUEsRUFDQS82RCxPQVFBdzNCLEVBQUE2akIsTUFBQSxTQUFBQSxHQUNBN2pCLEVBQUEvTyxRQUFBcXlCLEdBQUF0akIsRUFBQS9PLFFBQUE0eUIsSUFXQTUvQyxHQUFBby9ELFlBQUFsMkQsUUFBQSxTQUFBdkssR0FDQW85QixFQUFBcDlCLEdBQUEsU0FBQWtJLEVBQUEyNEQsR0FDQSxNQUFBQSxJQUtBLGNBQUE3Z0UsSUFBQXMvQyxHQUFBdGtELEtBQUFrTixJQUFBcTNDLEdBQUF2a0QsS0FBQWtOLEtBQ0ErbEMsR0FBQSxrRUFBQS9sQyxHQUdBLGNBQUFsSSxHQUFBNmUsRUFBQWdpRCxLQUNBQSxFQUFBbG1FLE9BQ0FrbUUsRUFBQWxtRSxLQUFBdU4sR0FFQTI0RCxFQUFBempDLEVBQUEvMEIsT0FBQXc0RCxJQUVBajdELEtBQUF5b0IsUUFBQXJ1QixFQUFBLEtBQUFrSSxHQUFBMjRELEVBQ0FBLEdBZkFqN0QsS0FBQXlvQixRQUFBcnVCLEVBQUEsS0FBQWtJLE1BcUJBRyxFQUFBKzBCLEVBQUFrZixXQUFBQSxJQW56VEEsR0FBQXgrQyxJQUFBRixPQUFBQyxVQUFBQyxlQW9CQTA1QyxHQUFBLGlEQThFQVEsR0FBQSxTQWlCQUcsR0FBQSxvQkFrQkFFLEdBQUEsb0JBNEVBajVDLEdBQUF4QixPQUFBQyxVQUFBdUIsU0FDQXM1QyxHQUFBLGtCQWFBanpDLEdBQUFELE1BQUFDLFFBc0dBbThDLEdBQUEsZ0JBR0FrZixHQUFBLG1CQUFBMy9ELFNBQUEsb0JBQUF2RCxPQUFBQyxVQUFBdUIsU0FBQXJCLEtBQUFvRCxRQUdBcW5ELEdBQUFzWSxJQUFBMy9ELE9BQUE0L0QsNkJBR0FDLEdBQUFGLElBQUEzL0QsT0FBQWpELFVBQUFSLFVBQUFtQyxjQUNBb2hFLEdBQUFELElBQUFBLEdBQUEvL0QsUUFBQSxXQUFBLEVBQ0F5OEMsR0FBQXNqQixJQUFBQSxHQUFBLy9ELFFBQUEsWUFBQSxFQUNBMUcsR0FBQXltRSxJQUFBQSxHQUFBLy9ELFFBQUEsV0FBQSxFQUNBaWdFLEdBQUFGLElBQUEsMEJBQUFobUUsS0FBQWdtRSxJQUNBRyxHQUFBRCxJQUFBRixHQUFBOXhELE1BQUEsZUFDQWt5RCxHQUFBRCxJQUFBQSxHQUFBLEdBQUFwNkQsTUFBQSxLQUdBczZELEdBQUFELElBQUF4NkIsT0FBQXc2QixHQUFBLEtBQUEsR0FBQXg2QixPQUFBdzZCLEdBQUEsS0FBQSxJQUFBamdFLE9BQUE4K0IsVUFFQXFoQyxHQUFBeHJCLE9BQ0EyRyxHQUFBM0csT0FDQXlyQixHQUFBenJCLE9BQ0EwckIsR0FBQTFyQixNQUdBLElBQUFnckIsS0FBQXBqQixHQUFBLENBQ0EsR0FBQStqQixJQUFBM3JCLFNBQUEzMEMsT0FBQXVnRSxpQkFBQTVyQixTQUFBMzBDLE9BQUF3Z0Usc0JBQ0FDLEdBQUE5ckIsU0FBQTMwQyxPQUFBMGdFLGdCQUFBL3JCLFNBQUEzMEMsT0FBQTJnRSxvQkFDQVIsSUFBQUcsR0FBQSxtQkFBQSxhQUNBaGxCLEdBQUFnbEIsR0FBQSxzQkFBQSxnQkFDQUYsR0FBQUssR0FBQSxrQkFBQSxZQUNBSixHQUFBSSxHQUFBLHFCQUFBLGVBYUEsR0FBQTV4RCxJQUFBLFdBS0EsUUFBQSt4RCxLQUNBQyxHQUFBLENBQ0EsSUFBQUMsR0FBQUMsRUFBQWpqRSxNQUFBLEVBQ0FpakUsS0FDQSxLQUFBLEdBQUExbUUsR0FBQSxFQUFBQSxFQUFBeW1FLEVBQUFwbUUsT0FBQUwsSUFDQXltRSxFQUFBem1FLEtBVEEsR0FFQTJtRSxHQUZBRCxLQUNBRixHQUFBLENBYUEsSUFBQSxtQkFBQTV2RCxtQkFBQWl2RCxHQVdBLENBSUEsR0FBQTVpRCxHQUFBcWlELEdBQUEzL0QsT0FBQSxtQkFBQTRRLFFBQUFBLFNBQ0Fvd0QsR0FBQTFqRCxFQUFBMmpELGNBQUEzeEQsZUFoQkEsQ0FDQSxHQUFBNHhELEdBQUEsRUFDQUMsRUFBQSxHQUFBbHdELGtCQUFBMnZELEdBQ0FRLEVBQUFwaUUsU0FBQThQLGVBQUFveUQsRUFDQUMsR0FBQXB5RCxRQUFBcXlELEdBQ0FweUQsZUFBQSxJQUVBZ3lELEVBQUEsV0FDQUUsR0FBQUEsRUFBQSxHQUFBLEVBQ0FFLEVBQUFsM0QsS0FBQWczRCxHQVNBLE1BQUEsVUFBQTN0RCxFQUFBNGpDLEdBQ0EsR0FBQVEsR0FBQVIsRUFBQSxXQUNBNWpDLEVBQUEzVyxLQUFBdTZDLElBQ0E1akMsQ0FDQXd0RCxHQUFBdGlFLEtBQUFrNUMsR0FDQWtwQixJQUNBQSxHQUFBLEVBQ0FHLEVBQUFKLEVBQUEsUUFJQXhZLEdBQUF6VCxNQUVBLG9CQUFBMHNCLE1BQUFBLElBQUFwakUsV0FBQThQLE1BQUEsZUFFQXE2QyxHQUFBaVosS0FHQWpaLEdBQUEsV0FDQTNqRCxLQUFBNHJCLElBQUE1ekIsT0FBQTJLLE9BQUEsT0FFQWdoRCxHQUFBMXJELFVBQUF5bEIsSUFBQSxTQUFBb3FCLEdBQ0EsTUFBQW9JLFVBQUFsd0MsS0FBQTRyQixJQUFBa2MsSUFFQTZiLEdBQUExckQsVUFBQXNZLElBQUEsU0FBQXUzQixHQUNBOW5DLEtBQUE0ckIsSUFBQWtjLEdBQUEsR0FFQTZiLEdBQUExckQsVUFBQW1zRCxNQUFBLFdBQ0Fwa0QsS0FBQTRyQixJQUFBNXpCLE9BQUEySyxPQUFBLE9BV0EsSUFBQWhKLElBQUFnNkMsRUFBQTE3QyxTQWFBMEIsSUFBQXE3QyxJQUFBLFNBQUFsTixFQUFBbG5DLEdBQ0EsR0FBQXk0QyxHQUVBd2pCLEVBQUE3OEQsS0FBQWtTLElBQUE0MUIsR0FBQSxFQW9CQSxPQW5CQSswQixLQUNBNzhELEtBQUF3MkIsT0FBQXgyQixLQUFBNHpDLFFBQ0F5RixFQUFBcjVDLEtBQUF3RixTQUVBcTNELEdBQ0EvMEIsSUFBQUEsR0FFQTluQyxLQUFBOHpDLFFBQUFoTSxHQUFBKzBCLEVBQ0E3OEQsS0FBQTZ6QyxNQUNBN3pDLEtBQUE2ekMsS0FBQWlwQixNQUFBRCxFQUNBQSxFQUFBRSxNQUFBLzhELEtBQUE2ekMsTUFFQTd6QyxLQUFBazFCLEtBQUEybkMsRUFFQTc4RCxLQUFBNnpDLEtBQUFncEIsRUFDQTc4RCxLQUFBdzJCLFFBRUFxbUMsRUFBQWo4RCxNQUFBQSxFQUVBeTRDLEdBU0ExL0MsR0FBQTZMLE1BQUEsV0FDQSxHQUFBcTNELEdBQUE3OEQsS0FBQWsxQixJQVFBLE9BUEEybkMsS0FDQTc4RCxLQUFBazFCLEtBQUFsMUIsS0FBQWsxQixLQUFBNG5DLE1BQ0E5OEQsS0FBQWsxQixLQUFBNm5DLE1BQUE3c0IsT0FDQTJzQixFQUFBQyxNQUFBRCxFQUFBRSxNQUFBN3NCLE9BQ0Fsd0MsS0FBQTh6QyxRQUFBK29CLEVBQUEvMEIsS0FBQW9JLE9BQ0Fsd0MsS0FBQXcyQixRQUVBcW1DLEdBWUFsakUsR0FBQXVZLElBQUEsU0FBQTQxQixFQUFBazFCLEdBQ0EsR0FBQUgsR0FBQTc4RCxLQUFBOHpDLFFBQUFoTSxFQUNBLElBQUFvSSxTQUFBMnNCLEVBQ0EsTUFBQUEsS0FBQTc4RCxLQUFBNnpDLEtBQ0FtcEIsRUFBQUgsRUFBQUEsRUFBQWo4RCxPQU1BaThELEVBQUFDLFFBQ0FELElBQUE3OEQsS0FBQWsxQixPQUNBbDFCLEtBQUFrMUIsS0FBQTJuQyxFQUFBQyxPQUVBRCxFQUFBQyxNQUFBQyxNQUFBRixFQUFBRSxPQUVBRixFQUFBRSxRQUNBRixFQUFBRSxNQUFBRCxNQUFBRCxFQUFBQyxPQUVBRCxFQUFBQyxNQUFBNXNCLE9BQ0Eyc0IsRUFBQUUsTUFBQS84RCxLQUFBNnpDLEtBQ0E3ekMsS0FBQTZ6QyxPQUNBN3pDLEtBQUE2ekMsS0FBQWlwQixNQUFBRCxHQUVBNzhELEtBQUE2ekMsS0FBQWdwQixFQUNBRyxFQUFBSCxFQUFBQSxFQUFBajhELE9BR0EsSUFRQWlyQyxJQUNBdDBDLEdBQ0FULEdBQ0Erb0IsR0FDQWpxQixHQUNBc0IsR0FDQTg4QyxHQUNBVSxHQUNBQyxHQUNBQyxHQUNBQyxHQUNBQyxHQW5CQUwsR0FBQSxHQUFBZCxHQUFBLEtBQ0FPLEdBQUEsNEJBQ0FFLEdBQUEsY0F3SkFtbUIsR0FBQXZpRSxPQUFBaWxFLFFBQ0Exb0IsZUFBQUEsSUFHQVcsR0FBQSx5QkFDQS9tQyxHQUFBK2hDLE9BQ0FzRixHQUFBdEYsT0FDQXVGLEdBQUF2RixPQStIQWlHLEdBQUEsYUFrQkF4bEMsR0FBQTNZLE9BQUFpbEUsUUFDQTluQixhQUFBQSxFQUNBTyxVQUFBQSxFQUNBSSxZQUFBQSxJQUdBVixJQUFBLEtBQUEsTUFDQUUsSUFBQSxNQUFBLE9BRUE3NUMsR0FBQXpELE9BQUEwNEMsa0JBU0FtSSxPQUFBLEVBUUFxa0IsUUFBQSxFQU1BOXJDLE9BQUEsRUFPQStyQyxzQkFBQSxFQU9BdmEsVUFBQSxFQVNBd2Esb0JBQUEsRUFRQXZDLGFBQUEsWUFBQSxZQUFBLG1CQUFBLFNBQUEsYUFBQSxXQU1Bd0MsbUJBQ0E5VCxRQUFBLEVBQ0FDLFFBQUEsRUFDQUMsU0FBQSxHQU9BMUcsZ0JBQUEsTUFHQTNOLFlBUUFsakMsSUFBQSxXQUNBLE1BQUFrakMsS0FFQXhwQixJQUFBLFNBQUFvRCxHQUNBb21CLEdBQUFwbUIsRUFDQW1tQixLQUVBM0UsY0FBQSxFQUNBd0MsWUFBQSxHQUVBc0Msa0JBQ0FwakMsSUFBQSxXQUNBLE1BQUFvakMsS0FFQTFwQixJQUFBLFNBQUFvRCxHQUNBc21CLEdBQUF0bUIsRUFDQW1tQixLQUVBM0UsY0FBQSxFQUNBd0MsWUFBQSxLQUlBM0ssR0FBQTZILE9BQ0FvdEIsR0FBQXB0QixRQUdBLFdBQ0EsR0FBQXF0QixHQUFBLG1CQUFBejhCLFFBRUF1SCxJQUFBLFNBQUFtMUIsRUFBQW5zQixHQUNBa3NCLElBQUE5aEUsR0FBQXloRSxRQUNBcDhCLFFBQUF4MUIsTUFBQSxlQUFBa3lELEdBQUFuc0IsRUFBQWlzQixHQUFBanNCLEdBQUEsTUFJQWlzQixHQUFBLFNBQUFqc0IsR0FDQSxHQUFBdDhDLEdBQUFzOEMsRUFBQUwsT0FBQUssRUFBQXNOLFNBQUE1cEQsS0FBQXM4QyxFQUFBdDhDLElBQ0EsT0FBQUEsR0FBQSwwQkFBQXU5QyxFQUFBdjlDLEdBQUEsS0FBQSxNQWlGQSxJQUFBMmhELElBQUExK0MsT0FBQWlsRSxRQUNBN21CLHFCQUFBQSxFQUNBRSxxQkFBQUEsRUFDQUMscUJBQUFBLEVBQ0FGLGdCQUFBQSxJQXVWQTRDLEdBQUEsVUE4RkFTLEdBQUEsbUpBQ0FDLEdBQUEsOEJBRUFLLEdBQUE5SixNQUVBOEosSUFBQSxTQUFBdmlCLEVBQUFvZSxHQUNBLE1BQUFBLEdBQUF4NkMsUUFBQSxNQUFBLEVBRUFvOEIsRUFBQXhzQixjQUFBMVAsT0FBQWtpRSxvQkFBQWhtQyxFQUFBeHNCLGNBQUExUCxPQUFBbWlFLFlBRUEscUJBQUF0b0UsS0FBQXFpQyxFQUFBaitCLGNBSUEsOENBQUFwRSxLQUFBeWdELEdBa0ZBLElBQUFvRixJQUFBeC9DLEdBQUFraUUsc0JBQUEzbEUsT0FBQTJLLE9BQUEsS0F3QkFzNEMsSUFBQXgxQyxLQUFBLFNBQUE0MEMsRUFBQUMsRUFBQWpKLEdBQ0EsTUFBQUEsR0FvQkFnSixHQUFBQyxFQUNBLFdBRUEsR0FBQXNqQixHQUFBLGtCQUFBdGpCLEdBQUFBLEVBQUFuaUQsS0FBQWs1QyxHQUFBaUosRUFDQXVqQixFQUFBLGtCQUFBeGpCLEdBQUFBLEVBQUFsaUQsS0FBQWs1QyxHQUFBbkIsTUFDQSxPQUFBMHRCLEdBQ0EzakIsR0FBQTJqQixFQUFBQyxHQUVBQSxHQVJBLE9BbEJBdmpCLEVBR0Esa0JBQUFBLElBQ0FqUyxHQUFBLHFHQUFBZ0osR0FDQWdKLEdBRUFBLEVBUUEsV0FDQSxNQUFBSixJQUFBSyxFQUFBbmlELEtBQUE2SCxNQUFBcTZDLEVBQUFsaUQsS0FBQTZILFFBUkFzNkMsRUFQQUQsR0FtQ0FZLEdBQUF4akIsR0FBQSxTQUFBNGlCLEVBQUFDLEVBQUFqSixHQUNBLElBQUFBLEdBQUFpSixHQUFBLGtCQUFBQSxHQUVBLFdBREFqUyxJQUFBLG1HQUFBZ0osRUFHQSxJQUFBc0IsR0FBQTJILEdBQUFELENBRUEsT0FBQWhKLElBQUEsa0JBQUFzQixHQUFBQSxFQUFBeDZDLEtBQUFrNUMsR0FBQXNCLEdBT0FzSSxHQUFBNW5DLEtBQUE0bkMsR0FBQXJqQixRQUFBcWpCLEdBQUFudEMsTUFBQW10QyxHQUFBNmlCLFNBQUE3aUIsR0FBQThpQixTQUFBOWlCLEdBQUEraUIsY0FBQS9pQixHQUFBZ2pCLFNBQUFoakIsR0FBQWlqQixjQUFBampCLEdBQUFrakIsVUFBQWxqQixHQUFBbWpCLFNBQUEsU0FBQS9qQixFQUFBQyxHQUNBLE1BQUFBLEdBQUFELEVBQUFBLEVBQUF4OEMsT0FBQXk4QyxHQUFBejZDLEdBQUF5NkMsR0FBQUEsR0FBQUEsR0FBQUQsR0FnQkE1K0MsR0FBQW8vRCxZQUFBbDJELFFBQUEsU0FBQXZLLEdBQ0E2Z0QsR0FBQTdnRCxFQUFBLEtBQUFnZ0QsS0FVQWEsR0FBQWtaLE1BQUFsWixHQUFBNXFDLE9BQUEsU0FBQWdxQyxFQUFBQyxHQUNBLElBQUFBLEVBQUEsTUFBQUQsRUFDQSxLQUFBQSxFQUFBLE1BQUFDLEVBQ0EsSUFBQTNILEtBQ0Fsd0MsR0FBQWt3QyxFQUFBMEgsRUFDQSxLQUFBLEdBQUF2UyxLQUFBd1MsR0FBQSxDQUNBLEdBQUE3L0MsR0FBQWs0QyxFQUFBN0ssR0FDQW9RLEVBQUFvQyxFQUFBeFMsRUFDQXJ0QyxLQUFBb0YsR0FBQXBGLEtBQ0FBLEdBQUFBLElBRUFrNEMsRUFBQTdLLEdBQUFydEMsRUFBQUEsRUFBQW9ELE9BQUFxNkMsSUFBQUEsR0FFQSxNQUFBdkYsSUFPQXNJLEdBQUFubEMsTUFBQW1sQyxHQUFBL2lCLFFBQUEraUIsR0FBQW1ZLFNBQUEsU0FBQS9ZLEVBQUFDLEdBQ0EsSUFBQUEsRUFBQSxNQUFBRCxFQUNBLEtBQUFBLEVBQUEsTUFBQUMsRUFDQSxJQUFBM0gsR0FBQTM2QyxPQUFBMkssT0FBQSxLQUdBLE9BRkFGLEdBQUFrd0MsRUFBQTBILEdBQ0E1M0MsRUFBQWt3QyxFQUFBMkgsR0FDQTNILEVBT0EsSUFBQXVJLElBQUEsU0FBQWIsRUFBQUMsR0FDQSxNQUFBcEssVUFBQW9LLEVBQUFELEVBQUFDLEdBK0tBb0IsR0FBQSxDQWdCQUQsSUFBQW4rQyxPQUFBLEtBUUFtK0MsR0FBQXhqRCxVQUFBb21FLE9BQUEsU0FBQUMsR0FDQXQrRCxLQUFBMjdDLEtBQUEzaEQsS0FBQXNrRSxJQVNBN2lCLEdBQUF4akQsVUFBQXNtRSxVQUFBLFNBQUFELEdBQ0F0K0QsS0FBQTI3QyxLQUFBa1MsUUFBQXlRLElBT0E3aUIsR0FBQXhqRCxVQUFBOGtELE9BQUEsV0FDQXRCLEdBQUFuK0MsT0FBQWtoRSxPQUFBeCtELE9BT0F5N0MsR0FBQXhqRCxVQUFBa3BCLE9BQUEsV0FHQSxJQUFBLEdBREF3NkIsR0FBQWpqQyxFQUFBMVksS0FBQTI3QyxNQUNBL2xELEVBQUEsRUFBQXNCLEVBQUF5a0QsRUFBQTFsRCxPQUFBTCxFQUFBc0IsRUFBQXRCLElBQ0ErbEQsRUFBQS9sRCxHQUFBdTlELFNBSUEsSUFBQXNMLElBQUE3K0QsTUFBQTNILFVBQ0Fra0QsR0FBQW5rRCxPQUFBMkssT0FBQTg3RCxLQU9BLE9BQUEsTUFBQSxRQUFBLFVBQUEsU0FBQSxPQUFBLFdBQUE5NUQsUUFBQSxTQUFBTSxHQUVBLEdBQUE2N0MsR0FBQTJkLEdBQUF4NUQsRUFDQTh0QyxHQUFBb0osR0FBQWwzQyxFQUFBLFdBS0EsSUFGQSxHQUFBclAsR0FBQWdPLFVBQUEzTixPQUNBbTlDLEVBQUEsR0FBQXh6QyxPQUFBaEssR0FDQUEsS0FDQXc5QyxFQUFBeDlDLEdBQUFnTyxVQUFBaE8sRUFFQSxJQUVBeXdELEdBRkF6aUMsRUFBQWs5QixFQUFBajhDLE1BQUE3RSxLQUFBb3pDLEdBQ0F6NEIsRUFBQTNhLEtBQUFpeEMsTUFFQSxRQUFBaHNDLEdBQ0EsSUFBQSxPQUNBb2hELEVBQUFqVCxDQUNBLE1BQ0EsS0FBQSxVQUNBaVQsRUFBQWpULENBQ0EsTUFDQSxLQUFBLFNBQ0FpVCxFQUFBalQsRUFBQS81QyxNQUFBLEdBTUEsTUFIQWd0RCxJQUFBMXJDLEVBQUEwaEMsYUFBQWdLLEdBRUExckMsRUFBQXcyQixJQUFBaHdCLFNBQ0F5QyxNQWFBbXZCLEVBQUEwckIsR0FBQSxPQUFBLFNBQUF6K0MsRUFBQWdQLEdBSUEsTUFIQWhQLElBQUFoZ0IsS0FBQS9KLFNBQ0ErSixLQUFBL0osT0FBQStxQyxPQUFBaGhCLEdBQUEsR0FFQWhnQixLQUFBTyxPQUFBeWYsRUFBQSxFQUFBZ1AsR0FBQSxLQVNBK2pCLEVBQUEwckIsR0FBQSxVQUFBLFNBQUFwRixHQUVBLEdBQUFyNUQsS0FBQS9KLE9BQUEsQ0FDQSxHQUFBK3BCLEdBQUEza0IsRUFBQTJFLEtBQUFxNUQsRUFDQSxPQUFBcjVDLElBQUEsRUFDQWhnQixLQUFBTyxPQUFBeWYsRUFBQSxHQURBLFNBS0EsSUFBQW84QixJQUFBcGtELE9BQUFnNEMsb0JBQUFtTSxJQVlBTixJQUFBLENBeUNBQyxJQUFBN2pELFVBQUFxa0QsS0FBQSxTQUFBeEwsR0FFQSxJQUFBLEdBREFiLEdBQUFqNEMsT0FBQWk0QyxLQUFBYSxHQUNBbDdDLEVBQUEsRUFBQXNCLEVBQUErNEMsRUFBQWg2QyxPQUFBTCxFQUFBc0IsRUFBQXRCLElBQ0FvSyxLQUFBa3hDLFFBQUFqQixFQUFBcjZDLEdBQUFrN0MsRUFBQWIsRUFBQXI2QyxNQVVBa21ELEdBQUE3akQsVUFBQW9rRCxhQUFBLFNBQUFxaUIsR0FDQSxJQUFBLEdBQUE5b0UsR0FBQSxFQUFBc0IsRUFBQXduRSxFQUFBem9FLE9BQUFMLEVBQUFzQixFQUFBdEIsSUFDQTBVLEdBQUFvMEQsRUFBQTlvRSxLQVlBa21ELEdBQUE3akQsVUFBQWk1QyxRQUFBLFNBQUFwSixFQUFBOVksR0FDQTB0QixHQUFBMThDLEtBQUFZLE1BQUFrbkMsRUFBQTlZLElBWUE4c0IsR0FBQTdqRCxVQUFBd2tELE1BQUEsU0FBQXBMLElBQ0FyeEMsS0FBQW94QyxNQUFBcHhDLEtBQUFveEMsU0FBQXAzQyxLQUFBcTNDLElBVUF5SyxHQUFBN2pELFVBQUFpN0QsU0FBQSxTQUFBN2hCLEdBQ0FyeEMsS0FBQW94QyxJQUFBeWMsUUFBQXhjLEdBdUhBLElBQUErb0IsSUFBQXBpRSxPQUFBaWxFLFFBQ0F2Z0IsZUFBQUEsR0FDQTl3QixJQUFBQSxFQUNBNGxCLElBQUFBLEVBQ0FULE9BQUFBLEVBQ0FXLFVBQUFBLEVBQ0FHLFdBQUFBLEVBQ0FDLFVBQUFBLEVBQ0FDLFNBQUFBLEVBQ0FFLFVBQUFBLEVBQ0FDLFlBQUFBLEVBQ0FDLFNBQUFBLEVBQ0FHLFVBQUFBLEVBQ0FFLFNBQUFBLEVBQ0E3ckMsS0FBQUEsRUFDQStSLFFBQUFBLEVBQ0FqVyxPQUFBQSxFQUNBeUIsU0FBQUEsRUFDQStVLGNBQUFBLEVBQ0E4NUIsSUFBQUEsRUFDQTRyQixTQUFBMXJCLEVBQ0E1M0MsUUFBQUEsRUFDQW00QyxZQUFBQSxFQUNBRSxXQUFBQSxFQUNBN3pDLFFBQUFBLEdBQ0FtOEMsU0FBQUEsR0FDQWtmLFVBQUFBLEdBQ0F0WSxTQUFBQSxHQUNBeVksS0FBQUEsR0FDQXZqQixNQUFBQSxHQUNBbmpELFVBQUFBLEdBQ0EybUUsTUFBQUEsR0FDQUMsZ0JBQUFBLEdBQ0FDLFdBQUFBLEdBQ0FDLHVCQUFBQSxHQUNBQyxHQUFBQSxrQkFDQSxNQUFBQSxLQUVBN2tCLEdBQUFBLHNCQUNBLE1BQUFBLEtBRUE4a0IsR0FBQUEsaUJBQ0EsTUFBQUEsS0FFQUMsR0FBQUEscUJBQ0EsTUFBQUEsS0FFQXh4RCxTQUFBQSxHQUNBdTVDLEdBQUFBLFFBQ0EsTUFBQUEsS0FFQTNNLE1BQUFBLEVBQ0FDLE1BQUFBLEVBQ0FHLFFBQUFBLEVBQ0FFLFlBQUFBLEVBQ0FDLFlBQUFBLEVBQ0FodkIsT0FBQUEsRUFDQUMsTUFBQUEsRUFDQWpmLE9BQUFBLEVBQ0E4ZSxRQUFBQSxFQUNBM2tCLFFBQUFBLEVBQ0F3akIsR0FBQUEsRUFDQTFGLElBQUFBLEVBQ0FvMkIsU0FBQUEsRUFDQXRuQixTQUFBQSxFQUNBQyxZQUFBQSxFQUNBeW5CLGVBQUFBLEVBQ0FPLFNBQUFBLEdBQ0FILFdBQUFBLEdBQ0FNLGFBQUFBLEdBQ0FLLFFBQUFBLEdBQ0FHLGFBQUFBLEdBQ0FDLGdCQUFBQSxHQUNBZCxXQUFBQSxHQUNBa0IsYUFBQUEsR0FDQXVCLGFBQUFBLEdBQ0FqQixhQUFBQSxHQUNBTCxtQkFBQUEsR0FDQUUsWUFBQUEsR0FDQUMsY0FBQUEsR0FDQXRSLEdBQUFBLFFBQ0EsTUFBQUEsT0FJQXNWLEdBQUEsRUFzR0ErQyxHQUFBLEdBQUEvTSxHQUFBLEtBR0FrTSxHQUFBLEVBQ0FJLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBR0FKLEdBQUEsRUFDQTZlLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0ExZSxHQUFBLEVBQ0FYLEdBQUEsRUFDQUMsR0FBQSxFQUNBYSxHQUFBLEVBQ0FELEdBQUEsRUFFQUQsS0FFQUEsSUFBQU4sS0FDQWdmLElBQUFoZixJQUNBaWYsT0FBQUYsR0FBQWpmLElBQ0FvZixLQUFBN2UsSUFDQThlLEtBQUEzZSxLQUdBRixHQUFBdWUsS0FDQUcsSUFBQUgsSUFDQU8sS0FBQU4sSUFDQUksS0FBQTdlLElBQ0E4ZSxLQUFBM2UsS0FHQUYsR0FBQXdlLEtBQ0FFLElBQUFGLElBQ0FHLE9BQUFGLEdBQUFqZixLQUdBUSxHQUFBeWUsS0FDQUUsT0FBQUYsR0FBQWpmLElBQ0F1ZixHQUFBTixHQUFBamYsSUFDQXdmLFFBQUFQLEdBQUFqZixJQUNBa2YsSUFBQUgsR0FBQTNlLElBQ0FrZixLQUFBTixHQUFBNWUsSUFDQWdmLEtBQUE3ZSxHQUFBSCxJQUNBaWYsS0FBQTNlLEdBQUFOLEtBR0FJLEdBQUFELEtBQ0EzUSxLQUFBZ1EsR0FBQUksSUFDQXlmLEtBQUE1ZixHQUFBRyxJQUNBb2YsS0FBQTdlLEdBQUFGLElBQ0FxZixLQUFBWCxHQUFBemUsSUFDQStlLElBQUE1ZSxHQUNBa2YsTUFBQXBmLEdBQUFQLEtBR0FRLEdBQUFaLEtBQ0FoUSxLQUFBMlEsR0FBQVAsSUFDQXFmLElBQUE1ZSxHQUNBa2YsTUFBQS9mLEdBQUFJLEtBR0FRLEdBQUFYLEtBQ0E0ZixLQUFBbGYsR0FBQVAsSUFDQXFmLElBQUE1ZSxHQUNBa2YsTUFBQTlmLEdBQUFHLElBMk1BLElBQUFrQixHQUVBQSxJQUFBLFNBQUEzQixFQUFBL04sR0FDQWhKLEdBQUEsd0NBQUErVyxFQUFBb0IsSUFBQSx5SUFBQW5QLEdBb0RBLElBQUErTixJQUFBcG5ELE9BQUFpbEUsUUFDQXhjLFVBQUFBLEdBQ0FFLFFBQUFBLEdBQ0FFLFFBQUFBLEtBR0FvQixHQUFBLEdBQUF0TyxHQUFBLEtBRUE4ckIsR0FBQSxxSkFDQXBlLEdBQUEsR0FBQTFxRCxRQUFBLEtBQUE4b0UsR0FBQS83RCxRQUFBLEtBQUEsUUFBQSxRQUdBZzhELEdBQUEsbVFBQ0FqZSxHQUFBLEdBQUE5cUQsUUFBQSxLQUFBK29FLEdBQUFoOEQsUUFBQSxLQUFBLFFBQUEsUUFFQWkrQyxHQUFBLE1BQ0FSLEdBQUEsTUFDQU8sR0FBQSwySUFDQUosR0FBQSxXQUNBYSxHQUFBLDZGQUNBUCxHQUFBLGdDQUNBUSxHQUFBLCtDQWNBbEIsTUF5S0FuTSxHQUFBLzhDLE9BQUFpbEUsUUFDQXJjLGdCQUFBQSxHQUNBc0IsYUFBQUEsS0FVQXJ1QyxNQUNBeXVDLE1BQ0E1a0MsTUFDQTZrQyxNQUNBQyxJQUFBLEVBNkZBYSxHQUFBLENBMERBSCxJQUFBanJELFVBQUFpYSxJQUFBLFdBQ0FsUyxLQUFBMi9ELFdBQ0EsSUFDQS8rRCxHQURBbWhELEVBQUEvaEQsS0FBQStoRCxPQUFBL2hELEtBQUFxeEMsRUFFQSxLQUNBendDLEVBQUFaLEtBQUE0OEMsT0FBQXprRCxLQUFBNHBELEVBQUFBLEdBQ0EsTUFBQXpzRCxHQUNBbUcsR0FBQTBoRSxzQkFDQTkwQixHQUFBLHFDQUFBcm9DLEtBQUErMEMsV0FBQSxNQUFBei9DLEVBQUFrRSxXQUFBd0csS0FBQXF4QyxJQWtCQSxNQWJBcnhDLE1BQUErMkQsTUFDQTlTLEdBQUFyakQsR0FFQVosS0FBQTQvRCxhQUNBaC9ELEVBQUFaLEtBQUE0L0QsV0FBQWgvRCxJQUVBWixLQUFBa2YsVUFDQXRlLEVBQUFtaEQsRUFBQW1VLGNBQUF0MUQsRUFBQSxLQUFBWixLQUFBa2YsU0FBQSxJQUVBbGYsS0FBQTYvRCxjQUNBai9ELEVBQUFaLEtBQUE2L0QsWUFBQWovRCxJQUVBWixLQUFBOC9ELFdBQ0FsL0QsR0FTQXNpRCxHQUFBanJELFVBQUEyekIsSUFBQSxTQUFBaHJCLEdBQ0EsR0FBQW1oRCxHQUFBL2hELEtBQUEraEQsT0FBQS9oRCxLQUFBcXhDLEVBQ0FyeEMsTUFBQWtmLFVBQ0F0ZSxFQUFBbWhELEVBQUFtVSxjQUFBdDFELEVBQUFaLEtBQUFZLE1BQUFaLEtBQUFrZixTQUFBLEdBRUEsS0FDQWxmLEtBQUE2OEMsT0FBQTFrRCxLQUFBNHBELEVBQUFBLEVBQUFuaEQsR0FDQSxNQUFBdEwsR0FDQW1HLEdBQUEwaEUsc0JBQ0E5MEIsR0FBQSxpQ0FBQXJvQyxLQUFBKzBDLFdBQUEsTUFBQXovQyxFQUFBa0UsV0FBQXdHLEtBQUFxeEMsSUFJQSxHQUFBMHVCLEdBQUFoZSxFQUFBaWUsV0FDQSxJQUFBRCxHQUFBQSxFQUFBRSxRQUFBamdFLEtBQUErMEMsV0FBQSxDQUNBLEdBQUFnckIsRUFBQTdnRCxRQUVBLFdBREFtcEIsSUFBQSw0REFBQXJvQyxLQUFBKzBDLFdBQUEseUpBQUEvMEMsS0FBQXF4QyxHQUdBMHVCLEdBQUFHLFVBQUEsV0FDQW5lLEVBQUF3WCxLQUVBd0csRUFBQXhWLFNBQUF4SSxFQUFBd1gsTUFBQTM0RCxFQUVBbS9ELEVBQUF4VixTQUFBdkosS0FBQWUsRUFBQW9lLE9BQUF2L0QsT0FVQXNpRCxHQUFBanJELFVBQUEwbkUsVUFBQSxXQUNBbGtCLEdBQUFuK0MsT0FBQTBDLE1BU0FrakQsR0FBQWpyRCxVQUFBdW1FLE9BQUEsU0FBQXJ0QixHQUNBLEdBQUE3dUMsR0FBQTZ1QyxFQUFBN3VDLEVBQ0F0QyxNQUFBNGpELFVBQUFsbUMsSUFBQXBiLEtBQ0F0QyxLQUFBNGpELFVBQUFyekMsSUFBQWpPLEdBQ0F0QyxLQUFBeWpELFFBQUF6cEQsS0FBQW0zQyxHQUNBbnhDLEtBQUEwakQsT0FBQWhtQyxJQUFBcGIsSUFDQTZ1QyxFQUFBa3RCLE9BQUFyK0QsUUFTQWtqRCxHQUFBanJELFVBQUE2bkUsU0FBQSxXQUNBcmtCLEdBQUFuK0MsT0FBQSxJQUVBLEtBREEsR0FBQTFILEdBQUFvSyxLQUFBd2pELEtBQUF2dEQsT0FDQUwsS0FBQSxDQUNBLEdBQUF1N0MsR0FBQW54QyxLQUFBd2pELEtBQUE1dEQsRUFDQW9LLE1BQUE0akQsVUFBQWxtQyxJQUFBeXpCLEVBQUE3dUMsS0FDQTZ1QyxFQUFBb3RCLFVBQUF2K0QsTUFHQSxHQUFBb2dFLEdBQUFwZ0UsS0FBQTBqRCxNQUNBMWpELE1BQUEwakQsT0FBQTFqRCxLQUFBNGpELFVBQ0E1akQsS0FBQTRqRCxVQUFBd2MsRUFDQXBnRSxLQUFBNGpELFVBQUFRLFFBQ0FnYyxFQUFBcGdFLEtBQUF3akQsS0FDQXhqRCxLQUFBd2pELEtBQUF4akQsS0FBQXlqRCxRQUNBempELEtBQUF5akQsUUFBQTJjLEVBQ0FwZ0UsS0FBQXlqRCxRQUFBeHRELE9BQUEsR0FVQWl0RCxHQUFBanJELFVBQUFrN0QsT0FBQSxTQUFBblAsR0FDQWhrRCxLQUFBdWpELEtBQ0F2akQsS0FBQXNqRCxPQUFBLEVBQ0F0akQsS0FBQWczRCxPQUFBdjdELEdBQUEyMUIsTUFDQXB4QixLQUFBMlYsT0FJQTNWLEtBQUFna0QsUUFBQWhrRCxLQUFBK2pELFNBQUFDLEdBQUFoa0QsS0FBQWdrRCxVQUFBQSxFQUNBaGtELEtBQUErakQsUUFBQSxFQUdBdG9ELEdBQUFvOUMsUUFDQTc0QyxLQUFBNmpELFVBQUEsR0FBQXI3QyxPQUFBLDRCQUVBdzZDLEdBQUFoakQsUUFTQWtqRCxHQUFBanJELFVBQUEwZCxJQUFBLFdBQ0EsR0FBQTNWLEtBQUFreUIsT0FBQSxDQUNBLEdBQUF0eEIsR0FBQVosS0FBQWtTLEtBQ0EsSUFBQXRSLElBQUFaLEtBQUFZLFFBS0FzRCxFQUFBdEQsSUFBQVosS0FBQSsyRCxRQUFBLzJELEtBQUFna0QsUUFBQSxDQUVBLEdBQUFtUyxHQUFBbjJELEtBQUFZLEtBQ0FaLE1BQUFZLE1BQUFBLENBSUEsSUFBQWlqRCxHQUFBN2pELEtBQUE2akQsU0FFQSxJQUFBcG9ELEdBQUFvOUMsT0FBQWdMLEVBQUEsQ0FDQTdqRCxLQUFBNmpELFVBQUEsSUFDQSxLQUNBN2pELEtBQUE4TyxHQUFBM1csS0FBQTZILEtBQUFxeEMsR0FBQXp3QyxFQUFBdTFELEdBQ0EsTUFBQTdnRSxHQUlBLEtBSEE4VSxJQUFBLFdBQ0EsS0FBQXk1QyxJQUNBLEdBQ0F2dUQsT0FHQTBLLE1BQUE4TyxHQUFBM1csS0FBQTZILEtBQUFxeEMsR0FBQXp3QyxFQUFBdTFELEdBR0FuMkQsS0FBQStqRCxPQUFBL2pELEtBQUFna0QsU0FBQSxJQVNBZCxHQUFBanJELFVBQUFzNkQsU0FBQSxXQUdBLEdBQUE4TixHQUFBNWtCLEdBQUFuK0MsTUFDQTBDLE1BQUFZLE1BQUFaLEtBQUFrUyxNQUNBbFMsS0FBQXNqRCxPQUFBLEVBQ0E3SCxHQUFBbitDLE9BQUEraUUsR0FPQW5kLEdBQUFqckQsVUFBQThrRCxPQUFBLFdBRUEsSUFEQSxHQUFBbm5ELEdBQUFvSyxLQUFBd2pELEtBQUF2dEQsT0FDQUwsS0FDQW9LLEtBQUF3akQsS0FBQTV0RCxHQUFBbW5ELFVBUUFtRyxHQUFBanJELFVBQUFzckIsU0FBQSxXQUNBLEdBQUF2akIsS0FBQWt5QixPQUFBLENBS0FseUIsS0FBQXF4QyxHQUFBZ04sbUJBQUFyK0MsS0FBQXF4QyxHQUFBaU4sZUFDQXQrQyxLQUFBcXhDLEdBQUFtTSxVQUFBcVEsUUFBQTd0RCxLQUdBLEtBREEsR0FBQXBLLEdBQUFvSyxLQUFBd2pELEtBQUF2dEQsT0FDQUwsS0FDQW9LLEtBQUF3akQsS0FBQTV0RCxHQUFBMm9FLFVBQUF2K0QsS0FFQUEsTUFBQWt5QixRQUFBLEVBQ0FseUIsS0FBQXF4QyxHQUFBcnhDLEtBQUE4TyxHQUFBOU8sS0FBQVksTUFBQSxNQVlBLElBQUF1akQsSUFBQSxHQUFBUixJQStCQTJjLElBRUEzNUQsS0FBQSxXQUNBM0csS0FBQTZQLEtBQUEsSUFBQTdQLEtBQUF5M0IsR0FBQW5xQixTQUFBLE9BQUEsZUFHQTZsRCxPQUFBLFNBQUF2eUQsR0FDQVosS0FBQXkzQixHQUFBejNCLEtBQUE2UCxNQUFBaWlDLEVBQUFseEMsS0FJQWdrRCxHQUFBLEdBQUFqUixHQUFBLEtBQ0FxUyxHQUFBLEdBQUFyUyxHQUFBLEtBRUFsbEMsSUFDQTAyQyxRQUFBLEVBQUEsR0FBQSxJQUNBOTlCLFFBQUEsRUFBQSxhQUFBLGVBQ0FJLElBQUEsRUFBQSxpQkFBQSxvQkFDQUMsS0FBQSxFQUFBLG1DQUFBLHVCQUdBalosSUFBQWtaLEdBQUFsWixHQUFBdVosSUFBQSxFQUFBLHFCQUFBLHlCQUVBdlosR0FBQTJZLE9BQUEzWSxHQUFBbVosVUFBQSxFQUFBLCtCQUFBLGFBRUFuWixHQUFBK1ksTUFBQS9ZLEdBQUE0VCxNQUFBNVQsR0FBQXFaLFNBQUFyWixHQUFBc1osUUFBQXRaLEdBQUFvWixPQUFBLEVBQUEsVUFBQSxZQUVBcFosR0FBQW5WLEVBQUFtVixHQUFBOHhELEtBQUE5eEQsR0FBQSt4RCxPQUFBL3hELEdBQUFoRixJQUFBZ0YsR0FBQXNRLE1BQUF0USxHQUFBa0MsS0FBQWxDLEdBQUFneUQsT0FBQWh5RCxHQUFBaXlELFFBQUFqeUQsR0FBQWt5RCxLQUFBbHlELEdBQUEyd0MsS0FBQTN3QyxHQUFBbXlELFFBQUFueUQsR0FBQW95RCxTQUFBcHlELEdBQUE4OUMsTUFBQSxFQUFBLGdKQUFBLFNBY0EsSUFBQXpILElBQUEsYUFDQUUsR0FBQSxXQUNBRSxHQUFBLE9BMkZBUSxHQUFBLFdBRUEsR0FBQXdWLEdBQUEsQ0FDQSxHQUFBcmxFLEdBQUEwRSxTQUFBb0osY0FBQSxNQUVBLE9BREE5TixHQUFBa2IsVUFBQSwwQkFDQWxiLEVBQUEwc0IsV0FBQSxHQUFBOVMsV0FBQXNCLFVBRUEsT0FBQSxLQUtBNjBDLEdBQUEsV0FFQSxHQUFBc1YsR0FBQSxDQUNBLEdBQUF4bEUsR0FBQTZFLFNBQUFvSixjQUFBLFdBRUEsT0FEQWpPLEdBQUFxMUMsWUFBQSxJQUNBLE1BQUFyMUMsRUFBQTZzQixXQUFBLEdBQUEzaEIsTUFFQSxPQUFBLEtBNEdBa2xELEdBQUE5dEQsT0FBQWlsRSxRQUNBMTZDLFVBQUFBLEdBQ0FzakMsY0FBQUEsS0FHQW45QixJQUVBL2hCLEtBQUEsV0FHQSxJQUFBM0csS0FBQXkzQixHQUFBbnFCLFdBRUF0TixLQUFBczVDLFNBRUF0NUMsS0FBQTQ0QyxPQUFBRixHQUFBLFVBQ0FoMUMsRUFBQTFELEtBQUF5M0IsR0FBQXozQixLQUFBNDRDLFVBSUF1YSxPQUFBLFNBQUF2eUQsR0FDQUEsRUFBQWt4QyxFQUFBbHhDLEdBQ0FaLEtBQUFzNUMsTUFDQXQ1QyxLQUFBcXFCLEtBQUF6cEIsR0FFQVosS0FBQXkzQixHQUFBMW1CLFVBQUFuUSxHQUlBeXBCLEtBQUEsU0FBQXpwQixHQUdBLElBREEsR0FBQWhMLEdBQUFvSyxLQUFBczVDLE1BQUFyakQsT0FDQUwsS0FDQTJULEVBQUF2SixLQUFBczVDLE1BQUExakQsR0FJQSxJQUFBc29DLEdBQUEybkIsR0FBQWpsRCxHQUFBLEdBQUEsRUFFQVosTUFBQXM1QyxNQUFBNWdDLEVBQUF3bEIsRUFBQTl1QixZQUNBbVosRUFBQTJWLEVBQUFsK0IsS0FBQTQ0QyxTQXFEQXFOLElBQUFodUQsVUFBQTR1RCxTQUFBLFNBQUF3TixHQUNBLEdBQUF6K0QsR0FBQXNCLENBQ0EsS0FBQXRCLEVBQUEsRUFBQXNCLEVBQUE4SSxLQUFBb21ELFdBQUFud0QsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUNBb0ssS0FBQW9tRCxXQUFBeHdELEdBQUFpeEQsU0FBQXdOLEVBRUEsS0FBQXorRCxFQUFBLEVBQUFzQixFQUFBOEksS0FBQTJmLFNBQUExcEIsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUNBeStELEVBQUFyMEQsS0FBQTJmLFNBQUEvcEIsS0E2RUFxd0QsR0FBQWh1RCxVQUFBK3VELGFBQUEsV0FDQSxHQUFBcHhELEdBQUFzQixDQUNBLEtBQUF0QixFQUFBLEVBQUFzQixFQUFBOEksS0FBQW9tRCxXQUFBbndELE9BQUFMLEVBQUFzQixFQUFBdEIsSUFHQW9LLEtBQUFvbUQsV0FBQXh3RCxHQUFBb3hELGNBQUEsRUFFQSxLQUFBcHhELEVBQUEsRUFBQXNCLEVBQUE4SSxLQUFBMmYsU0FBQTFwQixPQUFBTCxFQUFBc0IsRUFBQXRCLElBTUFvSyxLQUFBMmYsU0FBQS9wQixHQUFBbWdFLFVBQUEsR0FBQSxFQUVBLElBQUEvSSxHQUFBaHRELEtBQUFzbUQsT0FBQTBHLElBQ0EsS0FBQXAzRCxFQUFBLEVBQUFzQixFQUFBODFELEVBQUEvMkQsT0FBQUwsRUFBQXNCLEVBQUF0QixJQUlBbzNELEVBQUFwM0QsR0FBQWtyRSxVQUFBOVQsRUFBQXAzRCxHQUFBa3JFLFNBQUF2OUMsWUFRQTBpQyxHQUFBaHVELFVBQUE2cUMsUUFBQSxXQUNBOWlDLEtBQUFtbUQsWUFDQW5tRCxLQUFBbW1ELFdBQUFDLFdBQUF5SCxRQUFBN3RELE1BRUFBLEtBQUFrM0MsS0FBQXlQLFNBQUEsS0FDQTNtRCxLQUFBc21ELFNBMkJBLElBQUFjLElBQUEsR0FBQXpULEdBQUEsSUE0Q0FzVCxJQUFBaHZELFVBQUEwSyxPQUFBLFNBQUFrRyxFQUFBazVDLEVBQUFvRSxHQUNBLEdBQUFqb0IsR0FBQTNiLEdBQUF2aUIsS0FBQThsRCxTQUNBLE9BQUEsSUFBQUcsSUFBQWptRCxLQUFBa21ELE9BQUFsbUQsS0FBQXF4QyxHQUFBblQsRUFBQXIxQixFQUFBazVDLEVBQUFvRSxHQUdBLElBQUE0YSxJQUFBLElBQ0FueUIsR0FBQSxJQUNBb3lCLEdBQUEsSUFDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUVBQyxHQUFBLEVBRUFDLElBRUFsVSxTQUFBK1QsR0FDQXpVLFVBQUEsRUFFQXpsRCxRQUFBLFdBQUEsVUFBQSxnQkFBQSxpQkFFQVQsS0FBQSxXQUVBLEdBQUErNkQsR0FBQTFoRSxLQUFBKzBDLFdBQUF6ckMsTUFBQSxzQkFDQSxJQUFBbzRELEVBQUEsQ0FDQSxHQUFBQyxHQUFBRCxFQUFBLEdBQUFwNEQsTUFBQSxnQkFDQXE0RCxJQUNBM2hFLEtBQUE2bkMsU0FBQTg1QixFQUFBLEdBQUEvOEQsT0FDQTVFLEtBQUFpZ0UsTUFBQTBCLEVBQUEsR0FBQS84RCxRQUVBNUUsS0FBQWlnRSxNQUFBeUIsRUFBQSxHQUFBOThELE9BRUE1RSxLQUFBKzBDLFdBQUEyc0IsRUFBQSxHQUdBLElBQUExaEUsS0FBQWlnRSxNQUVBLFdBREE1M0IsSUFBQSw2QkFBQXJvQyxLQUFBc3RELFdBQUE5TSxJQUFBLHdCQUFBeGdELEtBQUFxeEMsR0FLQXJ4QyxNQUFBc0MsR0FBQSxlQUFBay9ELEVBUUEsSUFBQTNyQixHQUFBNzFDLEtBQUF5M0IsR0FBQWdoQixPQUNBejRDLE1BQUE0aEUsVUFBQSxXQUFBL3JCLEdBQUEsYUFBQUEsSUFBQSxXQUFBNzFDLEtBQUF5M0IsR0FBQTdtQixXQUFBNm5DLFFBR0F6NEMsS0FBQStVLE1BQUEyakMsR0FBQSxlQUNBMTRDLEtBQUFnVixJQUFBMGpDLEdBQUEsYUFDQWgxQyxFQUFBMUQsS0FBQXkzQixHQUFBejNCLEtBQUFnVixLQUNBdVQsRUFBQXZvQixLQUFBK1UsTUFBQS9VLEtBQUFnVixLQUdBaFYsS0FBQW1PLE1BQUFuVyxPQUFBMkssT0FBQSxNQUdBM0MsS0FBQTZ3QyxRQUFBLEdBQUFvVyxJQUFBam5ELEtBQUFxeEMsR0FBQXJ4QyxLQUFBeTNCLEtBR0EwN0IsT0FBQSxTQUFBMXRELEdBQ0F6RixLQUFBNmhFLEtBQUFwOEQsR0FDQXpGLEtBQUE4aEUsWUFDQTloRSxLQUFBK2hFLGVBaUJBRixLQUFBLFNBQUFwOEQsR0FFQSxHQVlBN1AsR0FBQXNCLEVBQUFnbkMsRUFBQTRKLEVBQUFsbkMsRUFBQW9oRSxFQVpBM0ksRUFBQTV6RCxFQUFBLEdBQ0F3OEQsRUFBQWppRSxLQUFBa2lFLFdBQUFoK0QsRUFBQW0xRCxJQUFBdG9CLEVBQUFzb0IsRUFBQSxTQUFBdG9CLEVBQUFzb0IsRUFBQSxVQUVBMVIsRUFBQTNuRCxLQUFBb0gsT0FBQSs2RCxRQUNBQyxFQUFBcGlFLEtBQUFxaUUsTUFDQUEsRUFBQXJpRSxLQUFBcWlFLE1BQUEsR0FBQXppRSxPQUFBNkYsRUFBQXhQLFFBQ0FncUUsRUFBQWpnRSxLQUFBaWdFLE1BQ0FwNEIsRUFBQTduQyxLQUFBNm5DLFNBQ0E5eUIsRUFBQS9VLEtBQUErVSxNQUNBQyxFQUFBaFYsS0FBQWdWLElBQ0FtakQsRUFBQWxoQixFQUFBbGlDLEdBQ0ExQixHQUFBK3VELENBT0EsS0FBQXhzRSxFQUFBLEVBQUFzQixFQUFBdU8sRUFBQXhQLE9BQUFMLEVBQUFzQixFQUFBdEIsSUFDQXlqRSxFQUFBNXpELEVBQUE3UCxHQUNBa3lDLEVBQUFtNkIsRUFBQTVJLEVBQUFFLEtBQUEsS0FDQTM0RCxFQUFBcWhFLEVBQUE1SSxFQUFBQyxPQUFBRCxFQUNBMkksR0FBQTk5RCxFQUFBdEQsR0FDQXM5QixHQUFBN3FCLEdBQUFyVCxLQUFBc2lFLGNBQUExaEUsRUFBQWhMLEVBQUFreUMsR0FDQTVKLEdBRUFBLEVBQUFxa0MsUUFBQSxFQUVBcmtDLEVBQUE2akIsTUFBQW9lLE9BQUF2cUUsRUFFQWt5QyxJQUNBNUosRUFBQTZqQixNQUFBd1gsS0FBQXp4QixHQUdBRCxJQUNBM0osRUFBQTZqQixNQUFBbGEsR0FBQSxPQUFBQyxFQUFBQSxFQUFBbHlDLElBSUEreEQsR0FBQXNhLEdBQUFELElBQ0FwbUIsR0FBQSxXQUNBMWQsRUFBQTZqQixNQUFBa2UsR0FBQXIvRCxNQUtBczlCLEVBQUFsK0IsS0FBQTJDLE9BQUEvQixFQUFBcS9ELEVBQUFycUUsRUFBQWt5QyxHQUNBNUosRUFBQXNrQyxPQUFBbnZELEdBRUFndkQsRUFBQXpzRSxHQUFBc29DLEVBQ0E3cUIsR0FDQTZxQixFQUFBM1YsT0FBQXZULEVBS0EsS0FBQTNCLEVBQUEsQ0FPQSxHQUFBb3ZELEdBQUEsRUFDQUMsRUFBQU4sRUFBQW5zRSxPQUFBb3NFLEVBQUFwc0UsTUFLQSxLQURBK0osS0FBQXF4QyxHQUFBaU4sZUFBQSxFQUNBMW9ELEVBQUEsRUFBQXNCLEVBQUFrckUsRUFBQW5zRSxPQUFBTCxFQUFBc0IsRUFBQXRCLElBQ0Fzb0MsRUFBQWtrQyxFQUFBeHNFLEdBQ0Fzb0MsRUFBQXFrQyxTQUNBdmlFLEtBQUEyaUUsaUJBQUF6a0MsR0FDQWwrQixLQUFBdUosT0FBQTIwQixFQUFBdWtDLElBQUFDLEVBQUF2SyxHQUdBbjRELE1BQUFxeEMsR0FBQWlOLGVBQUEsRUFDQW1rQixJQUNBemlFLEtBQUFxeEMsR0FBQW1NLFVBQUF4OUMsS0FBQXF4QyxHQUFBbU0sVUFBQWh3QyxPQUFBLFNBQUExUyxHQUNBLE1BQUFBLEdBQUFvM0IsU0FNQSxJQUFBMHdDLEdBQUFDLEVBQUFDLEVBQ0FDLEVBQUEsQ0FDQSxLQUFBbnRFLEVBQUEsRUFBQXNCLEVBQUFtckUsRUFBQXBzRSxPQUFBTCxFQUFBc0IsRUFBQXRCLElBQ0Fzb0MsRUFBQW1rQyxFQUFBenNFLEdBRUFndEUsRUFBQVAsRUFBQXpzRSxFQUFBLEdBQ0FpdEUsRUFBQUQsRUFBQUEsRUFBQUksVUFBQUosRUFBQUssY0FBQUwsRUFBQTV0RCxLQUFBNHRELEVBQUExckIsS0FBQW5pQyxFQUNBbXBCLEVBQUFxa0MsU0FBQXJrQyxFQUFBOGtDLFdBQ0FGLEVBQUF6YixHQUFBbnBCLEVBQUFucEIsRUFBQS9VLEtBQUFzQyxJQUNBd2dFLElBQUFGLEdBQUFFLEdBR0F6YixHQUFBeWIsRUFBQS90RCxFQUFBL1UsS0FBQXNDLE1BQUFzZ0UsR0FDQTVpRSxLQUFBa2pFLEtBQUFobEMsRUFBQTJrQyxJQUtBN2lFLEtBQUF1M0QsT0FBQXI1QixFQUFBNmtDLElBQUFGLEVBQUExSyxHQUVBajZCLEVBQUFxa0MsT0FBQXJrQyxFQUFBc2tDLE9BQUEsSUFjQTcvRCxPQUFBLFNBQUEvQixFQUFBcS9ELEVBQUFqZ0QsRUFBQThuQixHQUNBLEdBQUFqL0IsR0FBQTdJLEtBQUE0MEQsTUFFQXVPLEVBQUFuakUsS0FBQXkrQyxRQUFBeitDLEtBQUFxeEMsR0FDQTBRLEVBQUEvcEQsT0FBQTJLLE9BQUF3Z0UsRUFFQXBoQixHQUFBekUsTUFBQXRsRCxPQUFBMkssT0FBQXdnRSxFQUFBN2xCLE9BQ0F5RSxFQUFBeEUsS0FBQXZsRCxPQUFBMkssT0FBQXdnRSxFQUFBNWxCLE1BRUF3RSxFQUFBaEwsUUFBQW9zQixFQUVBcGhCLEVBQUFpZSxZQUFBaGdFLEtBSUE0N0MsR0FBQSxXQUNBYyxHQUFBcUYsRUFBQWtlLEVBQUFyL0QsS0FFQTg3QyxHQUFBcUYsRUFBQSxTQUFBL2hDLEdBQ0E4bkIsRUFDQTRVLEdBQUFxRixFQUFBLE9BQUFqYSxHQUNBaWEsRUFBQXdYLE1BRUF4bUIsRUFBQWdQLEVBQUEsT0FBQSxNQUVBL2hELEtBQUE2bkMsVUFDQTZVLEdBQUFxRixFQUFBL2hELEtBQUE2bkMsU0FBQSxPQUFBQyxFQUFBQSxFQUFBOW5CLEVBRUEsSUFBQWtlLEdBQUFsK0IsS0FBQTZ3QyxRQUFBbHVDLE9BQUFrRyxFQUFBazVDLEVBQUEvaEQsS0FBQTArQyxNQUdBLE9BRkF4Z0IsR0FBQW9wQixNQUFBdG5ELEtBQUFzQyxHQUNBdEMsS0FBQW9qRSxVQUFBeGlFLEVBQUFzOUIsRUFBQWxlLEVBQUE4bkIsR0FDQTVKLEdBT0E0akMsVUFBQSxXQUNBLEdBQUE3UixHQUFBandELEtBQUFzdEQsV0FBQTJDLEdBQ0EsSUFBQUEsRUFBQSxDQUNBLEdBQ0ErRSxHQURBanNELEdBQUEvSSxLQUFBeStDLFFBQUF6K0MsS0FBQXF4QyxJQUFBaU0sS0FFQXQ5QyxNQUFBa2lFLFlBR0FsTixLQUNBaDFELEtBQUFxaUUsTUFBQTE5RCxRQUFBLFNBQUF1NUIsR0FDQTgyQixFQUFBOTJCLEVBQUE2akIsTUFBQXdYLE1BQUFoUyxHQUFBcnBCLE1BSkE4MkIsRUFBQWgxRCxLQUFBcWlFLE1BQUE1ekQsSUFBQTg0QyxJQU9BeCtDLEVBQUFrbkQsR0FBQStFLElBUUErTSxZQUFBLFdBQ0EsR0FBQS9oRSxLQUFBNGhFLFNBQUEsQ0FDQSxHQUFBbm5FLEdBQUF1RixLQUFBK1UsTUFBQW5FLFdBQ0E2N0IsRUFBQWh5QyxHQUFBQSxFQUFBNG9FLFNBQ0E1MkIsSUFDQUEsRUFBQTYyQixnQkFjQS9MLE9BQUEsU0FBQXI1QixFQUFBbGUsRUFBQTZpRCxFQUFBMUssR0FDQWo2QixFQUFBOGtDLFlBQ0E5a0MsRUFBQThrQyxVQUFBOTRELFNBQ0FnMEIsRUFBQThrQyxVQUFBLEtBRUEsSUFBQU8sR0FBQXZqRSxLQUFBd2pFLFdBQUF0bEMsRUFBQWxlLEVBQUEsS0FBQSxRQUNBLElBQUFtNEMsR0FBQW9MLEVBQUEsQ0FJQSxHQUFBM3FCLEdBQUExYSxFQUFBK2tDLGFBQ0FycUIsS0FDQUEsRUFBQTFhLEVBQUEra0MsY0FBQXZxQixHQUFBLGtCQUNBRSxFQUFBK04sU0FBQXpvQixHQUVBMVYsRUFBQW93QixFQUFBaXFCLEVBQ0EsSUFBQXBzQixHQUFBdlksRUFBQThrQyxVQUFBeHZCLEVBQUEsV0FDQXRWLEVBQUE4a0MsVUFBQSxLQUNBOWtDLEVBQUEzVixPQUFBcXdCLEdBQ0FydkMsRUFBQXF2QyxJQUVBL3RDLFlBQUE0ckMsRUFBQThzQixPQUNBLENBQ0EsR0FBQWptRSxHQUFBdWxFLEVBQUFyb0QsV0FFQWxkLEtBR0FrckIsRUFBQXhvQixLQUFBZ1YsSUFBQTZ0RCxHQUNBdmxFLEVBQUEwQyxLQUFBZ1YsS0FFQWtwQixFQUFBM1YsT0FBQWpyQixLQWFBaU0sT0FBQSxTQUFBMjBCLEVBQUFsZSxFQUFBaXBDLEVBQUFrUCxHQUNBLEdBQUFqNkIsRUFBQThrQyxVQVFBLE1BUEE5a0MsR0FBQThrQyxVQUFBOTRELGNBQ0FnMEIsRUFBQThrQyxVQUFBLEtBUUEsSUFBQU8sR0FBQXZqRSxLQUFBd2pFLFdBQUF0bEMsRUFBQWxlLEVBQUFpcEMsRUFBQSxRQUNBLElBQUFrUCxHQUFBb0wsRUFBQSxDQUNBLEdBQUE5c0IsR0FBQXZZLEVBQUE4a0MsVUFBQXh2QixFQUFBLFdBQ0F0VixFQUFBOGtDLFVBQUEsS0FDQTlrQyxFQUFBMzBCLFVBRUFzQixZQUFBNHJDLEVBQUE4c0IsT0FFQXJsQyxHQUFBMzBCLFVBWUEyNUQsS0FBQSxTQUFBaGxDLEVBQUEya0MsR0FNQUEsRUFBQXJvRCxhQUNBeGEsS0FBQWdWLElBQUFwRSxXQUFBbEIsWUFBQTFQLEtBQUFnVixLQUVBa3BCLEVBQUEzVixPQUFBczZDLEVBQUFyb0QsYUFBQSxJQVlBNG9ELFVBQUEsU0FBQXhpRSxFQUFBczlCLEVBQUFsZSxFQUFBOG5CLEdBQ0EsR0FHQXhsQyxHQUhBcWxELEVBQUEzbkQsS0FBQW9ILE9BQUErNkQsUUFDQWgwRCxFQUFBbk8sS0FBQW1PLE1BQ0E2ekQsR0FBQTk5RCxFQUFBdEQsRUFFQWtuQyxJQUFBNmYsR0FBQXFhLEdBQ0ExL0QsRUFBQW9sRCxHQUFBMW5DLEVBQUE4bkIsRUFBQWxuQyxFQUFBK21ELEdBQ0F4NUMsRUFBQTdMLEdBRUEsV0FBQXFsRCxHQUNBM25ELEtBQUF5akUsY0FBQTdpRSxHQUZBdU4sRUFBQTdMLEdBQUE0N0IsSUFLQTU3QixFQUFBdEMsS0FBQXNDLEdBQ0F5dUMsRUFBQW53QyxFQUFBMEIsR0FDQSxPQUFBMUIsRUFBQTBCLEdBQ0ExQixFQUFBMEIsR0FBQTQ3QixFQUVBbCtCLEtBQUF5akUsY0FBQTdpRSxHQUVBNUksT0FBQXdrRCxhQUFBNTdDLEdBQ0FteUMsRUFBQW55QyxFQUFBMEIsRUFBQTQ3QixHQUVBbUssR0FBQSwrRkFHQW5LLEVBQUFzaUIsSUFBQTUvQyxHQVlBMGhFLGNBQUEsU0FBQTFoRSxFQUFBb2YsRUFBQThuQixHQUNBLEdBRUE1SixHQUZBeXBCLEVBQUEzbkQsS0FBQW9ILE9BQUErNkQsUUFDQUgsR0FBQTk5RCxFQUFBdEQsRUFFQSxJQUFBa25DLEdBQUE2ZixHQUFBcWEsRUFBQSxDQUNBLEdBQUExL0QsR0FBQW9sRCxHQUFBMW5DLEVBQUE4bkIsRUFBQWxuQyxFQUFBK21ELEVBQ0F6cEIsR0FBQWwrQixLQUFBbU8sTUFBQTdMLE9BRUE0N0IsR0FBQXQ5QixFQUFBWixLQUFBc0MsR0FLQSxPQUhBNDdCLEtBQUFBLEVBQUFxa0MsUUFBQXJrQyxFQUFBc2tDLFFBQ0F4aUUsS0FBQXlqRSxjQUFBN2lFLEdBRUFzOUIsR0FTQXlrQyxpQkFBQSxTQUFBemtDLEdBQ0EsR0FBQXQ5QixHQUFBczlCLEVBQUFzaUIsSUFDQW1ILEVBQUEzbkQsS0FBQW9ILE9BQUErNkQsUUFDQXBnQixFQUFBN2pCLEVBQUE2akIsTUFDQS9oQyxFQUFBK2hDLEVBQUFvZSxPQUdBcjRCLEVBQUFpSixFQUFBZ1IsRUFBQSxTQUFBQSxFQUFBd1gsS0FDQXlJLEdBQUE5OUQsRUFBQXRELEVBQ0EsSUFBQSttRCxHQUFBN2YsR0FBQWs2QixFQUFBLENBQ0EsR0FBQTEvRCxHQUFBb2xELEdBQUExbkMsRUFBQThuQixFQUFBbG5DLEVBQUErbUQsRUFDQTNuRCxNQUFBbU8sTUFBQTdMLEdBQUEsU0FFQTFCLEdBQUFaLEtBQUFzQyxJQUFBLEtBQ0E0N0IsRUFBQXNpQixJQUFBLE1BYUFnakIsV0FBQSxTQUFBdGxDLEVBQUFsZSxFQUFBaXBDLEVBQUE3dUQsR0FDQUEsR0FBQSxTQUNBLElBQUFzcEUsR0FBQXhsQyxFQUFBZ1osS0FBQVAsVUFDQUMsRUFBQThzQixHQUFBQSxFQUFBOXNCLE1BQ0F5ZCxFQUFBemQsSUFBQUEsRUFBQXg4QyxJQUFBdzhDLEVBQUErc0IsUUFDQSxPQUFBdFAsR0FBQUEsRUFBQWw4RCxLQUFBK2xDLEVBQUFsZSxFQUFBaXBDLEdBQUFqcEMsRUFBQXZuQixTQUFBdUgsS0FBQW9ILE9BQUFoTixJQUFBNEYsS0FBQW9ILE9BQUF1OEQsUUFBQSxLQVFBQyxZQUFBLFNBQUFoakUsR0FHQSxNQURBWixNQUFBdXFELFNBQUEzcEQsRUFDQUEsR0FZQWlqRSxhQUFBLFNBQUFqakUsR0FDQSxHQUFBZixHQUFBZSxHQUNBLE1BQUFBLEVBQ0EsSUFBQXFZLEVBQUFyWSxHQUFBLENBTUEsSUFKQSxHQUdBa25DLEdBSEFtSSxFQUFBajRDLE9BQUFpNEMsS0FBQXJ2QyxHQUNBaEwsRUFBQXE2QyxFQUFBaDZDLE9BQ0E0QyxFQUFBLEdBQUErRyxPQUFBaEssR0FFQUEsS0FDQWt5QyxFQUFBbUksRUFBQXI2QyxHQUNBaUQsRUFBQWpELElBQ0EyakUsS0FBQXp4QixFQUNBd3hCLE9BQUExNEQsRUFBQWtuQyxHQUdBLE9BQUFqdkMsR0FLQSxNQUhBLGdCQUFBK0gsSUFBQWdoQyxNQUFBaGhDLEtBQ0FBLEVBQUE2a0MsR0FBQTdrQyxJQUVBQSxPQUlBK3ZCLE9BQUEsV0FJQSxHQUhBM3dCLEtBQUFzdEQsV0FBQTJDLE9BQ0Fqd0QsS0FBQXkrQyxRQUFBeitDLEtBQUFxeEMsSUFBQWlNLE1BQUF0OUMsS0FBQXN0RCxXQUFBMkMsS0FBQSxNQUVBandELEtBQUFxaUUsTUFHQSxJQUZBLEdBQ0Fua0MsR0FEQXRvQyxFQUFBb0ssS0FBQXFpRSxNQUFBcHNFLE9BRUFMLEtBQ0Fzb0MsRUFBQWwrQixLQUFBcWlFLE1BQUF6c0UsR0FDQW9LLEtBQUEyaUUsaUJBQUF6a0MsR0FDQUEsRUFBQTRFLFdBb0ZBMitCLElBQUFnQyxjQUFBLFNBQUE3aUUsR0FDQXluQyxHQUFBLG1DQUFBcm9DLEtBQUFzdEQsV0FBQTlNLElBQUEsTUFBQXZuRCxLQUFBQyxVQUFBMEgsR0FBQSxpRUFBQVosS0FBQXF4QyxJQUlBLElBQUF5eUIsS0FFQXZXLFNBQUE4VCxHQUNBeFUsVUFBQSxFQUVBbG1ELEtBQUEsV0FDQSxHQUFBOHdCLEdBQUF6M0IsS0FBQXkzQixFQUNBLElBQUFBLEVBQUErdkIsUUFXQW5mLEdBQUEsU0FBQXJvQyxLQUFBKzBDLFdBQUEsZ0RBQUEvMEMsS0FBQXF4QyxJQUNBcnhDLEtBQUErakUsU0FBQSxNQVpBLENBRUEsR0FBQW5rRCxHQUFBNlgsRUFBQXVzQyxrQkFDQXBrRCxJQUFBLE9BQUF3M0IsRUFBQXgzQixFQUFBLFlBQ0FyVyxFQUFBcVcsR0FDQTVmLEtBQUFpa0UsT0FBQXJrRCxHQUdBNWYsS0FBQTQ0QyxPQUFBRixHQUFBLFFBQ0FoMUMsRUFBQSt6QixFQUFBejNCLEtBQUE0NEMsVUFPQXVhLE9BQUEsU0FBQXZ5RCxHQUNBWixLQUFBK2pFLFVBQ0FuakUsRUFDQVosS0FBQWsrQixNQUNBbCtCLEtBQUF1M0QsU0FHQXYzRCxLQUFBdUosV0FJQWd1RCxPQUFBLFdBQ0F2M0QsS0FBQWtrRSxXQUNBbGtFLEtBQUFra0UsU0FBQTM2RCxTQUNBdkosS0FBQWtrRSxTQUFBLE1BR0Fsa0UsS0FBQTZ3QyxVQUNBN3dDLEtBQUE2d0MsUUFBQSxHQUFBb1csSUFBQWpuRCxLQUFBcXhDLEdBQUFyeEMsS0FBQXkzQixLQUVBejNCLEtBQUFrK0IsS0FBQWwrQixLQUFBNndDLFFBQUFsdUMsT0FBQTNDLEtBQUE0MEQsTUFBQTUwRCxLQUFBeStDLE9BQUF6K0MsS0FBQTArQyxPQUNBMStDLEtBQUFrK0IsS0FBQTNWLE9BQUF2b0IsS0FBQTQ0QyxTQUdBcnZDLE9BQUEsV0FDQXZKLEtBQUFrK0IsT0FDQWwrQixLQUFBaytCLEtBQUEzMEIsU0FDQXZKLEtBQUFrK0IsS0FBQSxNQUVBbCtCLEtBQUFpa0UsU0FBQWprRSxLQUFBa2tFLFdBQ0Fsa0UsS0FBQW1rRSxjQUNBbmtFLEtBQUFta0UsWUFBQSxHQUFBbGQsSUFBQWpuRCxLQUFBaWtFLE9BQUF6bEIsVUFBQXgrQyxLQUFBcXhDLEdBQUFyeEMsS0FBQWlrRSxTQUVBamtFLEtBQUFra0UsU0FBQWxrRSxLQUFBbWtFLFlBQUF4aEUsT0FBQTNDLEtBQUE0MEQsTUFBQTUwRCxLQUFBeStDLE9BQUF6K0MsS0FBQTArQyxPQUNBMStDLEtBQUFra0UsU0FBQTM3QyxPQUFBdm9CLEtBQUE0NEMsVUFJQWpvQixPQUFBLFdBQ0Ezd0IsS0FBQWsrQixNQUNBbCtCLEtBQUFrK0IsS0FBQTRFLFVBRUE5aUMsS0FBQWtrRSxVQUNBbGtFLEtBQUFra0UsU0FBQXBoQyxZQUtBbnVCLElBRUFoTyxLQUFBLFdBRUEsR0FBQWlaLEdBQUE1ZixLQUFBeTNCLEdBQUF1c0Msa0JBQ0Fwa0QsSUFBQSxPQUFBdzNCLEVBQUF4M0IsRUFBQSxZQUNBNWYsS0FBQWlrRSxPQUFBcmtELElBSUF1ekMsT0FBQSxTQUFBdnlELEdBQ0FaLEtBQUE2RSxNQUFBN0UsS0FBQXkzQixHQUFBNzJCLEdBQ0FaLEtBQUFpa0UsUUFDQWprRSxLQUFBNkUsTUFBQTdFLEtBQUFpa0UsUUFBQXJqRSxJQUlBaUUsTUFBQSxTQUFBNHlCLEVBQUE3MkIsR0FPQSxRQUFBcXJCLEtBQ0F3TCxFQUFBbmxCLE1BQUFmLFFBQUEzUSxFQUFBLEdBQUEsT0FQQXEyQyxFQUFBeGYsR0FDQTRlLEVBQUE1ZSxFQUFBNzJCLEVBQUEsR0FBQSxFQUFBcXJCLEVBQUFqc0IsS0FBQXF4QyxJQUVBcGxCLE1BU0FtNEMsSUFFQXo5RCxLQUFBLFdBQ0EsR0FBQXlGLEdBQUFwTSxLQUNBeTNCLEVBQUF6M0IsS0FBQXkzQixHQUNBNHNDLEVBQUEsVUFBQTVzQyxFQUFBcjlCLEtBQ0FtcEQsRUFBQXZqRCxLQUFBb0gsT0FBQW04QyxLQUNBOGIsRUFBQXIvRCxLQUFBb0gsT0FBQWk0RCxPQUNBVixFQUFBMytELEtBQUFvSCxPQUFBdTNELFNBU0EyRixHQUFBLENBa0VBLElBakVBM3ZFLElBQUEwdkUsSUFDQXJrRSxLQUFBa25CLEdBQUEsbUJBQUEsV0FDQW85QyxHQUFBLElBRUF0a0UsS0FBQWtuQixHQUFBLGlCQUFBLFdBQ0FvOUMsR0FBQSxFQU1BL2dCLEdBQ0FuM0MsRUFBQW00RCxjQU9BdmtFLEtBQUF3a0UsU0FBQSxFQUNBSCxHQUFBOWdCLElBQ0F2akQsS0FBQWtuQixHQUFBLFFBQUEsV0FDQTlhLEVBQUFvNEQsU0FBQSxJQUVBeGtFLEtBQUFrbkIsR0FBQSxPQUFBLFdBQ0E5YSxFQUFBbzRELFNBQUEsRUFFQXA0RCxFQUFBc3lDLFFBQUF0eUMsRUFBQXN5QyxNQUFBMkgsVUFDQWo2QyxFQUFBcTRELGlCQU1BemtFLEtBQUF1a0UsU0FBQXZrRSxLQUFBeWtFLFlBQUEsV0FDQSxJQUFBSCxHQUFBbDRELEVBQUFzb0QsT0FBQSxDQUdBLEdBQUExbEMsR0FBQXF3QyxHQUFBZ0YsRUFBQXR5QixFQUFBdGEsRUFBQTcyQixPQUFBNjJCLEVBQUE3MkIsS0FDQXdMLEdBQUF3ZixJQUFBb0QsR0FHQTVrQixHQUFBLFdBQ0FnQyxFQUFBc29ELFNBQUF0b0QsRUFBQW80RCxTQUNBcDRELEVBQUErbUQsT0FBQS9tRCxFQUFBMDBELFNBQUFsZ0UsV0FNQSs5RCxJQUNBMytELEtBQUF1a0UsU0FBQXR4QixFQUFBanpDLEtBQUF1a0UsU0FBQTVGLElBYUEzK0QsS0FBQTBrRSxVQUFBLGtCQUFBL3RDLFFBQ0EzMkIsS0FBQTBrRSxVQUFBLENBQ0EsR0FBQXovRCxHQUFBMHhCLE9BQUFwZSxHQUFBMk8sR0FBQSxLQUFBLE1BQ0F5UCxRQUFBYyxHQUFBeHlCLEdBQUEsU0FBQWpGLEtBQUF5a0UsYUFDQWxoQixHQUNBNXNCLE9BQUFjLEdBQUF4eUIsR0FBQSxRQUFBakYsS0FBQXVrRSxjQUdBdmtFLE1BQUFrbkIsR0FBQSxTQUFBbG5CLEtBQUF5a0UsYUFDQWxoQixHQUNBdmpELEtBQUFrbkIsR0FBQSxRQUFBbG5CLEtBQUF1a0UsV0FLQWhoQixHQUFBekwsS0FDQTkzQyxLQUFBa25CLEdBQUEsTUFBQSxXQUNBOWMsR0FBQWdDLEVBQUFtNEQsWUFFQXZrRSxLQUFBa25CLEdBQUEsUUFBQSxTQUFBNXhCLEdBQ0EsS0FBQUEsRUFBQTB2QixTQUFBLElBQUExdkIsRUFBQTB2QixTQUNBNVksRUFBQW00RCxlQU1BOXNDLEVBQUF6MkIsYUFBQSxVQUFBLGFBQUF5MkIsRUFBQWdoQixTQUFBaGhCLEVBQUE3MkIsTUFBQWdFLFVBQ0E1RSxLQUFBMmtFLFVBQUEza0UsS0FBQXVrRSxXQUlBcFIsT0FBQSxTQUFBdnlELEdBR0FBLEVBQUFreEMsRUFBQWx4QyxHQUNBQSxJQUFBWixLQUFBeTNCLEdBQUE3MkIsUUFBQVosS0FBQXkzQixHQUFBNzJCLE1BQUFBLElBR0ErdkIsT0FBQSxXQUNBLEdBQUE4RyxHQUFBejNCLEtBQUF5M0IsRUFDQSxJQUFBejNCLEtBQUEwa0UsVUFBQSxDQUNBLEdBQUF6L0QsR0FBQTB4QixPQUFBcGUsR0FBQWlKLElBQUEsTUFBQSxRQUNBbVYsUUFBQWMsR0FBQXh5QixHQUFBLFNBQUFqRixLQUFBdWtFLFVBQ0E1dEMsT0FBQWMsR0FBQXh5QixHQUFBLFFBQUFqRixLQUFBdWtFLGFBS0EzbEQsSUFFQWpZLEtBQUEsV0FDQSxHQUFBeUYsR0FBQXBNLEtBQ0F5M0IsRUFBQXozQixLQUFBeTNCLEVBRUF6M0IsTUFBQTRuRCxTQUFBLFdBRUEsR0FBQW53QixFQUFBdi9CLGVBQUEsVUFDQSxNQUFBdS9CLEdBQUFxd0IsTUFFQSxJQUFBOTRCLEdBQUF5SSxFQUFBNzJCLEtBSUEsT0FIQXdMLEdBQUFoRixPQUFBaTRELFNBQ0Fyd0MsRUFBQStpQixFQUFBL2lCLElBRUFBLEdBR0FodkIsS0FBQXVrRSxTQUFBLFdBQ0FuNEQsRUFBQXdmLElBQUF4ZixFQUFBdzdDLGFBRUE1bkQsS0FBQWtuQixHQUFBLFNBQUFsbkIsS0FBQXVrRSxVQUVBOXNDLEVBQUF6MkIsYUFBQSxhQUNBaEIsS0FBQTJrRSxVQUFBM2tFLEtBQUF1a0UsV0FJQXBSLE9BQUEsU0FBQXZ5RCxHQUNBWixLQUFBeTNCLEdBQUFsb0IsUUFBQW1rQyxFQUFBOXlDLEVBQUFaLEtBQUE0bkQsY0FJQXZvQyxJQUVBMVksS0FBQSxXQUNBLEdBQUFpK0QsR0FBQTVrRSxLQUVBb00sRUFBQXBNLEtBQ0F5M0IsRUFBQXozQixLQUFBeTNCLEVBR0F6M0IsTUFBQXNqRSxZQUFBLFdBQ0FsM0QsRUFBQTAwRCxVQUNBMTBELEVBQUErbUQsT0FBQS9tRCxFQUFBMDBELFNBQUE1dUQsT0FLQSxJQUFBMnlELEdBQUE3a0UsS0FBQTZrRSxTQUFBcHRDLEVBQUF6MkIsYUFBQSxXQUdBaEIsTUFBQXVrRSxTQUFBLFdBQ0EsR0FBQTNqRSxHQUFBZ25ELEdBQUFud0IsRUFBQW90QyxFQUNBamtFLEdBQUF3TCxFQUFBaEYsT0FBQWk0RCxPQUFBeC9ELEdBQUFlLEdBQUFBLEVBQUE2TixJQUFBc2pDLEdBQUFBLEVBQUFueEMsR0FBQUEsRUFDQXdMLEVBQUF3ZixJQUFBaHJCLElBRUFaLEtBQUFrbkIsR0FBQSxTQUFBbG5CLEtBQUF1a0UsU0FHQSxJQUFBTyxHQUFBbGQsR0FBQW53QixFQUFBb3RDLEdBQUEsSUFDQUEsR0FBQUMsRUFBQTd1RSxTQUFBNHVFLEdBQUEsT0FBQUMsS0FDQTlrRSxLQUFBMmtFLFVBQUEza0UsS0FBQXVrRSxVQU9BdmtFLEtBQUFxeEMsR0FBQXVpQixJQUFBLGdCQUFBLFdBQ0F4cEQsR0FBQXc2RCxFQUFBdEIsZUFFQXJzQixFQUFBeGYsSUFDQXJ0QixHQUFBcEssS0FBQXNqRSxjQUlBblEsT0FBQSxTQUFBdnlELEdBQ0EsR0FBQTYyQixHQUFBejNCLEtBQUF5M0IsRUFDQUEsR0FBQXRaLGVBQUEsQ0FLQSxLQUpBLEdBR0FzNEIsR0FBQXpuQixFQUhBNjRCLEVBQUE3bkQsS0FBQTZrRSxVQUFBaGxFLEdBQUFlLEdBQ0E2bkIsRUFBQWdQLEVBQUFoUCxRQUNBN3lCLEVBQUE2eUIsRUFBQXh5QixPQUVBTCxLQUNBNmdELEVBQUFodUIsRUFBQTd5QixHQUNBbzVCLEVBQUF5bkIsRUFBQXYrQyxlQUFBLFVBQUF1K0MsRUFBQXFSLE9BQUFyUixFQUFBNzFDLE1BRUE2MUMsRUFBQXhsQyxTQUFBNDJDLEVBQUFFLEdBQUFubkQsRUFBQW91QixJQUFBLEVBQUEwa0IsRUFBQTl5QyxFQUFBb3VCLElBS0EyQixPQUFBLFdBRUEzd0IsS0FBQXF4QyxHQUFBMmtCLEtBQUEsZ0JBQUFoMkQsS0FBQXNqRSxlQWlEQXprRCxJQUVBbFksS0FBQSxXQVFBLFFBQUFvK0QsS0FDQSxHQUFBLzFDLEdBQUF5SSxFQUFBbG9CLE9BQ0EsT0FBQXlmLElBQUF5SSxFQUFBdi9CLGVBQUEsY0FDQXUvQixFQUFBdXRDLFlBRUFoMkMsR0FBQXlJLEVBQUF2L0IsZUFBQSxlQUNBdS9CLEVBQUF3dEMsWUFFQWoyQyxFQWZBLEdBQUE1aUIsR0FBQXBNLEtBQ0F5M0IsRUFBQXozQixLQUFBeTNCLEVBRUF6M0IsTUFBQTRuRCxTQUFBLFdBQ0EsTUFBQW53QixHQUFBdi9CLGVBQUEsVUFBQXUvQixFQUFBcXdCLE9BQUExN0MsRUFBQWhGLE9BQUFpNEQsT0FBQXR0QixFQUFBdGEsRUFBQTcyQixPQUFBNjJCLEVBQUE3MkIsT0FjQVosS0FBQXVrRSxTQUFBLFdBQ0EsR0FBQTkzQixHQUFBcmdDLEVBQUEwMEQsU0FBQWxnRSxLQUNBLElBQUFmLEdBQUE0c0MsR0FBQSxDQUNBLEdBQUF6ZCxHQUFBNWlCLEVBQUF3N0MsVUFDQW53QixHQUFBbG9CLFFBQ0FsVSxFQUFBb3hDLEVBQUF6ZCxHQUFBLEdBQ0F5ZCxFQUFBenlDLEtBQUFnMUIsR0FHQXlkLEVBQUFvaEIsUUFBQTcrQixPQUdBNWlCLEdBQUF3ZixJQUFBbTVDLE1BSUEva0UsS0FBQWtuQixHQUFBLFNBQUFsbkIsS0FBQXVrRSxVQUNBOXNDLEVBQUF6MkIsYUFBQSxhQUNBaEIsS0FBQTJrRSxVQUFBM2tFLEtBQUF1a0UsV0FJQXBSLE9BQUEsU0FBQXZ5RCxHQUNBLEdBQUE2MkIsR0FBQXozQixLQUFBeTNCLEVBQ0E1M0IsSUFBQWUsR0FDQTYyQixFQUFBbG9CLFFBQUFsVSxFQUFBdUYsRUFBQVosS0FBQTRuRCxhQUFBLEVBRUFud0IsRUFBQXYvQixlQUFBLGNBQ0F1L0IsRUFBQWxvQixRQUFBbWtDLEVBQUE5eUMsRUFBQTYyQixFQUFBdXRDLFlBRUF2dEMsRUFBQWxvQixVQUFBM08sSUFNQTRJLElBQ0FtSCxLQUFBeXpELEdBQ0F4bEQsTUFBQUEsR0FDQVMsT0FBQUEsR0FDQVIsU0FBQUEsSUFHQTR0QixJQUVBOGdCLFNBQUEzZSxHQUNBa1YsUUFBQSxFQUNBdDZDLFNBQUFBLEdBQ0FwQyxRQUFBLE9BQUEsU0FBQSxZQWFBVCxLQUFBLFdBRUEzRyxLQUFBa2xFLGVBQ0FsbEUsS0FBQW1sRSxVQUFBbmxFLEtBQUFvbEUsVUFDQS84QixHQUFBLDJEQUFBcm9DLEtBQUFzdEQsV0FBQTlNLElBQUEsd0VBQUF4Z0QsS0FBQXF4QyxHQUVBLElBRUF4dUIsR0FGQTRVLEVBQUF6M0IsS0FBQXkzQixHQUNBb2UsRUFBQXBlLEVBQUFnaEIsT0FFQSxJQUFBLFVBQUE1QyxFQUNBaHpCLEVBQUFyWixHQUFBaXVCLEVBQUFyOUIsT0FBQW9QLEdBQUFtSCxTQUNBLElBQUEsV0FBQWtsQyxFQUNBaHpCLEVBQUFyWixHQUFBNlYsV0FDQSxDQUFBLEdBQUEsYUFBQXcyQixFQUlBLFdBREF4TixJQUFBLDBDQUFBd04sRUFBQTcxQyxLQUFBcXhDLEdBRkF4dUIsR0FBQXJaLEdBQUFtSCxLQUtBOG1CLEVBQUE0ckMsVUFBQXJqRSxLQUNBNmlCLEVBQUFsYyxLQUFBeE8sS0FBQTZILE1BQ0FBLEtBQUFtekQsT0FBQXR3QyxFQUFBc3dDLE9BQ0FuekQsS0FBQXFsRSxRQUFBeGlELEVBQUE4TixRQU9BdTBDLGFBQUEsV0FDQSxHQUFBaG1ELEdBQUFsZixLQUFBa2YsT0FDQSxJQUFBQSxFQUVBLElBREEsR0FBQXRwQixHQUFBc3BCLEVBQUFqcEIsT0FDQUwsS0FBQSxDQUNBLEdBQUE0WCxHQUFBcXNDLEdBQUE3NUMsS0FBQXF4QyxHQUFBc04sU0FBQSxVQUFBei9CLEVBQUF0cEIsR0FBQWIsT0FDQSxrQkFBQXlZLElBQUFBLEVBQUF6RixRQUNBL0gsS0FBQW1sRSxTQUFBLEdBRUEzM0QsRUFBQW5FLFFBQ0FySixLQUFBb2xFLFVBQUEsS0FLQXowQyxPQUFBLFdBQ0Ezd0IsS0FBQXkzQixHQUFBNHJDLFVBQUEsS0FDQXJqRSxLQUFBcWxFLFNBQUFybEUsS0FBQXFsRSxZQUtBbmQsSUFDQW9kLElBQUEsR0FDQUMsSUFBQSxFQUNBQyxNQUFBLEdBQ0FDLE1BQUEsR0FDQTMxQixRQUFBLEVBQUEsSUFDQTQxQixHQUFBLEdBQ0FqOEMsS0FBQSxHQUNBazhDLE1BQUEsR0FDQUMsS0FBQSxJQStDQUMsSUFFQXRZLFNBQUF3VCxHQUNBK0UsaUJBQUEsRUFDQTVkLFNBQUFBLEdBRUF2aEQsS0FBQSxXQUVBLEdBQUEsV0FBQTNHLEtBQUF5M0IsR0FBQWdoQixTQUFBLFNBQUF6NEMsS0FBQStuQyxJQUFBLENBQ0EsR0FBQTM3QixHQUFBcE0sSUFDQUEsTUFBQStsRSxXQUFBLFdBQ0E3K0MsRUFBQTlhLEVBQUFxckIsR0FBQTNsQixjQUFBMUYsRUFBQTI3QixJQUFBMzdCLEVBQUF5VyxRQUFBelcsRUFBQStqRCxVQUFBNlYsVUFFQWhtRSxLQUFBa25CLEdBQUEsT0FBQWxuQixLQUFBK2xFLGNBSUE1UyxPQUFBLFNBQUF0d0MsR0FPQSxHQUpBN2lCLEtBQUFzdEQsV0FBQTlNLE1BQ0EzOUIsRUFBQSxjQUdBLGtCQUFBQSxHQUVBLFdBREF3bEIsSUFBQSxRQUFBcm9DLEtBQUErbkMsSUFBQSxLQUFBL25DLEtBQUErMEMsV0FBQSxtQ0FBQWx5QixFQUFBN2lCLEtBQUFxeEMsR0FLQXJ4QyxNQUFBbXdELFVBQUE3NUMsT0FDQXVNLEVBQUFzbEMsR0FBQXRsQyxJQUVBN2lCLEtBQUFtd0QsVUFBQThWLFVBQ0FwakQsRUFBQXVsQyxHQUFBdmxDLElBRUE3aUIsS0FBQW13RCxVQUFBL2pELE9BQ0F5VyxFQUFBd2xDLEdBQUF4bEMsR0FHQSxJQUFBb3RCLEdBQUFqNEMsT0FBQWk0QyxLQUFBandDLEtBQUFtd0QsV0FBQTNpRCxPQUFBLFNBQUFzNkIsR0FDQSxNQUFBLFNBQUFBLEdBQUEsWUFBQUEsR0FBQSxTQUFBQSxHQUFBLFlBQUFBLEdBRUFtSSxHQUFBaDZDLFNBQ0E0c0IsRUFBQW1sQyxHQUFBbmxDLEVBQUFvdEIsSUFHQWp3QyxLQUFBaWYsUUFDQWpmLEtBQUE2aUIsUUFBQUEsRUFFQTdpQixLQUFBK2xFLFdBQ0EvbEUsS0FBQStsRSxhQUVBNytDLEVBQUFsbkIsS0FBQXkzQixHQUFBejNCLEtBQUErbkMsSUFBQS9uQyxLQUFBNmlCLFFBQUE3aUIsS0FBQW13RCxVQUFBNlYsVUFJQS9tRCxNQUFBLFdBQ0EsR0FBQXdZLEdBQUF6M0IsS0FBQStsRSxXQUFBL2xFLEtBQUF5M0IsR0FBQTNsQixjQUFBOVIsS0FBQXkzQixFQUNBejNCLE1BQUE2aUIsU0FDQXJCLEVBQUFpVyxFQUFBejNCLEtBQUErbkMsSUFBQS9uQyxLQUFBNmlCLFVBSUE4TixPQUFBLFdBQ0Ezd0IsS0FBQWlmLFVBSUE0Z0IsSUFBQSxXQUFBLFFBQUEsUUFDQStvQixJQUFBLFNBQUEsTUFBQSxNQUNBc2QsR0FBQSxnQkFDQTNkLEdBQUF2d0QsT0FBQTJLLE9BQUEsTUFFQStsRCxHQUFBLEtBRUFwMkMsSUFFQXlrRCxNQUFBLEVBRUE1RCxPQUFBLFNBQUF2eUQsR0FDQSxnQkFBQUEsR0FDQVosS0FBQXkzQixHQUFBbmxCLE1BQUFxUCxRQUFBL2dCLEVBQ0FmLEdBQUFlLEdBQ0FaLEtBQUFtbUUsYUFBQXZsRSxFQUFBd2xFLE9BQUEzakUsT0FFQXpDLEtBQUFtbUUsYUFBQXZsRSxRQUlBdWxFLGFBQUEsU0FBQXZsRSxHQUdBLEdBQ0E3TCxHQUFBaTZCLEVBREE3Z0IsRUFBQW5PLEtBQUFtTyxRQUFBbk8sS0FBQW1PLFNBRUEsS0FBQXBaLElBQUFvWixHQUNBcFosSUFBQTZMLEtBQ0FaLEtBQUFxbUUsYUFBQXR4RSxFQUFBLFlBQ0FvWixHQUFBcFosR0FHQSxLQUFBQSxJQUFBNkwsR0FDQW91QixFQUFBcHVCLEVBQUE3TCxHQUNBaTZCLElBQUE3Z0IsRUFBQXBaLEtBQ0FvWixFQUFBcFosR0FBQWk2QixFQUNBaHZCLEtBQUFxbUUsYUFBQXR4RSxFQUFBaTZCLEtBS0FxM0MsYUFBQSxTQUFBbjZDLEVBQUF0ckI7QUFFQSxHQURBc3JCLEVBQUFvOEIsR0FBQXA4QixHQUlBLEdBREEsTUFBQXRyQixJQUFBQSxHQUFBLElBQ0FBLEVBQUEsQ0FDQSxHQUFBMGxFLEdBQUFKLEdBQUE5d0UsS0FBQXdMLEdBQUEsWUFBQSxFQUNBMGxFLElBR0FqK0IsR0FBQSw2SEFFQXpuQyxFQUFBQSxFQUFBOEMsUUFBQXdpRSxHQUFBLElBQUF0aEUsT0FDQTVFLEtBQUF5M0IsR0FBQW5sQixNQUFBaTBELFlBQUFyNkMsRUFBQXk4QixNQUFBL25ELEVBQUEwbEUsSUFFQXRtRSxLQUFBeTNCLEdBQUFubEIsTUFBQTRaLEVBQUFzOEIsT0FBQTVuRCxNQUdBWixNQUFBeTNCLEdBQUFubEIsTUFBQTRaLEVBQUFzOEIsT0FBQSxLQTREQWdlLEdBQUEsK0JBQ0FDLEdBQUEsVUFHQUMsR0FBQSxzR0FHQUMsR0FBQSxxQ0FHQUMsR0FBQSw2Q0FJQUMsSUFDQWptRSxNQUFBLFNBQ0FrbUUsYUFBQSxhQUNBQyxjQUFBLGVBR0FDLElBRUF6WixTQUFBeVQsR0FFQXI2RCxLQUFBLFdBQ0EsR0FBQWtKLEdBQUE3UCxLQUFBK25DLElBQ0E4TixFQUFBNzFDLEtBQUF5M0IsR0FBQWdoQixPQUVBNW9DLEtBQ0E3UCxLQUFBKzJELE1BQUEsRUFHQSxJQUFBekosR0FBQXR0RCxLQUFBc3RELFdBQ0FyWixFQUFBcVosRUFBQThELE1BQ0EsSUFBQW5kLEVBQUEsQ0FFQXFaLEVBQUE2RCxhQUNBbnhELEtBQUErMEMsV0FBQWUsRUFBQTdCLEVBQUFqMEMsS0FBQXkrQyxRQUFBeitDLEtBQUFxeEMsTUFJQXExQixHQUFBdHhFLEtBQUF5YSxJQUFBLFNBQUFBLElBQUEsWUFBQWdtQyxHQUFBLFNBQUFBLE1BQ0F4TixHQUFBeDRCLEVBQUEsS0FBQXk5QyxFQUFBOU0sSUFBQSx5RkFBQXhnRCxLQUFBcXhDLElBQ0FyeEMsS0FBQXkzQixHQUFBem5CLGdCQUFBSCxHQUNBN1AsS0FBQStqRSxTQUFBLEVBS0EsSUFBQXZqQixHQUFBM3dDLEVBQUEsS0FBQXk5QyxFQUFBOU0sSUFBQSxLQUVBLFNBQUEzd0MsR0FDQXc0QixHQUFBbVksRUFBQSxxRkFBQXhnRCxLQUFBcXhDLElBSUEsVUFBQXhoQyxHQUNBdzRCLEdBQUFtWSxFQUFBLDhIQUFBeGdELEtBQUFxeEMsTUFNQThoQixPQUFBLFNBQUF2eUQsR0FDQSxJQUFBWixLQUFBK2pFLFFBQUEsQ0FHQSxHQUFBbDBELEdBQUE3UCxLQUFBK25DLEdBQ0EvbkMsTUFBQStuQyxJQUNBL25DLEtBQUFxbUUsYUFBQXgyRCxFQUFBalAsR0FFQVosS0FBQW1tRSxhQUFBdmxFLFNBS0F1bEUsYUFBQTd6RCxHQUFBNnpELGFBRUFFLGFBQUEsU0FBQXgyRCxFQUFBalAsR0FDQSxHQUFBNjJCLEdBQUF6M0IsS0FBQXkzQixHQUNBMjVCLEVBQUFweEQsS0FBQXN0RCxXQUFBOEQsTUFJQSxJQUhBcHhELEtBQUFtd0QsVUFBQTNILFFBQ0EzNEMsRUFBQXNpQyxFQUFBdGlDLEtBRUF1aEQsR0FBQXVWLEdBQUF2eEUsS0FBQXlhLElBQUFBLElBQUE0bkIsR0FBQSxDQUNBLEdBQUF3dkMsR0FBQSxVQUFBcDNELEdBQUEsTUFBQWpQLEVBQ0EsR0FBQUEsQ0FFQTYyQixHQUFBNW5CLEtBQUFvM0QsSUFDQXh2QyxFQUFBNW5CLEdBQUFvM0QsR0FJQSxHQUFBQyxHQUFBTCxHQUFBaDNELEVBQ0EsS0FBQXVoRCxHQUFBOFYsRUFBQSxDQUNBenZDLEVBQUF5dkMsR0FBQXRtRSxDQUVBLElBQUE2ckMsR0FBQWhWLEVBQUE0ckMsU0FDQTUyQixJQUNBQSxFQUFBODNCLFdBSUEsTUFBQSxVQUFBMTBELEdBQUEsYUFBQTRuQixFQUFBZ2hCLFlBQ0FoaEIsR0FBQXpuQixnQkFBQUgsUUFJQSsyRCxHQUFBeHhFLEtBQUF5YSxHQUNBNG5CLEVBQUE1MUIsYUFBQWdPLEVBQUFqUCxFQUFBLE9BQUEsU0FDQSxNQUFBQSxHQUFBQSxLQUFBLEVBQ0EsVUFBQWlQLEdBR0E0bkIsRUFBQWtmLFlBQ0EvMUMsR0FBQSxJQUFBNjJCLEVBQUFrZixVQUFBcjBDLEdBQUEsZUFFQXMxQyxFQUFBbmdCLEVBQUE3MkIsSUFDQTZsRSxHQUFBcnhFLEtBQUF5YSxHQUNBNG5CLEVBQUEwdkMsZUFBQVgsR0FBQTMyRCxFQUFBalAsS0FBQSxFQUFBLEdBQUFBLEdBRUE2MkIsRUFBQTUxQixhQUFBZ08sRUFBQWpQLEtBQUEsRUFBQSxHQUFBQSxHQUdBNjJCLEVBQUF6bkIsZ0JBQUFILE1BS0E0bkIsSUFFQTgxQixTQUFBMlQsR0FFQXY2RCxLQUFBLFdBRUEsR0FBQTNHLEtBQUErbkMsSUFBQSxDQUdBLEdBQUF6bEMsR0FBQXRDLEtBQUFzQyxHQUFBNnZDLEVBQUFueUMsS0FBQStuQyxLQUNBaXRCLEdBQUFoMUQsS0FBQXkrQyxRQUFBeitDLEtBQUFxeEMsSUFBQWtNLElBQ0F4TSxHQUFBaWtCLEVBQUExeUQsR0FDQTB5RCxFQUFBMXlELEdBQUF0QyxLQUFBeTNCLEdBRUFpbEIsR0FBQXNZLEVBQUExeUQsRUFBQXRDLEtBQUF5M0IsTUFJQTlHLE9BQUEsV0FDQSxHQUFBcWtDLElBQUFoMUQsS0FBQXkrQyxRQUFBeitDLEtBQUFxeEMsSUFBQWtNLElBQ0F5WCxHQUFBaDFELEtBQUFzQyxNQUFBdEMsS0FBQXkzQixLQUNBdTlCLEVBQUFoMUQsS0FBQXNDLElBQUEsUUFLQTJ0RCxJQUNBdHBELEtBQUEsV0FDQTBoQyxHQUFBLFNBQUFyb0MsS0FBQStuQyxJQUFBLGlEQUFBL25DLEtBQUF5M0IsR0FBQWdoQixRQUFBeCtDLGNBQUEsS0FBQStGLEtBQUFxeEMsTUFJQSsxQixJQUNBemdFLEtBQUEsV0FDQSxHQUFBOHdCLEdBQUF6M0IsS0FBQXkzQixFQUNBejNCLE1BQUFxeEMsR0FBQW9uQixNQUFBLG9CQUFBLFdBQ0FoaEMsRUFBQXpuQixnQkFBQSxlQU1BeS9DLElBQ0E5K0MsS0FBQTJ2RCxHQUNBNTNDLEtBQUFBLEdBQ0F5SCxJQUFBc3hDLEdBQ0E0RixHQUFBdkQsR0FDQW52RCxLQUFBQSxHQUNBODNCLE1BQUFBLEdBQ0F2bEIsR0FBQTIrQyxHQUNBbC9ELEtBQUFxZ0UsR0FDQXZ2QyxHQUFBQSxHQUNBdzRCLElBQUFBLEdBQ0FtWCxNQUFBQSxJQUdBRSxJQUVBdlEsTUFBQSxFQUVBNUQsT0FBQSxTQUFBdnlELEdBQ0FBLEVBRUEsZ0JBQUFBLEdBQ0FaLEtBQUE0M0MsU0FBQWgzQyxFQUFBZ0UsT0FBQXpELE1BQUEsUUFFQW5CLEtBQUE0M0MsU0FBQWlSLEdBQUFqb0QsSUFKQVosS0FBQXVuRSxXQVFBM3ZCLFNBQUEsU0FBQWgzQyxHQUNBWixLQUFBdW5FLFFBQUEzbUUsRUFDQSxLQUFBLEdBQUFoTCxHQUFBLEVBQUFzQixFQUFBMEosRUFBQTNLLE9BQUFMLEVBQUFzQixFQUFBdEIsSUFBQSxDQUNBLEdBQUFvNUIsR0FBQXB1QixFQUFBaEwsRUFDQW81QixJQUNBbnFCLEdBQUE3RSxLQUFBeTNCLEdBQUF6SSxFQUFBc0IsR0FHQXR3QixLQUFBd25FLFNBQUE1bUUsR0FHQTJtRSxRQUFBLFNBQUEzbUUsR0FDQSxHQUFBNG1FLEdBQUF4bkUsS0FBQXduRSxRQUNBLElBQUFBLEVBRUEsSUFEQSxHQUFBNXhFLEdBQUE0eEUsRUFBQXZ4RSxPQUNBTCxLQUFBLENBQ0EsR0FBQWt5QyxHQUFBMC9CLEVBQUE1eEUsS0FDQWdMLEdBQUFBLEVBQUF2RixRQUFBeXNDLEdBQUEsSUFDQWpqQyxHQUFBN0UsS0FBQXkzQixHQUFBcVEsRUFBQXZYLE1BK0RBeS9CLElBRUF6QyxTQUFBNFQsR0FFQS81RCxRQUFBLGFBQUEsa0JBQUEsbUJBWUFULEtBQUEsV0FDQTNHLEtBQUF5M0IsR0FBQSt2QixRQWtDQW5mLEdBQUEsMkJBQUFyb0MsS0FBQSswQyxXQUFBLGlDQUFBLzBDLEtBQUF5M0IsS0FoQ0F6M0IsS0FBQXluRSxVQUFBem5FLEtBQUFvSCxPQUFBcWdFLFVBQ0F6bkUsS0FBQXluRSxZQUNBem5FLEtBQUFtTyxVQUdBbk8sS0FBQW9ILE9BQUFzZ0UsaUJBRUExbkUsS0FBQTBuRSxlQUFBMXZCLEVBQUFoNEMsS0FBQXkzQixJQUFBLElBR0F6M0IsS0FBQTJuRSxtQkFBQTNuRSxLQUFBNG5FLFVBQUEsS0FFQTVuRSxLQUFBNm5FLGdCQUFBLEVBQ0E3bkUsS0FBQThuRSxpQkFBQSxLQUVBOW5FLEtBQUE0NEMsT0FBQUYsR0FBQSxlQUNBaDFDLEVBQUExRCxLQUFBeTNCLEdBQUF6M0IsS0FBQTQ0QyxRQUtBNTRDLEtBQUF5M0IsR0FBQXpuQixnQkFBQSxNQUNBaFEsS0FBQXkzQixHQUFBem5CLGdCQUFBLE9BRUFoUSxLQUFBc3RELFdBQUEyQyxLQUNBandELEtBQUF5M0IsR0FBQXpuQixnQkFBQSxTQUFBc2lDLEVBQUF0eUMsS0FBQXN0RCxXQUFBMkMsTUFHQWp3RCxLQUFBb3dELFNBQ0Fwd0QsS0FBQStuRSxhQUFBL25FLEtBQUErMEMsY0FZQW9lLE9BQUEsU0FBQXZ5RCxHQUNBWixLQUFBb3dELFNBQ0Fwd0QsS0FBQStuRSxhQUFBbm5FLElBaUJBbW5FLGFBQUEsU0FBQW5uRSxFQUFBa08sR0FFQSxHQURBOU8sS0FBQWdvRSxvQkFDQXBuRSxFQUtBLENBQ0EsR0FBQXdMLEdBQUFwTSxJQUNBQSxNQUFBaW9FLGlCQUFBcm5FLEVBQUEsV0FDQXdMLEVBQUE4N0QsZUFBQXA1RCxTQU5BOU8sTUFBQW1vRSxTQUFBLEdBQ0Fub0UsS0FBQXVKLE9BQUF2SixLQUFBb29FLFFBQUF0NUQsR0FDQTlPLEtBQUFvb0UsUUFBQSxNQWlCQUgsaUJBQUEsU0FBQXJuRSxFQUFBa08sR0FDQSxHQUFBMUMsR0FBQXBNLElBQ0FBLE1BQUEybkUsbUJBQUFuMEIsRUFBQSxTQUFBbzBCLEdBQ0F4N0QsRUFBQWk4RCxjQUFBVCxFQUFBbi9DLFFBQUExekIsT0FBQSxnQkFBQTZMLEdBQUFBLEVBQUEsTUFDQXdMLEVBQUF3N0QsVUFBQUEsRUFDQTk0RCxNQUVBOU8sS0FBQXF4QyxHQUFBK2tCLGtCQUFBeDFELEVBQUFaLEtBQUEybkUscUJBWUFPLGVBQUEsU0FBQXA1RCxHQUVBOU8sS0FBQW1vRSxTQUFBLEVBQ0EsSUFBQS83RCxHQUFBcE0sS0FDQXNvRSxFQUFBdG9FLEtBQUE0bkUsVUFBQW4vQyxRQUFBMjFDLFNBQ0FtSyxFQUFBdm9FLEtBQUF3b0UsWUFDQUMsRUFBQXpvRSxLQUFBMG9FLE9BQ0FKLEtBQUFDLEdBQ0F2b0UsS0FBQTJvRSxXQUFBRixFQUNBMWYsR0FBQXVmLEVBQUFHLEVBQUEsV0FDQXI4RCxFQUFBdThELGFBQUFGLElBR0FyOEQsRUFBQXU4RCxXQUFBLEtBQ0F2OEQsRUFBQXNxQyxXQUFBK3hCLEVBQUEzNUQsUUFJQXk1RCxHQUNBRSxFQUFBN3BCLGFBRUE1K0MsS0FBQTAyQyxXQUFBK3hCLEVBQUEzNUQsS0FVQWs1RCxrQkFBQSxXQUNBaG9FLEtBQUEybkUscUJBQ0EzbkUsS0FBQTJuRSxtQkFBQXo5RCxTQUNBbEssS0FBQTJuRSxtQkFBQSxPQWFBZSxNQUFBLFNBQUFFLEdBQ0EsR0FBQUwsR0FBQXZvRSxLQUFBd29FLFdBQ0EsSUFBQUQsRUFDQSxNQUFBQSxFQUVBLElBQUF2b0UsS0FBQTRuRSxVQUFBLENBRUEsR0FBQW4vQyxJQUNBMXpCLEtBQUFpTCxLQUFBcW9FLGNBQ0E1d0MsR0FBQWxWLEdBQUF2aUIsS0FBQXkzQixJQUNBcXVCLFNBQUE5bEQsS0FBQTBuRSxlQUlBanRFLE9BQUF1RixLQUFBNDBELE9BQUE1MEQsS0FBQXF4QyxHQUdBaWtCLGlCQUFBdDFELEtBQUEwbkUsZUFDQTNTLEtBQUEvMEQsS0FBQXN0RCxXQUFBMkMsSUFDQXZELGNBQUEsRUFDQW1jLGNBQUE3b0UsS0FBQTZvRSxjQUlBcnFCLFNBQUF4K0MsS0FBQXF4QyxHQUtBb04sT0FBQXorQyxLQUFBeStDLE9BS0FDLE1BQUExK0MsS0FBQTArQyxNQUtBa3FCLElBQ0FubUUsRUFBQWdtQixFQUFBbWdELEVBRUEsSUFBQTF3QixHQUFBLEdBQUFsNEMsTUFBQTRuRSxVQUFBbi9DLEVBUUEsT0FQQXpvQixNQUFBeW5FLFlBQ0F6bkUsS0FBQW1PLE1BQUFuTyxLQUFBNG5FLFVBQUExZ0IsS0FBQWhQLEdBR0FsNEMsS0FBQXkzQixHQUFBejJCLGFBQUEsZUFBQWszQyxFQUFBNEYsYUFDQXpWLEdBQUEsK0RBQUE2UCxFQUFBeUcsU0FBQW1ILFNBQUE1TixHQUVBQSxJQVVBc3dCLFVBQUEsV0FDQSxNQUFBeG9FLE1BQUF5bkUsV0FBQXpuRSxLQUFBbU8sTUFBQW5PLEtBQUE0bkUsVUFBQTFnQixNQVVBaWhCLFFBQUEsU0FBQVcsR0FDQTlvRSxLQUFBMm9FLGFBQ0Ezb0UsS0FBQXluRSxXQUNBem5FLEtBQUEyb0UsV0FBQTVTLFdBRUEvMUQsS0FBQTJvRSxXQUFBLEtBRUEsSUFBQXp3QixHQUFBbDRDLEtBQUFvb0UsT0FDQSxRQUFBbHdCLEdBQUFsNEMsS0FBQXluRSxlQUNBdnZCLElBRUFBLEVBQUE2d0IsV0FBQSxFQUNBN3dCLEVBQUEwRyxZQUFBLFNBT0ExRyxHQUFBNmQsVUFBQSxFQUFBK1MsSUFVQXYvRCxPQUFBLFNBQUEydUMsRUFBQXBwQyxHQUNBLEdBQUEyNEQsR0FBQXpuRSxLQUFBeW5FLFNBQ0EsSUFBQXZ2QixFQUFBLENBS0FsNEMsS0FBQTZuRSxrQkFDQTduRSxLQUFBOG5FLGlCQUFBaDVELENBQ0EsSUFBQTFDLEdBQUFwTSxJQUNBazRDLEdBQUEyVixRQUFBLFdBQ0F6aEQsRUFBQXk3RCxrQkFDQUosR0FBQXZ2QixFQUFBeWQsWUFDQXZwRCxFQUFBeTdELGlCQUFBejdELEVBQUEwN0QsbUJBQ0ExN0QsRUFBQTA3RCxtQkFDQTE3RCxFQUFBMDdELGlCQUFBLFlBR0FoNUQsSUFDQUEsS0FZQTRuQyxXQUFBLFNBQUFwNUMsRUFBQXdSLEdBQ0EsR0FBQTFDLEdBQUFwTSxLQUNBcWdFLEVBQUFyZ0UsS0FBQW9vRSxPQUtBLFFBSEEvSCxJQUFBQSxFQUFBMEksV0FBQSxHQUNBenJFLEVBQUF5ckUsV0FBQSxFQUNBL29FLEtBQUFvb0UsUUFBQTlxRSxFQUNBOE8sRUFBQWhGLE9BQUE0aEUsZ0JBQ0EsSUFBQSxTQUNBMXJFLEVBQUEyNkQsUUFBQTdyRCxFQUFBd3NDLE9BQUEsV0FDQXhzQyxFQUFBN0MsT0FBQTgyRCxFQUFBdnhELElBRUEsTUFDQSxLQUFBLFNBQ0ExQyxFQUFBN0MsT0FBQTgyRCxFQUFBLFdBQ0EvaUUsRUFBQTI2RCxRQUFBN3JELEVBQUF3c0MsT0FBQTlwQyxJQUVBLE1BQ0EsU0FDQTFDLEVBQUE3QyxPQUFBODJELEdBQ0EvaUUsRUFBQTI2RCxRQUFBN3JELEVBQUF3c0MsT0FBQTlwQyxLQVFBNmhCLE9BQUEsV0FLQSxHQUpBM3dCLEtBQUFnb0Usb0JBRUFob0UsS0FBQW1vRSxVQUVBbm9FLEtBQUFtTyxNQUFBLENBQ0EsSUFBQSxHQUFBMjVCLEtBQUE5bkMsTUFBQW1PLE1BQ0FuTyxLQUFBbU8sTUFBQTI1QixHQUFBaXVCLFVBRUEvMUQsTUFBQW1PLE1BQUEsUUEyQkFtN0MsR0FBQTd0RCxHQUFBNGhFLGtCQUNBcnBELE1BR0FxMUMsR0FBQSxzQkFDQU0sR0FBQSx1REFpWEFzZixHQUFBeHRFLEdBQUE0aEUsa0JBRUFoVCxJQUVBMWpELEtBQUEsV0FDQSxHQUFBdXhDLEdBQUFsNEMsS0FBQXF4QyxHQUNBNTJDLEVBQUF5OUMsRUFBQXNHLFNBRUF0eUIsRUFBQWxzQixLQUFBc3RELFdBQUFwaEMsS0FDQWc5QyxFQUFBaDlDLEVBQUFrekIsS0FDQStwQixFQUFBajlDLEVBQUEwOUIsV0FDQTlGLEVBQUE1M0IsRUFBQXN6QixPQUFBeXBCLEdBQUF6ZixRQUVBNGYsRUFBQXBwRSxLQUFBb3BFLGNBQUEsR0FBQWxtQixJQUFBem9ELEVBQUEwdUUsRUFBQSxTQUFBbjZDLEdBQ0E2N0IsR0FBQTNTLEVBQUFoc0IsRUFBQThDLEtBRUE4MEIsT0FBQUEsRUFDQTVrQyxRQUFBZ04sRUFBQWhOLFFBR0E2aUMsTUFBQS9oRCxLQUFBeStDLFFBT0EsSUFIQXlMLEdBQUFoUyxFQUFBaHNCLEVBQUFrOUMsRUFBQXhvRSxPQUdBa2pELEVBQUEsQ0FHQSxHQUFBMTNDLEdBQUFwTSxJQUNBazRDLEdBQUF1Z0IsTUFBQSxtQkFBQSxXQUNBcnNELEVBQUFpOUQsYUFBQSxHQUFBbm1CLElBQUFoTCxFQUFBZ3hCLEVBQUEsU0FBQWw2QyxHQUNBbzZDLEVBQUF4OUMsSUFBQW9ELEtBS0Fnb0MsTUFBQSxRQU1Bcm1DLE9BQUEsV0FDQTN3QixLQUFBb3BFLGNBQUE3bEQsV0FDQXZqQixLQUFBcXBFLGNBQ0FycEUsS0FBQXFwRSxhQUFBOWxELGFBS0Frb0MsTUFDQTFILElBQUEsRUFrQ0FxSSxHQUFBLGFBQ0FDLEdBQUEsWUFDQWlkLEdBQUE1TixHQUFBLFdBQ0E2TixHQUFBNU4sR0FBQSxXQWlCQTZOLEdBQUF0TyxJQUFBMy9ELE9BQUFrdUUsc0JBQ0FDLEdBQUFGLEdBRUEsU0FBQWp4RCxHQUNBaXhELEdBQUEsV0FDQUEsR0FBQWp4RCxNQUVBLFNBQUFBLEdBQ0ExTixXQUFBME4sRUFBQSxLQXVDQW94RCxHQUFBaGUsR0FBQTF6RCxTQTJCQTB4RSxJQUFBbkUsTUFBQSxTQUFBL3VCLEVBQUEzbkMsR0FDQTlPLEtBQUE0cEUsZ0JBQ0E1cEUsS0FBQTZtRCxTQUFBLGVBQ0E3bUQsS0FBQThPLEdBQUFBLEVBQ0F3aEIsRUFBQXR3QixLQUFBeTNCLEdBQUF6M0IsS0FBQTRyRCxZQUNBblYsSUFDQXoyQyxLQUFBa3NELFNBQUEsRUFDQWxzRCxLQUFBNnBFLGVBQUEsU0FDQTdwRSxLQUFBa3NELFVBR0Fsc0QsS0FBQWtLLE9BQUFsSyxLQUFBNDJDLE9BQUE1MkMsS0FBQTQyQyxNQUFBa3pCLGVBQ0F2ZSxHQUFBdnJELEtBQUErcEUsaUJBU0FKLEdBQUFJLGNBQUEsV0FDQSxHQUFBbkYsR0FBQTVrRSxJQUdBQSxNQUFBaXNELGFBQUEsRUFDQXlkLEdBQUEsV0FDQTlFLEVBQUEzWSxhQUFBLEdBRUEsSUFBQStkLEdBQUFocUUsS0FBQWdxRSxVQUNBNXZFLEVBQUE0RixLQUFBaXFFLHFCQUFBanFFLEtBQUE0ckQsV0FDQTVyRCxNQUFBZ3NELFlBVUE1eEQsSUFBQWd5RCxJQUNBNzdCLEVBQUF2d0IsS0FBQXkzQixHQUFBejNCLEtBQUE0ckQsWUFWQXh4RCxJQUFBZ3lELElBRUE3N0IsRUFBQXZ3QixLQUFBeTNCLEdBQUF6M0IsS0FBQTRyRCxZQUNBNXJELEtBQUFrcUUsV0FBQXJ6QixHQUFBbXpCLElBQ0E1dkUsSUFBQWl5RCxHQUNBcnNELEtBQUFrcUUsV0FBQXRPLEdBQUFvTyxHQUVBQSxLQVdBTCxHQUFBSyxVQUFBLFdBQ0FocUUsS0FBQWtzRCxTQUFBLEVBQ0Fsc0QsS0FBQWtLLE9BQUFsSyxLQUFBZ3NELFlBQUEsS0FDQXo3QixFQUFBdndCLEtBQUF5M0IsR0FBQXozQixLQUFBNHJELFlBQ0E1ckQsS0FBQTZtRCxTQUFBLGNBQ0E3bUQsS0FBQThPLElBQUE5TyxLQUFBOE8sTUF3QkE2NkQsR0FBQVEsTUFBQSxTQUFBMXpCLEVBQUEzbkMsR0FDQTlPLEtBQUE0cEUsZ0JBQ0E1cEUsS0FBQTZtRCxTQUFBLGVBQ0E3bUQsS0FBQXkyQyxHQUFBQSxFQUNBejJDLEtBQUE4TyxHQUFBQSxFQUNBd2hCLEVBQUF0d0IsS0FBQXkzQixHQUFBejNCLEtBQUE2ckQsWUFDQTdyRCxLQUFBeXBCLE1BQUEsRUFDQXpwQixLQUFBNnBFLGVBQUEsU0FDQTdwRSxLQUFBeXBCLE9BR0F6cEIsS0FBQWtLLE9BQUFsSyxLQUFBNDJDLE9BQUE1MkMsS0FBQTQyQyxNQUFBd3pCLGVBS0FwcUUsS0FBQXkyQyxLQUFBejJDLEtBQUFnc0QsY0FJQWhzRCxLQUFBaXNELFlBQ0Fqc0QsS0FBQXFxRSxZQUVBOWUsR0FBQXZyRCxLQUFBc3FFLGtCQVNBWCxHQUFBVyxjQUFBLFdBQ0EsR0FBQWx3RSxHQUFBNEYsS0FBQWlxRSxxQkFBQWpxRSxLQUFBNnJELFdBQ0EsSUFBQXp4RCxFQUFBLENBQ0EsR0FBQXlULEdBQUF6VCxJQUFBZ3lELEdBQUF2VixHQUFBK2tCLEVBQ0E1N0QsTUFBQWtxRSxXQUFBcjhELEVBQUE3TixLQUFBcXFFLGVBRUFycUUsTUFBQXFxRSxhQVFBVixHQUFBVSxVQUFBLFdBQ0FycUUsS0FBQXlwQixNQUFBLEVBQ0F6cEIsS0FBQWtLLE9BQUFsSyxLQUFBZ3NELFlBQUEsS0FDQWhzRCxLQUFBeTJDLEtBQ0FsbUIsRUFBQXZ3QixLQUFBeTNCLEdBQUF6M0IsS0FBQTZyRCxZQUNBN3JELEtBQUE2bUQsU0FBQSxjQUNBN21ELEtBQUE4TyxJQUFBOU8sS0FBQThPLEtBQ0E5TyxLQUFBeTJDLEdBQUEsTUFRQWt6QixHQUFBQyxjQUFBLFdBQ0E1cEUsS0FBQXkyQyxHQUFBejJDLEtBQUE4TyxHQUFBLElBQ0EsSUFBQXk3RCxJQUFBLENBQ0F2cUUsTUFBQStyRCxlQUNBd2UsR0FBQSxFQUNBL29ELEVBQUF4aEIsS0FBQXkzQixHQUFBejNCLEtBQUE4ckQsZ0JBQUE5ckQsS0FBQStyRCxjQUNBL3JELEtBQUE4ckQsZ0JBQUE5ckQsS0FBQStyRCxhQUFBLE1BRUEvckQsS0FBQWdzRCxjQUNBdWUsR0FBQSxFQUNBdnFFLEtBQUFnc0QsWUFBQTloRCxTQUNBbEssS0FBQWdzRCxZQUFBLE1BRUF1ZSxJQUNBaDZDLEVBQUF2d0IsS0FBQXkzQixHQUFBejNCLEtBQUE0ckQsWUFDQXI3QixFQUFBdndCLEtBQUF5M0IsR0FBQXozQixLQUFBNnJELGFBRUE3ckQsS0FBQWtLLFNBQ0FsSyxLQUFBa0ssT0FBQS9SLEtBQUE2SCxLQUFBcXhDLEdBQUFyeEMsS0FBQXkzQixJQUNBejNCLEtBQUFrSyxPQUFBLE9BVUF5L0QsR0FBQTlpQixTQUFBLFNBQUF6c0QsR0FDQTRGLEtBQUE0MkMsT0FBQTUyQyxLQUFBNDJDLE1BQUF4OEMsSUFDQTRGLEtBQUE0MkMsTUFBQXg4QyxHQUFBakMsS0FBQTZILEtBQUFxeEMsR0FBQXJ4QyxLQUFBeTNCLEtBZUFreUMsR0FBQUUsZUFBQSxTQUFBenZFLEdBQ0EsR0FBQWk2RCxHQUFBcjBELEtBQUE0MkMsT0FBQTUyQyxLQUFBNDJDLE1BQUF4OEMsRUFDQWk2RCxLQUNBQSxFQUFBcCtELE9BQUEsSUFDQStKLEtBQUFnc0QsWUFBQXhZLEVBQUF4ekMsS0FBQTVGLEVBQUEsVUFFQWk2RCxFQUFBbDhELEtBQUE2SCxLQUFBcXhDLEdBQUFyeEMsS0FBQXkzQixHQUFBejNCLEtBQUFnc0QsZUFZQTJkLEdBQUFNLHFCQUFBLFNBQUEvb0UsR0FFQSxNQUFBMjFDLElBTUF0OEMsU0FBQW1hLFFBRUExVSxLQUFBNDJDLE9BQUE1MkMsS0FBQTQyQyxNQUFBcGxDLE9BQUEsR0FFQTg2QyxHQUFBdHNELEtBQUF5M0IsS0FWQSxDQWFBLEdBQUFyOUIsR0FBQTRGLEtBQUE1RixNQUFBNEYsS0FBQW1zRCxVQUFBanJELEVBQ0EsSUFBQTlHLEVBQUEsTUFBQUEsRUFDQSxJQUFBb3dFLEdBQUF4cUUsS0FBQXkzQixHQUFBbmxCLE1BQ0FtNEQsRUFBQWx2RSxPQUFBNHRCLGlCQUFBbnBCLEtBQUF5M0IsSUFDQWl6QyxFQUFBRixFQUFBbEIsS0FBQW1CLEVBQUFuQixHQUNBLElBQUFvQixHQUFBLE9BQUFBLEVBQ0F0d0UsRUFBQWd5RCxPQUNBLENBQ0EsR0FBQXVlLEdBQUFILEVBQUFqQixLQUFBa0IsRUFBQWxCLEdBQ0FvQixJQUFBLE9BQUFBLElBQ0F2d0UsRUFBQWl5RCxJQU1BLE1BSEFqeUQsS0FDQTRGLEtBQUFtc0QsVUFBQWpyRCxHQUFBOUcsR0FFQUEsSUFVQXV2RSxHQUFBTyxXQUFBLFNBQUFyOEQsRUFBQWlCLEdBQ0E5TyxLQUFBOHJELGdCQUFBaitDLENBQ0EsSUFBQXpCLEdBQUFwTSxLQUNBeTNCLEVBQUF6M0IsS0FBQXkzQixHQUNBbXpDLEVBQUE1cUUsS0FBQStyRCxhQUFBLFNBQUF6MkQsR0FDQUEsRUFBQWdJLFNBQUFtNkIsSUFDQWpXLEVBQUFpVyxFQUFBNXBCLEVBQUErOEQsR0FDQXgrRCxFQUFBMC9DLGdCQUFBMS9DLEVBQUEyL0MsYUFBQSxNQUNBMy9DLEVBQUE0L0MsYUFBQWw5QyxHQUNBQSxLQUlBb1ksR0FBQXVRLEVBQUE1cEIsRUFBQSs4RCxHQXNCQSxJQUFBQyxLQUVBdGQsU0FBQTBULEdBRUE5TixPQUFBLFNBQUE3d0QsRUFBQXdvRSxHQUNBLEdBQUFyekMsR0FBQXozQixLQUFBeTNCLEdBRUFtZixFQUFBaUQsR0FBQTc1QyxLQUFBcXhDLEdBQUFzTixTQUFBLGNBQUFyOEMsRUFDQUEsR0FBQUEsR0FBQSxJQUNBd29FLEVBQUFBLEdBQUEsSUFDQXJ6QyxFQUFBa2YsVUFBQSxHQUFBZ1YsSUFBQWwwQixFQUFBbjFCLEVBQUFzMEMsRUFBQTUyQyxLQUFBcXhDLElBQ0E5Z0IsRUFBQWtILEVBQUFxekMsRUFBQSxlQUNBeDZDLEVBQUFtSCxFQUFBbjFCLEVBQUEsaUJBSUE0dEQsSUFDQTU5QyxNQUFBQSxHQUNBOGQsTUFBQWszQyxHQUNBdFgsVUFBQUEsR0FDQTlqQyxLQUFBbStCLEdBQ0EzVCxXQUFBbTBCLElBSUFyWixHQUFBLGNBQ0E5QyxHQUFBLFlBQ0FtQyxHQUFBLHlCQUNBRCxHQUFBLFlBQ0FXLEdBQUEsMkJBR0EvRCxHQUFBLElBQ0FzRCxHQUFBLEdBMGlCQVIsSUFBQXpELFVBQUEsQ0FrTkEsSUFBQW1GLElBQUEsYUF3TUFxSSxHQUFBcmlFLE9BQUFpbEUsUUFDQTc5QyxRQUFBQSxHQUNBMHVDLG9CQUFBQSxHQUNBRyxZQUFBQSxHQUNBeUQsV0FBQUEsR0FDQU8sYUFBQUEsS0FtUEF5QixHQUFBLFdBcU9BYyxJQUFBdjhELFVBQUFvMUQsTUFBQSxXQUNBLEdBQUF0NEQsR0FBQWlMLEtBQUFqTCxLQUNBdTRELEVBQUF0dEQsS0FBQXN0RCxVQUdBLEtBQUEsVUFBQXY0RCxHQUFBaUwsS0FBQXF4QyxHQUFBeUYsY0FBQTkyQyxLQUFBeTNCLElBQUF6M0IsS0FBQXkzQixHQUFBem5CLGdCQUFBLENBQ0EsR0FBQUgsR0FBQXk5QyxFQUFBejlDLE1BQUEsS0FBQTlhLENBQ0FpTCxNQUFBeTNCLEdBQUF6bkIsZ0JBQUFILEdBSUEsR0FBQWtqQyxHQUFBdWEsRUFBQXZhLEdBZ0JBLElBZkEsa0JBQUFBLEdBQ0EveUMsS0FBQW16RCxPQUFBcGdCLEVBRUF0d0MsRUFBQXpDLEtBQUEreUMsR0FJQS95QyxLQUFBK3FFLGVBR0EvcUUsS0FBQTJHLE1BQ0EzRyxLQUFBMkcsT0FFQTNHLEtBQUEwMEQsUUFBQSxFQUVBMTBELEtBQUFvd0QsUUFDQXB3RCxLQUFBbXpELFFBQUFuekQsS0FBQW16RCxPQUFBN0YsRUFBQTlNLFNBQ0EsS0FBQXhnRCxLQUFBKzBDLFlBQUEvMEMsS0FBQW13RCxhQUFBbndELEtBQUFtekQsUUFBQW56RCxLQUFBOGpELFVBQUE5akQsS0FBQWdyRSxrQkFBQSxDQUVBLEdBQUF6ekUsR0FBQXlJLElBQ0FBLE1BQUFtekQsT0FDQW56RCxLQUFBaXJFLFFBQUEsU0FBQWo4QyxFQUFBazhDLEdBQ0EzekUsRUFBQWs5RCxTQUNBbDlELEVBQUE0N0QsT0FBQW5rQyxFQUFBazhDLElBSUFsckUsS0FBQWlyRSxRQUFBMVcsRUFFQSxJQUFBcUwsR0FBQTUvRCxLQUFBNGpFLFlBQUFqOUQsRUFBQTNHLEtBQUE0akUsWUFBQTVqRSxNQUFBLEtBQ0E2L0QsRUFBQTcvRCxLQUFBNmpFLGFBQUFsOUQsRUFBQTNHLEtBQUE2akUsYUFBQTdqRSxNQUFBLEtBQ0E4aUQsRUFBQTlpRCxLQUFBOGdFLFNBQUEsR0FBQTVkLElBQUFsakQsS0FBQXF4QyxHQUFBcnhDLEtBQUErMEMsV0FBQS8wQyxLQUFBaXJFLFNBRUEvckQsUUFBQWxmLEtBQUFrZixRQUNBNGtDLE9BQUE5akQsS0FBQThqRCxPQUNBaVQsS0FBQS8yRCxLQUFBKzJELEtBQ0E2SSxXQUFBQSxFQUNBQyxZQUFBQSxFQUNBOWQsTUFBQS9oRCxLQUFBeStDLFFBS0F6K0MsTUFBQTJrRSxVQUNBM2tFLEtBQUEya0UsWUFDQTNrRSxLQUFBbXpELFFBQ0FuekQsS0FBQW16RCxPQUFBclEsRUFBQWxpRCxTQVVBNHpELEdBQUF2OEQsVUFBQTh5RSxhQUFBLFdBQ0EsR0FBQS9xRSxLQUFBb0gsT0FBQSxDQUdBLEdBQUFBLEdBQUFwSCxLQUFBb0gsTUFFQXBILE1BQUFvSCxPQUFBcFAsT0FBQTJLLE9BQUEsS0FHQSxLQUZBLEdBQ0FtbEMsR0FBQTlZLEVBQUFtOEMsRUFEQXYxRSxFQUFBd1IsRUFBQW5SLE9BRUFMLEtBQ0FreUMsRUFBQXdLLEVBQUFsckMsRUFBQXhSLElBQ0F1MUUsRUFBQWg1QixFQUFBckssR0FDQTlZLEVBQUFzb0IsRUFBQXQzQyxLQUFBeTNCLEdBQUFxUSxHQUNBLE1BQUE5WSxFQUVBaHZCLEtBQUFvckUsbUJBQUFELEVBQUFuOEMsSUFHQUEsRUFBQW9vQixFQUFBcDNDLEtBQUF5M0IsR0FBQXFRLEdBQ0EsTUFBQTlZLElBQ0FodkIsS0FBQW9ILE9BQUErakUsR0FBQSxLQUFBbjhDLEdBQUFBLE1BYUF3bEMsR0FBQXY4RCxVQUFBbXpFLG1CQUFBLFNBQUF0akMsRUFBQWlOLEdBQ0EsR0FBQTNvQyxHQUFBcE0sS0FDQWdwRCxHQUFBLEVBQ0FxaUIsR0FBQXJyRSxLQUFBeStDLFFBQUF6K0MsS0FBQXF4QyxJQUFBeWxCLE9BQUEvaEIsRUFBQSxTQUFBL2xCLEVBQUFrOEMsR0FJQSxHQUhBOStELEVBQUFoRixPQUFBMGdDLEdBQUE5WSxFQUdBZzZCLEVBQUEsQ0FDQSxHQUFBbDZDLEdBQUExQyxFQUFBay9ELGVBQUFsL0QsRUFBQWsvRCxjQUFBeGpDLEVBQ0FoNUIsSUFDQUEsRUFBQTNXLEtBQUFpVSxFQUFBNGlCLEVBQUFrOEMsT0FHQWxpQixJQUFBLElBR0FpTyxXQUFBLEVBQ0FoVSxNQUFBLEtBRUFqakQsS0FBQXVyRSxtQkFBQXZyRSxLQUFBdXJFLHNCQUFBdnhFLEtBQUFxeEUsSUFjQTdXLEdBQUF2OEQsVUFBQSt5RSxnQkFBQSxXQUNBLEdBQUFqMkIsR0FBQS8wQyxLQUFBKzBDLFVBQ0EsSUFBQUEsR0FBQS8wQyxLQUFBOGxFLGtCQUFBNWpCLEdBQUFuTixHQUFBLENBQ0EsR0FBQXg4QixHQUFBcW9DLEdBQUE3TCxHQUFBN2lDLElBQ0E2dkMsRUFBQS9oRCxLQUFBeStDLFFBQUF6K0MsS0FBQXF4QyxHQUNBeHVCLEVBQUEsU0FBQXZ0QixHQUNBeXNELEVBQUF5cEIsT0FBQWwyRSxFQUNBaWpCLEVBQUFwZ0IsS0FBQTRwRCxFQUFBQSxHQUNBQSxFQUFBeXBCLE9BQUEsS0FNQSxPQUpBeHJFLE1BQUFrZixVQUNBMkQsRUFBQWsvQixFQUFBbVUsY0FBQXJ6QyxFQUFBLEtBQUE3aUIsS0FBQWtmLFVBRUFsZixLQUFBbXpELE9BQUF0d0MsSUFDQSxJQWFBMnhDLEdBQUF2OEQsVUFBQTJ6QixJQUFBLFNBQUFockIsR0FFQVosS0FBQThqRCxPQUNBOWpELEtBQUFrZ0UsVUFBQSxXQUNBbGdFLEtBQUE4Z0UsU0FBQWwxQyxJQUFBaHJCLEtBR0F5bkMsR0FBQSw4REFXQW1zQixHQUFBdjhELFVBQUFpb0UsVUFBQSxTQUFBM25ELEdBQ0EsR0FBQW5NLEdBQUFwTSxJQUNBb00sR0FBQXFvRCxTQUFBLEVBQ0FsOEMsRUFBQXBnQixLQUFBaVUsR0FDQWhDLEdBQUEsV0FDQWdDLEVBQUFxb0QsU0FBQSxLQWNBRCxHQUFBdjhELFVBQUFpdkIsR0FBQSxTQUFBclosRUFBQWdWLEVBQUEyMEIsR0FDQXR3QixFQUFBbG5CLEtBQUF5M0IsR0FBQTVwQixFQUFBZ1YsRUFBQTIwQixJQUNBeDNDLEtBQUEyMEQsYUFBQTMwRCxLQUFBMjBELGdCQUFBMzZELE1BQUE2VCxFQUFBZ1YsS0FPQTJ4QyxHQUFBdjhELFVBQUEyMUQsVUFBQSxXQUNBLEdBQUE1dEQsS0FBQTAwRCxPQUFBLENBQ0ExMEQsS0FBQTAwRCxRQUFBLEVBQ0ExMEQsS0FBQTJ3QixRQUNBM3dCLEtBQUEyd0IsU0FFQTN3QixLQUFBOGdFLFVBQ0E5Z0UsS0FBQThnRSxTQUFBdjlDLFVBRUEsSUFDQTN0QixHQURBNjFFLEVBQUF6ckUsS0FBQTIwRCxVQUVBLElBQUE4VyxFQUVBLElBREE3MUUsRUFBQTYxRSxFQUFBeDFFLE9BQ0FMLEtBQ0E0ckIsRUFBQXhoQixLQUFBeTNCLEdBQUFnMEMsRUFBQTcxRSxHQUFBLEdBQUE2MUUsRUFBQTcxRSxHQUFBLEdBR0EsSUFBQTgxRSxHQUFBMXJFLEtBQUF1ckUsZ0JBQ0EsSUFBQUcsRUFFQSxJQURBOTFFLEVBQUE4MUUsRUFBQXoxRSxPQUNBTCxLQUNBODFFLEVBQUE5MUUsSUFHQW9LLE1BQUF5M0IsSUFDQXozQixLQUFBeTNCLEdBQUFvOUIsZ0JBQUFoSCxRQUFBN3RELE1BRUFBLEtBQUFxeEMsR0FBQXJ4QyxLQUFBeTNCLEdBQUF6M0IsS0FBQThnRSxTQUFBOWdFLEtBQUEyMEQsV0FBQSxNQW9WQSxJQUFBdUMsSUFBQSxZQXdvQkFqYSxJQUFBemxCLElBQ0E0NkIsR0FBQTU2QixJQUNBZzhCLEdBQUFoOEIsSUFDQXM5QixHQUFBdDlCLElBQ0F5K0IsR0FBQXorQixJQUdBaS9CLEdBQUFqL0IsSUFDQTgvQixHQUFBOS9CLElBQ0E2Z0MsR0FBQTdnQyxJQUNBdWhDLEdBQUF2aEMsR0FFQSxJQUFBbTBDLEtBRUFwZSxTQUFBZ1UsR0FDQW42RCxRQUFBLFFBRUFULEtBQUEsV0FFQSxHQUFBNVIsR0FBQWlMLEtBQUFvSCxPQUFBclMsTUFBQSxVQUNBdWhDLEVBQUF0MkIsS0FBQXF4QyxHQUFBNmdCLGVBQUFseUQsS0FBQXF4QyxHQUFBNmdCLGNBQUFuOUQsRUFDQXVoQyxJQUFBQSxFQUFBZ2lCLGdCQUdBdDRDLEtBQUFvZixRQUFBa1gsRUFBQS9ULFdBQUEsR0FBQXZpQixLQUFBcXhDLEdBQUFtTixTQUFBeCtDLEtBQUFxeEMsSUFGQXJ4QyxLQUFBNHJFLFlBTUF4c0QsUUFBQSxTQUFBa1gsRUFBQXpkLEVBQUFoUSxHQUNBLEdBQUF5dEIsR0FBQXpkLEVBQUEsQ0FDQSxHQUFBN1ksS0FBQXkzQixHQUFBNmdCLGlCQUFBLElBQUFoaUIsRUFBQWxuQixXQUFBblosUUFBQSxJQUFBcWdDLEVBQUFsbkIsV0FBQSxHQUFBOUIsVUFBQWdwQixFQUFBbG5CLFdBQUEsR0FBQXBPLGFBQUEsUUFBQSxDQUdBLEdBQUE2cUUsR0FBQXR4RSxTQUFBb0osY0FBQSxXQUNBa29FLEdBQUFocUUsYUFBQSxTQUFBLElBQ0FncUUsRUFBQTk2RCxVQUFBL1EsS0FBQXkzQixHQUFBMW1CLFVBRUE4NkQsRUFBQXJ0QixTQUFBeCtDLEtBQUFxeEMsR0FDQS9hLEVBQUE1bUIsWUFBQW04RCxHQUVBLEdBQUE5cEIsR0FBQWw1QyxFQUFBQSxFQUFBNDFDLE9BQUF6K0MsS0FBQXkrQyxNQUNBeitDLE1BQUFzbUQsT0FBQXp0QyxFQUFBbWdELFNBQUExaUMsRUFBQXp0QixFQUFBazVDLEVBQUEvaEQsS0FBQTArQyxPQUVBcG9CLEVBQ0E1eUIsRUFBQTFELEtBQUF5M0IsR0FBQW5CLEdBRUEvc0IsRUFBQXZKLEtBQUF5M0IsS0FJQW0wQyxTQUFBLFdBQ0E1ckUsS0FBQW9mLFFBQUE0NEIsRUFBQWg0QyxLQUFBeTNCLElBQUEsR0FBQXozQixLQUFBcXhDLEtBR0ExZ0IsT0FBQSxXQUNBM3dCLEtBQUFzbUQsUUFDQXRtRCxLQUFBc21ELFdBS0FrRyxJQUVBZSxTQUFBNlQsR0FFQWg2RCxRQUFBLFFBR0Fra0UsZUFDQXYyRSxLQUFBLFNBQUE2TCxHQUNBa2pFLEdBQUF2NkQsT0FBQXBSLEtBQUE2SCxNQUNBWSxHQUNBWixLQUFBdTNELE9BQUEzMkQsS0FLQStGLEtBQUEsV0FDQTNHLEtBQUE0NEMsT0FBQUYsR0FBQSxhQUNBaDFDLEVBQUExRCxLQUFBeTNCLEdBQUF6M0IsS0FBQTQ0QyxRQUNBNTRDLEtBQUF1M0QsT0FBQXYzRCxLQUFBb0gsT0FBQXJTLE9BR0F3aUUsT0FBQSxTQUFBajFELEdBQ0EsR0FBQWtxRCxHQUFBM1MsR0FBQTc1QyxLQUFBcXhDLEdBQUFzTixTQUFBLFdBQUFyOEMsR0FBQSxFQUNBa3FELEtBQ0F4c0QsS0FBQTZ3QyxRQUFBLEdBQUFvVyxJQUFBam5ELEtBQUFxeEMsR0FBQW1iLEdBQ0FzWCxHQUFBdk0sT0FBQXAvRCxLQUFBNkgsUUFJQTJ3QixPQUFBLFdBQ0Ezd0IsS0FBQWsrQixNQUNBbCtCLEtBQUFrK0IsS0FBQTRFLFlBS0FtM0IsSUFDQTBSLEtBQUFBLEdBQ0FuZixRQUFBQSxJQUdBNE0sR0FBQXFJLEdBQUFvQyxhQWlKQWlJLEdBQUEsaUJBR0E1c0QsSUFFQXM2QyxRQUFBQSxHQUNBTixTQUFBQSxHQUNBRCxRQUFBQSxHQVFBdm1DLE1BQ0EzcUIsS0FBQSxTQUFBbkgsRUFBQW1yRSxHQUNBLE1BQUEsZ0JBQUFuckUsR0FBQUEsRUFBQTNILEtBQUFDLFVBQUEwSCxFQUFBLEtBQUFnRCxVQUFBM04sT0FBQSxFQUFBODFFLEVBQUEsSUFFQTFpRSxNQUFBLFNBQUF6SSxHQUNBLElBQ0EsTUFBQTNILE1BQUErTSxNQUFBcEYsR0FDQSxNQUFBdEwsR0FDQSxNQUFBc0wsTUFTQW9yRSxXQUFBLFNBQUFwckUsR0FDQSxNQUFBQSxJQUFBLElBQUFBLEdBQ0FBLEVBQUFBLEVBQUFwSCxXQUNBb0gsRUFBQXVJLE9BQUEsR0FBQTFDLGNBQUE3RixFQUFBdkgsTUFBQSxJQUZBLElBU0E0eUUsVUFBQSxTQUFBcnJFLEdBQ0EsTUFBQUEsSUFBQSxJQUFBQSxFQUFBQSxFQUFBcEgsV0FBQWlOLGNBQUEsSUFPQXlsRSxVQUFBLFNBQUF0ckUsR0FDQSxNQUFBQSxJQUFBLElBQUFBLEVBQUFBLEVBQUFwSCxXQUFBUyxjQUFBLElBVUFreUUsU0FBQSxTQUFBdnJFLEVBQUF3ckUsRUFBQUMsR0FFQSxHQURBenJFLEVBQUF1UyxXQUFBdlMsSUFDQTByRSxTQUFBMXJFLEtBQUFBLEdBQUEsSUFBQUEsRUFBQSxNQUFBLEVBQ0F3ckUsR0FBQSxNQUFBQSxFQUFBQSxFQUFBLElBQ0FDLEVBQUEsTUFBQUEsRUFBQUEsRUFBQSxDQUNBLElBQUFFLEdBQUFwekUsS0FBQXF6RSxJQUFBNXJFLEdBQUE2ckUsUUFBQUosR0FDQUssRUFBQUwsRUFBQUUsRUFBQWx6RSxNQUFBLEdBQUEsRUFBQWd6RSxHQUFBRSxFQUNBMzJFLEVBQUE4MkUsRUFBQXoyRSxPQUFBLEVBQ0FpL0IsRUFBQXQvQixFQUFBLEVBQUE4MkUsRUFBQXJ6RSxNQUFBLEVBQUF6RCxJQUFBODJFLEVBQUF6MkUsT0FBQSxFQUFBLElBQUEsSUFBQSxHQUNBMDJFLEVBQUFOLEVBQUFFLEVBQUFsekUsT0FBQSxFQUFBZ3pFLEdBQUEsR0FDQU8sRUFBQWhzRSxFQUFBLEVBQUEsSUFBQSxFQUNBLE9BQUFnc0UsR0FBQVIsRUFBQWwzQyxFQUFBdzNDLEVBQUFyekUsTUFBQXpELEdBQUE4TixRQUFBb29FLEdBQUEsT0FBQWEsR0FnQkFFLFVBQUEsU0FBQWpzRSxHQUNBLEdBQUF3eUMsR0FBQTE2QixFQUFBOVUsVUFBQSxHQUNBM04sRUFBQW05QyxFQUFBbjlDLE1BQ0EsSUFBQUEsRUFBQSxFQUFBLENBQ0EsR0FBQStwQixHQUFBcGYsRUFBQSxHQUFBLENBQ0EsT0FBQW9mLEtBQUFvekIsR0FBQUEsRUFBQXB6QixHQUFBb3pCLEVBQUFuOUMsRUFBQSxHQUVBLE1BQUFtOUMsR0FBQSxJQUFBLElBQUF4eUMsRUFBQSxHQUFBLE1BWUErOUQsU0FBQSxTQUFBOTdDLEVBQUF5TCxHQUNBLEdBQUF6TCxFQUlBLE1BSEF5TCxLQUNBQSxFQUFBLEtBRUEya0IsRUFBQXB3QixFQUFBeUwsSUF3TUEsT0FoQkF5ckMsSUFBQXZpQyxJQUVBQSxHQUFBZ0gsUUFBQSxTQUlBM3pCLFdBQUEsV0FDQXBQLEdBQUFtbkQsV0FDQUEsR0FDQUEsR0FBQUMsS0FBQSxPQUFBcnJCLElBQ0EwakMsSUFBQSxjQUFBOWxFLEtBQUFtRyxPQUFBakQsVUFBQVIsWUFDQWdwQyxRQUFBdTJCLElBQUEsMkdBR0EsR0FFQTcvQiIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiB2YXJpYWJsZXMgZGVmaW5lICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbnZhciBzbmlkID0gJzExMic7IC8vIDwhLS0g6YeN6KaB77yac25pZCDlnKjov5nph4zotYvlgLzvvIxET00g5Y+W5YC855So5Y6f55Sf5LiN6KaB5L2/55SoICQg56ym5Y+3IC0tPlxudmFyIGdhbWVpZCA9ICcyMjInOyAvLyA8IS0tIOmHjeimge+8mmdhbWVpZCDlnKjov5nph4zotYvlgLzvvIxET00g5Y+W5YC855So5Y6f55Sf5LiN6KaB5L2/55SoICQg56ym5Y+3IC0tPlxuLy8gdmFyIGRpZ2dlciA9IHJlcXVpcmUoJ2pzL3ZlbmRvci9kaWdnZXIubWluLmpzJyk7XG5cbnZhciBfaG10O1xuXG4vKiBjbGllbnQgZGV2aWNlICYgb3MgZGV0ZWN0ICovXG5mdW5jdGlvbiBpc0FuZHJvaWQoKSB7XG4gIHJldHVybiAkLnVhLm9zLm5hbWUgPT09ICdBbmRyb2lkJztcbn1cblxuZnVuY3Rpb24gaXNpT1MoKSB7XG4gIHJldHVybiAkLnVhLm9zLm5hbWUgPT09ICdpT1MnO1xufVxuXG5mdW5jdGlvbiBpc1dlY2hhdCgpIHtcbiAgcmV0dXJuICQudWEuYnJvd3Nlci5uYW1lID09PSAnV2VDaGF0Jztcbn1cblxuZnVuY3Rpb24gaXNXZWlibygpIHtcbiAgcmV0dXJuIC93ZWliby9pLnRlc3QoJC51YS51YSk7XG59XG5cbi8qIHBhcnNlIHBhcmFtcyAqL1xudmFyIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zbGljZSgxKSk7XG5cblxuLyogZ2V0IGNoYW5uZWwgaW5mbyAqL1xuYXhpb3MuZ2V0KCcuL2RhdGEvdGVzdC5qc29uJylcbiAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgfSkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgdmFyIGpzb24gPSBldmFsKCcoJyArIGRhdGEgKyAnKScpO1xuICAgIC8vIHZhciBqc29uID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgICByZXR1cm4ganNvbi5jaGFubmVscztcbiAgfSkudGhlbihmdW5jdGlvbihjaGFubmVscykge1xuICAgIHZhciBkb3dubG9hZFVybDtcbiAgICB2YXIgY2hhbm5lbElkID0gc2VhcmNoUGFyYW1zLmdldCgnY2hhbm5lbCcpO1xuICAgIHZhciBsZW4gPSBjaGFubmVscy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGNoYW5uZWxzW2ldLmNoYW5uZWxJZCA9PSBjaGFubmVsSWQpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBjaGFubmVsc1tpXTtcblxuICAgICAgICAvKi0tLS0tLS0tLS0tLS3ov5nph4zlj5blvpfmmK/lronljZPkuIvovb3lnLDlnYDvvIzlpoLmnpzmmK9pb3Mg6K+35Y+W5YC85Li6Y2hhbm5lbC5jb250ZW50LmRvd25sb2FkLmlvc1VybC0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgICAgIGRvd25sb2FkVXJsID0gY2hhbm5lbC5jb250ZW50LmRvd25sb2FkLmFuZHJvaWRVcmw7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2Rvd25sb2FkdXJsOiAnKVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhjaGFubmVsLmNvbnRlbnQuZG93bmxvYWQuYW5kcm9pZFVybClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgYXBwID0gbmV3IFZ1ZSh7XG4gICAgICBlbDogJ2h0bWwnLFxuICAgICAgZGF0YToge1xuICAgICAgICBjaGFubmVsOiBjaGFubmVsLFxuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgaW9zVXJsOiAnamF2YXNjcmlwdDo7JyxcbiAgICAgICAgYW5kcm9pZFVybDogJ2phdmFzY3JpcHQ6OycsXG4gICAgICAgIGJnT2JqZWN0OiB7fVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIC8v55m+5bqm57uf6K6hIHN0YXJ0XG4gICAgICAgIF9obXQgPSBfaG10IHx8IFtdO1xuICAgICAgICB2YXIgaG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgaG0uc3JjID0gJ2h0dHBzOi8vaG0uYmFpZHUuY29tL2htLmpzPycgKyBjaGFubmVsLmNvbnRlbnQuYmFpZHVBbmFseXRpYztcbiAgICAgICAgdmFyIHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG4gICAgICAgIHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaG0sIHMpO1xuICAgICAgICAvL+eZvuW6pue7n+iuoSBlbmRcbiAgICAgICAgdGhhdC5iZ09iamVjdCA9IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZiB1cmwoJyArIGNoYW5uZWwuY29udGVudC5iZ0ltZyArICcpIG5vLXJlcGVhdCdcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBtZXRob2RzOiB7XG4gICAgICAgIGFuZHJvaWRDbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGlzV2VjaGF0KCkgfHwgaXNXZWlibygpKSB7XG4gICAgICAgICAgICB0aGlzLnNob3cgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzLmFuZHJvaWRVcmwgPSBjaGFubmVsLmNvbnRlbnQuZG93bmxvYWQuYW5kcm9pZFVybDtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGNoYW5uZWwuY29udGVudC5kb3dubG9hZC5hbmRyb2lkVXJsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2luZG93Ll9obXQucHVzaChbJ190cmFja0V2ZW50JywgJ3NvZnR3YXJlJywgJ2FuZHJvaWRDbGljaycsICd0dHBsYXllciddKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW9zQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChpc1dlY2hhdCgpIHx8IGlzV2VpYm8oKSkge1xuICAgICAgICAgICAgdGhpcy5zaG93ID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoY2hhbm5lbC5jb250ZW50LmRvd25sb2FkLmlvc1VybCk7XG4gICAgICAgICAgICAvLyB0aGlzLmlvc1VybCA9IGNoYW5uZWwuY29udGVudC5kb3dubG9hZC5pb3NVcmw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdpbmRvdy5faG10LnB1c2goWydfdHJhY2tFdmVudCcsICdzb2Z0d2FyZScsICdpb3NDbGljaycsICd0dHBsYXllciddKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VUaXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMuc2hvdyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZG93bmxvYWRVcmw7XG4gIH0pXG4gIC50aGVuKGZ1bmN0aW9uKGRvd25sb2FkVXJsKSB7XG4gICAgdmFyIF9kaWdnZXJfID0ge1xuICAgICAgZGlzYWJsZVBhZ2VWaWV3VHJhY2s6IGZhbHNlLFxuICAgICAgdHJhY2tlclVybE1hcDoge1xuICAgICAgICBwYWdlVmlldzogWycvL2JpY29sbGVjdC5odWxhaS5jb206ODE4Mi9hcGknXSxcbiAgICAgICAgY2xpY2s6IFsnLy9iaWNvbGxlY3QuaHVsYWkuY29tOjgxODIvYXBpJ11cbiAgICAgIH0sXG4gICAgICBjb29raWVEb21haW46ICcnLFxuICAgICAgc3RyaWN0TW9kZToge1xuICAgICAgICBwYXJhbU9yZGVyOiB7XG4gICAgICAgICAgJy8vYmljb2xsZWN0Lmh1bGFpLmNvbTo4MTgyL2FwaSc6IFsnY29va2llJywgJ3VybCcsICdyZWZlcmVyJywgJ21ldHJpYycsICdzbmlkJywgJ2dhbWVpZCcsICdkb3dubG9hZFVybCcsICdhY3QnXVxuICAgICAgICB9LFxuICAgICAgICBkaXNhYmxlRGVmYXVsdFBhcmFtczogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGV4dGVuZFBhcmFtczoge1xuICAgICAgICBtZXRyaWM6ICdMYW5kaW5nJyxcbiAgICAgICAgc25pZDogc25pZCxcbiAgICAgICAgZ2FtZWlkOiBnYW1laWQsXG4gICAgICAgIHJlZmVyZXI6IGRvY3VtZW50LnJlZmVycmVyID8gZG9jdW1lbnQucmVmZXJyZXIgOiAnJyxcbiAgICAgICAgYWN0OiAndmlzaXQnLFxuICAgICAgICBkb3dubG9hZFVybDogJydcbiAgICAgIH0sXG4gICAgICB0cmFja0Nvb2tpZUtleXM6IHtcbiAgICAgICAgY29va2llOiAnY29va2llX2lkJ1xuICAgICAgfSxcbiAgICAgIHRyYWNrTG9jYWxTdG9yYWdlS2V5czoge1xuICAgICAgICBsYXRpdHVkZTogJ2xvY2F0aW9uLmxhdGl0dWRlJyxcbiAgICAgICAgbG9uZ2l0dWRlOiAnbG9jYXRpb24ubG9uZ2l0dWRlJ1xuICAgICAgfSxcbiAgICAgIGV2ZW50Q29uZmlnQXJyOiBbe1xuICAgICAgICBldmVudFR5cGU6ICdjbGljaycsXG4gICAgICAgIHNlbGVjdG9yczogW1wiYVtpZD0nYW5kcm9pZCddXCJdLFxuICAgICAgICBleHRlbmRQYXJhbXM6IHtcbiAgICAgICAgICBldmVudF9mbGFnOiAnZG93bmxvYWRDbGljaycsXG4gICAgICAgICAgYWN0OiAnY2xpY2snLFxuICAgICAgICAgIGRvd25sb2FkVXJsOiBkb3dubG9hZFVybFxuICAgICAgICB9XG4gICAgICB9XVxuICAgIH07XG4gICAgcmV0dXJuIF9kaWdnZXJfO1xuICB9KS50aGVuKGZ1bmN0aW9uKF9kaWdnZXJfKSB7XG4gICAgZGlnZ2VyKF9kaWdnZXJfKTtcbiAgfSkuY2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgLy8gdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbWVzc2FnZScpO1xuICAgIC8vIGVsLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKCc8PicpXG4gICAgLy8gdmFyIG1vZGVsID0gJCgnW2RhdGEtcmVtb2RhbC1pZD1tb2RhbF0nKS5yZW1vZGFsKCk7XG4gICAgLy8gbW9kZWwub3BlbigpO1xuICB9KTtcblxuZnVuY3Rpb24gZGlnZ2VyKGUpIHtcbiAgZnVuY3Rpb24gcihlKSB7XG4gICAgcmV0dXJuIHVuZXNjYXBlKFIoZSkpXG4gIH1cblxuICBmdW5jdGlvbiB0KGUpIHtcbiAgICB2YXIgciA9IHR5cGVvZiBlO1xuICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9PSByXG4gIH1cblxuICBmdW5jdGlvbiBuKGUpIHtcbiAgICByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiBlXG4gIH1cblxuICBmdW5jdGlvbiBpKGUpIHtcbiAgICByZXR1cm4gXCJvYmplY3RcIiA9PSB0eXBlb2YgZVxuICB9XG5cbiAgZnVuY3Rpb24gYShlKSB7XG4gICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgfHwgZSBpbnN0YW5jZW9mIFN0cmluZ1xuICB9XG5cbiAgZnVuY3Rpb24gbyhlLCByKSB7XG4gICAgcmV0dXJuIG51bGwgPT09IGUgfHwgdm9pZCAwID09PSBlIHx8ICFyICYmIFwiXCIgPT09IGUgfHwgdGUoZSkgJiYgMCA9PT0gZS5sZW5ndGhcbiAgfVxuXG4gIGZ1bmN0aW9uIHUoZSwgcikge1xuICAgIGlmIChlICYmIHIgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2Ygcikge1xuICAgICAgdmFyIHQ7XG4gICAgICBmb3IgKHQgaW4gcikgZVt0XSA9IHJbdF1cbiAgICB9XG4gICAgcmV0dXJuIGVcbiAgfVxuXG4gIGZ1bmN0aW9uIHMoZSwgciwgdCwgbiwgaSwgYSkge1xuICAgIHZhciBvO1xuICAgIHQgJiYgKG8gPSBuZXcgRGF0ZSwgby5zZXRUaW1lKG8uZ2V0VGltZSgpICsgdCkpLCBJLmNvb2tpZSA9IGUgKyBcIj1cIiArIFIocikgKyAodCA/IFwiO2V4cGlyZXM9XCIgKyBvLnRvR01UU3RyaW5nKCkgOiBcIlwiKSArIFwiO3BhdGg9XCIgKyAobiB8fCBcIi9cIikgKyAoaSA/IFwiO2RvbWFpbj1cIiArIGkgOiBcIlwiKSArIChhID8gXCI7c2VjdXJlXCIgOiBcIlwiKVxuICB9XG5cbiAgZnVuY3Rpb24gZihlKSB7XG4gICAgdmFyIHIgPSBuZXcgUmVnRXhwKFwiKF58OylbIF0qXCIgKyBlICsgXCI9KFteO10qKVwiKSxcbiAgICAgIHQgPSByLmV4ZWMoSS5jb29raWUpO1xuICAgIHJldHVybiB0ID8gXyh0WzJdKSA6IG51bGxcbiAgfVxuXG4gIGZ1bmN0aW9uIGMoKSB7XG4gICAgaWYgKCF0KEYuY29va2llRW5hYmxlZCkpIHtcbiAgICAgIHZhciBlID0gZ2V0Q29va2llTmFtZShcInRlc3Rjb29raWVcIik7XG4gICAgICByZXR1cm4gcyhlLCBcIjFcIiksIFwiMVwiID09PSBmKGUpID8gXCIxXCIgOiBcIjBcIlxuICAgIH1cbiAgICByZXR1cm4gRi5jb29raWVFbmFibGVkID8gXCIxXCIgOiBcIjBcIlxuICB9XG5cbiAgZnVuY3Rpb24gbCgpIHtcbiAgICB2YXIgZSwgciwgaSA9IHtcbiAgICAgICAgcGRmOiBcImFwcGxpY2F0aW9uL3BkZlwiLFxuICAgICAgICBxdDogXCJ2aWRlby9xdWlja3RpbWVcIixcbiAgICAgICAgcmVhbHA6IFwiYXVkaW8veC1wbi1yZWFsYXVkaW8tcGx1Z2luXCIsXG4gICAgICAgIHdtYTogXCJhcHBsaWNhdGlvbi94LW1wbGF5ZXIyXCIsXG4gICAgICAgIGRpcjogXCJhcHBsaWNhdGlvbi94LWRpcmVjdG9yXCIsXG4gICAgICAgIGZsYTogXCJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaFwiLFxuICAgICAgICBqYXZhOiBcImFwcGxpY2F0aW9uL3gtamF2YS12bVwiLFxuICAgICAgICBnZWFyczogXCJhcHBsaWNhdGlvbi94LWdvb2dsZWdlYXJzXCIsXG4gICAgICAgIGFnOiBcImFwcGxpY2F0aW9uL3gtc2lsdmVybGlnaHRcIlxuICAgICAgfSxcbiAgICAgIGEgPSBMLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgICBpZiAoIW5ldyBSZWdFeHAoXCJNU0lFXCIpLnRlc3QoRi51c2VyQWdlbnQpKSB7XG4gICAgICBpZiAoRi5taW1lVHlwZXMgJiYgRi5taW1lVHlwZXMubGVuZ3RoKVxuICAgICAgICBmb3IgKGUgaW4gaSkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGksIGUpICYmIChyID0gRi5taW1lVHlwZXNbaVtlXV0sIE9bZV0gPSByICYmIHIuZW5hYmxlZFBsdWdpbiA/IFwiMVwiIDogXCIwXCIpO1xuICAgICAgXCJ1bmtub3duXCIgIT0gdHlwZW9mIG5hdmlnYXRvci5qYXZhRW5hYmxlZCAmJiB0KEYuamF2YUVuYWJsZWQpICYmIEYuamF2YUVuYWJsZWQoKSAmJiAoTy5qYXZhID0gXCIxXCIpLCBuKEwuR2VhcnNGYWN0b3J5KSAmJiAoTy5nZWFycyA9IFwiMVwiKSwgTy5jb29raWUgPSBjKClcbiAgICB9XG4gICAgdmFyIG8gPSBwYXJzZUludChVLndpZHRoLCAxMCkgKiBhLFxuICAgICAgdSA9IHBhcnNlSW50KFUuaGVpZ2h0LCAxMCkgKiBhO1xuICAgIE8ucmVzID0gcGFyc2VJbnQobywgMTApICsgXCJ4XCIgKyBwYXJzZUludCh1LCAxMClcbiAgfVxuXG4gIGZ1bmN0aW9uIGQoKSB7XG4gICAgcmV0dXJuIEIoKEYudXNlckFnZW50IHx8IFwiXCIpICsgKEYucGxhdGZvcm0gfHwgXCJcIikgKyBKU09OLnN0cmluZ2lmeShPKSArIChuZXcgRGF0ZSkuZ2V0VGltZSgpICsgTWF0aC5yYW5kb20oKSkuc2xpY2UoMCwgMTYpXG4gIH1cblxuICBmdW5jdGlvbiBnKGUpIHtcbiAgICB2YXIgciA9IG5ldyBSZWdFeHAoXCJeKD86KD86aHR0cHM/fGZ0cCk6KS8qKD86W15AXStAKT8oW146LyNdKylcIiksXG4gICAgICB0ID0gci5leGVjKGUpO1xuICAgIHJldHVybiB0ID8gdFsxXSA6IGVcbiAgfVxuXG4gIGZ1bmN0aW9uIGgoZSkge1xuICAgIHZhciB0LCBuLCBpLCBhLCBvLCB1LCBzLCBmLCBjLCBsLCBkID0gZnVuY3Rpb24oZSwgcikge1xuICAgICAgICByZXR1cm4gZSA8PCByIHwgZSA+Pj4gMzIgLSByXG4gICAgICB9LFxuICAgICAgZyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHIsIHQsIG4gPSBcIlwiO1xuICAgICAgICBmb3IgKHIgPSA3OyByID49IDA7IHItLSkgdCA9IGUgPj4+IDQgKiByICYgMTUsIG4gKz0gdC50b1N0cmluZygxNik7XG4gICAgICAgIHJldHVybiBuXG4gICAgICB9LFxuICAgICAgaCA9IFtdLFxuICAgICAgdiA9IDE3MzI1ODQxOTMsXG4gICAgICBtID0gNDAyMzIzMzQxNyxcbiAgICAgIHAgPSAyNTYyMzgzMTAyLFxuICAgICAgQSA9IDI3MTczMzg3OCxcbiAgICAgIHkgPSAzMjg1Mzc3NTIwLFxuICAgICAgYiA9IFtdO1xuICAgIGZvciAoZSA9IHIoZSksIGwgPSBlLmxlbmd0aCwgbiA9IDA7IG4gPCBsIC0gMzsgbiArPSA0KSBpID0gZS5jaGFyQ29kZUF0KG4pIDw8IDI0IHwgZS5jaGFyQ29kZUF0KG4gKyAxKSA8PCAxNiB8IGUuY2hhckNvZGVBdChuICsgMikgPDwgOCB8IGUuY2hhckNvZGVBdChuICsgMyksIGIucHVzaChpKTtcbiAgICBzd2l0Y2ggKDMgJiBsKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIG4gPSAyMTQ3NDgzNjQ4O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbiA9IGUuY2hhckNvZGVBdChsIC0gMSkgPDwgMjQgfCA4Mzg4NjA4O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgbiA9IGUuY2hhckNvZGVBdChsIC0gMikgPDwgMjQgfCBlLmNoYXJDb2RlQXQobCAtIDEpIDw8IDE2IHwgMzI3Njg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBuID0gZS5jaGFyQ29kZUF0KGwgLSAzKSA8PCAyNCB8IGUuY2hhckNvZGVBdChsIC0gMikgPDwgMTYgfCBlLmNoYXJDb2RlQXQobCAtIDEpIDw8IDggfCAxMjhcbiAgICB9XG4gICAgZm9yIChiLnB1c2gobik7IDE0ICE9PSAoMTUgJiBiLmxlbmd0aCk7KSBiLnB1c2goMCk7XG4gICAgZm9yIChiLnB1c2gobCA+Pj4gMjkpLCBiLnB1c2gobCA8PCAzICYgNDI5NDk2NzI5NSksIHQgPSAwOyB0IDwgYi5sZW5ndGg7IHQgKz0gMTYpIHtcbiAgICAgIGZvciAobiA9IDA7IG4gPCAxNjsgbisrKSBoW25dID0gYlt0ICsgbl07XG4gICAgICBmb3IgKG4gPSAxNjsgbiA8PSA3OTsgbisrKSBoW25dID0gZChoW24gLSAzXSBeIGhbbiAtIDhdIF4gaFtuIC0gMTRdIF4gaFtuIC0gMTZdLCAxKTtcbiAgICAgIGZvciAoYSA9IHYsIG8gPSBtLCB1ID0gcCwgcyA9IEEsIGYgPSB5LCBuID0gMDsgbiA8PSAxOTsgbisrKSBjID0gZChhLCA1KSArIChvICYgdSB8IH5vICYgcykgKyBmICsgaFtuXSArIDE1MTg1MDAyNDkgJiA0Mjk0OTY3Mjk1LCBmID0gcywgcyA9IHUsIHUgPSBkKG8sIDMwKSwgbyA9IGEsIGEgPSBjO1xuICAgICAgZm9yIChuID0gMjA7IG4gPD0gMzk7IG4rKykgYyA9IGQoYSwgNSkgKyAobyBeIHUgXiBzKSArIGYgKyBoW25dICsgMTg1OTc3NTM5MyAmIDQyOTQ5NjcyOTUsIGYgPSBzLCBzID0gdSwgdSA9IGQobywgMzApLCBvID0gYSwgYSA9IGM7XG4gICAgICBmb3IgKG4gPSA0MDsgbiA8PSA1OTsgbisrKSBjID0gZChhLCA1KSArIChvICYgdSB8IG8gJiBzIHwgdSAmIHMpICsgZiArIGhbbl0gKyAyNDAwOTU5NzA4ICYgNDI5NDk2NzI5NSwgZiA9IHMsIHMgPSB1LCB1ID0gZChvLCAzMCksIG8gPSBhLCBhID0gYztcbiAgICAgIGZvciAobiA9IDYwOyBuIDw9IDc5OyBuKyspIGMgPSBkKGEsIDUpICsgKG8gXiB1IF4gcykgKyBmICsgaFtuXSArIDMzOTU0Njk3ODIgJiA0Mjk0OTY3Mjk1LCBmID0gcywgcyA9IHUsIHUgPSBkKG8sIDMwKSwgbyA9IGEsIGEgPSBjO1xuICAgICAgdiA9IHYgKyBhICYgNDI5NDk2NzI5NSwgbSA9IG0gKyBvICYgNDI5NDk2NzI5NSwgcCA9IHAgKyB1ICYgNDI5NDk2NzI5NSwgQSA9IEEgKyBzICYgNDI5NDk2NzI5NSwgeSA9IHkgKyBmICYgNDI5NDk2NzI5NVxuICAgIH1cbiAgICByZXR1cm4gYyA9IGcodikgKyBnKG0pICsgZyhwKSArIGcoQSkgKyBnKHkpLCBjLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIHYoZSwgciwgdCwgbikge1xuICAgIHJldHVybiBlLmFkZEV2ZW50TGlzdGVuZXIgPyAoZS5hZGRFdmVudExpc3RlbmVyKHIsIHQsIG4pLCAhMCkgOiBlLmF0dGFjaEV2ZW50ID8gZS5hdHRhY2hFdmVudChcIm9uXCIgKyByLCB0KSA6IHZvaWQoZVtcIm9uXCIgKyByXSA9IHQpXG4gIH1cblxuICBmdW5jdGlvbiBtKGUpIHtcbiAgICBzd2l0Y2ggKGUudHlwZSkge1xuICAgICAgY2FzZSBcImNsaWNrXCI6XG4gICAgICAgIEUoZSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwKCkge1xuICAgIHZhciBlID0gXCJcIjtcbiAgICB0cnkge1xuICAgICAgZSA9IEwudG9wLmRvY3VtZW50LnJlZmVycmVyXG4gICAgfSBjYXRjaCAocikge1xuICAgICAgaWYgKEwucGFyZW50KSB0cnkge1xuICAgICAgICBlID0gTC5wYXJlbnQuZG9jdW1lbnQucmVmZXJyZXJcbiAgICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgICAgZSA9IFwiXCJcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFwiXCIgPT09IGUgJiYgKGUgPSBJLnJlZmVycmVyKSwgZVxuICB9XG5cbiAgZnVuY3Rpb24gQSgpIHtcbiAgICB2YXIgZSA9IHt9O1xuICAgIGZvciAodmFyIHIgaW4gUSkgZVtyXSA9IFIoZihRW3JdKSk7XG4gICAgcmV0dXJuIGVcbiAgfVxuXG4gIGZ1bmN0aW9uIHkoKSB7XG4gICAgdmFyIGUgPSB7fTtcbiAgICBmb3IgKHZhciByIGluIFgpIGVbcl0gPSBSKE0uZ2V0SXRlbShYW3JdKSk7XG4gICAgcmV0dXJuIGVcbiAgfVxuXG4gIGZ1bmN0aW9uIHcoZSkge1xuICAgIGlmICghZSkgcmV0dXJuIFwiXCI7XG4gICAgdmFyIHIgPSBcIlwiO1xuICAgIGZvciAodmFyIHQgaW4gZSkgciArPSB0ICsgXCI9XCIgKyBSKGVbdF0pICsgXCImXCI7XG4gICAgcmV0dXJuIHIubGVuZ3RoID4gMCA/IHIuc3Vic3RyaW5nKDAsIHIubGVuZ3RoIC0gMSkgOiByXG4gIH1cblxuICBmdW5jdGlvbiBrKGUsIHIsIHQpIHtcbiAgICB2YXIgbiA9IG5ldyBJbWFnZSgxLCAxKTtcbiAgICBuLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgUyA9IDAsIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdCAmJiB0KClcbiAgICB9LCBuLnNyYyA9IGUgKyAoZS5pbmRleE9mKFwiP1wiKSA8IDAgPyBcIj9cIiA6IFwiXCIpICsgclxuICB9XG5cbiAgZnVuY3Rpb24gQyhlKSB7XG4gICAgaWYgKCF3aW5kb3cuRG1hbGxBbmFseXNpcy5kaWdnZXIuY29uZmlnLm92ZXJyaWRlUGFyYW1zIHx8ICFpKHdpbmRvdy5EbWFsbEFuYWx5c2lzLmRpZ2dlci5jb25maWcub3ZlcnJpZGVQYXJhbXMpKSByZXR1cm4gZTtcbiAgICBmb3IgKHZhciByIGluIHdpbmRvdy5EbWFsbEFuYWx5c2lzLmRpZ2dlci5jb25maWcub3ZlcnJpZGVQYXJhbXMpIHZvaWQgMCAhPT0gZVtyXSAmJiAoZVtyXSA9IHdpbmRvdy5EbWFsbEFuYWx5c2lzLmRpZ2dlci5jb25maWcub3ZlcnJpZGVQYXJhbXNbcl0pO1xuICAgIHJldHVybiBlXG4gIH1cblxuICBmdW5jdGlvbiBOKCkge1xuICAgIHZhciBlID0ge30sXG4gICAgICByID0gZihxICsgXCJ1dWlkXCIpLFxuICAgICAgdCA9IDI0ICogeiAqIDYwICogNjAsXG4gICAgICBuID0gZihcImNvb2tpZV9pZFwiKTtcbiAgICByZXR1cm4gZSA9IHUoZSwgQSgpKSwgZSA9IHUoZSwgWSksIE0gJiYgKGUgPSB1KGUsIHkoKSkpLCBvKHIpICYmIChzKHEgKyBcInV1aWRcIiwgZCgpLCB0LCBKLCBHIHx8IGcoTC5sb2NhdGlvbi5ocmVmKSksIHIgPSBmKHEgKyBcInV1aWRcIikpLCBvKG4pICYmIChuID0gRGF0ZS5ub3coKSArIFN0cmluZyhyKS5zdWJzdHIoMCwgNSksIHMoXCJjb29raWVfaWRcIiwgbiwgdCwgSiwgRyB8fCBnKEwubG9jYXRpb24uaHJlZikpKSwgZVtxICsgXCJ1dWlkXCJdID0gZihxICsgXCJ1dWlkXCIpLCBlLmNvb2tpZV9pZCA9IG4sIGUudXJsID0gSS5VUkwsIGUucmVmZXJfdXJsID0gcCgpLCBlLnBhZ2VUaXRsZSA9ICQsIGVcbiAgfVxuXG4gIGZ1bmN0aW9uIHgoZSwgcikge1xuICAgIGlmICghcmUpIHJldHVybiBDKGUpO1xuICAgIHZhciB0ID0ge30sXG4gICAgICBuID0gcmUucGFyYW1PcmRlcltyXTtcbiAgICBpZiAoIW4pIHJldHVybiBDKGUpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykgdFtuW2ldXSA9IGVbbltpXV07XG4gICAgaWYgKHJlICYmIHJlLmRpc2FibGVEZWZhdWx0UGFyYW1zKSByZXR1cm4gQyh0KTtcbiAgICBmb3IgKHZhciBhIGluIGUpIHZvaWQgMCA9PT0gdFthXSAmJiAodFthXSA9IGVbYV0pO1xuICAgIHJldHVybiBDKHQpXG4gIH1cblxuICBmdW5jdGlvbiBEKCkge1xuICAgIHdpbmRvdy5EbWFsbEFuYWx5c2lzIHx8ICh3aW5kb3cuRG1hbGxBbmFseXNpcyA9IHt9KSwgd2luZG93LkRtYWxsQW5hbHlzaXMuZGlnZ2VyIHx8ICh3aW5kb3cuRG1hbGxBbmFseXNpcy5kaWdnZXIgPSB7fSksIHdpbmRvdy5EbWFsbEFuYWx5c2lzLmRpZ2dlci5jb25maWcgfHwgKHdpbmRvdy5EbWFsbEFuYWx5c2lzLmRpZ2dlci5jb25maWcgPSB7fSlcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZSkge1xuICAgIEQoKSwgd2luZG93LkRtYWxsQW5hbHlzaXMuZGlnZ2VyLmNvbmZpZy5vdmVycmlkZVBhcmFtcyA9IGVcbiAgfVxuXG4gIGZ1bmN0aW9uIFAoKSB7XG4gICAgRCgpO1xuICAgIHZhciBlID0gTigpLFxuICAgICAgciA9IHt9O1xuICAgIGUuYWN0aW9uID0gai5wYWdlVmllO1xuICAgIGZvciAodmFyIHQgaW4gWilcbiAgICAgIGlmIChcInBhZ2VWaWV3XCIgPT09IHQpXG4gICAgICAgIGlmICh0ZShaW3RdKSlcbiAgICAgICAgICBmb3IgKHZhciBuIGluIFpbdF0pIHIgPSB4KGUsIFpbdF1bbl0pLCBrKFpbdF1bbl0sIHcocikpO1xuICAgICAgICBlbHNlIGEoWlt0XSkgJiYgKHIgPSB4KGUsIFpbdF0pLCBrKFpbdF0sIHcocikpKVxuICB9XG5cbiAgZnVuY3Rpb24gRShlKSB7XG4gICAgZm9yICh2YXIgciA9IChlLmN1cnJlbnRUYXJnZXQgfHwgZS50YXJnZXQsIHt9KSwgdCA9IE4oKSwgbiA9IHt9LCBpID0gMDsgaSA8IGVlLmxlbmd0aDsgaSsrKVxuICAgICAgaWYgKFwiY2xpY2tcIiA9PT0gZS50eXBlKSB7XG4gICAgICAgIHIgPSBlZVtpXTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICBpZiAocilcbiAgICAgIGlmIChyLmV4dGVuZFBhcmFtcyAmJiAodCA9IHUodCwgci5leHRlbmRQYXJhbXMpKSwgdC5hY3Rpb24gPSBqLmNsaWNrLCBuID0geCh0LCBaLmNsaWNrKSwgdGUoWi5jbGljaykpXG4gICAgICAgIGZvciAodmFyIG8gaW4gWi5jbGljaykgayhaLmNsaWNrW29dLCB3KG4pKTtcbiAgICAgIGVsc2UgYShaW2JdKSAmJiBrKFouY2xpY2ssIHcobikpXG4gIH1cblxuICBmdW5jdGlvbiBWKCkge1xuICAgIGlmIChlZSAmJiAhKGVlLmxlbmd0aCA8IDEpKVxuICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCBlZS5sZW5ndGg7IGUrKykge1xuICAgICAgICB2YXIgciA9IGVlW2VdLmV2ZW50VHlwZSxcbiAgICAgICAgICB0ID0gZWVbZV0uc2VsZWN0b3JzLFxuICAgICAgICAgIG4gPSBbXTtcbiAgICAgICAgaWYgKCF0KSBicmVhaztcbiAgICAgICAgaWYgKGEodCkgJiYgKG4gPSBuLmNvbmNhdChuZS5maW5kKHQpKSksIHRlKHQpKVxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdC5sZW5ndGg7IGkrKykgbiA9IG4uY29uY2F0KG5lLmZpbmQodFtpXSkpO1xuICAgICAgICBlZVtlXS5jdXJyZW50VGFyZ2V0cyA9IG47XG4gICAgICAgIGZvciAodmFyIG8gPSAwOyBvIDwgbi5sZW5ndGg7IG8rKykgdihuW29dLCByLCBtLCAhMSlcbiAgICAgIH1cbiAgfVxuICB2YXIgUywgaiA9IHtcbiAgICAgIHBhZ2VWaWV3OiBcIjBcIixcbiAgICAgIGRvd25sb2FkOiBcIjFcIixcbiAgICAgIGNsaWNrOiBcIjJcIixcbiAgICAgIGxpbms6IFwiM1wiXG4gICAgfSxcbiAgICBPID0ge30sXG4gICAgSCA9IHt9LFxuICAgIEkgPSBkb2N1bWVudCxcbiAgICBGID0gbmF2aWdhdG9yLFxuICAgIFUgPSBzY3JlZW4sXG4gICAgTCA9IHdpbmRvdyxcbiAgICBNID0gbG9jYWxTdG9yYWdlLFxuICAgIFIgPSAoTC5wZXJmb3JtYW5jZSB8fCBMLm1velBlcmZvcm1hbmNlIHx8IEwubXNQZXJmb3JtYW5jZSB8fCBMLndlYmtpdFBlcmZvcm1hbmNlLCBMLmVuY29kZVVSSUNvbXBvbmVudCksXG4gICAgXyA9IEwuZGVjb2RlVVJJQ29tcG9uZW50LFxuICAgIHEgPSAodW5lc2NhcGUsIFwiX2RpZ2dlcl9cIiksXG4gICAgQiA9IGgsXG4gICAgSyA9IChlICYmIGUuZGlzYWJsZVVVSUQsIGUgJiYgZS5kaXNhYmxlUGFnZVZpZXdUcmFjayksXG4gICAgVyA9IGUgJiYgZS5kaXNhYmxlQXV0b1JlcG9ydCxcbiAgICBHID0gZSAmJiBlLmNvb2tpZURvbWFpbiA/IGUuY29va2llRG9tYWluIDogXCJcIixcbiAgICB6ID0gZSAmJiBlLmV4cGlyZURheSA/IGUuZXhwaXJlRGF5IDogMzY1LFxuICAgIEogPSBlICYmIGUuY29va2llUGF0aCA/IGUuY29va2llUGF0aCA6IFwiL1wiLFxuICAgIFEgPSBlICYmIGUudHJhY2tDb29raWVLZXlzID8gZS50cmFja0Nvb2tpZUtleXMgOiB7fSxcbiAgICBYID0gZSAmJiBlLnRyYWNrTG9jYWxTdG9yYWdlS2V5cyA/IGUudHJhY2tMb2NhbFN0b3JhZ2VLZXlzIDoge30sXG4gICAgWSA9IGUgJiYgZS5leHRlbmRQYXJhbXMgPyBlLmV4dGVuZFBhcmFtcyA6IHt9LFxuICAgIFogPSBlICYmIGUudHJhY2tlclVybE1hcCA/IHUoSCwgZS50cmFja2VyVXJsTWFwKSA6IEgsXG4gICAgJCA9IGUgJiYgZS50cmFja2VyVGl0bGUgPyBlLnRyYWNrZXJUaXRsZSA6IEkudGl0bGUsXG4gICAgZWUgPSBlICYmIGUuZXZlbnRDb25maWdBcnIgPyBlLmV2ZW50Q29uZmlnQXJyIDogW10sXG4gICAgcmUgPSAhKCFlIHx8ICFlLnN0cmljdE1vZGUpICYmIGUuc3RyaWN0TW9kZSxcbiAgICB0ZSA9IFwiaXNBcnJheVwiIGluIEFycmF5ID8gQXJyYXkuaXNBcnJheSA6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBcIltvYmplY3QgQXJyYXldXCIgPT09IHRvU3RyaW5nLmNhbGwoZSlcbiAgICB9LFxuICAgIG5lID0ge1xuICAgICAgaHRtbENvbGxlY3Rpb25Ub0FycmF5OiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciByLCB0ID0gW107XG4gICAgICAgIGlmICghZSB8fCAhZS5sZW5ndGgpIHJldHVybiB0O1xuICAgICAgICBmb3IgKHIgPSAwOyByIDwgZS5sZW5ndGg7IHIrKykgdC5wdXNoKGVbcl0pO1xuICAgICAgICByZXR1cm4gdFxuICAgICAgfSxcbiAgICAgIGZpbmQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsIHx8ICFlKSByZXR1cm4gW107XG4gICAgICAgIHZhciByID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHRtbENvbGxlY3Rpb25Ub0FycmF5KHIpXG4gICAgICB9LFxuICAgICAgZmluZE11bHRpcGxlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghZSB8fCAhZS5sZW5ndGgpIHJldHVybiBbXTtcbiAgICAgICAgdmFyIHIsIHQsIG4gPSBbXTtcbiAgICAgICAgZm9yIChyID0gMDsgciA8IGUubGVuZ3RoOyByKyspIHQgPSB0aGlzLmZpbmQoZVtyXSksIG4gPSBuLmNvbmNhdCh0KTtcbiAgICAgICAgcmV0dXJuIG4gPSB0aGlzLm1ha2VOb2Rlc1VuaXF1ZShuKVxuICAgICAgfSxcbiAgICAgIGZpbmROb2Rlc0J5VGFnTmFtZTogZnVuY3Rpb24oZSwgcikge1xuICAgICAgICBpZiAoIWUgfHwgIXIgfHwgIWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUpIHJldHVybiBbXTtcbiAgICAgICAgdmFyIHQgPSBlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHIpO1xuICAgICAgICByZXR1cm4gdGhpcy5odG1sQ29sbGVjdGlvblRvQXJyYXkodClcbiAgICAgIH0sXG4gICAgICBtYWtlTm9kZXNVbmlxdWU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHIgPSBbXS5jb25jYXQoZSk7XG4gICAgICAgIGlmIChlLnNvcnQoZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgaWYgKGUgPT09IHQpIHJldHVybiAwO1xuICAgICAgICAgICAgdmFyIG4gPSBpbmRleE9mQXJyYXkociwgZSksXG4gICAgICAgICAgICAgIGkgPSBpbmRleE9mQXJyYXkociwgdCk7XG4gICAgICAgICAgICByZXR1cm4gbiA9PT0gaSA/IDAgOiBuID4gaSA/IC0xIDogMVxuICAgICAgICAgIH0pLCBlLmxlbmd0aCA8PSAxKSByZXR1cm4gZTtcbiAgICAgICAgdmFyIHQsIG4gPSAwLFxuICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgIGEgPSBbXTtcbiAgICAgICAgZm9yICh0ID0gZVtuKytdOyB0OykgdCA9PT0gZVtuXSAmJiAoaSA9IGEucHVzaChuKSksIHQgPSBlW24rK10gfHwgbnVsbDtcbiAgICAgICAgZm9yICg7IGktLTspIGUuc3BsaWNlKGFbaV0sIDEpO1xuICAgICAgICByZXR1cm4gZVxuICAgICAgfSxcbiAgICAgIGdldEF0dHJpYnV0ZVZhbHVlRnJvbU5vZGU6IGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzTm9kZUF0dHJpYnV0ZShlLCByKSkge1xuICAgICAgICAgIGlmIChlICYmIGUuZ2V0QXR0cmlidXRlKSByZXR1cm4gZS5nZXRBdHRyaWJ1dGUocik7XG4gICAgICAgICAgaWYgKGUgJiYgZS5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB2YXIgdCA9IHR5cGVvZiBlLmF0dHJpYnV0ZXNbcl07XG4gICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdCkge1xuICAgICAgICAgICAgICBpZiAoZS5hdHRyaWJ1dGVzW3JdLnZhbHVlKSByZXR1cm4gZS5hdHRyaWJ1dGVzW3JdLnZhbHVlO1xuICAgICAgICAgICAgICBpZiAoZS5hdHRyaWJ1dGVzW3JdLm5vZGVWYWx1ZSkgcmV0dXJuIGUuYXR0cmlidXRlc1tyXS5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgIHZhciBuLCBpID0gZS5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgIGZvciAobiA9IDA7IG4gPCBpLmxlbmd0aDsgbisrKVxuICAgICAgICAgICAgICAgICAgaWYgKGlbbl0ubm9kZU5hbWUgPT09IHIpIHJldHVybiBpW25dLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaGFzTm9kZUF0dHJpYnV0ZVdpdGhWYWx1ZTogZnVuY3Rpb24oZSwgcikge1xuICAgICAgICB2YXIgdCA9IHRoaXMuZ2V0QXR0cmlidXRlVmFsdWVGcm9tTm9kZShlLCByKTtcbiAgICAgICAgcmV0dXJuICEhdFxuICAgICAgfSxcbiAgICAgIGhhc05vZGVBdHRyaWJ1dGU6IGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgICAgaWYgKGUgJiYgZS5oYXNBdHRyaWJ1dGUpIHJldHVybiBlLmhhc0F0dHJpYnV0ZShyKTtcbiAgICAgICAgaWYgKGUgJiYgZS5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgdmFyIHQgPSB0eXBlb2YgZS5hdHRyaWJ1dGVzW3JdO1xuICAgICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9PSB0XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICExXG4gICAgICB9LFxuICAgICAgaGFzTm9kZUNzc0NsYXNzOiBmdW5jdGlvbihlLCByKSB7XG4gICAgICAgIGlmIChlICYmIHIgJiYgZS5jbGFzc05hbWUpIHtcbiAgICAgICAgICB2YXIgdCA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUuY2xhc3NOYW1lID8gZS5jbGFzc05hbWUuc3BsaXQoXCIgXCIpIDogW107XG4gICAgICAgICAgaWYgKC0xICE9PSBpbmRleE9mQXJyYXkodCwgcikpIHJldHVybiAhMFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMVxuICAgICAgfSxcbiAgICAgIGZpbmROb2Rlc0hhdmluZ0F0dHJpYnV0ZTogZnVuY3Rpb24oZSwgciwgdCkge1xuICAgICAgICBpZiAodCB8fCAodCA9IFtdKSwgIWUgfHwgIXIpIHJldHVybiB0O1xuICAgICAgICB2YXIgbiA9IGdldENoaWxkcmVuRnJvbU5vZGUoZSk7XG4gICAgICAgIGlmICghbiB8fCAhbi5sZW5ndGgpIHJldHVybiB0O1xuICAgICAgICB2YXIgaSwgYTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspIGEgPSBuW2ldLCB0aGlzLmhhc05vZGVBdHRyaWJ1dGUoYSwgcikgJiYgdC5wdXNoKGEpLCB0ID0gdGhpcy5maW5kTm9kZXNIYXZpbmdBdHRyaWJ1dGUoYSwgciwgdCk7XG4gICAgICAgIHJldHVybiB0XG4gICAgICB9LFxuICAgICAgZmluZEZpcnN0Tm9kZUhhdmluZ0F0dHJpYnV0ZTogZnVuY3Rpb24oZSwgcikge1xuICAgICAgICBpZiAoZSAmJiByKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaGFzTm9kZUF0dHJpYnV0ZShlLCByKSkgcmV0dXJuIGU7XG4gICAgICAgICAgdmFyIHQgPSB0aGlzLmZpbmROb2Rlc0hhdmluZ0F0dHJpYnV0ZShlLCByKTtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA/IHRbMF0gOiB2b2lkIDBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZpbmRGaXJzdE5vZGVIYXZpbmdBdHRyaWJ1dGVXaXRoVmFsdWU6IGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgICAgaWYgKGUgJiYgcikge1xuICAgICAgICAgIGlmICh0aGlzLmhhc05vZGVBdHRyaWJ1dGVXaXRoVmFsdWUoZSwgcikpIHJldHVybiBlO1xuICAgICAgICAgIHZhciB0ID0gdGhpcy5maW5kTm9kZXNIYXZpbmdBdHRyaWJ1dGUoZSwgcik7XG4gICAgICAgICAgaWYgKHQgJiYgdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBuO1xuICAgICAgICAgICAgZm9yIChuID0gMDsgbiA8IHQubGVuZ3RoOyBuKyspXG4gICAgICAgICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZVZhbHVlRnJvbU5vZGUodFtuXSwgcikpIHJldHVybiB0W25dXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZmluZE5vZGVzSGF2aW5nQ3NzQ2xhc3M6IGZ1bmN0aW9uKGUsIHIsIHQpIHtcbiAgICAgICAgaWYgKHQgfHwgKHQgPSBbXSksICFlIHx8ICFyKSByZXR1cm4gdDtcbiAgICAgICAgaWYgKGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSkge1xuICAgICAgICAgIHZhciBuID0gZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHIpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmh0bWxDb2xsZWN0aW9uVG9BcnJheShuKVxuICAgICAgICB9XG4gICAgICAgIHZhciBpID0gZ2V0Q2hpbGRyZW5Gcm9tTm9kZShlKTtcbiAgICAgICAgaWYgKCFpIHx8ICFpLmxlbmd0aCkgcmV0dXJuIFtdO1xuICAgICAgICB2YXIgYSwgbztcbiAgICAgICAgZm9yIChhID0gMDsgYSA8IGkubGVuZ3RoOyBhKyspIG8gPSBpW2FdLCB0aGlzLmhhc05vZGVDc3NDbGFzcyhvLCByKSAmJiB0LnB1c2gobyksIHQgPSB0aGlzLmZpbmROb2Rlc0hhdmluZ0Nzc0NsYXNzKG8sIHIsIHQpO1xuICAgICAgICByZXR1cm4gdFxuICAgICAgfSxcbiAgICAgIGZpbmRGaXJzdE5vZGVIYXZpbmdDbGFzczogZnVuY3Rpb24oZSwgcikge1xuICAgICAgICBpZiAoZSAmJiByKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaGFzTm9kZUNzc0NsYXNzKGUsIHIpKSByZXR1cm4gZTtcbiAgICAgICAgICB2YXIgdCA9IHRoaXMuZmluZE5vZGVzSGF2aW5nQ3NzQ2xhc3MoZSwgcik7XG4gICAgICAgICAgcmV0dXJuIHQgJiYgdC5sZW5ndGggPyB0WzBdIDogdm9pZCAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpc0xpbmtFbGVtZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghZSkgcmV0dXJuICExO1xuICAgICAgICB2YXIgciA9IFN0cmluZyhlLm5vZGVOYW1lKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgIHQgPSBbXCJhXCIsIFwiYXJlYVwiXSxcbiAgICAgICAgICBuID0gaW5kZXhPZkFycmF5KHQsIHIpO1xuICAgICAgICByZXR1cm4gbiAhPT0gLTFcbiAgICAgIH0sXG4gICAgICBzZXRBbnlBdHRyaWJ1dGU6IGZ1bmN0aW9uKGUsIHIsIHQpIHtcbiAgICAgICAgZSAmJiByICYmIChlLnNldEF0dHJpYnV0ZSA/IGUuc2V0QXR0cmlidXRlKHIsIHQpIDogZVtyXSA9IHQpXG4gICAgICB9XG4gICAgfTtcbiAgcmV0dXJuIEQoKSwgbCgpLCBWKCksIEsgfHwgVyB8fCBQKCksIHdpbmRvdy5EbWFsbEFuYWx5c2lzLmRpZ2dlciA9IE9iamVjdC5hc3NpZ24od2luZG93LkRtYWxsQW5hbHlzaXMuZGlnZ2VyLCB7XG4gICAgc2VuZFBhZ2VWaWV3VHJhY2tlcjogUCxcbiAgICBzZXRPdmVycmlkZVBhcmFtczogVFxuICB9KSwgd2luZG93LkRtYWxsQW5hbHlzaXNcbn1cbiIsIi8qIGF4aW9zIHYwLjE1LjMgfCAoYykgMjAxNiBieSBNYXR0IFphYnJpc2tpZSAqL1xuIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5heGlvcz10KCk6ZS5heGlvcz10KCl9KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChyKXtpZihuW3JdKXJldHVybiBuW3JdLmV4cG9ydHM7dmFyIG89bltyXT17ZXhwb3J0czp7fSxpZDpyLGxvYWRlZDohMX07cmV0dXJuIGVbcl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsdCksby5sb2FkZWQ9ITAsby5leHBvcnRzfXZhciBuPXt9O3JldHVybiB0Lm09ZSx0LmM9bix0LnA9XCJcIix0KDApfShbZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1uKDEpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXt2YXIgdD1uZXcgaShlKSxuPXMoaS5wcm90b3R5cGUucmVxdWVzdCx0KTtyZXR1cm4gby5leHRlbmQobixpLnByb3RvdHlwZSx0KSxvLmV4dGVuZChuLHQpLG59dmFyIG89bigyKSxzPW4oMyksaT1uKDQpLGE9big1KSx1PXIoYSk7dS5BeGlvcz1pLHUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiByKG8ubWVyZ2UoYSxlKSl9LHUuQ2FuY2VsPW4oMjIpLHUuQ2FuY2VsVG9rZW49bigyMyksdS5pc0NhbmNlbD1uKDE5KSx1LmFsbD1mdW5jdGlvbihlKXtyZXR1cm4gUHJvbWlzZS5hbGwoZSl9LHUuc3ByZWFkPW4oMjQpLGUuZXhwb3J0cz11LGUuZXhwb3J0cy5kZWZhdWx0PXV9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PUMuY2FsbChlKX1mdW5jdGlvbiBvKGUpe3JldHVyblwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PUMuY2FsbChlKX1mdW5jdGlvbiBzKGUpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBGb3JtRGF0YSYmZSBpbnN0YW5jZW9mIEZvcm1EYXRhfWZ1bmN0aW9uIGkoZSl7dmFyIHQ7cmV0dXJuIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZBcnJheUJ1ZmZlci5pc1ZpZXc/QXJyYXlCdWZmZXIuaXNWaWV3KGUpOmUmJmUuYnVmZmVyJiZlLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyfWZ1bmN0aW9uIGEoZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9ZnVuY3Rpb24gdShlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZX1mdW5jdGlvbiBjKGUpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIGYoZSl7cmV0dXJuIG51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZX1mdW5jdGlvbiBwKGUpe3JldHVyblwiW29iamVjdCBEYXRlXVwiPT09Qy5jYWxsKGUpfWZ1bmN0aW9uIGQoZSl7cmV0dXJuXCJbb2JqZWN0IEZpbGVdXCI9PT1DLmNhbGwoZSl9ZnVuY3Rpb24gbChlKXtyZXR1cm5cIltvYmplY3QgQmxvYl1cIj09PUMuY2FsbChlKX1mdW5jdGlvbiBoKGUpe3JldHVyblwiW29iamVjdCBGdW5jdGlvbl1cIj09PUMuY2FsbChlKX1mdW5jdGlvbiBtKGUpe3JldHVybiBmKGUpJiZoKGUucGlwZSl9ZnVuY3Rpb24geShlKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgVVJMU2VhcmNoUGFyYW1zJiZlIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zfWZ1bmN0aW9uIHcoZSl7cmV0dXJuIGUucmVwbGFjZSgvXlxccyovLFwiXCIpLnJlcGxhY2UoL1xccyokLyxcIlwiKX1mdW5jdGlvbiBnKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50fWZ1bmN0aW9uIHYoZSx0KXtpZihudWxsIT09ZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUpaWYoXCJvYmplY3RcIj09dHlwZW9mIGV8fHIoZSl8fChlPVtlXSkscihlKSlmb3IodmFyIG49MCxvPWUubGVuZ3RoO248bztuKyspdC5jYWxsKG51bGwsZVtuXSxuLGUpO2Vsc2UgZm9yKHZhciBzIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscykmJnQuY2FsbChudWxsLGVbc10scyxlKX1mdW5jdGlvbiB4KCl7ZnVuY3Rpb24gZShlLG4pe1wib2JqZWN0XCI9PXR5cGVvZiB0W25dJiZcIm9iamVjdFwiPT10eXBlb2YgZT90W25dPXgodFtuXSxlKTp0W25dPWV9Zm9yKHZhciB0PXt9LG49MCxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rKyl2KGFyZ3VtZW50c1tuXSxlKTtyZXR1cm4gdH1mdW5jdGlvbiBiKGUsdCxuKXtyZXR1cm4gdih0LGZ1bmN0aW9uKHQscil7biYmXCJmdW5jdGlvblwiPT10eXBlb2YgdD9lW3JdPUUodCxuKTplW3JdPXR9KSxlfXZhciBFPW4oMyksQz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2UuZXhwb3J0cz17aXNBcnJheTpyLGlzQXJyYXlCdWZmZXI6byxpc0Zvcm1EYXRhOnMsaXNBcnJheUJ1ZmZlclZpZXc6aSxpc1N0cmluZzphLGlzTnVtYmVyOnUsaXNPYmplY3Q6Zixpc1VuZGVmaW5lZDpjLGlzRGF0ZTpwLGlzRmlsZTpkLGlzQmxvYjpsLGlzRnVuY3Rpb246aCxpc1N0cmVhbTptLGlzVVJMU2VhcmNoUGFyYW1zOnksaXNTdGFuZGFyZEJyb3dzZXJFbnY6Zyxmb3JFYWNoOnYsbWVyZ2U6eCxleHRlbmQ6Yix0cmltOnd9fSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgbj1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09YXJndW1lbnRzW3JdO3JldHVybiBlLmFwcGx5KHQsbil9fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7dGhpcy5kZWZhdWx0cz1lLHRoaXMuaW50ZXJjZXB0b3JzPXtyZXF1ZXN0Om5ldyBpLHJlc3BvbnNlOm5ldyBpfX12YXIgbz1uKDUpLHM9bigyKSxpPW4oMTYpLGE9bigxNyksdT1uKDIwKSxjPW4oMjEpO3IucHJvdG90eXBlLnJlcXVlc3Q9ZnVuY3Rpb24oZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPXMubWVyZ2Uoe3VybDphcmd1bWVudHNbMF19LGFyZ3VtZW50c1sxXSkpLGU9cy5tZXJnZShvLHRoaXMuZGVmYXVsdHMse21ldGhvZDpcImdldFwifSxlKSxlLmJhc2VVUkwmJiF1KGUudXJsKSYmKGUudXJsPWMoZS5iYXNlVVJMLGUudXJsKSk7dmFyIHQ9W2Esdm9pZCAwXSxuPVByb21pc2UucmVzb2x2ZShlKTtmb3IodGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QudW5zaGlmdChlLmZ1bGZpbGxlZCxlLnJlamVjdGVkKX0pLHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24oZSl7dC5wdXNoKGUuZnVsZmlsbGVkLGUucmVqZWN0ZWQpfSk7dC5sZW5ndGg7KW49bi50aGVuKHQuc2hpZnQoKSx0LnNoaWZ0KCkpO3JldHVybiBufSxzLmZvckVhY2goW1wiZGVsZXRlXCIsXCJnZXRcIixcImhlYWRcIl0sZnVuY3Rpb24oZSl7ci5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxuKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KHMubWVyZ2Uobnx8e30se21ldGhvZDplLHVybDp0fSkpfX0pLHMuZm9yRWFjaChbXCJwb3N0XCIsXCJwdXRcIixcInBhdGNoXCJdLGZ1bmN0aW9uKGUpe3IucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KHMubWVyZ2Uocnx8e30se21ldGhvZDplLHVybDp0LGRhdGE6bn0pKX19KSxlLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSx0KXshcy5pc1VuZGVmaW5lZChlKSYmcy5pc1VuZGVmaW5lZChlW1wiQ29udGVudC1UeXBlXCJdKSYmKGVbXCJDb250ZW50LVR5cGVcIl09dCl9ZnVuY3Rpb24gbygpe3ZhciBlO3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBYTUxIdHRwUmVxdWVzdD9lPW4oNyk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJihlPW4oNykpLGV9dmFyIHM9bigyKSxpPW4oNiksYT0vXlxcKVxcXVxcfScsP1xcbi8sdT17XCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwifSxjPXthZGFwdGVyOm8oKSx0cmFuc2Zvcm1SZXF1ZXN0OltmdW5jdGlvbihlLHQpe3JldHVybiBpKHQsXCJDb250ZW50LVR5cGVcIikscy5pc0Zvcm1EYXRhKGUpfHxzLmlzQXJyYXlCdWZmZXIoZSl8fHMuaXNTdHJlYW0oZSl8fHMuaXNGaWxlKGUpfHxzLmlzQmxvYihlKT9lOnMuaXNBcnJheUJ1ZmZlclZpZXcoZSk/ZS5idWZmZXI6cy5pc1VSTFNlYXJjaFBhcmFtcyhlKT8ocih0LFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLThcIiksZS50b1N0cmluZygpKTpzLmlzT2JqZWN0KGUpPyhyKHQsXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLThcIiksSlNPTi5zdHJpbmdpZnkoZSkpOmV9XSx0cmFuc2Zvcm1SZXNwb25zZTpbZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2U9ZS5yZXBsYWNlKGEsXCJcIik7dHJ5e2U9SlNPTi5wYXJzZShlKX1jYXRjaChlKXt9fXJldHVybiBlfV0sdGltZW91dDowLHhzcmZDb29raWVOYW1lOlwiWFNSRi1UT0tFTlwiLHhzcmZIZWFkZXJOYW1lOlwiWC1YU1JGLVRPS0VOXCIsbWF4Q29udGVudExlbmd0aDotMSx2YWxpZGF0ZVN0YXR1czpmdW5jdGlvbihlKXtyZXR1cm4gZT49MjAwJiZlPDMwMH19O2MuaGVhZGVycz17Y29tbW9uOntBY2NlcHQ6XCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLypcIn19LHMuZm9yRWFjaChbXCJkZWxldGVcIixcImdldFwiLFwiaGVhZFwiXSxmdW5jdGlvbihlKXtjLmhlYWRlcnNbZV09e319KSxzLmZvckVhY2goW1wicG9zdFwiLFwicHV0XCIsXCJwYXRjaFwiXSxmdW5jdGlvbihlKXtjLmhlYWRlcnNbZV09cy5tZXJnZSh1KX0pLGUuZXhwb3J0cz1jfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigyKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyLmZvckVhY2goZSxmdW5jdGlvbihuLHIpe3IhPT10JiZyLnRvVXBwZXJDYXNlKCk9PT10LnRvVXBwZXJDYXNlKCkmJihlW3RdPW4sZGVsZXRlIGVbcl0pfSl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigyKSxvPW4oOCkscz1uKDExKSxpPW4oMTIpLGE9bigxMyksdT1uKDkpLGM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmJ0b2EmJndpbmRvdy5idG9hLmJpbmQod2luZG93KXx8bigxNCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LGYpe3ZhciBwPWUuZGF0YSxkPWUuaGVhZGVycztyLmlzRm9ybURhdGEocCkmJmRlbGV0ZSBkW1wiQ29udGVudC1UeXBlXCJdO3ZhciBsPW5ldyBYTUxIdHRwUmVxdWVzdCxoPVwib25yZWFkeXN0YXRlY2hhbmdlXCIsbT0hMTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93fHwhd2luZG93LlhEb21haW5SZXF1ZXN0fHxcIndpdGhDcmVkZW50aWFsc1wiaW4gbHx8YShlLnVybCl8fChsPW5ldyB3aW5kb3cuWERvbWFpblJlcXVlc3QsaD1cIm9ubG9hZFwiLG09ITAsbC5vbnByb2dyZXNzPWZ1bmN0aW9uKCl7fSxsLm9udGltZW91dD1mdW5jdGlvbigpe30pLGUuYXV0aCl7dmFyIHk9ZS5hdXRoLnVzZXJuYW1lfHxcIlwiLHc9ZS5hdXRoLnBhc3N3b3JkfHxcIlwiO2QuQXV0aG9yaXphdGlvbj1cIkJhc2ljIFwiK2MoeStcIjpcIit3KX1pZihsLm9wZW4oZS5tZXRob2QudG9VcHBlckNhc2UoKSxzKGUudXJsLGUucGFyYW1zLGUucGFyYW1zU2VyaWFsaXplciksITApLGwudGltZW91dD1lLnRpbWVvdXQsbFtoXT1mdW5jdGlvbigpe2lmKGwmJig0PT09bC5yZWFkeVN0YXRlfHxtKSYmKDAhPT1sLnN0YXR1c3x8bC5yZXNwb25zZVVSTCYmMD09PWwucmVzcG9uc2VVUkwuaW5kZXhPZihcImZpbGU6XCIpKSl7dmFyIG49XCJnZXRBbGxSZXNwb25zZUhlYWRlcnNcImluIGw/aShsLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKTpudWxsLHI9ZS5yZXNwb25zZVR5cGUmJlwidGV4dFwiIT09ZS5yZXNwb25zZVR5cGU/bC5yZXNwb25zZTpsLnJlc3BvbnNlVGV4dCxzPXtkYXRhOnIsc3RhdHVzOjEyMjM9PT1sLnN0YXR1cz8yMDQ6bC5zdGF0dXMsc3RhdHVzVGV4dDoxMjIzPT09bC5zdGF0dXM/XCJObyBDb250ZW50XCI6bC5zdGF0dXNUZXh0LGhlYWRlcnM6bixjb25maWc6ZSxyZXF1ZXN0Omx9O28odCxmLHMpLGw9bnVsbH19LGwub25lcnJvcj1mdW5jdGlvbigpe2YodShcIk5ldHdvcmsgRXJyb3JcIixlKSksbD1udWxsfSxsLm9udGltZW91dD1mdW5jdGlvbigpe2YodShcInRpbWVvdXQgb2YgXCIrZS50aW1lb3V0K1wibXMgZXhjZWVkZWRcIixlLFwiRUNPTk5BQk9SVEVEXCIpKSxsPW51bGx9LHIuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSl7dmFyIGc9bigxNSksdj0oZS53aXRoQ3JlZGVudGlhbHN8fGEoZS51cmwpKSYmZS54c3JmQ29va2llTmFtZT9nLnJlYWQoZS54c3JmQ29va2llTmFtZSk6dm9pZCAwO3YmJihkW2UueHNyZkhlYWRlck5hbWVdPXYpfWlmKFwic2V0UmVxdWVzdEhlYWRlclwiaW4gbCYmci5mb3JFYWNoKGQsZnVuY3Rpb24oZSx0KXtcInVuZGVmaW5lZFwiPT10eXBlb2YgcCYmXCJjb250ZW50LXR5cGVcIj09PXQudG9Mb3dlckNhc2UoKT9kZWxldGUgZFt0XTpsLnNldFJlcXVlc3RIZWFkZXIodCxlKX0pLGUud2l0aENyZWRlbnRpYWxzJiYobC53aXRoQ3JlZGVudGlhbHM9ITApLGUucmVzcG9uc2VUeXBlKXRyeXtsLnJlc3BvbnNlVHlwZT1lLnJlc3BvbnNlVHlwZX1jYXRjaChlKXtpZihcImpzb25cIiE9PWwucmVzcG9uc2VUeXBlKXRocm93IGV9XCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbkRvd25sb2FkUHJvZ3Jlc3MmJmwuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsZS5vbkRvd25sb2FkUHJvZ3Jlc3MpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUub25VcGxvYWRQcm9ncmVzcyYmbC51cGxvYWQmJmwudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLGUub25VcGxvYWRQcm9ncmVzcyksZS5jYW5jZWxUb2tlbiYmZS5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24oZSl7bCYmKGwuYWJvcnQoKSxmKGUpLGw9bnVsbCl9KSx2b2lkIDA9PT1wJiYocD1udWxsKSxsLnNlbmQocCl9KX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDkpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbil7dmFyIG89bi5jb25maWcudmFsaWRhdGVTdGF0dXM7bi5zdGF0dXMmJm8mJiFvKG4uc3RhdHVzKT90KHIoXCJSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlIFwiK24uc3RhdHVzLG4uY29uZmlnLG51bGwsbikpOmUobil9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigxMCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLG8pe3ZhciBzPW5ldyBFcnJvcihlKTtyZXR1cm4gcihzLHQsbixvKX19LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBlLmNvbmZpZz10LG4mJihlLmNvZGU9biksZS5yZXNwb25zZT1yLGV9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGUpLnJlcGxhY2UoLyU0MC9naSxcIkBcIikucmVwbGFjZSgvJTNBL2dpLFwiOlwiKS5yZXBsYWNlKC8lMjQvZyxcIiRcIikucmVwbGFjZSgvJTJDL2dpLFwiLFwiKS5yZXBsYWNlKC8lMjAvZyxcIitcIikucmVwbGFjZSgvJTVCL2dpLFwiW1wiKS5yZXBsYWNlKC8lNUQvZ2ksXCJdXCIpfXZhciBvPW4oMik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXtpZighdClyZXR1cm4gZTt2YXIgcztpZihuKXM9bih0KTtlbHNlIGlmKG8uaXNVUkxTZWFyY2hQYXJhbXModCkpcz10LnRvU3RyaW5nKCk7ZWxzZXt2YXIgaT1bXTtvLmZvckVhY2godCxmdW5jdGlvbihlLHQpe251bGwhPT1lJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZSYmKG8uaXNBcnJheShlKSYmKHQrPVwiW11cIiksby5pc0FycmF5KGUpfHwoZT1bZV0pLG8uZm9yRWFjaChlLGZ1bmN0aW9uKGUpe28uaXNEYXRlKGUpP2U9ZS50b0lTT1N0cmluZygpOm8uaXNPYmplY3QoZSkmJihlPUpTT04uc3RyaW5naWZ5KGUpKSxpLnB1c2gocih0KStcIj1cIityKGUpKX0pKX0pLHM9aS5qb2luKFwiJlwiKX1yZXR1cm4gcyYmKGUrPShlLmluZGV4T2YoXCI/XCIpPT09LTE/XCI/XCI6XCImXCIpK3MpLGV9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigyKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQsbixvLHM9e307cmV0dXJuIGU/KHIuZm9yRWFjaChlLnNwbGl0KFwiXFxuXCIpLGZ1bmN0aW9uKGUpe289ZS5pbmRleE9mKFwiOlwiKSx0PXIudHJpbShlLnN1YnN0cigwLG8pKS50b0xvd2VyQ2FzZSgpLG49ci50cmltKGUuc3Vic3RyKG8rMSkpLHQmJihzW3RdPXNbdF0/c1t0XStcIiwgXCIrbjpuKX0pLHMpOnN9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigyKTtlLmV4cG9ydHM9ci5pc1N0YW5kYXJkQnJvd3NlckVudigpP2Z1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD1lO3JldHVybiBuJiYoby5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsdCksdD1vLmhyZWYpLG8uc2V0QXR0cmlidXRlKFwiaHJlZlwiLHQpLHtocmVmOm8uaHJlZixwcm90b2NvbDpvLnByb3RvY29sP28ucHJvdG9jb2wucmVwbGFjZSgvOiQvLFwiXCIpOlwiXCIsaG9zdDpvLmhvc3Qsc2VhcmNoOm8uc2VhcmNoP28uc2VhcmNoLnJlcGxhY2UoL15cXD8vLFwiXCIpOlwiXCIsaGFzaDpvLmhhc2g/by5oYXNoLnJlcGxhY2UoL14jLyxcIlwiKTpcIlwiLGhvc3RuYW1lOm8uaG9zdG5hbWUscG9ydDpvLnBvcnQscGF0aG5hbWU6XCIvXCI9PT1vLnBhdGhuYW1lLmNoYXJBdCgwKT9vLnBhdGhuYW1lOlwiL1wiK28ucGF0aG5hbWV9fXZhciB0LG49Lyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO3JldHVybiB0PWUod2luZG93LmxvY2F0aW9uLmhyZWYpLGZ1bmN0aW9uKG4pe3ZhciBvPXIuaXNTdHJpbmcobik/ZShuKTpuO3JldHVybiBvLnByb3RvY29sPT09dC5wcm90b2NvbCYmby5ob3N0PT09dC5ob3N0fX0oKTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiEwfX0oKX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKCl7dGhpcy5tZXNzYWdlPVwiU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyXCJ9ZnVuY3Rpb24gcihlKXtmb3IodmFyIHQscixzPVN0cmluZyhlKSxpPVwiXCIsYT0wLHU9bztzLmNoYXJBdCgwfGEpfHwodT1cIj1cIixhJTEpO2krPXUuY2hhckF0KDYzJnQ+PjgtYSUxKjgpKXtpZihyPXMuY2hhckNvZGVBdChhKz0uNzUpLHI+MjU1KXRocm93IG5ldyBuO3Q9dDw8OHxyfXJldHVybiBpfXZhciBvPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtuLnByb3RvdHlwZT1uZXcgRXJyb3Isbi5wcm90b3R5cGUuY29kZT01LG4ucHJvdG90eXBlLm5hbWU9XCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3JcIixlLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMik7ZS5leHBvcnRzPXIuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKT9mdW5jdGlvbigpe3JldHVybnt3cml0ZTpmdW5jdGlvbihlLHQsbixvLHMsaSl7dmFyIGE9W107YS5wdXNoKGUrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KHQpKSxyLmlzTnVtYmVyKG4pJiZhLnB1c2goXCJleHBpcmVzPVwiK25ldyBEYXRlKG4pLnRvR01UU3RyaW5nKCkpLHIuaXNTdHJpbmcobykmJmEucHVzaChcInBhdGg9XCIrbyksci5pc1N0cmluZyhzKSYmYS5wdXNoKFwiZG9tYWluPVwiK3MpLGk9PT0hMCYmYS5wdXNoKFwic2VjdXJlXCIpLGRvY3VtZW50LmNvb2tpZT1hLmpvaW4oXCI7IFwiKX0scmVhZDpmdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cChcIihefDtcXFxccyopKFwiK2UrXCIpPShbXjtdKilcIikpO3JldHVybiB0P2RlY29kZVVSSUNvbXBvbmVudCh0WzNdKTpudWxsfSxyZW1vdmU6ZnVuY3Rpb24oZSl7dGhpcy53cml0ZShlLFwiXCIsRGF0ZS5ub3coKS04NjRlNSl9fX0oKTpmdW5jdGlvbigpe3JldHVybnt3cml0ZTpmdW5jdGlvbigpe30scmVhZDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxyZW1vdmU6ZnVuY3Rpb24oKXt9fX0oKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoKXt0aGlzLmhhbmRsZXJzPVtdfXZhciBvPW4oMik7ci5wcm90b3R5cGUudXNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaGFuZGxlcnMucHVzaCh7ZnVsZmlsbGVkOmUscmVqZWN0ZWQ6dH0pLHRoaXMuaGFuZGxlcnMubGVuZ3RoLTF9LHIucHJvdG90eXBlLmVqZWN0PWZ1bmN0aW9uKGUpe3RoaXMuaGFuZGxlcnNbZV0mJih0aGlzLmhhbmRsZXJzW2VdPW51bGwpfSxyLnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKGUpe28uZm9yRWFjaCh0aGlzLmhhbmRsZXJzLGZ1bmN0aW9uKHQpe251bGwhPT10JiZlKHQpfSl9LGUuZXhwb3J0cz1yfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtlLmNhbmNlbFRva2VuJiZlLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKX12YXIgbz1uKDIpLHM9bigxOCksaT1uKDE5KSxhPW4oNSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3IoZSksZS5oZWFkZXJzPWUuaGVhZGVyc3x8e30sZS5kYXRhPXMoZS5kYXRhLGUuaGVhZGVycyxlLnRyYW5zZm9ybVJlcXVlc3QpLGUuaGVhZGVycz1vLm1lcmdlKGUuaGVhZGVycy5jb21tb258fHt9LGUuaGVhZGVyc1tlLm1ldGhvZF18fHt9LGUuaGVhZGVyc3x8e30pLG8uZm9yRWFjaChbXCJkZWxldGVcIixcImdldFwiLFwiaGVhZFwiLFwicG9zdFwiLFwicHV0XCIsXCJwYXRjaFwiLFwiY29tbW9uXCJdLGZ1bmN0aW9uKHQpe2RlbGV0ZSBlLmhlYWRlcnNbdF19KTt2YXIgdD1lLmFkYXB0ZXJ8fGEuYWRhcHRlcjtyZXR1cm4gdChlKS50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiByKGUpLHQuZGF0YT1zKHQuZGF0YSx0LmhlYWRlcnMsZS50cmFuc2Zvcm1SZXNwb25zZSksdH0sZnVuY3Rpb24odCl7cmV0dXJuIGkodCl8fChyKGUpLHQmJnQucmVzcG9uc2UmJih0LnJlc3BvbnNlLmRhdGE9cyh0LnJlc3BvbnNlLmRhdGEsdC5yZXNwb25zZS5oZWFkZXJzLGUudHJhbnNmb3JtUmVzcG9uc2UpKSksUHJvbWlzZS5yZWplY3QodCl9KX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHIuZm9yRWFjaChuLGZ1bmN0aW9uKG4pe2U9bihlLHQpfSksZX19LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiEoIWV8fCFlLl9fQ0FOQ0VMX18pfX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KGUpfX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5yZXBsYWNlKC9cXC8rJC8sXCJcIikrXCIvXCIrdC5yZXBsYWNlKC9eXFwvKy8sXCJcIil9fSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7dGhpcy5tZXNzYWdlPWV9bi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIkNhbmNlbFwiKyh0aGlzLm1lc3NhZ2U/XCI6IFwiK3RoaXMubWVzc2FnZTpcIlwiKX0sbi5wcm90b3R5cGUuX19DQU5DRUxfXz0hMCxlLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLlwiKTt2YXIgdDt0aGlzLnByb21pc2U9bmV3IFByb21pc2UoZnVuY3Rpb24oZSl7dD1lfSk7dmFyIG49dGhpcztlKGZ1bmN0aW9uKGUpe24ucmVhc29ufHwobi5yZWFzb249bmV3IG8oZSksdChuLnJlYXNvbikpfSl9dmFyIG89bigyMik7ci5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZD1mdW5jdGlvbigpe2lmKHRoaXMucmVhc29uKXRocm93IHRoaXMucmVhc29ufSxyLnNvdXJjZT1mdW5jdGlvbigpe3ZhciBlLHQ9bmV3IHIoZnVuY3Rpb24odCl7ZT10fSk7cmV0dXJue3Rva2VuOnQsY2FuY2VsOmV9fSxlLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlLmFwcGx5KG51bGwsdCl9fX1dKX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXhpb3MubWluLm1hcCIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOnQuRVM2UHJvbWlzZT1lKCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHR8fFwib2JqZWN0XCI9PXR5cGVvZiB0JiZudWxsIT09dH1mdW5jdGlvbiBlKHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHR9ZnVuY3Rpb24gbih0KXtJPXR9ZnVuY3Rpb24gcih0KXtKPXR9ZnVuY3Rpb24gbygpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBwcm9jZXNzLm5leHRUaWNrKGEpfX1mdW5jdGlvbiBpKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEg/ZnVuY3Rpb24oKXtIKGEpfTpjKCl9ZnVuY3Rpb24gcygpe3ZhciB0PTAsZT1uZXcgVihhKSxuPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO3JldHVybiBlLm9ic2VydmUobix7Y2hhcmFjdGVyRGF0YTohMH0pLGZ1bmN0aW9uKCl7bi5kYXRhPXQ9Kyt0JTJ9fWZ1bmN0aW9uIHUoKXt2YXIgdD1uZXcgTWVzc2FnZUNoYW5uZWw7cmV0dXJuIHQucG9ydDEub25tZXNzYWdlPWEsZnVuY3Rpb24oKXtyZXR1cm4gdC5wb3J0Mi5wb3N0TWVzc2FnZSgwKX19ZnVuY3Rpb24gYygpe3ZhciB0PXNldFRpbWVvdXQ7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQoYSwxKX19ZnVuY3Rpb24gYSgpe2Zvcih2YXIgdD0wO3Q8Rzt0Kz0yKXt2YXIgZT0kW3RdLG49JFt0KzFdO2UobiksJFt0XT12b2lkIDAsJFt0KzFdPXZvaWQgMH1HPTB9ZnVuY3Rpb24gZigpe3RyeXt2YXIgdD1yZXF1aXJlLGU9dChcInZlcnR4XCIpO3JldHVybiBIPWUucnVuT25Mb29wfHxlLnJ1bk9uQ29udGV4dCxpKCl9Y2F0Y2gobil7cmV0dXJuIGMoKX19ZnVuY3Rpb24gbCh0LGUpe3ZhciBuPWFyZ3VtZW50cyxyPXRoaXMsbz1uZXcgdGhpcy5jb25zdHJ1Y3RvcihwKTt2b2lkIDA9PT1vW2V0XSYmayhvKTt2YXIgaT1yLl9zdGF0ZTtyZXR1cm4gaT8hZnVuY3Rpb24oKXt2YXIgdD1uW2ktMV07SihmdW5jdGlvbigpe3JldHVybiB4KGksbyx0LHIuX3Jlc3VsdCl9KX0oKTpFKHIsbyx0LGUpLG99ZnVuY3Rpb24gaCh0KXt2YXIgZT10aGlzO2lmKHQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0LmNvbnN0cnVjdG9yPT09ZSlyZXR1cm4gdDt2YXIgbj1uZXcgZShwKTtyZXR1cm4gZyhuLHQpLG59ZnVuY3Rpb24gcCgpe31mdW5jdGlvbiB2KCl7cmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmXCIpfWZ1bmN0aW9uIGQoKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihcIkEgcHJvbWlzZXMgY2FsbGJhY2sgY2Fubm90IHJldHVybiB0aGF0IHNhbWUgcHJvbWlzZS5cIil9ZnVuY3Rpb24gXyh0KXt0cnl7cmV0dXJuIHQudGhlbn1jYXRjaChlKXtyZXR1cm4gaXQuZXJyb3I9ZSxpdH19ZnVuY3Rpb24geSh0LGUsbixyKXt0cnl7dC5jYWxsKGUsbixyKX1jYXRjaChvKXtyZXR1cm4gb319ZnVuY3Rpb24gbSh0LGUsbil7SihmdW5jdGlvbih0KXt2YXIgcj0hMSxvPXkobixlLGZ1bmN0aW9uKG4pe3J8fChyPSEwLGUhPT1uP2codCxuKTpTKHQsbikpfSxmdW5jdGlvbihlKXtyfHwocj0hMCxqKHQsZSkpfSxcIlNldHRsZTogXCIrKHQuX2xhYmVsfHxcIiB1bmtub3duIHByb21pc2VcIikpOyFyJiZvJiYocj0hMCxqKHQsbykpfSx0KX1mdW5jdGlvbiBiKHQsZSl7ZS5fc3RhdGU9PT1ydD9TKHQsZS5fcmVzdWx0KTplLl9zdGF0ZT09PW90P2oodCxlLl9yZXN1bHQpOkUoZSx2b2lkIDAsZnVuY3Rpb24oZSl7cmV0dXJuIGcodCxlKX0sZnVuY3Rpb24oZSl7cmV0dXJuIGoodCxlKX0pfWZ1bmN0aW9uIHcodCxuLHIpe24uY29uc3RydWN0b3I9PT10LmNvbnN0cnVjdG9yJiZyPT09bCYmbi5jb25zdHJ1Y3Rvci5yZXNvbHZlPT09aD9iKHQsbik6cj09PWl0P2oodCxpdC5lcnJvcik6dm9pZCAwPT09cj9TKHQsbik6ZShyKT9tKHQsbixyKTpTKHQsbil9ZnVuY3Rpb24gZyhlLG4pe2U9PT1uP2ooZSx2KCkpOnQobik/dyhlLG4sXyhuKSk6UyhlLG4pfWZ1bmN0aW9uIEEodCl7dC5fb25lcnJvciYmdC5fb25lcnJvcih0Ll9yZXN1bHQpLFAodCl9ZnVuY3Rpb24gUyh0LGUpe3QuX3N0YXRlPT09bnQmJih0Ll9yZXN1bHQ9ZSx0Ll9zdGF0ZT1ydCwwIT09dC5fc3Vic2NyaWJlcnMubGVuZ3RoJiZKKFAsdCkpfWZ1bmN0aW9uIGoodCxlKXt0Ll9zdGF0ZT09PW50JiYodC5fc3RhdGU9b3QsdC5fcmVzdWx0PWUsSihBLHQpKX1mdW5jdGlvbiBFKHQsZSxuLHIpe3ZhciBvPXQuX3N1YnNjcmliZXJzLGk9by5sZW5ndGg7dC5fb25lcnJvcj1udWxsLG9baV09ZSxvW2krcnRdPW4sb1tpK290XT1yLDA9PT1pJiZ0Ll9zdGF0ZSYmSihQLHQpfWZ1bmN0aW9uIFAodCl7dmFyIGU9dC5fc3Vic2NyaWJlcnMsbj10Ll9zdGF0ZTtpZigwIT09ZS5sZW5ndGgpe2Zvcih2YXIgcj12b2lkIDAsbz12b2lkIDAsaT10Ll9yZXN1bHQscz0wO3M8ZS5sZW5ndGg7cys9MylyPWVbc10sbz1lW3Mrbl0scj94KG4scixvLGkpOm8oaSk7dC5fc3Vic2NyaWJlcnMubGVuZ3RoPTB9fWZ1bmN0aW9uIFQoKXt0aGlzLmVycm9yPW51bGx9ZnVuY3Rpb24gTSh0LGUpe3RyeXtyZXR1cm4gdChlKX1jYXRjaChuKXtyZXR1cm4gc3QuZXJyb3I9bixzdH19ZnVuY3Rpb24geCh0LG4scixvKXt2YXIgaT1lKHIpLHM9dm9pZCAwLHU9dm9pZCAwLGM9dm9pZCAwLGE9dm9pZCAwO2lmKGkpe2lmKHM9TShyLG8pLHM9PT1zdD8oYT0hMCx1PXMuZXJyb3Iscz1udWxsKTpjPSEwLG49PT1zKXJldHVybiB2b2lkIGoobixkKCkpfWVsc2Ugcz1vLGM9ITA7bi5fc3RhdGUhPT1udHx8KGkmJmM/ZyhuLHMpOmE/aihuLHUpOnQ9PT1ydD9TKG4scyk6dD09PW90JiZqKG4scykpfWZ1bmN0aW9uIEModCxlKXt0cnl7ZShmdW5jdGlvbihlKXtnKHQsZSl9LGZ1bmN0aW9uKGUpe2oodCxlKX0pfWNhdGNoKG4pe2oodCxuKX19ZnVuY3Rpb24gTygpe3JldHVybiB1dCsrfWZ1bmN0aW9uIGsodCl7dFtldF09dXQrKyx0Ll9zdGF0ZT12b2lkIDAsdC5fcmVzdWx0PXZvaWQgMCx0Ll9zdWJzY3JpYmVycz1bXX1mdW5jdGlvbiBZKHQsZSl7dGhpcy5faW5zdGFuY2VDb25zdHJ1Y3Rvcj10LHRoaXMucHJvbWlzZT1uZXcgdChwKSx0aGlzLnByb21pc2VbZXRdfHxrKHRoaXMucHJvbWlzZSksQihlKT8odGhpcy5faW5wdXQ9ZSx0aGlzLmxlbmd0aD1lLmxlbmd0aCx0aGlzLl9yZW1haW5pbmc9ZS5sZW5ndGgsdGhpcy5fcmVzdWx0PW5ldyBBcnJheSh0aGlzLmxlbmd0aCksMD09PXRoaXMubGVuZ3RoP1ModGhpcy5wcm9taXNlLHRoaXMuX3Jlc3VsdCk6KHRoaXMubGVuZ3RoPXRoaXMubGVuZ3RofHwwLHRoaXMuX2VudW1lcmF0ZSgpLDA9PT10aGlzLl9yZW1haW5pbmcmJlModGhpcy5wcm9taXNlLHRoaXMuX3Jlc3VsdCkpKTpqKHRoaXMucHJvbWlzZSxxKCkpfWZ1bmN0aW9uIHEoKXtyZXR1cm4gbmV3IEVycm9yKFwiQXJyYXkgTWV0aG9kcyBtdXN0IGJlIHByb3ZpZGVkIGFuIEFycmF5XCIpfWZ1bmN0aW9uIEYodCl7cmV0dXJuIG5ldyBZKHRoaXMsdCkucHJvbWlzZX1mdW5jdGlvbiBEKHQpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBlKEIodCk/ZnVuY3Rpb24obixyKXtmb3IodmFyIG89dC5sZW5ndGgsaT0wO2k8bztpKyspZS5yZXNvbHZlKHRbaV0pLnRoZW4obixyKX06ZnVuY3Rpb24odCxlKXtyZXR1cm4gZShuZXcgVHlwZUVycm9yKFwiWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLlwiKSl9KX1mdW5jdGlvbiBLKHQpe3ZhciBlPXRoaXMsbj1uZXcgZShwKTtyZXR1cm4gaihuLHQpLG59ZnVuY3Rpb24gTCgpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yXCIpfWZ1bmN0aW9uIE4oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpfWZ1bmN0aW9uIFUodCl7dGhpc1tldF09TygpLHRoaXMuX3Jlc3VsdD10aGlzLl9zdGF0ZT12b2lkIDAsdGhpcy5fc3Vic2NyaWJlcnM9W10scCE9PXQmJihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZMKCksdGhpcyBpbnN0YW5jZW9mIFU/Qyh0aGlzLHQpOk4oKSl9ZnVuY3Rpb24gVygpe3ZhciB0PXZvaWQgMDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsKXQ9Z2xvYmFsO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYpdD1zZWxmO2Vsc2UgdHJ5e3Q9RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpfWNhdGNoKGUpe3Rocm93IG5ldyBFcnJvcihcInBvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiKX12YXIgbj10LlByb21pc2U7aWYobil7dmFyIHI9bnVsbDt0cnl7cj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobi5yZXNvbHZlKCkpfWNhdGNoKGUpe31pZihcIltvYmplY3QgUHJvbWlzZV1cIj09PXImJiFuLmNhc3QpcmV0dXJufXQuUHJvbWlzZT1VfXZhciB6PXZvaWQgMDt6PUFycmF5LmlzQXJyYXk/QXJyYXkuaXNBcnJheTpmdW5jdGlvbih0KXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCl9O3ZhciBCPXosRz0wLEg9dm9pZCAwLEk9dm9pZCAwLEo9ZnVuY3Rpb24odCxlKXskW0ddPXQsJFtHKzFdPWUsRys9MiwyPT09RyYmKEk/SShhKTp0dCgpKX0sUT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp2b2lkIDAsUj1RfHx7fSxWPVIuTXV0YXRpb25PYnNlcnZlcnx8Ui5XZWJLaXRNdXRhdGlvbk9ic2VydmVyLFg9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHNlbGYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZcIltvYmplY3QgcHJvY2Vzc11cIj09PXt9LnRvU3RyaW5nLmNhbGwocHJvY2VzcyksWj1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhDbGFtcGVkQXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbXBvcnRTY3JpcHRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgTWVzc2FnZUNoYW5uZWwsJD1uZXcgQXJyYXkoMWUzKSx0dD12b2lkIDA7dHQ9WD9vKCk6Vj9zKCk6Wj91KCk6dm9pZCAwPT09USYmXCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZT9mKCk6YygpO3ZhciBldD1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMTYpLG50PXZvaWQgMCxydD0xLG90PTIsaXQ9bmV3IFQsc3Q9bmV3IFQsdXQ9MDtyZXR1cm4gWS5wcm90b3R5cGUuX2VudW1lcmF0ZT1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmxlbmd0aCxlPXRoaXMuX2lucHV0LG49MDt0aGlzLl9zdGF0ZT09PW50JiZuPHQ7bisrKXRoaXMuX2VhY2hFbnRyeShlW25dLG4pfSxZLnByb3RvdHlwZS5fZWFjaEVudHJ5PWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvcixyPW4ucmVzb2x2ZTtpZihyPT09aCl7dmFyIG89Xyh0KTtpZihvPT09bCYmdC5fc3RhdGUhPT1udCl0aGlzLl9zZXR0bGVkQXQodC5fc3RhdGUsZSx0Ll9yZXN1bHQpO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbyl0aGlzLl9yZW1haW5pbmctLSx0aGlzLl9yZXN1bHRbZV09dDtlbHNlIGlmKG49PT1VKXt2YXIgaT1uZXcgbihwKTt3KGksdCxvKSx0aGlzLl93aWxsU2V0dGxlQXQoaSxlKX1lbHNlIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgbihmdW5jdGlvbihlKXtyZXR1cm4gZSh0KX0pLGUpfWVsc2UgdGhpcy5fd2lsbFNldHRsZUF0KHIodCksZSl9LFkucHJvdG90eXBlLl9zZXR0bGVkQXQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPXRoaXMucHJvbWlzZTtyLl9zdGF0ZT09PW50JiYodGhpcy5fcmVtYWluaW5nLS0sdD09PW90P2oocixuKTp0aGlzLl9yZXN1bHRbZV09biksMD09PXRoaXMuX3JlbWFpbmluZyYmUyhyLHRoaXMuX3Jlc3VsdCl9LFkucHJvdG90eXBlLl93aWxsU2V0dGxlQXQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO0UodCx2b2lkIDAsZnVuY3Rpb24odCl7cmV0dXJuIG4uX3NldHRsZWRBdChydCxlLHQpfSxmdW5jdGlvbih0KXtyZXR1cm4gbi5fc2V0dGxlZEF0KG90LGUsdCl9KX0sVS5hbGw9RixVLnJhY2U9RCxVLnJlc29sdmU9aCxVLnJlamVjdD1LLFUuX3NldFNjaGVkdWxlcj1uLFUuX3NldEFzYXA9cixVLl9hc2FwPUosVS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlUsdGhlbjpsLFwiY2F0Y2hcIjpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aGVuKG51bGwsdCl9fSxVLnBvbHlmaWxsPVcsVS5Qcm9taXNlPVUsVX0pLEVTNlByb21pc2UucG9seWZpbGwoKTsiLCIvKiEgalF1ZXJ5IHYxLjExLjIgfCAoYykgMjAwNSwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiB8IGpxdWVyeS5vcmcvbGljZW5zZSAqL1xuIWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWEuZG9jdW1lbnQ/YihhLCEwKTpmdW5jdGlvbihhKXtpZighYS5kb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO3JldHVybiBiKGEpfTpiKGEpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzLGZ1bmN0aW9uKGEsYil7dmFyIGM9W10sZD1jLnNsaWNlLGU9Yy5jb25jYXQsZj1jLnB1c2gsZz1jLmluZGV4T2YsaD17fSxpPWgudG9TdHJpbmcsaj1oLmhhc093blByb3BlcnR5LGs9e30sbD1cIjEuMTEuMlwiLG09ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IG0uZm4uaW5pdChhLGIpfSxuPS9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxvPS9eLW1zLS8scD0vLShbXFxkYS16XSkvZ2kscT1mdW5jdGlvbihhLGIpe3JldHVybiBiLnRvVXBwZXJDYXNlKCl9O20uZm49bS5wcm90b3R5cGU9e2pxdWVyeTpsLGNvbnN0cnVjdG9yOm0sc2VsZWN0b3I6XCJcIixsZW5ndGg6MCx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIGQuY2FsbCh0aGlzKX0sZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hPzA+YT90aGlzW2ErdGhpcy5sZW5ndGhdOnRoaXNbYV06ZC5jYWxsKHRoaXMpfSxwdXNoU3RhY2s6ZnVuY3Rpb24oYSl7dmFyIGI9bS5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksYSk7cmV0dXJuIGIucHJldk9iamVjdD10aGlzLGIuY29udGV4dD10aGlzLmNvbnRleHQsYn0sZWFjaDpmdW5jdGlvbihhLGIpe3JldHVybiBtLmVhY2godGhpcyxhLGIpfSxtYXA6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG0ubWFwKHRoaXMsZnVuY3Rpb24oYixjKXtyZXR1cm4gYS5jYWxsKGIsYyxiKX0pKX0sc2xpY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxmaXJzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKDApfSxsYXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoLTEpfSxlcTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmxlbmd0aCxjPSthKygwPmE/YjowKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soYz49MCYmYj5jP1t0aGlzW2NdXTpbXSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IobnVsbCl9LHB1c2g6Zixzb3J0OmMuc29ydCxzcGxpY2U6Yy5zcGxpY2V9LG0uZXh0ZW5kPW0uZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZSxmLGc9YXJndW1lbnRzWzBdfHx7fSxoPTEsaT1hcmd1bWVudHMubGVuZ3RoLGo9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgZyYmKGo9ZyxnPWFyZ3VtZW50c1toXXx8e30saCsrKSxcIm9iamVjdFwiPT10eXBlb2YgZ3x8bS5pc0Z1bmN0aW9uKGcpfHwoZz17fSksaD09PWkmJihnPXRoaXMsaC0tKTtpPmg7aCsrKWlmKG51bGwhPShlPWFyZ3VtZW50c1toXSkpZm9yKGQgaW4gZSlhPWdbZF0sYz1lW2RdLGchPT1jJiYoaiYmYyYmKG0uaXNQbGFpbk9iamVjdChjKXx8KGI9bS5pc0FycmF5KGMpKSk/KGI/KGI9ITEsZj1hJiZtLmlzQXJyYXkoYSk/YTpbXSk6Zj1hJiZtLmlzUGxhaW5PYmplY3QoYSk/YTp7fSxnW2RdPW0uZXh0ZW5kKGosZixjKSk6dm9pZCAwIT09YyYmKGdbZF09YykpO3JldHVybiBnfSxtLmV4dGVuZCh7ZXhwYW5kbzpcImpRdWVyeVwiKyhsK01hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLFwiXCIpLGlzUmVhZHk6ITAsZXJyb3I6ZnVuY3Rpb24oYSl7dGhyb3cgbmV3IEVycm9yKGEpfSxub29wOmZ1bmN0aW9uKCl7fSxpc0Z1bmN0aW9uOmZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09PW0udHlwZShhKX0saXNBcnJheTpBcnJheS5pc0FycmF5fHxmdW5jdGlvbihhKXtyZXR1cm5cImFycmF5XCI9PT1tLnR5cGUoYSl9LGlzV2luZG93OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hJiZhPT1hLndpbmRvd30saXNOdW1lcmljOmZ1bmN0aW9uKGEpe3JldHVybiFtLmlzQXJyYXkoYSkmJmEtcGFyc2VGbG9hdChhKSsxPj0wfSxpc0VtcHR5T2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiO2ZvcihiIGluIGEpcmV0dXJuITE7cmV0dXJuITB9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGI7aWYoIWF8fFwib2JqZWN0XCIhPT1tLnR5cGUoYSl8fGEubm9kZVR5cGV8fG0uaXNXaW5kb3coYSkpcmV0dXJuITE7dHJ5e2lmKGEuY29uc3RydWN0b3ImJiFqLmNhbGwoYSxcImNvbnN0cnVjdG9yXCIpJiYhai5jYWxsKGEuY29uc3RydWN0b3IucHJvdG90eXBlLFwiaXNQcm90b3R5cGVPZlwiKSlyZXR1cm4hMX1jYXRjaChjKXtyZXR1cm4hMX1pZihrLm93bkxhc3QpZm9yKGIgaW4gYSlyZXR1cm4gai5jYWxsKGEsYik7Zm9yKGIgaW4gYSk7cmV0dXJuIHZvaWQgMD09PWJ8fGouY2FsbChhLGIpfSx0eXBlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP2ErXCJcIjpcIm9iamVjdFwiPT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT10eXBlb2YgYT9oW2kuY2FsbChhKV18fFwib2JqZWN0XCI6dHlwZW9mIGF9LGdsb2JhbEV2YWw6ZnVuY3Rpb24oYil7YiYmbS50cmltKGIpJiYoYS5leGVjU2NyaXB0fHxmdW5jdGlvbihiKXthLmV2YWwuY2FsbChhLGIpfSkoYil9LGNhbWVsQ2FzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKG8sXCJtcy1cIikucmVwbGFjZShwLHEpfSxub2RlTmFtZTpmdW5jdGlvbihhLGIpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1iLnRvTG93ZXJDYXNlKCl9LGVhY2g6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGU9MCxmPWEubGVuZ3RoLGc9cihhKTtpZihjKXtpZihnKXtmb3IoO2Y+ZTtlKyspaWYoZD1iLmFwcGx5KGFbZV0sYyksZD09PSExKWJyZWFrfWVsc2UgZm9yKGUgaW4gYSlpZihkPWIuYXBwbHkoYVtlXSxjKSxkPT09ITEpYnJlYWt9ZWxzZSBpZihnKXtmb3IoO2Y+ZTtlKyspaWYoZD1iLmNhbGwoYVtlXSxlLGFbZV0pLGQ9PT0hMSlicmVha31lbHNlIGZvcihlIGluIGEpaWYoZD1iLmNhbGwoYVtlXSxlLGFbZV0pLGQ9PT0hMSlicmVhaztyZXR1cm4gYX0sdHJpbTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9cIlwiOihhK1wiXCIpLnJlcGxhY2UobixcIlwiKX0sbWFrZUFycmF5OmZ1bmN0aW9uKGEsYil7dmFyIGM9Ynx8W107cmV0dXJuIG51bGwhPWEmJihyKE9iamVjdChhKSk/bS5tZXJnZShjLFwic3RyaW5nXCI9PXR5cGVvZiBhP1thXTphKTpmLmNhbGwoYyxhKSksY30saW5BcnJheTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ7aWYoYil7aWYoZylyZXR1cm4gZy5jYWxsKGIsYSxjKTtmb3IoZD1iLmxlbmd0aCxjPWM/MD5jP01hdGgubWF4KDAsZCtjKTpjOjA7ZD5jO2MrKylpZihjIGluIGImJmJbY109PT1hKXJldHVybiBjfXJldHVybi0xfSxtZXJnZTpmdW5jdGlvbihhLGIpe3ZhciBjPStiLmxlbmd0aCxkPTAsZT1hLmxlbmd0aDt3aGlsZShjPmQpYVtlKytdPWJbZCsrXTtpZihjIT09Yyl3aGlsZSh2b2lkIDAhPT1iW2RdKWFbZSsrXT1iW2QrK107cmV0dXJuIGEubGVuZ3RoPWUsYX0sZ3JlcDpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkLGU9W10sZj0wLGc9YS5sZW5ndGgsaD0hYztnPmY7ZisrKWQ9IWIoYVtmXSxmKSxkIT09aCYmZS5wdXNoKGFbZl0pO3JldHVybiBlfSxtYXA6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGY9MCxnPWEubGVuZ3RoLGg9cihhKSxpPVtdO2lmKGgpZm9yKDtnPmY7ZisrKWQ9YihhW2ZdLGYsYyksbnVsbCE9ZCYmaS5wdXNoKGQpO2Vsc2UgZm9yKGYgaW4gYSlkPWIoYVtmXSxmLGMpLG51bGwhPWQmJmkucHVzaChkKTtyZXR1cm4gZS5hcHBseShbXSxpKX0sZ3VpZDoxLHByb3h5OmZ1bmN0aW9uKGEsYil7dmFyIGMsZSxmO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBiJiYoZj1hW2JdLGI9YSxhPWYpLG0uaXNGdW5jdGlvbihhKT8oYz1kLmNhbGwoYXJndW1lbnRzLDIpLGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShifHx0aGlzLGMuY29uY2F0KGQuY2FsbChhcmd1bWVudHMpKSl9LGUuZ3VpZD1hLmd1aWQ9YS5ndWlkfHxtLmd1aWQrKyxlKTp2b2lkIDB9LG5vdzpmdW5jdGlvbigpe3JldHVybituZXcgRGF0ZX0sc3VwcG9ydDprfSksbS5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvclwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhLGIpe2hbXCJbb2JqZWN0IFwiK2IrXCJdXCJdPWIudG9Mb3dlckNhc2UoKX0pO2Z1bmN0aW9uIHIoYSl7dmFyIGI9YS5sZW5ndGgsYz1tLnR5cGUoYSk7cmV0dXJuXCJmdW5jdGlvblwiPT09Y3x8bS5pc1dpbmRvdyhhKT8hMToxPT09YS5ub2RlVHlwZSYmYj8hMDpcImFycmF5XCI9PT1jfHwwPT09Ynx8XCJudW1iZXJcIj09dHlwZW9mIGImJmI+MCYmYi0xIGluIGF9dmFyIHM9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaSxqLGssbCxtLG4sbyxwLHEscixzLHQsdT1cInNpenpsZVwiKzEqbmV3IERhdGUsdj1hLmRvY3VtZW50LHc9MCx4PTAseT1oYigpLHo9aGIoKSxBPWhiKCksQj1mdW5jdGlvbihhLGIpe3JldHVybiBhPT09YiYmKGw9ITApLDB9LEM9MTw8MzEsRD17fS5oYXNPd25Qcm9wZXJ0eSxFPVtdLEY9RS5wb3AsRz1FLnB1c2gsSD1FLnB1c2gsST1FLnNsaWNlLEo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MCxkPWEubGVuZ3RoO2Q+YztjKyspaWYoYVtjXT09PWIpcmV0dXJuIGM7cmV0dXJuLTF9LEs9XCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLEw9XCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLE09XCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixOPU0ucmVwbGFjZShcIndcIixcIncjXCIpLE89XCJcXFxcW1wiK0wrXCIqKFwiK00rXCIpKD86XCIrTCtcIiooWypeJHwhfl0/PSlcIitMK1wiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIrTitcIikpfClcIitMK1wiKlxcXFxdXCIsUD1cIjooXCIrTStcIikoPzpcXFxcKCgoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXwoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIrTytcIikqKXwuKilcXFxcKXwpXCIsUT1uZXcgUmVnRXhwKEwrXCIrXCIsXCJnXCIpLFI9bmV3IFJlZ0V4cChcIl5cIitMK1wiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIitMK1wiKyRcIixcImdcIiksUz1uZXcgUmVnRXhwKFwiXlwiK0wrXCIqLFwiK0wrXCIqXCIpLFQ9bmV3IFJlZ0V4cChcIl5cIitMK1wiKihbPit+XXxcIitMK1wiKVwiK0wrXCIqXCIpLFU9bmV3IFJlZ0V4cChcIj1cIitMK1wiKihbXlxcXFxdJ1xcXCJdKj8pXCIrTCtcIipcXFxcXVwiLFwiZ1wiKSxWPW5ldyBSZWdFeHAoUCksVz1uZXcgUmVnRXhwKFwiXlwiK04rXCIkXCIpLFg9e0lEOm5ldyBSZWdFeHAoXCJeIyhcIitNK1wiKVwiKSxDTEFTUzpuZXcgUmVnRXhwKFwiXlxcXFwuKFwiK00rXCIpXCIpLFRBRzpuZXcgUmVnRXhwKFwiXihcIitNLnJlcGxhY2UoXCJ3XCIsXCJ3KlwiKStcIilcIiksQVRUUjpuZXcgUmVnRXhwKFwiXlwiK08pLFBTRVVETzpuZXcgUmVnRXhwKFwiXlwiK1ApLENISUxEOm5ldyBSZWdFeHAoXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiK0wrXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIitMK1wiKig/OihbKy1dfClcIitMK1wiKihcXFxcZCspfCkpXCIrTCtcIipcXFxcKXwpXCIsXCJpXCIpLGJvb2w6bmV3IFJlZ0V4cChcIl4oPzpcIitLK1wiKSRcIixcImlcIiksbmVlZHNDb250ZXh0Om5ldyBSZWdFeHAoXCJeXCIrTCtcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIrTCtcIiooKD86LVxcXFxkKT9cXFxcZCopXCIrTCtcIipcXFxcKXwpKD89W14tXXwkKVwiLFwiaVwiKX0sWT0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFo9L15oXFxkJC9pLCQ9L15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxfPS9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLGFiPS9bK35dLyxiYj0vJ3xcXFxcL2csY2I9bmV3IFJlZ0V4cChcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiK0wrXCI/fChcIitMK1wiKXwuKVwiLFwiaWdcIiksZGI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVwiMHhcIitiLTY1NTM2O3JldHVybiBkIT09ZHx8Yz9iOjA+ZD9TdHJpbmcuZnJvbUNoYXJDb2RlKGQrNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUoZD4+MTB8NTUyOTYsMTAyMyZkfDU2MzIwKX0sZWI9ZnVuY3Rpb24oKXttKCl9O3RyeXtILmFwcGx5KEU9SS5jYWxsKHYuY2hpbGROb2Rlcyksdi5jaGlsZE5vZGVzKSxFW3YuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlfWNhdGNoKGZiKXtIPXthcHBseTpFLmxlbmd0aD9mdW5jdGlvbihhLGIpe0cuYXBwbHkoYSxJLmNhbGwoYikpfTpmdW5jdGlvbihhLGIpe3ZhciBjPWEubGVuZ3RoLGQ9MDt3aGlsZShhW2MrK109YltkKytdKTthLmxlbmd0aD1jLTF9fX1mdW5jdGlvbiBnYihhLGIsZCxlKXt2YXIgZixoLGosayxsLG8scixzLHcseDtpZigoYj9iLm93bmVyRG9jdW1lbnR8fGI6dikhPT1uJiZtKGIpLGI9Ynx8bixkPWR8fFtdLGs9Yi5ub2RlVHlwZSxcInN0cmluZ1wiIT10eXBlb2YgYXx8IWF8fDEhPT1rJiY5IT09ayYmMTEhPT1rKXJldHVybiBkO2lmKCFlJiZwKXtpZigxMSE9PWsmJihmPV8uZXhlYyhhKSkpaWYoaj1mWzFdKXtpZig5PT09ayl7aWYoaD1iLmdldEVsZW1lbnRCeUlkKGopLCFofHwhaC5wYXJlbnROb2RlKXJldHVybiBkO2lmKGguaWQ9PT1qKXJldHVybiBkLnB1c2goaCksZH1lbHNlIGlmKGIub3duZXJEb2N1bWVudCYmKGg9Yi5vd25lckRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGopKSYmdChiLGgpJiZoLmlkPT09ailyZXR1cm4gZC5wdXNoKGgpLGR9ZWxzZXtpZihmWzJdKXJldHVybiBILmFwcGx5KGQsYi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKSksZDtpZigoaj1mWzNdKSYmYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXJldHVybiBILmFwcGx5KGQsYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGopKSxkfWlmKGMucXNhJiYoIXF8fCFxLnRlc3QoYSkpKXtpZihzPXI9dSx3PWIseD0xIT09ayYmYSwxPT09ayYmXCJvYmplY3RcIiE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSl7bz1nKGEpLChyPWIuZ2V0QXR0cmlidXRlKFwiaWRcIikpP3M9ci5yZXBsYWNlKGJiLFwiXFxcXCQmXCIpOmIuc2V0QXR0cmlidXRlKFwiaWRcIixzKSxzPVwiW2lkPSdcIitzK1wiJ10gXCIsbD1vLmxlbmd0aDt3aGlsZShsLS0pb1tsXT1zK3JiKG9bbF0pO3c9YWIudGVzdChhKSYmcGIoYi5wYXJlbnROb2RlKXx8Yix4PW8uam9pbihcIixcIil9aWYoeCl0cnl7cmV0dXJuIEguYXBwbHkoZCx3LnF1ZXJ5U2VsZWN0b3JBbGwoeCkpLGR9Y2F0Y2goeSl7fWZpbmFsbHl7cnx8Yi5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKX19fXJldHVybiBpKGEucmVwbGFjZShSLFwiJDFcIiksYixkLGUpfWZ1bmN0aW9uIGhiKCl7dmFyIGE9W107ZnVuY3Rpb24gYihjLGUpe3JldHVybiBhLnB1c2goYytcIiBcIik+ZC5jYWNoZUxlbmd0aCYmZGVsZXRlIGJbYS5zaGlmdCgpXSxiW2MrXCIgXCJdPWV9cmV0dXJuIGJ9ZnVuY3Rpb24gaWIoYSl7cmV0dXJuIGFbdV09ITAsYX1mdW5jdGlvbiBqYihhKXt2YXIgYj1uLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dHJ5e3JldHVybiEhYShiKX1jYXRjaChjKXtyZXR1cm4hMX1maW5hbGx5e2IucGFyZW50Tm9kZSYmYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpLGI9bnVsbH19ZnVuY3Rpb24ga2IoYSxiKXt2YXIgYz1hLnNwbGl0KFwifFwiKSxlPWEubGVuZ3RoO3doaWxlKGUtLSlkLmF0dHJIYW5kbGVbY1tlXV09Yn1mdW5jdGlvbiBsYihhLGIpe3ZhciBjPWImJmEsZD1jJiYxPT09YS5ub2RlVHlwZSYmMT09PWIubm9kZVR5cGUmJih+Yi5zb3VyY2VJbmRleHx8QyktKH5hLnNvdXJjZUluZGV4fHxDKTtpZihkKXJldHVybiBkO2lmKGMpd2hpbGUoYz1jLm5leHRTaWJsaW5nKWlmKGM9PT1iKXJldHVybi0xO3JldHVybiBhPzE6LTF9ZnVuY3Rpb24gbWIoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1jJiZiLnR5cGU9PT1hfX1mdW5jdGlvbiBuYihhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybihcImlucHV0XCI9PT1jfHxcImJ1dHRvblwiPT09YykmJmIudHlwZT09PWF9fWZ1bmN0aW9uIG9iKGEpe3JldHVybiBpYihmdW5jdGlvbihiKXtyZXR1cm4gYj0rYixpYihmdW5jdGlvbihjLGQpe3ZhciBlLGY9YShbXSxjLmxlbmd0aCxiKSxnPWYubGVuZ3RoO3doaWxlKGctLSljW2U9ZltnXV0mJihjW2VdPSEoZFtlXT1jW2VdKSl9KX0pfWZ1bmN0aW9uIHBiKGEpe3JldHVybiBhJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5nZXRFbGVtZW50c0J5VGFnTmFtZSYmYX1jPWdiLnN1cHBvcnQ9e30sZj1nYi5pc1hNTD1mdW5jdGlvbihhKXt2YXIgYj1hJiYoYS5vd25lckRvY3VtZW50fHxhKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuIGI/XCJIVE1MXCIhPT1iLm5vZGVOYW1lOiExfSxtPWdiLnNldERvY3VtZW50PWZ1bmN0aW9uKGEpe3ZhciBiLGUsZz1hP2Eub3duZXJEb2N1bWVudHx8YTp2O3JldHVybiBnIT09biYmOT09PWcubm9kZVR5cGUmJmcuZG9jdW1lbnRFbGVtZW50PyhuPWcsbz1nLmRvY3VtZW50RWxlbWVudCxlPWcuZGVmYXVsdFZpZXcsZSYmZSE9PWUudG9wJiYoZS5hZGRFdmVudExpc3RlbmVyP2UuYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLGViLCExKTplLmF0dGFjaEV2ZW50JiZlLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIixlYikpLHA9IWYoZyksYy5hdHRyaWJ1dGVzPWpiKGZ1bmN0aW9uKGEpe3JldHVybiBhLmNsYXNzTmFtZT1cImlcIiwhYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIil9KSxjLmdldEVsZW1lbnRzQnlUYWdOYW1lPWpiKGZ1bmN0aW9uKGEpe3JldHVybiBhLmFwcGVuZENoaWxkKGcuY3JlYXRlQ29tbWVudChcIlwiKSksIWEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aH0pLGMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZT0kLnRlc3QoZy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSxjLmdldEJ5SWQ9amIoZnVuY3Rpb24oYSl7cmV0dXJuIG8uYXBwZW5kQ2hpbGQoYSkuaWQ9dSwhZy5nZXRFbGVtZW50c0J5TmFtZXx8IWcuZ2V0RWxlbWVudHNCeU5hbWUodSkubGVuZ3RofSksYy5nZXRCeUlkPyhkLmZpbmQuSUQ9ZnVuY3Rpb24oYSxiKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgYi5nZXRFbGVtZW50QnlJZCYmcCl7dmFyIGM9Yi5nZXRFbGVtZW50QnlJZChhKTtyZXR1cm4gYyYmYy5wYXJlbnROb2RlP1tjXTpbXX19LGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShjYixkYik7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShcImlkXCIpPT09Yn19KTooZGVsZXRlIGQuZmluZC5JRCxkLmZpbHRlci5JRD1mdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoY2IsZGIpO3JldHVybiBmdW5jdGlvbihhKXt2YXIgYz1cInVuZGVmaW5lZFwiIT10eXBlb2YgYS5nZXRBdHRyaWJ1dGVOb2RlJiZhLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtyZXR1cm4gYyYmYy52YWx1ZT09PWJ9fSksZC5maW5kLlRBRz1jLmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKGEsYil7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudHNCeVRhZ05hbWU/Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKTpjLnFzYT9iLnF1ZXJ5U2VsZWN0b3JBbGwoYSk6dm9pZCAwfTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT0wLGY9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKTtpZihcIipcIj09PWEpe3doaWxlKGM9ZltlKytdKTE9PT1jLm5vZGVUeXBlJiZkLnB1c2goYyk7cmV0dXJuIGR9cmV0dXJuIGZ9LGQuZmluZC5DTEFTUz1jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGEsYil7cmV0dXJuIHA/Yi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGEpOnZvaWQgMH0scj1bXSxxPVtdLChjLnFzYT0kLnRlc3QoZy5xdWVyeVNlbGVjdG9yQWxsKSkmJihqYihmdW5jdGlvbihhKXtvLmFwcGVuZENoaWxkKGEpLmlubmVySFRNTD1cIjxhIGlkPSdcIit1K1wiJz48L2E+PHNlbGVjdCBpZD0nXCIrdStcIi1cXGZdJyBtc2FsbG93Y2FwdHVyZT0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiLGEucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCYmcS5wdXNoKFwiWypeJF09XCIrTCtcIiooPzonJ3xcXFwiXFxcIilcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGh8fHEucHVzaChcIlxcXFxbXCIrTCtcIiooPzp2YWx1ZXxcIitLK1wiKVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbaWR+PVwiK3UrXCItXVwiKS5sZW5ndGh8fHEucHVzaChcIn49XCIpLGEucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aHx8cS5wdXNoKFwiOmNoZWNrZWRcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiYSNcIit1K1wiKypcIikubGVuZ3RofHxxLnB1c2goXCIuIy4rWyt+XVwiKX0pLGpiKGZ1bmN0aW9uKGEpe3ZhciBiPWcuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO2Iuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiaGlkZGVuXCIpLGEuYXBwZW5kQ2hpbGQoYikuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwiRFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGgmJnEucHVzaChcIm5hbWVcIitMK1wiKlsqXiR8IX5dPz1cIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RofHxxLnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIikscS5wdXNoKFwiLC4qOlwiKX0pKSwoYy5tYXRjaGVzU2VsZWN0b3I9JC50ZXN0KHM9by5tYXRjaGVzfHxvLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8by5tb3pNYXRjaGVzU2VsZWN0b3J8fG8ub01hdGNoZXNTZWxlY3Rvcnx8by5tc01hdGNoZXNTZWxlY3RvcikpJiZqYihmdW5jdGlvbihhKXtjLmRpc2Nvbm5lY3RlZE1hdGNoPXMuY2FsbChhLFwiZGl2XCIpLHMuY2FsbChhLFwiW3MhPScnXTp4XCIpLHIucHVzaChcIiE9XCIsUCl9KSxxPXEubGVuZ3RoJiZuZXcgUmVnRXhwKHEuam9pbihcInxcIikpLHI9ci5sZW5ndGgmJm5ldyBSZWdFeHAoci5qb2luKFwifFwiKSksYj0kLnRlc3Qoby5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiksdD1ifHwkLnRlc3Qoby5jb250YWlucyk/ZnVuY3Rpb24oYSxiKXt2YXIgYz05PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLGQ9YiYmYi5wYXJlbnROb2RlO3JldHVybiBhPT09ZHx8ISghZHx8MSE9PWQubm9kZVR5cGV8fCEoYy5jb250YWlucz9jLmNvbnRhaW5zKGQpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJjE2JmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZCkpKX06ZnVuY3Rpb24oYSxiKXtpZihiKXdoaWxlKGI9Yi5wYXJlbnROb2RlKWlmKGI9PT1hKXJldHVybiEwO3JldHVybiExfSxCPWI/ZnVuY3Rpb24oYSxiKXtpZihhPT09YilyZXR1cm4gbD0hMCwwO3ZhciBkPSFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uLSFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO3JldHVybiBkP2Q6KGQ9KGEub3duZXJEb2N1bWVudHx8YSk9PT0oYi5vd25lckRvY3VtZW50fHxiKT9hLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpOjEsMSZkfHwhYy5zb3J0RGV0YWNoZWQmJmIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSk9PT1kP2E9PT1nfHxhLm93bmVyRG9jdW1lbnQ9PT12JiZ0KHYsYSk/LTE6Yj09PWd8fGIub3duZXJEb2N1bWVudD09PXYmJnQodixiKT8xOms/SihrLGEpLUooayxiKTowOjQmZD8tMToxKX06ZnVuY3Rpb24oYSxiKXtpZihhPT09YilyZXR1cm4gbD0hMCwwO3ZhciBjLGQ9MCxlPWEucGFyZW50Tm9kZSxmPWIucGFyZW50Tm9kZSxoPVthXSxpPVtiXTtpZighZXx8IWYpcmV0dXJuIGE9PT1nPy0xOmI9PT1nPzE6ZT8tMTpmPzE6az9KKGssYSktSihrLGIpOjA7aWYoZT09PWYpcmV0dXJuIGxiKGEsYik7Yz1hO3doaWxlKGM9Yy5wYXJlbnROb2RlKWgudW5zaGlmdChjKTtjPWI7d2hpbGUoYz1jLnBhcmVudE5vZGUpaS51bnNoaWZ0KGMpO3doaWxlKGhbZF09PT1pW2RdKWQrKztyZXR1cm4gZD9sYihoW2RdLGlbZF0pOmhbZF09PT12Py0xOmlbZF09PT12PzE6MH0sZyk6bn0sZ2IubWF0Y2hlcz1mdW5jdGlvbihhLGIpe3JldHVybiBnYihhLG51bGwsbnVsbCxiKX0sZ2IubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGEsYil7aWYoKGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpLGI9Yi5yZXBsYWNlKFUsXCI9JyQxJ11cIiksISghYy5tYXRjaGVzU2VsZWN0b3J8fCFwfHxyJiZyLnRlc3QoYil8fHEmJnEudGVzdChiKSkpdHJ5e3ZhciBkPXMuY2FsbChhLGIpO2lmKGR8fGMuZGlzY29ubmVjdGVkTWF0Y2h8fGEuZG9jdW1lbnQmJjExIT09YS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gZH1jYXRjaChlKXt9cmV0dXJuIGdiKGIsbixudWxsLFthXSkubGVuZ3RoPjB9LGdiLmNvbnRhaW5zPWZ1bmN0aW9uKGEsYil7cmV0dXJuKGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpLHQoYSxiKX0sZ2IuYXR0cj1mdW5jdGlvbihhLGIpeyhhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKTt2YXIgZT1kLmF0dHJIYW5kbGVbYi50b0xvd2VyQ2FzZSgpXSxmPWUmJkQuY2FsbChkLmF0dHJIYW5kbGUsYi50b0xvd2VyQ2FzZSgpKT9lKGEsYiwhcCk6dm9pZCAwO3JldHVybiB2b2lkIDAhPT1mP2Y6Yy5hdHRyaWJ1dGVzfHwhcD9hLmdldEF0dHJpYnV0ZShiKTooZj1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZmLnNwZWNpZmllZD9mLnZhbHVlOm51bGx9LGdiLmVycm9yPWZ1bmN0aW9uKGEpe3Rocm93IG5ldyBFcnJvcihcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiK2EpfSxnYi51bmlxdWVTb3J0PWZ1bmN0aW9uKGEpe3ZhciBiLGQ9W10sZT0wLGY9MDtpZihsPSFjLmRldGVjdER1cGxpY2F0ZXMsaz0hYy5zb3J0U3RhYmxlJiZhLnNsaWNlKDApLGEuc29ydChCKSxsKXt3aGlsZShiPWFbZisrXSliPT09YVtmXSYmKGU9ZC5wdXNoKGYpKTt3aGlsZShlLS0pYS5zcGxpY2UoZFtlXSwxKX1yZXR1cm4gaz1udWxsLGF9LGU9Z2IuZ2V0VGV4dD1mdW5jdGlvbihhKXt2YXIgYixjPVwiXCIsZD0wLGY9YS5ub2RlVHlwZTtpZihmKXtpZigxPT09Znx8OT09PWZ8fDExPT09Zil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEudGV4dENvbnRlbnQpcmV0dXJuIGEudGV4dENvbnRlbnQ7Zm9yKGE9YS5maXJzdENoaWxkO2E7YT1hLm5leHRTaWJsaW5nKWMrPWUoYSl9ZWxzZSBpZigzPT09Znx8ND09PWYpcmV0dXJuIGEubm9kZVZhbHVlfWVsc2Ugd2hpbGUoYj1hW2QrK10pYys9ZShiKTtyZXR1cm4gY30sZD1nYi5zZWxlY3RvcnM9e2NhY2hlTGVuZ3RoOjUwLGNyZWF0ZVBzZXVkbzppYixtYXRjaDpYLGF0dHJIYW5kbGU6e30sZmluZDp7fSxyZWxhdGl2ZTp7XCI+XCI6e2RpcjpcInBhcmVudE5vZGVcIixmaXJzdDohMH0sXCIgXCI6e2RpcjpcInBhcmVudE5vZGVcIn0sXCIrXCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wiLGZpcnN0OiEwfSxcIn5cIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCJ9fSxwcmVGaWx0ZXI6e0FUVFI6ZnVuY3Rpb24oYSl7cmV0dXJuIGFbMV09YVsxXS5yZXBsYWNlKGNiLGRiKSxhWzNdPShhWzNdfHxhWzRdfHxhWzVdfHxcIlwiKS5yZXBsYWNlKGNiLGRiKSxcIn49XCI9PT1hWzJdJiYoYVszXT1cIiBcIithWzNdK1wiIFwiKSxhLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGEpe3JldHVybiBhWzFdPWFbMV0udG9Mb3dlckNhc2UoKSxcIm50aFwiPT09YVsxXS5zbGljZSgwLDMpPyhhWzNdfHxnYi5lcnJvcihhWzBdKSxhWzRdPSsoYVs0XT9hWzVdKyhhWzZdfHwxKToyKihcImV2ZW5cIj09PWFbM118fFwib2RkXCI9PT1hWzNdKSksYVs1XT0rKGFbN10rYVs4XXx8XCJvZGRcIj09PWFbM10pKTphWzNdJiZnYi5lcnJvcihhWzBdKSxhfSxQU0VVRE86ZnVuY3Rpb24oYSl7dmFyIGIsYz0hYVs2XSYmYVsyXTtyZXR1cm4gWC5DSElMRC50ZXN0KGFbMF0pP251bGw6KGFbM10/YVsyXT1hWzRdfHxhWzVdfHxcIlwiOmMmJlYudGVzdChjKSYmKGI9ZyhjLCEwKSkmJihiPWMuaW5kZXhPZihcIilcIixjLmxlbmd0aC1iKS1jLmxlbmd0aCkmJihhWzBdPWFbMF0uc2xpY2UoMCxiKSxhWzJdPWMuc2xpY2UoMCxiKSksYS5zbGljZSgwLDMpKX19LGZpbHRlcjp7VEFHOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShjYixkYikudG9Mb3dlckNhc2UoKTtyZXR1cm5cIipcIj09PWE/ZnVuY3Rpb24oKXtyZXR1cm4hMH06ZnVuY3Rpb24oYSl7cmV0dXJuIGEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWJ9fSxDTEFTUzpmdW5jdGlvbihhKXt2YXIgYj15W2ErXCIgXCJdO3JldHVybiBifHwoYj1uZXcgUmVnRXhwKFwiKF58XCIrTCtcIilcIithK1wiKFwiK0wrXCJ8JClcIikpJiZ5KGEsZnVuY3Rpb24oYSl7cmV0dXJuIGIudGVzdChcInN0cmluZ1wiPT10eXBlb2YgYS5jbGFzc05hbWUmJmEuY2xhc3NOYW1lfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5nZXRBdHRyaWJ1dGUmJmEuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCIpfSl9LEFUVFI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBmdW5jdGlvbihkKXt2YXIgZT1nYi5hdHRyKGQsYSk7cmV0dXJuIG51bGw9PWU/XCIhPVwiPT09YjpiPyhlKz1cIlwiLFwiPVwiPT09Yj9lPT09YzpcIiE9XCI9PT1iP2UhPT1jOlwiXj1cIj09PWI/YyYmMD09PWUuaW5kZXhPZihjKTpcIio9XCI9PT1iP2MmJmUuaW5kZXhPZihjKT4tMTpcIiQ9XCI9PT1iP2MmJmUuc2xpY2UoLWMubGVuZ3RoKT09PWM6XCJ+PVwiPT09Yj8oXCIgXCIrZS5yZXBsYWNlKFEsXCIgXCIpK1wiIFwiKS5pbmRleE9mKGMpPi0xOlwifD1cIj09PWI/ZT09PWN8fGUuc2xpY2UoMCxjLmxlbmd0aCsxKT09PWMrXCItXCI6ITEpOiEwfX0sQ0hJTEQ6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm50aFwiIT09YS5zbGljZSgwLDMpLGc9XCJsYXN0XCIhPT1hLnNsaWNlKC00KSxoPVwib2YtdHlwZVwiPT09YjtyZXR1cm4gMT09PWQmJjA9PT1lP2Z1bmN0aW9uKGEpe3JldHVybiEhYS5wYXJlbnROb2RlfTpmdW5jdGlvbihiLGMsaSl7dmFyIGosayxsLG0sbixvLHA9ZiE9PWc/XCJuZXh0U2libGluZ1wiOlwicHJldmlvdXNTaWJsaW5nXCIscT1iLnBhcmVudE5vZGUscj1oJiZiLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkscz0haSYmIWg7aWYocSl7aWYoZil7d2hpbGUocCl7bD1iO3doaWxlKGw9bFtwXSlpZihoP2wubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PWwubm9kZVR5cGUpcmV0dXJuITE7bz1wPVwib25seVwiPT09YSYmIW8mJlwibmV4dFNpYmxpbmdcIn1yZXR1cm4hMH1pZihvPVtnP3EuZmlyc3RDaGlsZDpxLmxhc3RDaGlsZF0sZyYmcyl7az1xW3VdfHwocVt1XT17fSksaj1rW2FdfHxbXSxuPWpbMF09PT13JiZqWzFdLG09alswXT09PXcmJmpbMl0sbD1uJiZxLmNoaWxkTm9kZXNbbl07d2hpbGUobD0rK24mJmwmJmxbcF18fChtPW49MCl8fG8ucG9wKCkpaWYoMT09PWwubm9kZVR5cGUmJisrbSYmbD09PWIpe2tbYV09W3csbixtXTticmVha319ZWxzZSBpZihzJiYoaj0oYlt1XXx8KGJbdV09e30pKVthXSkmJmpbMF09PT13KW09alsxXTtlbHNlIHdoaWxlKGw9KytuJiZsJiZsW3BdfHwobT1uPTApfHxvLnBvcCgpKWlmKChoP2wubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PWwubm9kZVR5cGUpJiYrK20mJihzJiYoKGxbdV18fChsW3VdPXt9KSlbYV09W3csbV0pLGw9PT1iKSlicmVhaztyZXR1cm4gbS09ZSxtPT09ZHx8bSVkPT09MCYmbS9kPj0wfX19LFBTRVVETzpmdW5jdGlvbihhLGIpe3ZhciBjLGU9ZC5wc2V1ZG9zW2FdfHxkLnNldEZpbHRlcnNbYS50b0xvd2VyQ2FzZSgpXXx8Z2IuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiK2EpO3JldHVybiBlW3VdP2UoYik6ZS5sZW5ndGg+MT8oYz1bYSxhLFwiXCIsYl0sZC5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KGEudG9Mb3dlckNhc2UoKSk/aWIoZnVuY3Rpb24oYSxjKXt2YXIgZCxmPWUoYSxiKSxnPWYubGVuZ3RoO3doaWxlKGctLSlkPUooYSxmW2ddKSxhW2RdPSEoY1tkXT1mW2ddKX0pOmZ1bmN0aW9uKGEpe3JldHVybiBlKGEsMCxjKX0pOmV9fSxwc2V1ZG9zOntub3Q6aWIoZnVuY3Rpb24oYSl7dmFyIGI9W10sYz1bXSxkPWgoYS5yZXBsYWNlKFIsXCIkMVwiKSk7cmV0dXJuIGRbdV0/aWIoZnVuY3Rpb24oYSxiLGMsZSl7dmFyIGYsZz1kKGEsbnVsbCxlLFtdKSxoPWEubGVuZ3RoO3doaWxlKGgtLSkoZj1nW2hdKSYmKGFbaF09IShiW2hdPWYpKX0pOmZ1bmN0aW9uKGEsZSxmKXtyZXR1cm4gYlswXT1hLGQoYixudWxsLGYsYyksYlswXT1udWxsLCFjLnBvcCgpfX0pLGhhczppYihmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGdiKGEsYikubGVuZ3RoPjB9fSksY29udGFpbnM6aWIoZnVuY3Rpb24oYSl7cmV0dXJuIGE9YS5yZXBsYWNlKGNiLGRiKSxmdW5jdGlvbihiKXtyZXR1cm4oYi50ZXh0Q29udGVudHx8Yi5pbm5lclRleHR8fGUoYikpLmluZGV4T2YoYSk+LTF9fSksbGFuZzppYihmdW5jdGlvbihhKXtyZXR1cm4gVy50ZXN0KGF8fFwiXCIpfHxnYi5lcnJvcihcInVuc3VwcG9ydGVkIGxhbmc6IFwiK2EpLGE9YS5yZXBsYWNlKGNiLGRiKS50b0xvd2VyQ2FzZSgpLGZ1bmN0aW9uKGIpe3ZhciBjO2RvIGlmKGM9cD9iLmxhbmc6Yi5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKXx8Yi5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKXJldHVybiBjPWMudG9Mb3dlckNhc2UoKSxjPT09YXx8MD09PWMuaW5kZXhPZihhK1wiLVwiKTt3aGlsZSgoYj1iLnBhcmVudE5vZGUpJiYxPT09Yi5ub2RlVHlwZSk7cmV0dXJuITF9fSksdGFyZ2V0OmZ1bmN0aW9uKGIpe3ZhciBjPWEubG9jYXRpb24mJmEubG9jYXRpb24uaGFzaDtyZXR1cm4gYyYmYy5zbGljZSgxKT09PWIuaWR9LHJvb3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1vfSxmb2N1czpmdW5jdGlvbihhKXtyZXR1cm4gYT09PW4uYWN0aXZlRWxlbWVudCYmKCFuLmhhc0ZvY3VzfHxuLmhhc0ZvY3VzKCkpJiYhIShhLnR5cGV8fGEuaHJlZnx8fmEudGFiSW5kZXgpfSxlbmFibGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkPT09ITF9LGRpc2FibGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkPT09ITB9LGNoZWNrZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWImJiEhYS5jaGVja2VkfHxcIm9wdGlvblwiPT09YiYmISFhLnNlbGVjdGVkfSxzZWxlY3RlZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxhLnNlbGVjdGVkPT09ITB9LGVtcHR5OmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZylpZihhLm5vZGVUeXBlPDYpcmV0dXJuITE7cmV0dXJuITB9LHBhcmVudDpmdW5jdGlvbihhKXtyZXR1cm4hZC5wc2V1ZG9zLmVtcHR5KGEpfSxoZWFkZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIFoudGVzdChhLm5vZGVOYW1lKX0saW5wdXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFkudGVzdChhLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iJiZcImJ1dHRvblwiPT09YS50eXBlfHxcImJ1dHRvblwiPT09Yn0sdGV4dDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm5cImlucHV0XCI9PT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJlwidGV4dFwiPT09YS50eXBlJiYobnVsbD09KGI9YS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKXx8XCJ0ZXh0XCI9PT1iLnRvTG93ZXJDYXNlKCkpfSxmaXJzdDpvYihmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6b2IoZnVuY3Rpb24oYSxiKXtyZXR1cm5bYi0xXX0pLGVxOm9iKGZ1bmN0aW9uKGEsYixjKXtyZXR1cm5bMD5jP2MrYjpjXX0pLGV2ZW46b2IoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MDtiPmM7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxvZGQ6b2IoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MTtiPmM7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxsdDpvYihmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPTA+Yz9jK2I6YzstLWQ+PTA7KWEucHVzaChkKTtyZXR1cm4gYX0pLGd0Om9iKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9MD5jP2MrYjpjOysrZDxiOylhLnB1c2goZCk7cmV0dXJuIGF9KX19LGQucHNldWRvcy5udGg9ZC5wc2V1ZG9zLmVxO2ZvcihiIGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWQucHNldWRvc1tiXT1tYihiKTtmb3IoYiBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWQucHNldWRvc1tiXT1uYihiKTtmdW5jdGlvbiBxYigpe31xYi5wcm90b3R5cGU9ZC5maWx0ZXJzPWQucHNldWRvcyxkLnNldEZpbHRlcnM9bmV3IHFiLGc9Z2IudG9rZW5pemU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxlLGYsZyxoLGksaixrPXpbYStcIiBcIl07aWYoaylyZXR1cm4gYj8wOmsuc2xpY2UoMCk7aD1hLGk9W10saj1kLnByZUZpbHRlcjt3aGlsZShoKXsoIWN8fChlPVMuZXhlYyhoKSkpJiYoZSYmKGg9aC5zbGljZShlWzBdLmxlbmd0aCl8fGgpLGkucHVzaChmPVtdKSksYz0hMSwoZT1ULmV4ZWMoaCkpJiYoYz1lLnNoaWZ0KCksZi5wdXNoKHt2YWx1ZTpjLHR5cGU6ZVswXS5yZXBsYWNlKFIsXCIgXCIpfSksaD1oLnNsaWNlKGMubGVuZ3RoKSk7Zm9yKGcgaW4gZC5maWx0ZXIpIShlPVhbZ10uZXhlYyhoKSl8fGpbZ10mJiEoZT1qW2ddKGUpKXx8KGM9ZS5zaGlmdCgpLGYucHVzaCh7dmFsdWU6Yyx0eXBlOmcsbWF0Y2hlczplfSksaD1oLnNsaWNlKGMubGVuZ3RoKSk7aWYoIWMpYnJlYWt9cmV0dXJuIGI/aC5sZW5ndGg6aD9nYi5lcnJvcihhKTp6KGEsaSkuc2xpY2UoMCl9O2Z1bmN0aW9uIHJiKGEpe2Zvcih2YXIgYj0wLGM9YS5sZW5ndGgsZD1cIlwiO2M+YjtiKyspZCs9YVtiXS52YWx1ZTtyZXR1cm4gZH1mdW5jdGlvbiBzYihhLGIsYyl7dmFyIGQ9Yi5kaXIsZT1jJiZcInBhcmVudE5vZGVcIj09PWQsZj14Kys7cmV0dXJuIGIuZmlyc3Q/ZnVuY3Rpb24oYixjLGYpe3doaWxlKGI9YltkXSlpZigxPT09Yi5ub2RlVHlwZXx8ZSlyZXR1cm4gYShiLGMsZil9OmZ1bmN0aW9uKGIsYyxnKXt2YXIgaCxpLGo9W3csZl07aWYoZyl7d2hpbGUoYj1iW2RdKWlmKCgxPT09Yi5ub2RlVHlwZXx8ZSkmJmEoYixjLGcpKXJldHVybiEwfWVsc2Ugd2hpbGUoYj1iW2RdKWlmKDE9PT1iLm5vZGVUeXBlfHxlKXtpZihpPWJbdV18fChiW3VdPXt9KSwoaD1pW2RdKSYmaFswXT09PXcmJmhbMV09PT1mKXJldHVybiBqWzJdPWhbMl07aWYoaVtkXT1qLGpbMl09YShiLGMsZykpcmV0dXJuITB9fX1mdW5jdGlvbiB0YihhKXtyZXR1cm4gYS5sZW5ndGg+MT9mdW5jdGlvbihiLGMsZCl7dmFyIGU9YS5sZW5ndGg7d2hpbGUoZS0tKWlmKCFhW2VdKGIsYyxkKSlyZXR1cm4hMTtyZXR1cm4hMH06YVswXX1mdW5jdGlvbiB1YihhLGIsYyl7Zm9yKHZhciBkPTAsZT1iLmxlbmd0aDtlPmQ7ZCsrKWdiKGEsYltkXSxjKTtyZXR1cm4gY31mdW5jdGlvbiB2YihhLGIsYyxkLGUpe2Zvcih2YXIgZixnPVtdLGg9MCxpPWEubGVuZ3RoLGo9bnVsbCE9YjtpPmg7aCsrKShmPWFbaF0pJiYoIWN8fGMoZixkLGUpKSYmKGcucHVzaChmKSxqJiZiLnB1c2goaCkpO3JldHVybiBnfWZ1bmN0aW9uIHdiKGEsYixjLGQsZSxmKXtyZXR1cm4gZCYmIWRbdV0mJihkPXdiKGQpKSxlJiYhZVt1XSYmKGU9d2IoZSxmKSksaWIoZnVuY3Rpb24oZixnLGgsaSl7dmFyIGosayxsLG09W10sbj1bXSxvPWcubGVuZ3RoLHA9Znx8dWIoYnx8XCIqXCIsaC5ub2RlVHlwZT9baF06aCxbXSkscT0hYXx8IWYmJmI/cDp2YihwLG0sYSxoLGkpLHI9Yz9lfHwoZj9hOm98fGQpP1tdOmc6cTtpZihjJiZjKHEscixoLGkpLGQpe2o9dmIocixuKSxkKGosW10saCxpKSxrPWoubGVuZ3RoO3doaWxlKGstLSkobD1qW2tdKSYmKHJbbltrXV09IShxW25ba11dPWwpKX1pZihmKXtpZihlfHxhKXtpZihlKXtqPVtdLGs9ci5sZW5ndGg7d2hpbGUoay0tKShsPXJba10pJiZqLnB1c2gocVtrXT1sKTtlKG51bGwscj1bXSxqLGkpfWs9ci5sZW5ndGg7d2hpbGUoay0tKShsPXJba10pJiYoaj1lP0ooZixsKTptW2tdKT4tMSYmKGZbal09IShnW2pdPWwpKX19ZWxzZSByPXZiKHI9PT1nP3Iuc3BsaWNlKG8sci5sZW5ndGgpOnIpLGU/ZShudWxsLGcscixpKTpILmFwcGx5KGcscil9KX1mdW5jdGlvbiB4YihhKXtmb3IodmFyIGIsYyxlLGY9YS5sZW5ndGgsZz1kLnJlbGF0aXZlW2FbMF0udHlwZV0saD1nfHxkLnJlbGF0aXZlW1wiIFwiXSxpPWc/MTowLGs9c2IoZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1ifSxoLCEwKSxsPXNiKGZ1bmN0aW9uKGEpe3JldHVybiBKKGIsYSk+LTF9LGgsITApLG09W2Z1bmN0aW9uKGEsYyxkKXt2YXIgZT0hZyYmKGR8fGMhPT1qKXx8KChiPWMpLm5vZGVUeXBlP2soYSxjLGQpOmwoYSxjLGQpKTtyZXR1cm4gYj1udWxsLGV9XTtmPmk7aSsrKWlmKGM9ZC5yZWxhdGl2ZVthW2ldLnR5cGVdKW09W3NiKHRiKG0pLGMpXTtlbHNle2lmKGM9ZC5maWx0ZXJbYVtpXS50eXBlXS5hcHBseShudWxsLGFbaV0ubWF0Y2hlcyksY1t1XSl7Zm9yKGU9KytpO2Y+ZTtlKyspaWYoZC5yZWxhdGl2ZVthW2VdLnR5cGVdKWJyZWFrO3JldHVybiB3YihpPjEmJnRiKG0pLGk+MSYmcmIoYS5zbGljZSgwLGktMSkuY29uY2F0KHt2YWx1ZTpcIiBcIj09PWFbaS0yXS50eXBlP1wiKlwiOlwiXCJ9KSkucmVwbGFjZShSLFwiJDFcIiksYyxlPmkmJnhiKGEuc2xpY2UoaSxlKSksZj5lJiZ4YihhPWEuc2xpY2UoZSkpLGY+ZSYmcmIoYSkpfW0ucHVzaChjKX1yZXR1cm4gdGIobSl9ZnVuY3Rpb24geWIoYSxiKXt2YXIgYz1iLmxlbmd0aD4wLGU9YS5sZW5ndGg+MCxmPWZ1bmN0aW9uKGYsZyxoLGksayl7dmFyIGwsbSxvLHA9MCxxPVwiMFwiLHI9ZiYmW10scz1bXSx0PWosdT1mfHxlJiZkLmZpbmQuVEFHKFwiKlwiLGspLHY9dys9bnVsbD09dD8xOk1hdGgucmFuZG9tKCl8fC4xLHg9dS5sZW5ndGg7Zm9yKGsmJihqPWchPT1uJiZnKTtxIT09eCYmbnVsbCE9KGw9dVtxXSk7cSsrKXtpZihlJiZsKXttPTA7d2hpbGUobz1hW20rK10paWYobyhsLGcsaCkpe2kucHVzaChsKTticmVha31rJiYodz12KX1jJiYoKGw9IW8mJmwpJiZwLS0sZiYmci5wdXNoKGwpKX1pZihwKz1xLGMmJnEhPT1wKXttPTA7d2hpbGUobz1iW20rK10pbyhyLHMsZyxoKTtpZihmKXtpZihwPjApd2hpbGUocS0tKXJbcV18fHNbcV18fChzW3FdPUYuY2FsbChpKSk7cz12YihzKX1ILmFwcGx5KGkscyksayYmIWYmJnMubGVuZ3RoPjAmJnArYi5sZW5ndGg+MSYmZ2IudW5pcXVlU29ydChpKX1yZXR1cm4gayYmKHc9dixqPXQpLHJ9O3JldHVybiBjP2liKGYpOmZ9cmV0dXJuIGg9Z2IuY29tcGlsZT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1bXSxmPUFbYStcIiBcIl07aWYoIWYpe2J8fChiPWcoYSkpLGM9Yi5sZW5ndGg7d2hpbGUoYy0tKWY9eGIoYltjXSksZlt1XT9kLnB1c2goZik6ZS5wdXNoKGYpO2Y9QShhLHliKGUsZCkpLGYuc2VsZWN0b3I9YX1yZXR1cm4gZn0saT1nYi5zZWxlY3Q9ZnVuY3Rpb24oYSxiLGUsZil7dmFyIGksaixrLGwsbSxuPVwiZnVuY3Rpb25cIj09dHlwZW9mIGEmJmEsbz0hZiYmZyhhPW4uc2VsZWN0b3J8fGEpO2lmKGU9ZXx8W10sMT09PW8ubGVuZ3RoKXtpZihqPW9bMF09b1swXS5zbGljZSgwKSxqLmxlbmd0aD4yJiZcIklEXCI9PT0oaz1qWzBdKS50eXBlJiZjLmdldEJ5SWQmJjk9PT1iLm5vZGVUeXBlJiZwJiZkLnJlbGF0aXZlW2pbMV0udHlwZV0pe2lmKGI9KGQuZmluZC5JRChrLm1hdGNoZXNbMF0ucmVwbGFjZShjYixkYiksYil8fFtdKVswXSwhYilyZXR1cm4gZTtuJiYoYj1iLnBhcmVudE5vZGUpLGE9YS5zbGljZShqLnNoaWZ0KCkudmFsdWUubGVuZ3RoKX1pPVgubmVlZHNDb250ZXh0LnRlc3QoYSk/MDpqLmxlbmd0aDt3aGlsZShpLS0pe2lmKGs9altpXSxkLnJlbGF0aXZlW2w9ay50eXBlXSlicmVhaztpZigobT1kLmZpbmRbbF0pJiYoZj1tKGsubWF0Y2hlc1swXS5yZXBsYWNlKGNiLGRiKSxhYi50ZXN0KGpbMF0udHlwZSkmJnBiKGIucGFyZW50Tm9kZSl8fGIpKSl7aWYoai5zcGxpY2UoaSwxKSxhPWYubGVuZ3RoJiZyYihqKSwhYSlyZXR1cm4gSC5hcHBseShlLGYpLGU7YnJlYWt9fX1yZXR1cm4obnx8aChhLG8pKShmLGIsIXAsZSxhYi50ZXN0KGEpJiZwYihiLnBhcmVudE5vZGUpfHxiKSxlfSxjLnNvcnRTdGFibGU9dS5zcGxpdChcIlwiKS5zb3J0KEIpLmpvaW4oXCJcIik9PT11LGMuZGV0ZWN0RHVwbGljYXRlcz0hIWwsbSgpLGMuc29ydERldGFjaGVkPWpiKGZ1bmN0aW9uKGEpe3JldHVybiAxJmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24obi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKX0pLGpiKGZ1bmN0aW9uKGEpe3JldHVybiBhLmlubmVySFRNTD1cIjxhIGhyZWY9JyMnPjwvYT5cIixcIiNcIj09PWEuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpfSl8fGtiKFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLGZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYz92b2lkIDA6YS5nZXRBdHRyaWJ1dGUoYixcInR5cGVcIj09PWIudG9Mb3dlckNhc2UoKT8xOjIpfSksYy5hdHRyaWJ1dGVzJiZqYihmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9XCI8aW5wdXQvPlwiLGEuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIpLFwiXCI9PT1hLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwidmFsdWVcIil9KXx8a2IoXCJ2YWx1ZVwiLGZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gY3x8XCJpbnB1dFwiIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP3ZvaWQgMDphLmRlZmF1bHRWYWx1ZX0pLGpiKGZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpfSl8fGtiKEssZnVuY3Rpb24oYSxiLGMpe3ZhciBkO3JldHVybiBjP3ZvaWQgMDphW2JdPT09ITA/Yi50b0xvd2VyQ2FzZSgpOihkPWEuZ2V0QXR0cmlidXRlTm9kZShiKSkmJmQuc3BlY2lmaWVkP2QudmFsdWU6bnVsbH0pLGdifShhKTttLmZpbmQ9cyxtLmV4cHI9cy5zZWxlY3RvcnMsbS5leHByW1wiOlwiXT1tLmV4cHIucHNldWRvcyxtLnVuaXF1ZT1zLnVuaXF1ZVNvcnQsbS50ZXh0PXMuZ2V0VGV4dCxtLmlzWE1MRG9jPXMuaXNYTUwsbS5jb250YWlucz1zLmNvbnRhaW5zO3ZhciB0PW0uZXhwci5tYXRjaC5uZWVkc0NvbnRleHQsdT0vXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8sdj0vXi5bXjojXFxbXFwuLF0qJC87ZnVuY3Rpb24gdyhhLGIsYyl7aWYobS5pc0Z1bmN0aW9uKGIpKXJldHVybiBtLmdyZXAoYSxmdW5jdGlvbihhLGQpe3JldHVybiEhYi5jYWxsKGEsZCxhKSE9PWN9KTtpZihiLm5vZGVUeXBlKXJldHVybiBtLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYT09PWIhPT1jfSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGIpe2lmKHYudGVzdChiKSlyZXR1cm4gbS5maWx0ZXIoYixhLGMpO2I9bS5maWx0ZXIoYixhKX1yZXR1cm4gbS5ncmVwKGEsZnVuY3Rpb24oYSl7cmV0dXJuIG0uaW5BcnJheShhLGIpPj0wIT09Y30pfW0uZmlsdGVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iWzBdO3JldHVybiBjJiYoYT1cIjpub3QoXCIrYStcIilcIiksMT09PWIubGVuZ3RoJiYxPT09ZC5ub2RlVHlwZT9tLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGQsYSk/W2RdOltdOm0uZmluZC5tYXRjaGVzKGEsbS5ncmVwKGIsZnVuY3Rpb24oYSl7cmV0dXJuIDE9PT1hLm5vZGVUeXBlfSkpfSxtLmZuLmV4dGVuZCh7ZmluZDpmdW5jdGlvbihhKXt2YXIgYixjPVtdLGQ9dGhpcyxlPWQubGVuZ3RoO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBhKXJldHVybiB0aGlzLnB1c2hTdGFjayhtKGEpLmZpbHRlcihmdW5jdGlvbigpe2ZvcihiPTA7ZT5iO2IrKylpZihtLmNvbnRhaW5zKGRbYl0sdGhpcykpcmV0dXJuITB9KSk7Zm9yKGI9MDtlPmI7YisrKW0uZmluZChhLGRbYl0sYyk7cmV0dXJuIGM9dGhpcy5wdXNoU3RhY2soZT4xP20udW5pcXVlKGMpOmMpLGMuc2VsZWN0b3I9dGhpcy5zZWxlY3Rvcj90aGlzLnNlbGVjdG9yK1wiIFwiK2E6YSxjfSxmaWx0ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHcodGhpcyxhfHxbXSwhMSkpfSxub3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHcodGhpcyxhfHxbXSwhMCkpfSxpczpmdW5jdGlvbihhKXtyZXR1cm4hIXcodGhpcyxcInN0cmluZ1wiPT10eXBlb2YgYSYmdC50ZXN0KGEpP20oYSk6YXx8W10sITEpLmxlbmd0aH19KTt2YXIgeCx5PWEuZG9jdW1lbnQsej0vXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0qKSkkLyxBPW0uZm4uaW5pdD1mdW5jdGlvbihhLGIpe3ZhciBjLGQ7aWYoIWEpcmV0dXJuIHRoaXM7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpe2lmKGM9XCI8XCI9PT1hLmNoYXJBdCgwKSYmXCI+XCI9PT1hLmNoYXJBdChhLmxlbmd0aC0xKSYmYS5sZW5ndGg+PTM/W251bGwsYSxudWxsXTp6LmV4ZWMoYSksIWN8fCFjWzFdJiZiKXJldHVybiFifHxiLmpxdWVyeT8oYnx8eCkuZmluZChhKTp0aGlzLmNvbnN0cnVjdG9yKGIpLmZpbmQoYSk7aWYoY1sxXSl7aWYoYj1iIGluc3RhbmNlb2YgbT9iWzBdOmIsbS5tZXJnZSh0aGlzLG0ucGFyc2VIVE1MKGNbMV0sYiYmYi5ub2RlVHlwZT9iLm93bmVyRG9jdW1lbnR8fGI6eSwhMCkpLHUudGVzdChjWzFdKSYmbS5pc1BsYWluT2JqZWN0KGIpKWZvcihjIGluIGIpbS5pc0Z1bmN0aW9uKHRoaXNbY10pP3RoaXNbY10oYltjXSk6dGhpcy5hdHRyKGMsYltjXSk7cmV0dXJuIHRoaXN9aWYoZD15LmdldEVsZW1lbnRCeUlkKGNbMl0pLGQmJmQucGFyZW50Tm9kZSl7aWYoZC5pZCE9PWNbMl0pcmV0dXJuIHguZmluZChhKTt0aGlzLmxlbmd0aD0xLHRoaXNbMF09ZH1yZXR1cm4gdGhpcy5jb250ZXh0PXksdGhpcy5zZWxlY3Rvcj1hLHRoaXN9cmV0dXJuIGEubm9kZVR5cGU/KHRoaXMuY29udGV4dD10aGlzWzBdPWEsdGhpcy5sZW5ndGg9MSx0aGlzKTptLmlzRnVuY3Rpb24oYSk/XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHgucmVhZHk/eC5yZWFkeShhKTphKG0pOih2b2lkIDAhPT1hLnNlbGVjdG9yJiYodGhpcy5zZWxlY3Rvcj1hLnNlbGVjdG9yLHRoaXMuY29udGV4dD1hLmNvbnRleHQpLG0ubWFrZUFycmF5KGEsdGhpcykpfTtBLnByb3RvdHlwZT1tLmZuLHg9bSh5KTt2YXIgQj0vXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxDPXtjaGlsZHJlbjohMCxjb250ZW50czohMCxuZXh0OiEwLHByZXY6ITB9O20uZXh0ZW5kKHtkaXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVtdLGU9YVtiXTt3aGlsZShlJiY5IT09ZS5ub2RlVHlwZSYmKHZvaWQgMD09PWN8fDEhPT1lLm5vZGVUeXBlfHwhbShlKS5pcyhjKSkpMT09PWUubm9kZVR5cGUmJmQucHVzaChlKSxlPWVbYl07cmV0dXJuIGR9LHNpYmxpbmc6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W107YTthPWEubmV4dFNpYmxpbmcpMT09PWEubm9kZVR5cGUmJmEhPT1iJiZjLnB1c2goYSk7cmV0dXJuIGN9fSksbS5mbi5leHRlbmQoe2hhczpmdW5jdGlvbihhKXt2YXIgYixjPW0oYSx0aGlzKSxkPWMubGVuZ3RoO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpe2ZvcihiPTA7ZD5iO2IrKylpZihtLmNvbnRhaW5zKHRoaXMsY1tiXSkpcmV0dXJuITB9KX0sY2xvc2VzdDpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYyxkPTAsZT10aGlzLmxlbmd0aCxmPVtdLGc9dC50ZXN0KGEpfHxcInN0cmluZ1wiIT10eXBlb2YgYT9tKGEsYnx8dGhpcy5jb250ZXh0KTowO2U+ZDtkKyspZm9yKGM9dGhpc1tkXTtjJiZjIT09YjtjPWMucGFyZW50Tm9kZSlpZihjLm5vZGVUeXBlPDExJiYoZz9nLmluZGV4KGMpPi0xOjE9PT1jLm5vZGVUeXBlJiZtLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGMsYSkpKXtmLnB1c2goYyk7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKGYubGVuZ3RoPjE/bS51bmlxdWUoZik6Zil9LGluZGV4OmZ1bmN0aW9uKGEpe3JldHVybiBhP1wic3RyaW5nXCI9PXR5cGVvZiBhP20uaW5BcnJheSh0aGlzWzBdLG0oYSkpOm0uaW5BcnJheShhLmpxdWVyeT9hWzBdOmEsdGhpcyk6dGhpc1swXSYmdGhpc1swXS5wYXJlbnROb2RlP3RoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoOi0xfSxhZGQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2sobS51bmlxdWUobS5tZXJnZSh0aGlzLmdldCgpLG0oYSxiKSkpKX0sYWRkQmFjazpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09YT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihhKSl9fSk7ZnVuY3Rpb24gRChhLGIpe2RvIGE9YVtiXTt3aGlsZShhJiYxIT09YS5ub2RlVHlwZSk7cmV0dXJuIGF9bS5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnROb2RlO3JldHVybiBiJiYxMSE9PWIubm9kZVR5cGU/YjpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGEpe3JldHVybiBtLmRpcihhLFwicGFyZW50Tm9kZVwiKX0scGFyZW50c1VudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbS5kaXIoYSxcInBhcmVudE5vZGVcIixjKX0sbmV4dDpmdW5jdGlvbihhKXtyZXR1cm4gRChhLFwibmV4dFNpYmxpbmdcIil9LHByZXY6ZnVuY3Rpb24oYSl7cmV0dXJuIEQoYSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dEFsbDpmdW5jdGlvbihhKXtyZXR1cm4gbS5kaXIoYSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2QWxsOmZ1bmN0aW9uKGEpe3JldHVybiBtLmRpcihhLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0VW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBtLmRpcihhLFwibmV4dFNpYmxpbmdcIixjKX0scHJldlVudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbS5kaXIoYSxcInByZXZpb3VzU2libGluZ1wiLGMpfSxzaWJsaW5nczpmdW5jdGlvbihhKXtyZXR1cm4gbS5zaWJsaW5nKChhLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGEpfSxjaGlsZHJlbjpmdW5jdGlvbihhKXtyZXR1cm4gbS5zaWJsaW5nKGEuZmlyc3RDaGlsZCl9LGNvbnRlbnRzOmZ1bmN0aW9uKGEpe3JldHVybiBtLm5vZGVOYW1lKGEsXCJpZnJhbWVcIik/YS5jb250ZW50RG9jdW1lbnR8fGEuY29udGVudFdpbmRvdy5kb2N1bWVudDptLm1lcmdlKFtdLGEuY2hpbGROb2Rlcyl9fSxmdW5jdGlvbihhLGIpe20uZm5bYV09ZnVuY3Rpb24oYyxkKXt2YXIgZT1tLm1hcCh0aGlzLGIsYyk7cmV0dXJuXCJVbnRpbFwiIT09YS5zbGljZSgtNSkmJihkPWMpLGQmJlwic3RyaW5nXCI9PXR5cGVvZiBkJiYoZT1tLmZpbHRlcihkLGUpKSx0aGlzLmxlbmd0aD4xJiYoQ1thXXx8KGU9bS51bmlxdWUoZSkpLEIudGVzdChhKSYmKGU9ZS5yZXZlcnNlKCkpKSx0aGlzLnB1c2hTdGFjayhlKX19KTt2YXIgRT0vXFxTKy9nLEY9e307ZnVuY3Rpb24gRyhhKXt2YXIgYj1GW2FdPXt9O3JldHVybiBtLmVhY2goYS5tYXRjaChFKXx8W10sZnVuY3Rpb24oYSxjKXtiW2NdPSEwfSksYn1tLkNhbGxiYWNrcz1mdW5jdGlvbihhKXthPVwic3RyaW5nXCI9PXR5cGVvZiBhP0ZbYV18fEcoYSk6bS5leHRlbmQoe30sYSk7dmFyIGIsYyxkLGUsZixnLGg9W10saT0hYS5vbmNlJiZbXSxqPWZ1bmN0aW9uKGwpe2ZvcihjPWEubWVtb3J5JiZsLGQ9ITAsZj1nfHwwLGc9MCxlPWgubGVuZ3RoLGI9ITA7aCYmZT5mO2YrKylpZihoW2ZdLmFwcGx5KGxbMF0sbFsxXSk9PT0hMSYmYS5zdG9wT25GYWxzZSl7Yz0hMTticmVha31iPSExLGgmJihpP2kubGVuZ3RoJiZqKGkuc2hpZnQoKSk6Yz9oPVtdOmsuZGlzYWJsZSgpKX0saz17YWRkOmZ1bmN0aW9uKCl7aWYoaCl7dmFyIGQ9aC5sZW5ndGg7IWZ1bmN0aW9uIGYoYil7bS5lYWNoKGIsZnVuY3Rpb24oYixjKXt2YXIgZD1tLnR5cGUoYyk7XCJmdW5jdGlvblwiPT09ZD9hLnVuaXF1ZSYmay5oYXMoYyl8fGgucHVzaChjKTpjJiZjLmxlbmd0aCYmXCJzdHJpbmdcIiE9PWQmJmYoYyl9KX0oYXJndW1lbnRzKSxiP2U9aC5sZW5ndGg6YyYmKGc9ZCxqKGMpKX1yZXR1cm4gdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIGgmJm0uZWFjaChhcmd1bWVudHMsZnVuY3Rpb24oYSxjKXt2YXIgZDt3aGlsZSgoZD1tLmluQXJyYXkoYyxoLGQpKT4tMSloLnNwbGljZShkLDEpLGImJihlPj1kJiZlLS0sZj49ZCYmZi0tKX0pLHRoaXN9LGhhczpmdW5jdGlvbihhKXtyZXR1cm4gYT9tLmluQXJyYXkoYSxoKT4tMTohKCFofHwhaC5sZW5ndGgpfSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiBoPVtdLGU9MCx0aGlzfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGg9aT1jPXZvaWQgMCx0aGlzfSxkaXNhYmxlZDpmdW5jdGlvbigpe3JldHVybiFofSxsb2NrOmZ1bmN0aW9uKCl7cmV0dXJuIGk9dm9pZCAwLGN8fGsuZGlzYWJsZSgpLHRoaXN9LGxvY2tlZDpmdW5jdGlvbigpe3JldHVybiFpfSxmaXJlV2l0aDpmdW5jdGlvbihhLGMpe3JldHVybiFofHxkJiYhaXx8KGM9Y3x8W10sYz1bYSxjLnNsaWNlP2Muc2xpY2UoKTpjXSxiP2kucHVzaChjKTpqKGMpKSx0aGlzfSxmaXJlOmZ1bmN0aW9uKCl7cmV0dXJuIGsuZmlyZVdpdGgodGhpcyxhcmd1bWVudHMpLHRoaXN9LGZpcmVkOmZ1bmN0aW9uKCl7cmV0dXJuISFkfX07cmV0dXJuIGt9LG0uZXh0ZW5kKHtEZWZlcnJlZDpmdW5jdGlvbihhKXt2YXIgYj1bW1wicmVzb2x2ZVwiLFwiZG9uZVwiLG0uQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXCJyZXNvbHZlZFwiXSxbXCJyZWplY3RcIixcImZhaWxcIixtLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFwicmVqZWN0ZWRcIl0sW1wibm90aWZ5XCIsXCJwcm9ncmVzc1wiLG0uQ2FsbGJhY2tzKFwibWVtb3J5XCIpXV0sYz1cInBlbmRpbmdcIixkPXtzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBjfSxhbHdheXM6ZnVuY3Rpb24oKXtyZXR1cm4gZS5kb25lKGFyZ3VtZW50cykuZmFpbChhcmd1bWVudHMpLHRoaXN9LHRoZW46ZnVuY3Rpb24oKXt2YXIgYT1hcmd1bWVudHM7cmV0dXJuIG0uRGVmZXJyZWQoZnVuY3Rpb24oYyl7bS5lYWNoKGIsZnVuY3Rpb24oYixmKXt2YXIgZz1tLmlzRnVuY3Rpb24oYVtiXSkmJmFbYl07ZVtmWzFdXShmdW5jdGlvbigpe3ZhciBhPWcmJmcuYXBwbHkodGhpcyxhcmd1bWVudHMpO2EmJm0uaXNGdW5jdGlvbihhLnByb21pc2UpP2EucHJvbWlzZSgpLmRvbmUoYy5yZXNvbHZlKS5mYWlsKGMucmVqZWN0KS5wcm9ncmVzcyhjLm5vdGlmeSk6Y1tmWzBdK1wiV2l0aFwiXSh0aGlzPT09ZD9jLnByb21pc2UoKTp0aGlzLGc/W2FdOmFyZ3VtZW50cyl9KX0pLGE9bnVsbH0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YT9tLmV4dGVuZChhLGQpOmR9fSxlPXt9O3JldHVybiBkLnBpcGU9ZC50aGVuLG0uZWFjaChiLGZ1bmN0aW9uKGEsZil7dmFyIGc9ZlsyXSxoPWZbM107ZFtmWzFdXT1nLmFkZCxoJiZnLmFkZChmdW5jdGlvbigpe2M9aH0sYlsxXmFdWzJdLmRpc2FibGUsYlsyXVsyXS5sb2NrKSxlW2ZbMF1dPWZ1bmN0aW9uKCl7cmV0dXJuIGVbZlswXStcIldpdGhcIl0odGhpcz09PWU/ZDp0aGlzLGFyZ3VtZW50cyksdGhpc30sZVtmWzBdK1wiV2l0aFwiXT1nLmZpcmVXaXRofSksZC5wcm9taXNlKGUpLGEmJmEuY2FsbChlLGUpLGV9LHdoZW46ZnVuY3Rpb24oYSl7dmFyIGI9MCxjPWQuY2FsbChhcmd1bWVudHMpLGU9Yy5sZW5ndGgsZj0xIT09ZXx8YSYmbS5pc0Z1bmN0aW9uKGEucHJvbWlzZSk/ZTowLGc9MT09PWY/YTptLkRlZmVycmVkKCksaD1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZ1bmN0aW9uKGUpe2JbYV09dGhpcyxjW2FdPWFyZ3VtZW50cy5sZW5ndGg+MT9kLmNhbGwoYXJndW1lbnRzKTplLGM9PT1pP2cubm90aWZ5V2l0aChiLGMpOi0tZnx8Zy5yZXNvbHZlV2l0aChiLGMpfX0saSxqLGs7aWYoZT4xKWZvcihpPW5ldyBBcnJheShlKSxqPW5ldyBBcnJheShlKSxrPW5ldyBBcnJheShlKTtlPmI7YisrKWNbYl0mJm0uaXNGdW5jdGlvbihjW2JdLnByb21pc2UpP2NbYl0ucHJvbWlzZSgpLmRvbmUoaChiLGssYykpLmZhaWwoZy5yZWplY3QpLnByb2dyZXNzKGgoYixqLGkpKTotLWY7cmV0dXJuIGZ8fGcucmVzb2x2ZVdpdGgoayxjKSxnLnByb21pc2UoKX19KTt2YXIgSDttLmZuLnJlYWR5PWZ1bmN0aW9uKGEpe3JldHVybiBtLnJlYWR5LnByb21pc2UoKS5kb25lKGEpLHRoaXN9LG0uZXh0ZW5kKHtpc1JlYWR5OiExLHJlYWR5V2FpdDoxLGhvbGRSZWFkeTpmdW5jdGlvbihhKXthP20ucmVhZHlXYWl0Kys6bS5yZWFkeSghMCl9LHJlYWR5OmZ1bmN0aW9uKGEpe2lmKGE9PT0hMD8hLS1tLnJlYWR5V2FpdDohbS5pc1JlYWR5KXtpZigheS5ib2R5KXJldHVybiBzZXRUaW1lb3V0KG0ucmVhZHkpO20uaXNSZWFkeT0hMCxhIT09ITAmJi0tbS5yZWFkeVdhaXQ+MHx8KEgucmVzb2x2ZVdpdGgoeSxbbV0pLG0uZm4udHJpZ2dlckhhbmRsZXImJihtKHkpLnRyaWdnZXJIYW5kbGVyKFwicmVhZHlcIiksbSh5KS5vZmYoXCJyZWFkeVwiKSkpfX19KTtmdW5jdGlvbiBJKCl7eS5hZGRFdmVudExpc3RlbmVyPyh5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsSiwhMSksYS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLEosITEpKTooeS5kZXRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLEopLGEuZGV0YWNoRXZlbnQoXCJvbmxvYWRcIixKKSl9ZnVuY3Rpb24gSigpeyh5LmFkZEV2ZW50TGlzdGVuZXJ8fFwibG9hZFwiPT09ZXZlbnQudHlwZXx8XCJjb21wbGV0ZVwiPT09eS5yZWFkeVN0YXRlKSYmKEkoKSxtLnJlYWR5KCkpfW0ucmVhZHkucHJvbWlzZT1mdW5jdGlvbihiKXtpZighSClpZihIPW0uRGVmZXJyZWQoKSxcImNvbXBsZXRlXCI9PT15LnJlYWR5U3RhdGUpc2V0VGltZW91dChtLnJlYWR5KTtlbHNlIGlmKHkuYWRkRXZlbnRMaXN0ZW5lcil5LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsSiwhMSksYS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLEosITEpO2Vsc2V7eS5hdHRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLEopLGEuYXR0YWNoRXZlbnQoXCJvbmxvYWRcIixKKTt2YXIgYz0hMTt0cnl7Yz1udWxsPT1hLmZyYW1lRWxlbWVudCYmeS5kb2N1bWVudEVsZW1lbnR9Y2F0Y2goZCl7fWMmJmMuZG9TY3JvbGwmJiFmdW5jdGlvbiBlKCl7aWYoIW0uaXNSZWFkeSl7dHJ5e2MuZG9TY3JvbGwoXCJsZWZ0XCIpfWNhdGNoKGEpe3JldHVybiBzZXRUaW1lb3V0KGUsNTApfUkoKSxtLnJlYWR5KCl9fSgpfXJldHVybiBILnByb21pc2UoYil9O3ZhciBLPVwidW5kZWZpbmVkXCIsTDtmb3IoTCBpbiBtKGspKWJyZWFrO2sub3duTGFzdD1cIjBcIiE9PUwsay5pbmxpbmVCbG9ja05lZWRzTGF5b3V0PSExLG0oZnVuY3Rpb24oKXt2YXIgYSxiLGMsZDtjPXkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLGMmJmMuc3R5bGUmJihiPXkuY3JlYXRlRWxlbWVudChcImRpdlwiKSxkPXkuY3JlYXRlRWxlbWVudChcImRpdlwiKSxkLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweFwiLGMuYXBwZW5kQ2hpbGQoZCkuYXBwZW5kQ2hpbGQoYiksdHlwZW9mIGIuc3R5bGUuem9vbSE9PUsmJihiLnN0eWxlLmNzc1RleHQ9XCJkaXNwbGF5OmlubGluZTttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjFweDt3aWR0aDoxcHg7em9vbToxXCIsay5pbmxpbmVCbG9ja05lZWRzTGF5b3V0PWE9Mz09PWIub2Zmc2V0V2lkdGgsYSYmKGMuc3R5bGUuem9vbT0xKSksYy5yZW1vdmVDaGlsZChkKSl9KSxmdW5jdGlvbigpe3ZhciBhPXkuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZihudWxsPT1rLmRlbGV0ZUV4cGFuZG8pe2suZGVsZXRlRXhwYW5kbz0hMDt0cnl7ZGVsZXRlIGEudGVzdH1jYXRjaChiKXtrLmRlbGV0ZUV4cGFuZG89ITF9fWE9bnVsbH0oKSxtLmFjY2VwdERhdGE9ZnVuY3Rpb24oYSl7dmFyIGI9bS5ub0RhdGFbKGEubm9kZU5hbWUrXCIgXCIpLnRvTG93ZXJDYXNlKCldLGM9K2Eubm9kZVR5cGV8fDE7cmV0dXJuIDEhPT1jJiY5IT09Yz8hMTohYnx8YiE9PSEwJiZhLmdldEF0dHJpYnV0ZShcImNsYXNzaWRcIik9PT1ifTt2YXIgTT0vXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sTj0vKFtBLVpdKS9nO2Z1bmN0aW9uIE8oYSxiLGMpe2lmKHZvaWQgMD09PWMmJjE9PT1hLm5vZGVUeXBlKXt2YXIgZD1cImRhdGEtXCIrYi5yZXBsYWNlKE4sXCItJDFcIikudG9Mb3dlckNhc2UoKTtpZihjPWEuZ2V0QXR0cmlidXRlKGQpLFwic3RyaW5nXCI9PXR5cGVvZiBjKXt0cnl7Yz1cInRydWVcIj09PWM/ITA6XCJmYWxzZVwiPT09Yz8hMTpcIm51bGxcIj09PWM/bnVsbDorYytcIlwiPT09Yz8rYzpNLnRlc3QoYyk/bS5wYXJzZUpTT04oYyk6Y31jYXRjaChlKXt9bS5kYXRhKGEsYixjKX1lbHNlIGM9dm9pZCAwfXJldHVybiBjfWZ1bmN0aW9uIFAoYSl7dmFyIGI7Zm9yKGIgaW4gYSlpZigoXCJkYXRhXCIhPT1ifHwhbS5pc0VtcHR5T2JqZWN0KGFbYl0pKSYmXCJ0b0pTT05cIiE9PWIpcmV0dXJuITE7XG5yZXR1cm4hMH1mdW5jdGlvbiBRKGEsYixkLGUpe2lmKG0uYWNjZXB0RGF0YShhKSl7dmFyIGYsZyxoPW0uZXhwYW5kbyxpPWEubm9kZVR5cGUsaj1pP20uY2FjaGU6YSxrPWk/YVtoXTphW2hdJiZoO2lmKGsmJmpba10mJihlfHxqW2tdLmRhdGEpfHx2b2lkIDAhPT1kfHxcInN0cmluZ1wiIT10eXBlb2YgYilyZXR1cm4ga3x8KGs9aT9hW2hdPWMucG9wKCl8fG0uZ3VpZCsrOmgpLGpba118fChqW2tdPWk/e306e3RvSlNPTjptLm5vb3B9KSwoXCJvYmplY3RcIj09dHlwZW9mIGJ8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGIpJiYoZT9qW2tdPW0uZXh0ZW5kKGpba10sYik6altrXS5kYXRhPW0uZXh0ZW5kKGpba10uZGF0YSxiKSksZz1qW2tdLGV8fChnLmRhdGF8fChnLmRhdGE9e30pLGc9Zy5kYXRhKSx2b2lkIDAhPT1kJiYoZ1ttLmNhbWVsQ2FzZShiKV09ZCksXCJzdHJpbmdcIj09dHlwZW9mIGI/KGY9Z1tiXSxudWxsPT1mJiYoZj1nW20uY2FtZWxDYXNlKGIpXSkpOmY9ZyxmfX1mdW5jdGlvbiBSKGEsYixjKXtpZihtLmFjY2VwdERhdGEoYSkpe3ZhciBkLGUsZj1hLm5vZGVUeXBlLGc9Zj9tLmNhY2hlOmEsaD1mP2FbbS5leHBhbmRvXTptLmV4cGFuZG87aWYoZ1toXSl7aWYoYiYmKGQ9Yz9nW2hdOmdbaF0uZGF0YSkpe20uaXNBcnJheShiKT9iPWIuY29uY2F0KG0ubWFwKGIsbS5jYW1lbENhc2UpKTpiIGluIGQ/Yj1bYl06KGI9bS5jYW1lbENhc2UoYiksYj1iIGluIGQ/W2JdOmIuc3BsaXQoXCIgXCIpKSxlPWIubGVuZ3RoO3doaWxlKGUtLSlkZWxldGUgZFtiW2VdXTtpZihjPyFQKGQpOiFtLmlzRW1wdHlPYmplY3QoZCkpcmV0dXJufShjfHwoZGVsZXRlIGdbaF0uZGF0YSxQKGdbaF0pKSkmJihmP20uY2xlYW5EYXRhKFthXSwhMCk6ay5kZWxldGVFeHBhbmRvfHxnIT1nLndpbmRvdz9kZWxldGUgZ1toXTpnW2hdPW51bGwpfX19bS5leHRlbmQoe2NhY2hlOnt9LG5vRGF0YTp7XCJhcHBsZXQgXCI6ITAsXCJlbWJlZCBcIjohMCxcIm9iamVjdCBcIjpcImNsc2lkOkQyN0NEQjZFLUFFNkQtMTFjZi05NkI4LTQ0NDU1MzU0MDAwMFwifSxoYXNEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiBhPWEubm9kZVR5cGU/bS5jYWNoZVthW20uZXhwYW5kb11dOmFbbS5leHBhbmRvXSwhIWEmJiFQKGEpfSxkYXRhOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUShhLGIsYyl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUihhLGIpfSxfZGF0YTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFEoYSxiLGMsITApfSxfcmVtb3ZlRGF0YTpmdW5jdGlvbihhLGIpe3JldHVybiBSKGEsYiwhMCl9fSksbS5mbi5leHRlbmQoe2RhdGE6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZj10aGlzWzBdLGc9ZiYmZi5hdHRyaWJ1dGVzO2lmKHZvaWQgMD09PWEpe2lmKHRoaXMubGVuZ3RoJiYoZT1tLmRhdGEoZiksMT09PWYubm9kZVR5cGUmJiFtLl9kYXRhKGYsXCJwYXJzZWRBdHRyc1wiKSkpe2M9Zy5sZW5ndGg7d2hpbGUoYy0tKWdbY10mJihkPWdbY10ubmFtZSwwPT09ZC5pbmRleE9mKFwiZGF0YS1cIikmJihkPW0uY2FtZWxDYXNlKGQuc2xpY2UoNSkpLE8oZixkLGVbZF0pKSk7bS5fZGF0YShmLFwicGFyc2VkQXR0cnNcIiwhMCl9cmV0dXJuIGV9cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGE/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7bS5kYXRhKHRoaXMsYSl9KTphcmd1bWVudHMubGVuZ3RoPjE/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7bS5kYXRhKHRoaXMsYSxiKX0pOmY/TyhmLGEsbS5kYXRhKGYsYSkpOnZvaWQgMH0scmVtb3ZlRGF0YTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7bS5yZW1vdmVEYXRhKHRoaXMsYSl9KX19KSxtLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO3JldHVybiBhPyhiPShifHxcImZ4XCIpK1wicXVldWVcIixkPW0uX2RhdGEoYSxiKSxjJiYoIWR8fG0uaXNBcnJheShjKT9kPW0uX2RhdGEoYSxiLG0ubWFrZUFycmF5KGMpKTpkLnB1c2goYykpLGR8fFtdKTp2b2lkIDB9LGRlcXVldWU6ZnVuY3Rpb24oYSxiKXtiPWJ8fFwiZnhcIjt2YXIgYz1tLnF1ZXVlKGEsYiksZD1jLmxlbmd0aCxlPWMuc2hpZnQoKSxmPW0uX3F1ZXVlSG9va3MoYSxiKSxnPWZ1bmN0aW9uKCl7bS5kZXF1ZXVlKGEsYil9O1wiaW5wcm9ncmVzc1wiPT09ZSYmKGU9Yy5zaGlmdCgpLGQtLSksZSYmKFwiZnhcIj09PWImJmMudW5zaGlmdChcImlucHJvZ3Jlc3NcIiksZGVsZXRlIGYuc3RvcCxlLmNhbGwoYSxnLGYpKSwhZCYmZiYmZi5lbXB0eS5maXJlKCl9LF9xdWV1ZUhvb2tzOmZ1bmN0aW9uKGEsYil7dmFyIGM9YitcInF1ZXVlSG9va3NcIjtyZXR1cm4gbS5fZGF0YShhLGMpfHxtLl9kYXRhKGEsYyx7ZW1wdHk6bS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKXttLl9yZW1vdmVEYXRhKGEsYitcInF1ZXVlXCIpLG0uX3JlbW92ZURhdGEoYSxjKX0pfSl9fSksbS5mbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9MjtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgYSYmKGI9YSxhPVwiZnhcIixjLS0pLGFyZ3VtZW50cy5sZW5ndGg8Yz9tLnF1ZXVlKHRoaXNbMF0sYSk6dm9pZCAwPT09Yj90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBjPW0ucXVldWUodGhpcyxhLGIpO20uX3F1ZXVlSG9va3ModGhpcyxhKSxcImZ4XCI9PT1hJiZcImlucHJvZ3Jlc3NcIiE9PWNbMF0mJm0uZGVxdWV1ZSh0aGlzLGEpfSl9LGRlcXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe20uZGVxdWV1ZSh0aGlzLGEpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucXVldWUoYXx8XCJmeFwiLFtdKX0scHJvbWlzZTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MSxlPW0uRGVmZXJyZWQoKSxmPXRoaXMsZz10aGlzLmxlbmd0aCxoPWZ1bmN0aW9uKCl7LS1kfHxlLnJlc29sdmVXaXRoKGYsW2ZdKX07XCJzdHJpbmdcIiE9dHlwZW9mIGEmJihiPWEsYT12b2lkIDApLGE9YXx8XCJmeFwiO3doaWxlKGctLSljPW0uX2RhdGEoZltnXSxhK1wicXVldWVIb29rc1wiKSxjJiZjLmVtcHR5JiYoZCsrLGMuZW1wdHkuYWRkKGgpKTtyZXR1cm4gaCgpLGUucHJvbWlzZShiKX19KTt2YXIgUz0vWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsVD1bXCJUb3BcIixcIlJpZ2h0XCIsXCJCb3R0b21cIixcIkxlZnRcIl0sVT1mdW5jdGlvbihhLGIpe3JldHVybiBhPWJ8fGEsXCJub25lXCI9PT1tLmNzcyhhLFwiZGlzcGxheVwiKXx8IW0uY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpfSxWPW0uYWNjZXNzPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3ZhciBoPTAsaT1hLmxlbmd0aCxqPW51bGw9PWM7aWYoXCJvYmplY3RcIj09PW0udHlwZShjKSl7ZT0hMDtmb3IoaCBpbiBjKW0uYWNjZXNzKGEsYixoLGNbaF0sITAsZixnKX1lbHNlIGlmKHZvaWQgMCE9PWQmJihlPSEwLG0uaXNGdW5jdGlvbihkKXx8KGc9ITApLGomJihnPyhiLmNhbGwoYSxkKSxiPW51bGwpOihqPWIsYj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGouY2FsbChtKGEpLGMpfSkpLGIpKWZvcig7aT5oO2grKyliKGFbaF0sYyxnP2Q6ZC5jYWxsKGFbaF0saCxiKGFbaF0sYykpKTtyZXR1cm4gZT9hOmo/Yi5jYWxsKGEpOmk/YihhWzBdLGMpOmZ9LFc9L14oPzpjaGVja2JveHxyYWRpbykkL2k7IWZ1bmN0aW9uKCl7dmFyIGE9eS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYj15LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYz15LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtpZihiLmlubmVySFRNTD1cIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPlwiLGsubGVhZGluZ1doaXRlc3BhY2U9Mz09PWIuZmlyc3RDaGlsZC5ub2RlVHlwZSxrLnRib2R5PSFiLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIikubGVuZ3RoLGsuaHRtbFNlcmlhbGl6ZT0hIWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpLmxlbmd0aCxrLmh0bWw1Q2xvbmU9XCI8Om5hdj48LzpuYXY+XCIhPT15LmNyZWF0ZUVsZW1lbnQoXCJuYXZcIikuY2xvbmVOb2RlKCEwKS5vdXRlckhUTUwsYS50eXBlPVwiY2hlY2tib3hcIixhLmNoZWNrZWQ9ITAsYy5hcHBlbmRDaGlsZChhKSxrLmFwcGVuZENoZWNrZWQ9YS5jaGVja2VkLGIuaW5uZXJIVE1MPVwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiLGsubm9DbG9uZUNoZWNrZWQ9ISFiLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZSxjLmFwcGVuZENoaWxkKGIpLGIuaW5uZXJIVE1MPVwiPGlucHV0IHR5cGU9J3JhZGlvJyBjaGVja2VkPSdjaGVja2VkJyBuYW1lPSd0Jy8+XCIsay5jaGVja0Nsb25lPWIuY2xvbmVOb2RlKCEwKS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5jaGVja2VkLGsubm9DbG9uZUV2ZW50PSEwLGIuYXR0YWNoRXZlbnQmJihiLmF0dGFjaEV2ZW50KFwib25jbGlja1wiLGZ1bmN0aW9uKCl7ay5ub0Nsb25lRXZlbnQ9ITF9KSxiLmNsb25lTm9kZSghMCkuY2xpY2soKSksbnVsbD09ay5kZWxldGVFeHBhbmRvKXtrLmRlbGV0ZUV4cGFuZG89ITA7dHJ5e2RlbGV0ZSBiLnRlc3R9Y2F0Y2goZCl7ay5kZWxldGVFeHBhbmRvPSExfX19KCksZnVuY3Rpb24oKXt2YXIgYixjLGQ9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2ZvcihiIGlue3N1Ym1pdDohMCxjaGFuZ2U6ITAsZm9jdXNpbjohMH0pYz1cIm9uXCIrYiwoa1tiK1wiQnViYmxlc1wiXT1jIGluIGEpfHwoZC5zZXRBdHRyaWJ1dGUoYyxcInRcIiksa1tiK1wiQnViYmxlc1wiXT1kLmF0dHJpYnV0ZXNbY10uZXhwYW5kbz09PSExKTtkPW51bGx9KCk7dmFyIFg9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWEpJC9pLFk9L15rZXkvLFo9L14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51KXxjbGljay8sJD0vXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXz0vXihbXi5dKikoPzpcXC4oLispfCkkLztmdW5jdGlvbiBhYigpe3JldHVybiEwfWZ1bmN0aW9uIGJiKCl7cmV0dXJuITF9ZnVuY3Rpb24gY2IoKXt0cnl7cmV0dXJuIHkuYWN0aXZlRWxlbWVudH1jYXRjaChhKXt9fW0uZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnLGgsaSxqLGssbCxuLG8scCxxLHI9bS5fZGF0YShhKTtpZihyKXtjLmhhbmRsZXImJihpPWMsYz1pLmhhbmRsZXIsZT1pLnNlbGVjdG9yKSxjLmd1aWR8fChjLmd1aWQ9bS5ndWlkKyspLChnPXIuZXZlbnRzKXx8KGc9ci5ldmVudHM9e30pLChrPXIuaGFuZGxlKXx8KGs9ci5oYW5kbGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHR5cGVvZiBtPT09S3x8YSYmbS5ldmVudC50cmlnZ2VyZWQ9PT1hLnR5cGU/dm9pZCAwOm0uZXZlbnQuZGlzcGF0Y2guYXBwbHkoay5lbGVtLGFyZ3VtZW50cyl9LGsuZWxlbT1hKSxiPShifHxcIlwiKS5tYXRjaChFKXx8W1wiXCJdLGg9Yi5sZW5ndGg7d2hpbGUoaC0tKWY9Xy5leGVjKGJbaF0pfHxbXSxvPXE9ZlsxXSxwPShmWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG8mJihqPW0uZXZlbnQuc3BlY2lhbFtvXXx8e30sbz0oZT9qLmRlbGVnYXRlVHlwZTpqLmJpbmRUeXBlKXx8byxqPW0uZXZlbnQuc3BlY2lhbFtvXXx8e30sbD1tLmV4dGVuZCh7dHlwZTpvLG9yaWdUeXBlOnEsZGF0YTpkLGhhbmRsZXI6YyxndWlkOmMuZ3VpZCxzZWxlY3RvcjplLG5lZWRzQ29udGV4dDplJiZtLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoZSksbmFtZXNwYWNlOnAuam9pbihcIi5cIil9LGkpLChuPWdbb10pfHwobj1nW29dPVtdLG4uZGVsZWdhdGVDb3VudD0wLGouc2V0dXAmJmouc2V0dXAuY2FsbChhLGQscCxrKSE9PSExfHwoYS5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihvLGssITEpOmEuYXR0YWNoRXZlbnQmJmEuYXR0YWNoRXZlbnQoXCJvblwiK28saykpKSxqLmFkZCYmKGouYWRkLmNhbGwoYSxsKSxsLmhhbmRsZXIuZ3VpZHx8KGwuaGFuZGxlci5ndWlkPWMuZ3VpZCkpLGU/bi5zcGxpY2Uobi5kZWxlZ2F0ZUNvdW50KyssMCxsKTpuLnB1c2gobCksbS5ldmVudC5nbG9iYWxbb109ITApO2E9bnVsbH19LHJlbW92ZTpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGcsaCxpLGosayxsLG4sbyxwLHEscj1tLmhhc0RhdGEoYSkmJm0uX2RhdGEoYSk7aWYociYmKGs9ci5ldmVudHMpKXtiPShifHxcIlwiKS5tYXRjaChFKXx8W1wiXCJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWlmKGg9Xy5leGVjKGJbal0pfHxbXSxvPXE9aFsxXSxwPShoWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG8pe2w9bS5ldmVudC5zcGVjaWFsW29dfHx7fSxvPShkP2wuZGVsZWdhdGVUeXBlOmwuYmluZFR5cGUpfHxvLG49a1tvXXx8W10saD1oWzJdJiZuZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrcC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIiksaT1mPW4ubGVuZ3RoO3doaWxlKGYtLSlnPW5bZl0sIWUmJnEhPT1nLm9yaWdUeXBlfHxjJiZjLmd1aWQhPT1nLmd1aWR8fGgmJiFoLnRlc3QoZy5uYW1lc3BhY2UpfHxkJiZkIT09Zy5zZWxlY3RvciYmKFwiKipcIiE9PWR8fCFnLnNlbGVjdG9yKXx8KG4uc3BsaWNlKGYsMSksZy5zZWxlY3RvciYmbi5kZWxlZ2F0ZUNvdW50LS0sbC5yZW1vdmUmJmwucmVtb3ZlLmNhbGwoYSxnKSk7aSYmIW4ubGVuZ3RoJiYobC50ZWFyZG93biYmbC50ZWFyZG93bi5jYWxsKGEscCxyLmhhbmRsZSkhPT0hMXx8bS5yZW1vdmVFdmVudChhLG8sci5oYW5kbGUpLGRlbGV0ZSBrW29dKX1lbHNlIGZvcihvIGluIGspbS5ldmVudC5yZW1vdmUoYSxvK2Jbal0sYyxkLCEwKTttLmlzRW1wdHlPYmplY3QoaykmJihkZWxldGUgci5oYW5kbGUsbS5fcmVtb3ZlRGF0YShhLFwiZXZlbnRzXCIpKX19LHRyaWdnZXI6ZnVuY3Rpb24oYixjLGQsZSl7dmFyIGYsZyxoLGksayxsLG4sbz1bZHx8eV0scD1qLmNhbGwoYixcInR5cGVcIik/Yi50eXBlOmIscT1qLmNhbGwoYixcIm5hbWVzcGFjZVwiKT9iLm5hbWVzcGFjZS5zcGxpdChcIi5cIik6W107aWYoaD1sPWQ9ZHx8eSwzIT09ZC5ub2RlVHlwZSYmOCE9PWQubm9kZVR5cGUmJiEkLnRlc3QocCttLmV2ZW50LnRyaWdnZXJlZCkmJihwLmluZGV4T2YoXCIuXCIpPj0wJiYocT1wLnNwbGl0KFwiLlwiKSxwPXEuc2hpZnQoKSxxLnNvcnQoKSksZz1wLmluZGV4T2YoXCI6XCIpPDAmJlwib25cIitwLGI9YlttLmV4cGFuZG9dP2I6bmV3IG0uRXZlbnQocCxcIm9iamVjdFwiPT10eXBlb2YgYiYmYiksYi5pc1RyaWdnZXI9ZT8yOjMsYi5uYW1lc3BhY2U9cS5qb2luKFwiLlwiKSxiLm5hbWVzcGFjZV9yZT1iLm5hbWVzcGFjZT9uZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrcS5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIik6bnVsbCxiLnJlc3VsdD12b2lkIDAsYi50YXJnZXR8fChiLnRhcmdldD1kKSxjPW51bGw9PWM/W2JdOm0ubWFrZUFycmF5KGMsW2JdKSxrPW0uZXZlbnQuc3BlY2lhbFtwXXx8e30sZXx8IWsudHJpZ2dlcnx8ay50cmlnZ2VyLmFwcGx5KGQsYykhPT0hMSkpe2lmKCFlJiYhay5ub0J1YmJsZSYmIW0uaXNXaW5kb3coZCkpe2ZvcihpPWsuZGVsZWdhdGVUeXBlfHxwLCQudGVzdChpK3ApfHwoaD1oLnBhcmVudE5vZGUpO2g7aD1oLnBhcmVudE5vZGUpby5wdXNoKGgpLGw9aDtsPT09KGQub3duZXJEb2N1bWVudHx8eSkmJm8ucHVzaChsLmRlZmF1bHRWaWV3fHxsLnBhcmVudFdpbmRvd3x8YSl9bj0wO3doaWxlKChoPW9bbisrXSkmJiFiLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYi50eXBlPW4+MT9pOmsuYmluZFR5cGV8fHAsZj0obS5fZGF0YShoLFwiZXZlbnRzXCIpfHx7fSlbYi50eXBlXSYmbS5fZGF0YShoLFwiaGFuZGxlXCIpLGYmJmYuYXBwbHkoaCxjKSxmPWcmJmhbZ10sZiYmZi5hcHBseSYmbS5hY2NlcHREYXRhKGgpJiYoYi5yZXN1bHQ9Zi5hcHBseShoLGMpLGIucmVzdWx0PT09ITEmJmIucHJldmVudERlZmF1bHQoKSk7aWYoYi50eXBlPXAsIWUmJiFiLmlzRGVmYXVsdFByZXZlbnRlZCgpJiYoIWsuX2RlZmF1bHR8fGsuX2RlZmF1bHQuYXBwbHkoby5wb3AoKSxjKT09PSExKSYmbS5hY2NlcHREYXRhKGQpJiZnJiZkW3BdJiYhbS5pc1dpbmRvdyhkKSl7bD1kW2ddLGwmJihkW2ddPW51bGwpLG0uZXZlbnQudHJpZ2dlcmVkPXA7dHJ5e2RbcF0oKX1jYXRjaChyKXt9bS5ldmVudC50cmlnZ2VyZWQ9dm9pZCAwLGwmJihkW2ddPWwpfXJldHVybiBiLnJlc3VsdH19LGRpc3BhdGNoOmZ1bmN0aW9uKGEpe2E9bS5ldmVudC5maXgoYSk7dmFyIGIsYyxlLGYsZyxoPVtdLGk9ZC5jYWxsKGFyZ3VtZW50cyksaj0obS5fZGF0YSh0aGlzLFwiZXZlbnRzXCIpfHx7fSlbYS50eXBlXXx8W10saz1tLmV2ZW50LnNwZWNpYWxbYS50eXBlXXx8e307aWYoaVswXT1hLGEuZGVsZWdhdGVUYXJnZXQ9dGhpcywhay5wcmVEaXNwYXRjaHx8ay5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsYSkhPT0hMSl7aD1tLmV2ZW50LmhhbmRsZXJzLmNhbGwodGhpcyxhLGopLGI9MDt3aGlsZSgoZj1oW2IrK10pJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKXthLmN1cnJlbnRUYXJnZXQ9Zi5lbGVtLGc9MDt3aGlsZSgoZT1mLmhhbmRsZXJzW2crK10pJiYhYS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSghYS5uYW1lc3BhY2VfcmV8fGEubmFtZXNwYWNlX3JlLnRlc3QoZS5uYW1lc3BhY2UpKSYmKGEuaGFuZGxlT2JqPWUsYS5kYXRhPWUuZGF0YSxjPSgobS5ldmVudC5zcGVjaWFsW2Uub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxlLmhhbmRsZXIpLmFwcGx5KGYuZWxlbSxpKSx2b2lkIDAhPT1jJiYoYS5yZXN1bHQ9Yyk9PT0hMSYmKGEucHJldmVudERlZmF1bHQoKSxhLnN0b3BQcm9wYWdhdGlvbigpKSl9cmV0dXJuIGsucG9zdERpc3BhdGNoJiZrLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsYSksYS5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmLGc9W10saD1iLmRlbGVnYXRlQ291bnQsaT1hLnRhcmdldDtpZihoJiZpLm5vZGVUeXBlJiYoIWEuYnV0dG9ufHxcImNsaWNrXCIhPT1hLnR5cGUpKWZvcig7aSE9dGhpcztpPWkucGFyZW50Tm9kZXx8dGhpcylpZigxPT09aS5ub2RlVHlwZSYmKGkuZGlzYWJsZWQhPT0hMHx8XCJjbGlja1wiIT09YS50eXBlKSl7Zm9yKGU9W10sZj0wO2g+ZjtmKyspZD1iW2ZdLGM9ZC5zZWxlY3RvcitcIiBcIix2b2lkIDA9PT1lW2NdJiYoZVtjXT1kLm5lZWRzQ29udGV4dD9tKGMsdGhpcykuaW5kZXgoaSk+PTA6bS5maW5kKGMsdGhpcyxudWxsLFtpXSkubGVuZ3RoKSxlW2NdJiZlLnB1c2goZCk7ZS5sZW5ndGgmJmcucHVzaCh7ZWxlbTppLGhhbmRsZXJzOmV9KX1yZXR1cm4gaDxiLmxlbmd0aCYmZy5wdXNoKHtlbGVtOnRoaXMsaGFuZGxlcnM6Yi5zbGljZShoKX0pLGd9LGZpeDpmdW5jdGlvbihhKXtpZihhW20uZXhwYW5kb10pcmV0dXJuIGE7dmFyIGIsYyxkLGU9YS50eXBlLGY9YSxnPXRoaXMuZml4SG9va3NbZV07Z3x8KHRoaXMuZml4SG9va3NbZV09Zz1aLnRlc3QoZSk/dGhpcy5tb3VzZUhvb2tzOlkudGVzdChlKT90aGlzLmtleUhvb2tzOnt9KSxkPWcucHJvcHM/dGhpcy5wcm9wcy5jb25jYXQoZy5wcm9wcyk6dGhpcy5wcm9wcyxhPW5ldyBtLkV2ZW50KGYpLGI9ZC5sZW5ndGg7d2hpbGUoYi0tKWM9ZFtiXSxhW2NdPWZbY107cmV0dXJuIGEudGFyZ2V0fHwoYS50YXJnZXQ9Zi5zcmNFbGVtZW50fHx5KSwzPT09YS50YXJnZXQubm9kZVR5cGUmJihhLnRhcmdldD1hLnRhcmdldC5wYXJlbnROb2RlKSxhLm1ldGFLZXk9ISFhLm1ldGFLZXksZy5maWx0ZXI/Zy5maWx0ZXIoYSxmKTphfSxwcm9wczpcImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiLnNwbGl0KFwiIFwiKSxmaXhIb29rczp7fSxrZXlIb29rczp7cHJvcHM6XCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoXCIgXCIpLGZpbHRlcjpmdW5jdGlvbihhLGIpe3JldHVybiBudWxsPT1hLndoaWNoJiYoYS53aGljaD1udWxsIT1iLmNoYXJDb2RlP2IuY2hhckNvZGU6Yi5rZXlDb2RlKSxhfX0sbW91c2VIb29rczp7cHJvcHM6XCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgZnJvbUVsZW1lbnQgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIi5zcGxpdChcIiBcIiksZmlsdGVyOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGY9Yi5idXR0b24sZz1iLmZyb21FbGVtZW50O3JldHVybiBudWxsPT1hLnBhZ2VYJiZudWxsIT1iLmNsaWVudFgmJihkPWEudGFyZ2V0Lm93bmVyRG9jdW1lbnR8fHksZT1kLmRvY3VtZW50RWxlbWVudCxjPWQuYm9keSxhLnBhZ2VYPWIuY2xpZW50WCsoZSYmZS5zY3JvbGxMZWZ0fHxjJiZjLnNjcm9sbExlZnR8fDApLShlJiZlLmNsaWVudExlZnR8fGMmJmMuY2xpZW50TGVmdHx8MCksYS5wYWdlWT1iLmNsaWVudFkrKGUmJmUuc2Nyb2xsVG9wfHxjJiZjLnNjcm9sbFRvcHx8MCktKGUmJmUuY2xpZW50VG9wfHxjJiZjLmNsaWVudFRvcHx8MCkpLCFhLnJlbGF0ZWRUYXJnZXQmJmcmJihhLnJlbGF0ZWRUYXJnZXQ9Zz09PWEudGFyZ2V0P2IudG9FbGVtZW50OmcpLGEud2hpY2h8fHZvaWQgMD09PWZ8fChhLndoaWNoPTEmZj8xOjImZj8zOjQmZj8yOjApLGF9fSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sZm9jdXM6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzIT09Y2IoKSYmdGhpcy5mb2N1cyl0cnl7cmV0dXJuIHRoaXMuZm9jdXMoKSwhMX1jYXRjaChhKXt9fSxkZWxlZ2F0ZVR5cGU6XCJmb2N1c2luXCJ9LGJsdXI6e3RyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcz09PWNiKCkmJnRoaXMuYmx1cj8odGhpcy5ibHVyKCksITEpOnZvaWQgMH0sZGVsZWdhdGVUeXBlOlwiZm9jdXNvdXRcIn0sY2xpY2s6e3RyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbS5ub2RlTmFtZSh0aGlzLFwiaW5wdXRcIikmJlwiY2hlY2tib3hcIj09PXRoaXMudHlwZSYmdGhpcy5jbGljaz8odGhpcy5jbGljaygpLCExKTp2b2lkIDB9LF9kZWZhdWx0OmZ1bmN0aW9uKGEpe3JldHVybiBtLm5vZGVOYW1lKGEudGFyZ2V0LFwiYVwiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGEpe3ZvaWQgMCE9PWEucmVzdWx0JiZhLm9yaWdpbmFsRXZlbnQmJihhLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9YS5yZXN1bHQpfX19LHNpbXVsYXRlOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPW0uZXh0ZW5kKG5ldyBtLkV2ZW50LGMse3R5cGU6YSxpc1NpbXVsYXRlZDohMCxvcmlnaW5hbEV2ZW50Ont9fSk7ZD9tLmV2ZW50LnRyaWdnZXIoZSxudWxsLGIpOm0uZXZlbnQuZGlzcGF0Y2guY2FsbChiLGUpLGUuaXNEZWZhdWx0UHJldmVudGVkKCkmJmMucHJldmVudERlZmF1bHQoKX19LG0ucmVtb3ZlRXZlbnQ9eS5yZW1vdmVFdmVudExpc3RlbmVyP2Z1bmN0aW9uKGEsYixjKXthLnJlbW92ZUV2ZW50TGlzdGVuZXImJmEucmVtb3ZlRXZlbnRMaXN0ZW5lcihiLGMsITEpfTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9XCJvblwiK2I7YS5kZXRhY2hFdmVudCYmKHR5cGVvZiBhW2RdPT09SyYmKGFbZF09bnVsbCksYS5kZXRhY2hFdmVudChkLGMpKX0sbS5FdmVudD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzIGluc3RhbmNlb2YgbS5FdmVudD8oYSYmYS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9YSx0aGlzLnR5cGU9YS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWEuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09YS5kZWZhdWx0UHJldmVudGVkJiZhLnJldHVyblZhbHVlPT09ITE/YWI6YmIpOnRoaXMudHlwZT1hLGImJm0uZXh0ZW5kKHRoaXMsYiksdGhpcy50aW1lU3RhbXA9YSYmYS50aW1lU3RhbXB8fG0ubm93KCksdm9pZCh0aGlzW20uZXhwYW5kb109ITApKTpuZXcgbS5FdmVudChhLGIpfSxtLkV2ZW50LnByb3RvdHlwZT17aXNEZWZhdWx0UHJldmVudGVkOmJiLGlzUHJvcGFnYXRpb25TdG9wcGVkOmJiLGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOmJiLHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPWFiLGEmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTphLnJldHVyblZhbHVlPSExKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YWIsYSYmKGEuc3RvcFByb3BhZ2F0aW9uJiZhLnN0b3BQcm9wYWdhdGlvbigpLGEuY2FuY2VsQnViYmxlPSEwKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9YWIsYSYmYS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24mJmEuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LG0uZWFjaCh7bW91c2VlbnRlcjpcIm1vdXNlb3ZlclwiLG1vdXNlbGVhdmU6XCJtb3VzZW91dFwiLHBvaW50ZXJlbnRlcjpcInBvaW50ZXJvdmVyXCIscG9pbnRlcmxlYXZlOlwicG9pbnRlcm91dFwifSxmdW5jdGlvbihhLGIpe20uZXZlbnQuc3BlY2lhbFthXT17ZGVsZWdhdGVUeXBlOmIsYmluZFR5cGU6YixoYW5kbGU6ZnVuY3Rpb24oYSl7dmFyIGMsZD10aGlzLGU9YS5yZWxhdGVkVGFyZ2V0LGY9YS5oYW5kbGVPYmo7cmV0dXJuKCFlfHxlIT09ZCYmIW0uY29udGFpbnMoZCxlKSkmJihhLnR5cGU9Zi5vcmlnVHlwZSxjPWYuaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksYS50eXBlPWIpLGN9fX0pLGsuc3VibWl0QnViYmxlc3x8KG0uZXZlbnQuc3BlY2lhbC5zdWJtaXQ9e3NldHVwOmZ1bmN0aW9uKCl7cmV0dXJuIG0ubm9kZU5hbWUodGhpcyxcImZvcm1cIik/ITE6dm9pZCBtLmV2ZW50LmFkZCh0aGlzLFwiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0XCIsZnVuY3Rpb24oYSl7dmFyIGI9YS50YXJnZXQsYz1tLm5vZGVOYW1lKGIsXCJpbnB1dFwiKXx8bS5ub2RlTmFtZShiLFwiYnV0dG9uXCIpP2IuZm9ybTp2b2lkIDA7YyYmIW0uX2RhdGEoYyxcInN1Ym1pdEJ1YmJsZXNcIikmJihtLmV2ZW50LmFkZChjLFwic3VibWl0Ll9zdWJtaXRcIixmdW5jdGlvbihhKXthLl9zdWJtaXRfYnViYmxlPSEwfSksbS5fZGF0YShjLFwic3VibWl0QnViYmxlc1wiLCEwKSl9KX0scG9zdERpc3BhdGNoOmZ1bmN0aW9uKGEpe2EuX3N1Ym1pdF9idWJibGUmJihkZWxldGUgYS5fc3VibWl0X2J1YmJsZSx0aGlzLnBhcmVudE5vZGUmJiFhLmlzVHJpZ2dlciYmbS5ldmVudC5zaW11bGF0ZShcInN1Ym1pdFwiLHRoaXMucGFyZW50Tm9kZSxhLCEwKSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7cmV0dXJuIG0ubm9kZU5hbWUodGhpcyxcImZvcm1cIik/ITE6dm9pZCBtLmV2ZW50LnJlbW92ZSh0aGlzLFwiLl9zdWJtaXRcIil9fSksay5jaGFuZ2VCdWJibGVzfHwobS5ldmVudC5zcGVjaWFsLmNoYW5nZT17c2V0dXA6ZnVuY3Rpb24oKXtyZXR1cm4gWC50ZXN0KHRoaXMubm9kZU5hbWUpPygoXCJjaGVja2JveFwiPT09dGhpcy50eXBlfHxcInJhZGlvXCI9PT10aGlzLnR5cGUpJiYobS5ldmVudC5hZGQodGhpcyxcInByb3BlcnR5Y2hhbmdlLl9jaGFuZ2VcIixmdW5jdGlvbihhKXtcImNoZWNrZWRcIj09PWEub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUmJih0aGlzLl9qdXN0X2NoYW5nZWQ9ITApfSksbS5ldmVudC5hZGQodGhpcyxcImNsaWNrLl9jaGFuZ2VcIixmdW5jdGlvbihhKXt0aGlzLl9qdXN0X2NoYW5nZWQmJiFhLmlzVHJpZ2dlciYmKHRoaXMuX2p1c3RfY2hhbmdlZD0hMSksbS5ldmVudC5zaW11bGF0ZShcImNoYW5nZVwiLHRoaXMsYSwhMCl9KSksITEpOnZvaWQgbS5ldmVudC5hZGQodGhpcyxcImJlZm9yZWFjdGl2YXRlLl9jaGFuZ2VcIixmdW5jdGlvbihhKXt2YXIgYj1hLnRhcmdldDtYLnRlc3QoYi5ub2RlTmFtZSkmJiFtLl9kYXRhKGIsXCJjaGFuZ2VCdWJibGVzXCIpJiYobS5ldmVudC5hZGQoYixcImNoYW5nZS5fY2hhbmdlXCIsZnVuY3Rpb24oYSl7IXRoaXMucGFyZW50Tm9kZXx8YS5pc1NpbXVsYXRlZHx8YS5pc1RyaWdnZXJ8fG0uZXZlbnQuc2ltdWxhdGUoXCJjaGFuZ2VcIix0aGlzLnBhcmVudE5vZGUsYSwhMCl9KSxtLl9kYXRhKGIsXCJjaGFuZ2VCdWJibGVzXCIsITApKX0pfSxoYW5kbGU6ZnVuY3Rpb24oYSl7dmFyIGI9YS50YXJnZXQ7cmV0dXJuIHRoaXMhPT1ifHxhLmlzU2ltdWxhdGVkfHxhLmlzVHJpZ2dlcnx8XCJyYWRpb1wiIT09Yi50eXBlJiZcImNoZWNrYm94XCIhPT1iLnR5cGU/YS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dm9pZCAwfSx0ZWFyZG93bjpmdW5jdGlvbigpe3JldHVybiBtLmV2ZW50LnJlbW92ZSh0aGlzLFwiLl9jaGFuZ2VcIiksIVgudGVzdCh0aGlzLm5vZGVOYW1lKX19KSxrLmZvY3VzaW5CdWJibGVzfHxtLmVhY2goe2ZvY3VzOlwiZm9jdXNpblwiLGJsdXI6XCJmb2N1c291dFwifSxmdW5jdGlvbihhLGIpe3ZhciBjPWZ1bmN0aW9uKGEpe20uZXZlbnQuc2ltdWxhdGUoYixhLnRhcmdldCxtLmV2ZW50LmZpeChhKSwhMCl9O20uZXZlbnQuc3BlY2lhbFtiXT17c2V0dXA6ZnVuY3Rpb24oKXt2YXIgZD10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsZT1tLl9kYXRhKGQsYik7ZXx8ZC5hZGRFdmVudExpc3RlbmVyKGEsYywhMCksbS5fZGF0YShkLGIsKGV8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBkPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxlPW0uX2RhdGEoZCxiKS0xO2U/bS5fZGF0YShkLGIsZSk6KGQucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLGMsITApLG0uX3JlbW92ZURhdGEoZCxiKSl9fX0pLG0uZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGc7aWYoXCJvYmplY3RcIj09dHlwZW9mIGEpe1wic3RyaW5nXCIhPXR5cGVvZiBiJiYoYz1jfHxiLGI9dm9pZCAwKTtmb3IoZiBpbiBhKXRoaXMub24oZixiLGMsYVtmXSxlKTtyZXR1cm4gdGhpc31pZihudWxsPT1jJiZudWxsPT1kPyhkPWIsYz1iPXZvaWQgMCk6bnVsbD09ZCYmKFwic3RyaW5nXCI9PXR5cGVvZiBiPyhkPWMsYz12b2lkIDApOihkPWMsYz1iLGI9dm9pZCAwKSksZD09PSExKWQ9YmI7ZWxzZSBpZighZClyZXR1cm4gdGhpcztyZXR1cm4gMT09PWUmJihnPWQsZD1mdW5jdGlvbihhKXtyZXR1cm4gbSgpLm9mZihhKSxnLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZC5ndWlkPWcuZ3VpZHx8KGcuZ3VpZD1tLmd1aWQrKykpLHRoaXMuZWFjaChmdW5jdGlvbigpe20uZXZlbnQuYWRkKHRoaXMsYSxkLGMsYil9KX0sb25lOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLm9uKGEsYixjLGQsMSl9LG9mZjpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZTtpZihhJiZhLnByZXZlbnREZWZhdWx0JiZhLmhhbmRsZU9iailyZXR1cm4gZD1hLmhhbmRsZU9iaixtKGEuZGVsZWdhdGVUYXJnZXQpLm9mZihkLm5hbWVzcGFjZT9kLm9yaWdUeXBlK1wiLlwiK2QubmFtZXNwYWNlOmQub3JpZ1R5cGUsZC5zZWxlY3RvcixkLmhhbmRsZXIpLHRoaXM7aWYoXCJvYmplY3RcIj09dHlwZW9mIGEpe2ZvcihlIGluIGEpdGhpcy5vZmYoZSxiLGFbZV0pO3JldHVybiB0aGlzfXJldHVybihiPT09ITF8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGIpJiYoYz1iLGI9dm9pZCAwKSxjPT09ITEmJihjPWJiKSx0aGlzLmVhY2goZnVuY3Rpb24oKXttLmV2ZW50LnJlbW92ZSh0aGlzLGEsYyxiKX0pfSx0cmlnZ2VyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe20uZXZlbnQudHJpZ2dlcihhLGIsdGhpcyl9KX0sdHJpZ2dlckhhbmRsZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzWzBdO3JldHVybiBjP20uZXZlbnQudHJpZ2dlcihhLGIsYywhMCk6dm9pZCAwfX0pO2Z1bmN0aW9uIGRiKGEpe3ZhciBiPWViLnNwbGl0KFwifFwiKSxjPWEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO2lmKGMuY3JlYXRlRWxlbWVudCl3aGlsZShiLmxlbmd0aCljLmNyZWF0ZUVsZW1lbnQoYi5wb3AoKSk7cmV0dXJuIGN9dmFyIGViPVwiYWJicnxhcnRpY2xlfGFzaWRlfGF1ZGlvfGJkaXxjYW52YXN8ZGF0YXxkYXRhbGlzdHxkZXRhaWxzfGZpZ2NhcHRpb258ZmlndXJlfGZvb3RlcnxoZWFkZXJ8aGdyb3VwfG1hcmt8bWV0ZXJ8bmF2fG91dHB1dHxwcm9ncmVzc3xzZWN0aW9ufHN1bW1hcnl8dGltZXx2aWRlb1wiLGZiPS8galF1ZXJ5XFxkKz1cIig/Om51bGx8XFxkKylcIi9nLGdiPW5ldyBSZWdFeHAoXCI8KD86XCIrZWIrXCIpW1xcXFxzLz5dXCIsXCJpXCIpLGhiPS9eXFxzKy8saWI9LzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLGpiPS88KFtcXHc6XSspLyxrYj0vPHRib2R5L2ksbGI9Lzx8JiM/XFx3KzsvLG1iPS88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksbmI9L2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxvYj0vXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLHBiPS9edHJ1ZVxcLyguKikvLHFiPS9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZyxyYj17b3B0aW9uOlsxLFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLFwiPC9zZWxlY3Q+XCJdLGxlZ2VuZDpbMSxcIjxmaWVsZHNldD5cIixcIjwvZmllbGRzZXQ+XCJdLGFyZWE6WzEsXCI8bWFwPlwiLFwiPC9tYXA+XCJdLHBhcmFtOlsxLFwiPG9iamVjdD5cIixcIjwvb2JqZWN0PlwiXSx0aGVhZDpbMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sY29sOlsyLFwiPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sdGQ6WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxfZGVmYXVsdDprLmh0bWxTZXJpYWxpemU/WzAsXCJcIixcIlwiXTpbMSxcIlg8ZGl2PlwiLFwiPC9kaXY+XCJdfSxzYj1kYih5KSx0Yj1zYi5hcHBlbmRDaGlsZCh5LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO3JiLm9wdGdyb3VwPXJiLm9wdGlvbixyYi50Ym9keT1yYi50Zm9vdD1yYi5jb2xncm91cD1yYi5jYXB0aW9uPXJiLnRoZWFkLHJiLnRoPXJiLnRkO2Z1bmN0aW9uIHViKGEsYil7dmFyIGMsZCxlPTAsZj10eXBlb2YgYS5nZXRFbGVtZW50c0J5VGFnTmFtZSE9PUs/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShifHxcIipcIik6dHlwZW9mIGEucXVlcnlTZWxlY3RvckFsbCE9PUs/YS5xdWVyeVNlbGVjdG9yQWxsKGJ8fFwiKlwiKTp2b2lkIDA7aWYoIWYpZm9yKGY9W10sYz1hLmNoaWxkTm9kZXN8fGE7bnVsbCE9KGQ9Y1tlXSk7ZSsrKSFifHxtLm5vZGVOYW1lKGQsYik/Zi5wdXNoKGQpOm0ubWVyZ2UoZix1YihkLGIpKTtyZXR1cm4gdm9pZCAwPT09Ynx8YiYmbS5ub2RlTmFtZShhLGIpP20ubWVyZ2UoW2FdLGYpOmZ9ZnVuY3Rpb24gdmIoYSl7Vy50ZXN0KGEudHlwZSkmJihhLmRlZmF1bHRDaGVja2VkPWEuY2hlY2tlZCl9ZnVuY3Rpb24gd2IoYSxiKXtyZXR1cm4gbS5ub2RlTmFtZShhLFwidGFibGVcIikmJm0ubm9kZU5hbWUoMTEhPT1iLm5vZGVUeXBlP2I6Yi5maXJzdENoaWxkLFwidHJcIik/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdfHxhLmFwcGVuZENoaWxkKGEub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikpOmF9ZnVuY3Rpb24geGIoYSl7cmV0dXJuIGEudHlwZT0obnVsbCE9PW0uZmluZC5hdHRyKGEsXCJ0eXBlXCIpKStcIi9cIithLnR5cGUsYX1mdW5jdGlvbiB5YihhKXt2YXIgYj1wYi5leGVjKGEudHlwZSk7cmV0dXJuIGI/YS50eXBlPWJbMV06YS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpLGF9ZnVuY3Rpb24gemIoYSxiKXtmb3IodmFyIGMsZD0wO251bGwhPShjPWFbZF0pO2QrKyltLl9kYXRhKGMsXCJnbG9iYWxFdmFsXCIsIWJ8fG0uX2RhdGEoYltkXSxcImdsb2JhbEV2YWxcIikpfWZ1bmN0aW9uIEFiKGEsYil7aWYoMT09PWIubm9kZVR5cGUmJm0uaGFzRGF0YShhKSl7dmFyIGMsZCxlLGY9bS5fZGF0YShhKSxnPW0uX2RhdGEoYixmKSxoPWYuZXZlbnRzO2lmKGgpe2RlbGV0ZSBnLmhhbmRsZSxnLmV2ZW50cz17fTtmb3IoYyBpbiBoKWZvcihkPTAsZT1oW2NdLmxlbmd0aDtlPmQ7ZCsrKW0uZXZlbnQuYWRkKGIsYyxoW2NdW2RdKX1nLmRhdGEmJihnLmRhdGE9bS5leHRlbmQoe30sZy5kYXRhKSl9fWZ1bmN0aW9uIEJiKGEsYil7dmFyIGMsZCxlO2lmKDE9PT1iLm5vZGVUeXBlKXtpZihjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwhay5ub0Nsb25lRXZlbnQmJmJbbS5leHBhbmRvXSl7ZT1tLl9kYXRhKGIpO2ZvcihkIGluIGUuZXZlbnRzKW0ucmVtb3ZlRXZlbnQoYixkLGUuaGFuZGxlKTtiLnJlbW92ZUF0dHJpYnV0ZShtLmV4cGFuZG8pfVwic2NyaXB0XCI9PT1jJiZiLnRleHQhPT1hLnRleHQ/KHhiKGIpLnRleHQ9YS50ZXh0LHliKGIpKTpcIm9iamVjdFwiPT09Yz8oYi5wYXJlbnROb2RlJiYoYi5vdXRlckhUTUw9YS5vdXRlckhUTUwpLGsuaHRtbDVDbG9uZSYmYS5pbm5lckhUTUwmJiFtLnRyaW0oYi5pbm5lckhUTUwpJiYoYi5pbm5lckhUTUw9YS5pbm5lckhUTUwpKTpcImlucHV0XCI9PT1jJiZXLnRlc3QoYS50eXBlKT8oYi5kZWZhdWx0Q2hlY2tlZD1iLmNoZWNrZWQ9YS5jaGVja2VkLGIudmFsdWUhPT1hLnZhbHVlJiYoYi52YWx1ZT1hLnZhbHVlKSk6XCJvcHRpb25cIj09PWM/Yi5kZWZhdWx0U2VsZWN0ZWQ9Yi5zZWxlY3RlZD1hLmRlZmF1bHRTZWxlY3RlZDooXCJpbnB1dFwiPT09Y3x8XCJ0ZXh0YXJlYVwiPT09YykmJihiLmRlZmF1bHRWYWx1ZT1hLmRlZmF1bHRWYWx1ZSl9fW0uZXh0ZW5kKHtjbG9uZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaCxpPW0uY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpO2lmKGsuaHRtbDVDbG9uZXx8bS5pc1hNTERvYyhhKXx8IWdiLnRlc3QoXCI8XCIrYS5ub2RlTmFtZStcIj5cIik/Zj1hLmNsb25lTm9kZSghMCk6KHRiLmlubmVySFRNTD1hLm91dGVySFRNTCx0Yi5yZW1vdmVDaGlsZChmPXRiLmZpcnN0Q2hpbGQpKSwhKGsubm9DbG9uZUV2ZW50JiZrLm5vQ2xvbmVDaGVja2VkfHwxIT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlfHxtLmlzWE1MRG9jKGEpKSlmb3IoZD11YihmKSxoPXViKGEpLGc9MDtudWxsIT0oZT1oW2ddKTsrK2cpZFtnXSYmQmIoZSxkW2ddKTtpZihiKWlmKGMpZm9yKGg9aHx8dWIoYSksZD1kfHx1YihmKSxnPTA7bnVsbCE9KGU9aFtnXSk7ZysrKUFiKGUsZFtnXSk7ZWxzZSBBYihhLGYpO3JldHVybiBkPXViKGYsXCJzY3JpcHRcIiksZC5sZW5ndGg+MCYmemIoZCwhaSYmdWIoYSxcInNjcmlwdFwiKSksZD1oPWU9bnVsbCxmfSxidWlsZEZyYWdtZW50OmZ1bmN0aW9uKGEsYixjLGQpe2Zvcih2YXIgZSxmLGcsaCxpLGosbCxuPWEubGVuZ3RoLG89ZGIoYikscD1bXSxxPTA7bj5xO3ErKylpZihmPWFbcV0sZnx8MD09PWYpaWYoXCJvYmplY3RcIj09PW0udHlwZShmKSltLm1lcmdlKHAsZi5ub2RlVHlwZT9bZl06Zik7ZWxzZSBpZihsYi50ZXN0KGYpKXtoPWh8fG8uYXBwZW5kQ2hpbGQoYi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxpPShqYi5leGVjKGYpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKSxsPXJiW2ldfHxyYi5fZGVmYXVsdCxoLmlubmVySFRNTD1sWzFdK2YucmVwbGFjZShpYixcIjwkMT48LyQyPlwiKStsWzJdLGU9bFswXTt3aGlsZShlLS0paD1oLmxhc3RDaGlsZDtpZighay5sZWFkaW5nV2hpdGVzcGFjZSYmaGIudGVzdChmKSYmcC5wdXNoKGIuY3JlYXRlVGV4dE5vZGUoaGIuZXhlYyhmKVswXSkpLCFrLnRib2R5KXtmPVwidGFibGVcIiE9PWl8fGtiLnRlc3QoZik/XCI8dGFibGU+XCIhPT1sWzFdfHxrYi50ZXN0KGYpPzA6aDpoLmZpcnN0Q2hpbGQsZT1mJiZmLmNoaWxkTm9kZXMubGVuZ3RoO3doaWxlKGUtLSltLm5vZGVOYW1lKGo9Zi5jaGlsZE5vZGVzW2VdLFwidGJvZHlcIikmJiFqLmNoaWxkTm9kZXMubGVuZ3RoJiZmLnJlbW92ZUNoaWxkKGopfW0ubWVyZ2UocCxoLmNoaWxkTm9kZXMpLGgudGV4dENvbnRlbnQ9XCJcIjt3aGlsZShoLmZpcnN0Q2hpbGQpaC5yZW1vdmVDaGlsZChoLmZpcnN0Q2hpbGQpO2g9by5sYXN0Q2hpbGR9ZWxzZSBwLnB1c2goYi5jcmVhdGVUZXh0Tm9kZShmKSk7aCYmby5yZW1vdmVDaGlsZChoKSxrLmFwcGVuZENoZWNrZWR8fG0uZ3JlcCh1YihwLFwiaW5wdXRcIiksdmIpLHE9MDt3aGlsZShmPXBbcSsrXSlpZigoIWR8fC0xPT09bS5pbkFycmF5KGYsZCkpJiYoZz1tLmNvbnRhaW5zKGYub3duZXJEb2N1bWVudCxmKSxoPXViKG8uYXBwZW5kQ2hpbGQoZiksXCJzY3JpcHRcIiksZyYmemIoaCksYykpe2U9MDt3aGlsZShmPWhbZSsrXSlvYi50ZXN0KGYudHlwZXx8XCJcIikmJmMucHVzaChmKX1yZXR1cm4gaD1udWxsLG99LGNsZWFuRGF0YTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZCxlLGYsZyxoPTAsaT1tLmV4cGFuZG8saj1tLmNhY2hlLGw9ay5kZWxldGVFeHBhbmRvLG49bS5ldmVudC5zcGVjaWFsO251bGwhPShkPWFbaF0pO2grKylpZigoYnx8bS5hY2NlcHREYXRhKGQpKSYmKGY9ZFtpXSxnPWYmJmpbZl0pKXtpZihnLmV2ZW50cylmb3IoZSBpbiBnLmV2ZW50cyluW2VdP20uZXZlbnQucmVtb3ZlKGQsZSk6bS5yZW1vdmVFdmVudChkLGUsZy5oYW5kbGUpO2pbZl0mJihkZWxldGUgaltmXSxsP2RlbGV0ZSBkW2ldOnR5cGVvZiBkLnJlbW92ZUF0dHJpYnV0ZSE9PUs/ZC5yZW1vdmVBdHRyaWJ1dGUoaSk6ZFtpXT1udWxsLGMucHVzaChmKSl9fX0pLG0uZm4uZXh0ZW5kKHt0ZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBWKHRoaXMsZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWE/bS50ZXh0KHRoaXMpOnRoaXMuZW1wdHkoKS5hcHBlbmQoKHRoaXNbMF0mJnRoaXNbMF0ub3duZXJEb2N1bWVudHx8eSkuY3JlYXRlVGV4dE5vZGUoYSkpfSxudWxsLGEsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIGI9d2IodGhpcyxhKTtiLmFwcGVuZENoaWxkKGEpfX0pfSxwcmVwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGEpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgYj13Yih0aGlzLGEpO2IuaW5zZXJ0QmVmb3JlKGEsYi5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGEpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGEpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLHRoaXMubmV4dFNpYmxpbmcpfSl9LHJlbW92ZTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYyxkPWE/bS5maWx0ZXIoYSx0aGlzKTp0aGlzLGU9MDtudWxsIT0oYz1kW2VdKTtlKyspYnx8MSE9PWMubm9kZVR5cGV8fG0uY2xlYW5EYXRhKHViKGMpKSxjLnBhcmVudE5vZGUmJihiJiZtLmNvbnRhaW5zKGMub3duZXJEb2N1bWVudCxjKSYmemIodWIoYyxcInNjcmlwdFwiKSksYy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpKTtyZXR1cm4gdGhpc30sZW1wdHk6ZnVuY3Rpb24oKXtmb3IodmFyIGEsYj0wO251bGwhPShhPXRoaXNbYl0pO2IrKyl7MT09PWEubm9kZVR5cGUmJm0uY2xlYW5EYXRhKHViKGEsITEpKTt3aGlsZShhLmZpcnN0Q2hpbGQpYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Eub3B0aW9ucyYmbS5ub2RlTmFtZShhLFwic2VsZWN0XCIpJiYoYS5vcHRpb25zLmxlbmd0aD0wKX1yZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1udWxsPT1hPyExOmEsYj1udWxsPT1iP2E6Yix0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiBtLmNsb25lKHRoaXMsYSxiKX0pfSxodG1sOmZ1bmN0aW9uKGEpe3JldHVybiBWKHRoaXMsZnVuY3Rpb24oYSl7dmFyIGI9dGhpc1swXXx8e30sYz0wLGQ9dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09YSlyZXR1cm4gMT09PWIubm9kZVR5cGU/Yi5pbm5lckhUTUwucmVwbGFjZShmYixcIlwiKTp2b2lkIDA7aWYoIShcInN0cmluZ1wiIT10eXBlb2YgYXx8bWIudGVzdChhKXx8IWsuaHRtbFNlcmlhbGl6ZSYmZ2IudGVzdChhKXx8IWsubGVhZGluZ1doaXRlc3BhY2UmJmhiLnRlc3QoYSl8fHJiWyhqYi5leGVjKGEpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pKXthPWEucmVwbGFjZShpYixcIjwkMT48LyQyPlwiKTt0cnl7Zm9yKDtkPmM7YysrKWI9dGhpc1tjXXx8e30sMT09PWIubm9kZVR5cGUmJihtLmNsZWFuRGF0YSh1YihiLCExKSksYi5pbm5lckhUTUw9YSk7Yj0wfWNhdGNoKGUpe319YiYmdGhpcy5lbXB0eSgpLmFwcGVuZChhKX0sbnVsbCxhLGFyZ3VtZW50cy5sZW5ndGgpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsZnVuY3Rpb24oYil7YT10aGlzLnBhcmVudE5vZGUsbS5jbGVhbkRhdGEodWIodGhpcykpLGEmJmEucmVwbGFjZUNoaWxkKGIsdGhpcyl9KSxhJiYoYS5sZW5ndGh8fGEubm9kZVR5cGUpP3RoaXM6dGhpcy5yZW1vdmUoKX0sZGV0YWNoOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnJlbW92ZShhLCEwKX0sZG9tTWFuaXA6ZnVuY3Rpb24oYSxiKXthPWUuYXBwbHkoW10sYSk7dmFyIGMsZCxmLGcsaCxpLGo9MCxsPXRoaXMubGVuZ3RoLG49dGhpcyxvPWwtMSxwPWFbMF0scT1tLmlzRnVuY3Rpb24ocCk7aWYocXx8bD4xJiZcInN0cmluZ1wiPT10eXBlb2YgcCYmIWsuY2hlY2tDbG9uZSYmbmIudGVzdChwKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGMpe3ZhciBkPW4uZXEoYyk7cSYmKGFbMF09cC5jYWxsKHRoaXMsYyxkLmh0bWwoKSkpLGQuZG9tTWFuaXAoYSxiKX0pO2lmKGwmJihpPW0uYnVpbGRGcmFnbWVudChhLHRoaXNbMF0ub3duZXJEb2N1bWVudCwhMSx0aGlzKSxjPWkuZmlyc3RDaGlsZCwxPT09aS5jaGlsZE5vZGVzLmxlbmd0aCYmKGk9YyksYykpe2ZvcihnPW0ubWFwKHViKGksXCJzY3JpcHRcIikseGIpLGY9Zy5sZW5ndGg7bD5qO2orKylkPWksaiE9PW8mJihkPW0uY2xvbmUoZCwhMCwhMCksZiYmbS5tZXJnZShnLHViKGQsXCJzY3JpcHRcIikpKSxiLmNhbGwodGhpc1tqXSxkLGopO2lmKGYpZm9yKGg9Z1tnLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LG0ubWFwKGcseWIpLGo9MDtmPmo7aisrKWQ9Z1tqXSxvYi50ZXN0KGQudHlwZXx8XCJcIikmJiFtLl9kYXRhKGQsXCJnbG9iYWxFdmFsXCIpJiZtLmNvbnRhaW5zKGgsZCkmJihkLnNyYz9tLl9ldmFsVXJsJiZtLl9ldmFsVXJsKGQuc3JjKTptLmdsb2JhbEV2YWwoKGQudGV4dHx8ZC50ZXh0Q29udGVudHx8ZC5pbm5lckhUTUx8fFwiXCIpLnJlcGxhY2UocWIsXCJcIikpKTtpPWM9bnVsbH1yZXR1cm4gdGhpc319KSxtLmVhY2goe2FwcGVuZFRvOlwiYXBwZW5kXCIscHJlcGVuZFRvOlwicHJlcGVuZFwiLGluc2VydEJlZm9yZTpcImJlZm9yZVwiLGluc2VydEFmdGVyOlwiYWZ0ZXJcIixyZXBsYWNlQWxsOlwicmVwbGFjZVdpdGhcIn0sZnVuY3Rpb24oYSxiKXttLmZuW2FdPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYyxkPTAsZT1bXSxnPW0oYSksaD1nLmxlbmd0aC0xO2g+PWQ7ZCsrKWM9ZD09PWg/dGhpczp0aGlzLmNsb25lKCEwKSxtKGdbZF0pW2JdKGMpLGYuYXBwbHkoZSxjLmdldCgpKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZSl9fSk7dmFyIENiLERiPXt9O2Z1bmN0aW9uIEViKGIsYyl7dmFyIGQsZT1tKGMuY3JlYXRlRWxlbWVudChiKSkuYXBwZW5kVG8oYy5ib2R5KSxmPWEuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUmJihkPWEuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoZVswXSkpP2QuZGlzcGxheTptLmNzcyhlWzBdLFwiZGlzcGxheVwiKTtyZXR1cm4gZS5kZXRhY2goKSxmfWZ1bmN0aW9uIEZiKGEpe3ZhciBiPXksYz1EYlthXTtyZXR1cm4gY3x8KGM9RWIoYSxiKSxcIm5vbmVcIiE9PWMmJmN8fChDYj0oQ2J8fG0oXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIpKS5hcHBlbmRUbyhiLmRvY3VtZW50RWxlbWVudCksYj0oQ2JbMF0uY29udGVudFdpbmRvd3x8Q2JbMF0uY29udGVudERvY3VtZW50KS5kb2N1bWVudCxiLndyaXRlKCksYi5jbG9zZSgpLGM9RWIoYSxiKSxDYi5kZXRhY2goKSksRGJbYV09YyksY30hZnVuY3Rpb24oKXt2YXIgYTtrLnNocmlua1dyYXBCbG9ja3M9ZnVuY3Rpb24oKXtpZihudWxsIT1hKXJldHVybiBhO2E9ITE7dmFyIGIsYyxkO3JldHVybiBjPXkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLGMmJmMuc3R5bGU/KGI9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQ9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4XCIsYy5hcHBlbmRDaGlsZChkKS5hcHBlbmRDaGlsZChiKSx0eXBlb2YgYi5zdHlsZS56b29tIT09SyYmKGIuc3R5bGUuY3NzVGV4dD1cIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MXB4O3dpZHRoOjFweDt6b29tOjFcIixiLmFwcGVuZENoaWxkKHkuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuc3R5bGUud2lkdGg9XCI1cHhcIixhPTMhPT1iLm9mZnNldFdpZHRoKSxjLnJlbW92ZUNoaWxkKGQpLGEpOnZvaWQgMH19KCk7dmFyIEdiPS9ebWFyZ2luLyxIYj1uZXcgUmVnRXhwKFwiXihcIitTK1wiKSg/IXB4KVthLXolXSskXCIsXCJpXCIpLEliLEpiLEtiPS9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLzthLmdldENvbXB1dGVkU3R5bGU/KEliPWZ1bmN0aW9uKGIpe3JldHVybiBiLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcub3BlbmVyP2Iub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGIsbnVsbCk6YS5nZXRDb21wdXRlZFN0eWxlKGIsbnVsbCl9LEpiPWZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuc3R5bGU7cmV0dXJuIGM9Y3x8SWIoYSksZz1jP2MuZ2V0UHJvcGVydHlWYWx1ZShiKXx8Y1tiXTp2b2lkIDAsYyYmKFwiXCIhPT1nfHxtLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKXx8KGc9bS5zdHlsZShhLGIpKSxIYi50ZXN0KGcpJiZHYi50ZXN0KGIpJiYoZD1oLndpZHRoLGU9aC5taW5XaWR0aCxmPWgubWF4V2lkdGgsaC5taW5XaWR0aD1oLm1heFdpZHRoPWgud2lkdGg9ZyxnPWMud2lkdGgsaC53aWR0aD1kLGgubWluV2lkdGg9ZSxoLm1heFdpZHRoPWYpKSx2b2lkIDA9PT1nP2c6ZytcIlwifSk6eS5kb2N1bWVudEVsZW1lbnQuY3VycmVudFN0eWxlJiYoSWI9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuY3VycmVudFN0eWxlfSxKYj1mdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLnN0eWxlO3JldHVybiBjPWN8fEliKGEpLGc9Yz9jW2JdOnZvaWQgMCxudWxsPT1nJiZoJiZoW2JdJiYoZz1oW2JdKSxIYi50ZXN0KGcpJiYhS2IudGVzdChiKSYmKGQ9aC5sZWZ0LGU9YS5ydW50aW1lU3R5bGUsZj1lJiZlLmxlZnQsZiYmKGUubGVmdD1hLmN1cnJlbnRTdHlsZS5sZWZ0KSxoLmxlZnQ9XCJmb250U2l6ZVwiPT09Yj9cIjFlbVwiOmcsZz1oLnBpeGVsTGVmdCtcInB4XCIsaC5sZWZ0PWQsZiYmKGUubGVmdD1mKSksdm9pZCAwPT09Zz9nOmcrXCJcInx8XCJhdXRvXCJ9KTtmdW5jdGlvbiBMYihhLGIpe3JldHVybntnZXQ6ZnVuY3Rpb24oKXt2YXIgYz1hKCk7aWYobnVsbCE9YylyZXR1cm4gYz92b2lkIGRlbGV0ZSB0aGlzLmdldDoodGhpcy5nZXQ9YikuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19IWZ1bmN0aW9uKCl7dmFyIGIsYyxkLGUsZixnLGg7aWYoYj15LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5pbm5lckhUTUw9XCIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz5cIixkPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhXCIpWzBdLGM9ZCYmZC5zdHlsZSl7Yy5jc3NUZXh0PVwiZmxvYXQ6bGVmdDtvcGFjaXR5Oi41XCIsay5vcGFjaXR5PVwiMC41XCI9PT1jLm9wYWNpdHksay5jc3NGbG9hdD0hIWMuY3NzRmxvYXQsYi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cImNvbnRlbnQtYm94XCIsYi5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiXCIsay5jbGVhckNsb25lU3R5bGU9XCJjb250ZW50LWJveFwiPT09Yi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxrLmJveFNpemluZz1cIlwiPT09Yy5ib3hTaXppbmd8fFwiXCI9PT1jLk1vekJveFNpemluZ3x8XCJcIj09PWMuV2Via2l0Qm94U2l6aW5nLG0uZXh0ZW5kKGsse3JlbGlhYmxlSGlkZGVuT2Zmc2V0czpmdW5jdGlvbigpe3JldHVybiBudWxsPT1nJiZpKCksZ30sYm94U2l6aW5nUmVsaWFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09ZiYmaSgpLGZ9LHBpeGVsUG9zaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09ZSYmaSgpLGV9LHJlbGlhYmxlTWFyZ2luUmlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09aCYmaSgpLGh9fSk7ZnVuY3Rpb24gaSgpe3ZhciBiLGMsZCxpO2M9eS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0sYyYmYy5zdHlsZSYmKGI9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQ9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4XCIsYy5hcHBlbmRDaGlsZChkKS5hcHBlbmRDaGlsZChiKSxiLnN0eWxlLmNzc1RleHQ9XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjElO3RvcDoxJTtib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjRweDtwb3NpdGlvbjphYnNvbHV0ZVwiLGU9Zj0hMSxoPSEwLGEuZ2V0Q29tcHV0ZWRTdHlsZSYmKGU9XCIxJVwiIT09KGEuZ2V0Q29tcHV0ZWRTdHlsZShiLG51bGwpfHx7fSkudG9wLGY9XCI0cHhcIj09PShhLmdldENvbXB1dGVkU3R5bGUoYixudWxsKXx8e3dpZHRoOlwiNHB4XCJ9KS53aWR0aCxpPWIuYXBwZW5kQ2hpbGQoeS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxpLnN0eWxlLmNzc1RleHQ9Yi5zdHlsZS5jc3NUZXh0PVwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCIsaS5zdHlsZS5tYXJnaW5SaWdodD1pLnN0eWxlLndpZHRoPVwiMFwiLGIuc3R5bGUud2lkdGg9XCIxcHhcIixoPSFwYXJzZUZsb2F0KChhLmdldENvbXB1dGVkU3R5bGUoaSxudWxsKXx8e30pLm1hcmdpblJpZ2h0KSxiLnJlbW92ZUNoaWxkKGkpKSxiLmlubmVySFRNTD1cIjx0YWJsZT48dHI+PHRkPjwvdGQ+PHRkPnQ8L3RkPjwvdHI+PC90YWJsZT5cIixpPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZFwiKSxpWzBdLnN0eWxlLmNzc1RleHQ9XCJtYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjA7ZGlzcGxheTpub25lXCIsZz0wPT09aVswXS5vZmZzZXRIZWlnaHQsZyYmKGlbMF0uc3R5bGUuZGlzcGxheT1cIlwiLGlbMV0uc3R5bGUuZGlzcGxheT1cIm5vbmVcIixnPTA9PT1pWzBdLm9mZnNldEhlaWdodCksYy5yZW1vdmVDaGlsZChkKSl9fX0oKSxtLnN3YXA9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnPXt9O2ZvcihmIGluIGIpZ1tmXT1hLnN0eWxlW2ZdLGEuc3R5bGVbZl09YltmXTtlPWMuYXBwbHkoYSxkfHxbXSk7Zm9yKGYgaW4gYilhLnN0eWxlW2ZdPWdbZl07cmV0dXJuIGV9O3ZhciBNYj0vYWxwaGFcXChbXildKlxcKS9pLE5iPS9vcGFjaXR5XFxzKj1cXHMqKFteKV0qKS8sT2I9L14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFBiPW5ldyBSZWdFeHAoXCJeKFwiK1MrXCIpKC4qKSRcIixcImlcIiksUWI9bmV3IFJlZ0V4cChcIl4oWystXSk9KFwiK1MrXCIpXCIsXCJpXCIpLFJiPXtwb3NpdGlvbjpcImFic29sdXRlXCIsdmlzaWJpbGl0eTpcImhpZGRlblwiLGRpc3BsYXk6XCJibG9ja1wifSxTYj17bGV0dGVyU3BhY2luZzpcIjBcIixmb250V2VpZ2h0OlwiNDAwXCJ9LFRiPVtcIldlYmtpdFwiLFwiT1wiLFwiTW96XCIsXCJtc1wiXTtmdW5jdGlvbiBVYihhLGIpe2lmKGIgaW4gYSlyZXR1cm4gYjt2YXIgYz1iLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Iuc2xpY2UoMSksZD1iLGU9VGIubGVuZ3RoO3doaWxlKGUtLSlpZihiPVRiW2VdK2MsYiBpbiBhKXJldHVybiBiO3JldHVybiBkfWZ1bmN0aW9uIFZiKGEsYil7Zm9yKHZhciBjLGQsZSxmPVtdLGc9MCxoPWEubGVuZ3RoO2g+ZztnKyspZD1hW2ddLGQuc3R5bGUmJihmW2ddPW0uX2RhdGEoZCxcIm9sZGRpc3BsYXlcIiksYz1kLnN0eWxlLmRpc3BsYXksYj8oZltnXXx8XCJub25lXCIhPT1jfHwoZC5zdHlsZS5kaXNwbGF5PVwiXCIpLFwiXCI9PT1kLnN0eWxlLmRpc3BsYXkmJlUoZCkmJihmW2ddPW0uX2RhdGEoZCxcIm9sZGRpc3BsYXlcIixGYihkLm5vZGVOYW1lKSkpKTooZT1VKGQpLChjJiZcIm5vbmVcIiE9PWN8fCFlKSYmbS5fZGF0YShkLFwib2xkZGlzcGxheVwiLGU/YzptLmNzcyhkLFwiZGlzcGxheVwiKSkpKTtmb3IoZz0wO2g+ZztnKyspZD1hW2ddLGQuc3R5bGUmJihiJiZcIm5vbmVcIiE9PWQuc3R5bGUuZGlzcGxheSYmXCJcIiE9PWQuc3R5bGUuZGlzcGxheXx8KGQuc3R5bGUuZGlzcGxheT1iP2ZbZ118fFwiXCI6XCJub25lXCIpKTtyZXR1cm4gYX1mdW5jdGlvbiBXYihhLGIsYyl7dmFyIGQ9UGIuZXhlYyhiKTtyZXR1cm4gZD9NYXRoLm1heCgwLGRbMV0tKGN8fDApKSsoZFsyXXx8XCJweFwiKTpifWZ1bmN0aW9uIFhiKGEsYixjLGQsZSl7Zm9yKHZhciBmPWM9PT0oZD9cImJvcmRlclwiOlwiY29udGVudFwiKT80Olwid2lkdGhcIj09PWI/MTowLGc9MDs0PmY7Zis9MilcIm1hcmdpblwiPT09YyYmKGcrPW0uY3NzKGEsYytUW2ZdLCEwLGUpKSxkPyhcImNvbnRlbnRcIj09PWMmJihnLT1tLmNzcyhhLFwicGFkZGluZ1wiK1RbZl0sITAsZSkpLFwibWFyZ2luXCIhPT1jJiYoZy09bS5jc3MoYSxcImJvcmRlclwiK1RbZl0rXCJXaWR0aFwiLCEwLGUpKSk6KGcrPW0uY3NzKGEsXCJwYWRkaW5nXCIrVFtmXSwhMCxlKSxcInBhZGRpbmdcIiE9PWMmJihnKz1tLmNzcyhhLFwiYm9yZGVyXCIrVFtmXStcIldpZHRoXCIsITAsZSkpKTtyZXR1cm4gZ31mdW5jdGlvbiBZYihhLGIsYyl7dmFyIGQ9ITAsZT1cIndpZHRoXCI9PT1iP2Eub2Zmc2V0V2lkdGg6YS5vZmZzZXRIZWlnaHQsZj1JYihhKSxnPWsuYm94U2l6aW5nJiZcImJvcmRlci1ib3hcIj09PW0uY3NzKGEsXCJib3hTaXppbmdcIiwhMSxmKTtpZigwPj1lfHxudWxsPT1lKXtpZihlPUpiKGEsYixmKSwoMD5lfHxudWxsPT1lKSYmKGU9YS5zdHlsZVtiXSksSGIudGVzdChlKSlyZXR1cm4gZTtkPWcmJihrLmJveFNpemluZ1JlbGlhYmxlKCl8fGU9PT1hLnN0eWxlW2JdKSxlPXBhcnNlRmxvYXQoZSl8fDB9cmV0dXJuIGUrWGIoYSxiLGN8fChnP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpLGQsZikrXCJweFwifW0uZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGEsYil7aWYoYil7dmFyIGM9SmIoYSxcIm9wYWNpdHlcIik7cmV0dXJuXCJcIj09PWM/XCIxXCI6Y319fX0sY3NzTnVtYmVyOntjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmbGV4R3JvdzohMCxmbGV4U2hyaW5rOiEwLGZvbnRXZWlnaHQ6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwfSxjc3NQcm9wczp7XCJmbG9hdFwiOmsuY3NzRmxvYXQ/XCJjc3NGbG9hdFwiOlwic3R5bGVGbG9hdFwifSxzdHlsZTpmdW5jdGlvbihhLGIsYyxkKXtpZihhJiYzIT09YS5ub2RlVHlwZSYmOCE9PWEubm9kZVR5cGUmJmEuc3R5bGUpe3ZhciBlLGYsZyxoPW0uY2FtZWxDYXNlKGIpLGk9YS5zdHlsZTtpZihiPW0uY3NzUHJvcHNbaF18fChtLmNzc1Byb3BzW2hdPVViKGksaCkpLGc9bS5jc3NIb29rc1tiXXx8bS5jc3NIb29rc1toXSx2b2lkIDA9PT1jKXJldHVybiBnJiZcImdldFwiaW4gZyYmdm9pZCAwIT09KGU9Zy5nZXQoYSwhMSxkKSk/ZTppW2JdO2lmKGY9dHlwZW9mIGMsXCJzdHJpbmdcIj09PWYmJihlPVFiLmV4ZWMoYykpJiYoYz0oZVsxXSsxKSplWzJdK3BhcnNlRmxvYXQobS5jc3MoYSxiKSksZj1cIm51bWJlclwiKSxudWxsIT1jJiZjPT09YyYmKFwibnVtYmVyXCIhPT1mfHxtLmNzc051bWJlcltoXXx8KGMrPVwicHhcIiksay5jbGVhckNsb25lU3R5bGV8fFwiXCIhPT1jfHwwIT09Yi5pbmRleE9mKFwiYmFja2dyb3VuZFwiKXx8KGlbYl09XCJpbmhlcml0XCIpLCEoZyYmXCJzZXRcImluIGcmJnZvaWQgMD09PShjPWcuc2V0KGEsYyxkKSkpKSl0cnl7aVtiXT1jfWNhdGNoKGope319fSxjc3M6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnLGg9bS5jYW1lbENhc2UoYik7cmV0dXJuIGI9bS5jc3NQcm9wc1toXXx8KG0uY3NzUHJvcHNbaF09VWIoYS5zdHlsZSxoKSksZz1tLmNzc0hvb2tzW2JdfHxtLmNzc0hvb2tzW2hdLGcmJlwiZ2V0XCJpbiBnJiYoZj1nLmdldChhLCEwLGMpKSx2b2lkIDA9PT1mJiYoZj1KYihhLGIsZCkpLFwibm9ybWFsXCI9PT1mJiZiIGluIFNiJiYoZj1TYltiXSksXCJcIj09PWN8fGM/KGU9cGFyc2VGbG9hdChmKSxjPT09ITB8fG0uaXNOdW1lcmljKGUpP2V8fDA6Zik6Zn19KSxtLmVhY2goW1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXSxmdW5jdGlvbihhLGIpe20uY3NzSG9va3NbYl09e2dldDpmdW5jdGlvbihhLGMsZCl7cmV0dXJuIGM/T2IudGVzdChtLmNzcyhhLFwiZGlzcGxheVwiKSkmJjA9PT1hLm9mZnNldFdpZHRoP20uc3dhcChhLFJiLGZ1bmN0aW9uKCl7cmV0dXJuIFliKGEsYixkKX0pOlliKGEsYixkKTp2b2lkIDB9LHNldDpmdW5jdGlvbihhLGMsZCl7dmFyIGU9ZCYmSWIoYSk7cmV0dXJuIFdiKGEsYyxkP1hiKGEsYixkLGsuYm94U2l6aW5nJiZcImJvcmRlci1ib3hcIj09PW0uY3NzKGEsXCJib3hTaXppbmdcIiwhMSxlKSxlKTowKX19fSksay5vcGFjaXR5fHwobS5jc3NIb29rcy5vcGFjaXR5PXtnZXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gTmIudGVzdCgoYiYmYS5jdXJyZW50U3R5bGU/YS5jdXJyZW50U3R5bGUuZmlsdGVyOmEuc3R5bGUuZmlsdGVyKXx8XCJcIik/LjAxKnBhcnNlRmxvYXQoUmVnRXhwLiQxKStcIlwiOmI/XCIxXCI6XCJcIn0sc2V0OmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5zdHlsZSxkPWEuY3VycmVudFN0eWxlLGU9bS5pc051bWVyaWMoYik/XCJhbHBoYShvcGFjaXR5PVwiKzEwMCpiK1wiKVwiOlwiXCIsZj1kJiZkLmZpbHRlcnx8Yy5maWx0ZXJ8fFwiXCI7Yy56b29tPTEsKGI+PTF8fFwiXCI9PT1iKSYmXCJcIj09PW0udHJpbShmLnJlcGxhY2UoTWIsXCJcIikpJiZjLnJlbW92ZUF0dHJpYnV0ZSYmKGMucmVtb3ZlQXR0cmlidXRlKFwiZmlsdGVyXCIpLFwiXCI9PT1ifHxkJiYhZC5maWx0ZXIpfHwoYy5maWx0ZXI9TWIudGVzdChmKT9mLnJlcGxhY2UoTWIsZSk6ZitcIiBcIitlKX19KSxtLmNzc0hvb2tzLm1hcmdpblJpZ2h0PUxiKGsucmVsaWFibGVNYXJnaW5SaWdodCxmdW5jdGlvbihhLGIpe3JldHVybiBiP20uc3dhcChhLHtkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCJ9LEpiLFthLFwibWFyZ2luUmlnaHRcIl0pOnZvaWQgMH0pLG0uZWFjaCh7bWFyZ2luOlwiXCIscGFkZGluZzpcIlwiLGJvcmRlcjpcIldpZHRoXCJ9LGZ1bmN0aW9uKGEsYil7bS5jc3NIb29rc1thK2JdPXtleHBhbmQ6ZnVuY3Rpb24oYyl7Zm9yKHZhciBkPTAsZT17fSxmPVwic3RyaW5nXCI9PXR5cGVvZiBjP2Muc3BsaXQoXCIgXCIpOltjXTs0PmQ7ZCsrKWVbYStUW2RdK2JdPWZbZF18fGZbZC0yXXx8ZlswXTtyZXR1cm4gZX19LEdiLnRlc3QoYSl8fChtLmNzc0hvb2tzW2ErYl0uc2V0PVdiKX0pLG0uZm4uZXh0ZW5kKHtjc3M6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVih0aGlzLGZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9e30sZz0wO2lmKG0uaXNBcnJheShiKSl7Zm9yKGQ9SWIoYSksZT1iLmxlbmd0aDtlPmc7ZysrKWZbYltnXV09bS5jc3MoYSxiW2ddLCExLGQpO3JldHVybiBmfXJldHVybiB2b2lkIDAhPT1jP20uc3R5bGUoYSxiLGMpOm0uY3NzKGEsYil9LGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfSxzaG93OmZ1bmN0aW9uKCl7cmV0dXJuIFZiKHRoaXMsITApfSxoaWRlOmZ1bmN0aW9uKCl7cmV0dXJuIFZiKHRoaXMpfSx0b2dnbGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBhP2E/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7VSh0aGlzKT9tKHRoaXMpLnNob3coKTptKHRoaXMpLmhpZGUoKX0pfX0pO2Z1bmN0aW9uIFpiKGEsYixjLGQsZSl7cmV0dXJuIG5ldyBaYi5wcm90b3R5cGUuaW5pdChhLGIsYyxkLGUpXG59bS5Ud2Vlbj1aYixaYi5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlpiLGluaXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMuZWxlbT1hLHRoaXMucHJvcD1jLHRoaXMuZWFzaW5nPWV8fFwic3dpbmdcIix0aGlzLm9wdGlvbnM9Yix0aGlzLnN0YXJ0PXRoaXMubm93PXRoaXMuY3VyKCksdGhpcy5lbmQ9ZCx0aGlzLnVuaXQ9Znx8KG0uY3NzTnVtYmVyW2NdP1wiXCI6XCJweFwiKX0sY3VyOmZ1bmN0aW9uKCl7dmFyIGE9WmIucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIGEmJmEuZ2V0P2EuZ2V0KHRoaXMpOlpiLnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyl9LHJ1bjpmdW5jdGlvbihhKXt2YXIgYixjPVpiLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiB0aGlzLnBvcz1iPXRoaXMub3B0aW9ucy5kdXJhdGlvbj9tLmVhc2luZ1t0aGlzLmVhc2luZ10oYSx0aGlzLm9wdGlvbnMuZHVyYXRpb24qYSwwLDEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKTphLHRoaXMubm93PSh0aGlzLmVuZC10aGlzLnN0YXJ0KSpiK3RoaXMuc3RhcnQsdGhpcy5vcHRpb25zLnN0ZXAmJnRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLHRoaXMubm93LHRoaXMpLGMmJmMuc2V0P2Muc2V0KHRoaXMpOlpiLnByb3BIb29rcy5fZGVmYXVsdC5zZXQodGhpcyksdGhpc319LFpiLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZT1aYi5wcm90b3R5cGUsWmIucHJvcEhvb2tzPXtfZGVmYXVsdDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVybiBudWxsPT1hLmVsZW1bYS5wcm9wXXx8YS5lbGVtLnN0eWxlJiZudWxsIT1hLmVsZW0uc3R5bGVbYS5wcm9wXT8oYj1tLmNzcyhhLmVsZW0sYS5wcm9wLFwiXCIpLGImJlwiYXV0b1wiIT09Yj9iOjApOmEuZWxlbVthLnByb3BdfSxzZXQ6ZnVuY3Rpb24oYSl7bS5meC5zdGVwW2EucHJvcF0/bS5meC5zdGVwW2EucHJvcF0oYSk6YS5lbGVtLnN0eWxlJiYobnVsbCE9YS5lbGVtLnN0eWxlW20uY3NzUHJvcHNbYS5wcm9wXV18fG0uY3NzSG9va3NbYS5wcm9wXSk/bS5zdHlsZShhLmVsZW0sYS5wcm9wLGEubm93K2EudW5pdCk6YS5lbGVtW2EucHJvcF09YS5ub3d9fX0sWmIucHJvcEhvb2tzLnNjcm9sbFRvcD1aYi5wcm9wSG9va3Muc2Nyb2xsTGVmdD17c2V0OmZ1bmN0aW9uKGEpe2EuZWxlbS5ub2RlVHlwZSYmYS5lbGVtLnBhcmVudE5vZGUmJihhLmVsZW1bYS5wcm9wXT1hLm5vdyl9fSxtLmVhc2luZz17bGluZWFyOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxzd2luZzpmdW5jdGlvbihhKXtyZXR1cm4uNS1NYXRoLmNvcyhhKk1hdGguUEkpLzJ9fSxtLmZ4PVpiLnByb3RvdHlwZS5pbml0LG0uZnguc3RlcD17fTt2YXIgJGIsX2IsYWM9L14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLGJjPW5ldyBSZWdFeHAoXCJeKD86KFsrLV0pPXwpKFwiK1MrXCIpKFthLXolXSopJFwiLFwiaVwiKSxjYz0vcXVldWVIb29rcyQvLGRjPVtpY10sZWM9e1wiKlwiOltmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuY3JlYXRlVHdlZW4oYSxiKSxkPWMuY3VyKCksZT1iYy5leGVjKGIpLGY9ZSYmZVszXXx8KG0uY3NzTnVtYmVyW2FdP1wiXCI6XCJweFwiKSxnPShtLmNzc051bWJlclthXXx8XCJweFwiIT09ZiYmK2QpJiZiYy5leGVjKG0uY3NzKGMuZWxlbSxhKSksaD0xLGk9MjA7aWYoZyYmZ1szXSE9PWYpe2Y9Znx8Z1szXSxlPWV8fFtdLGc9K2R8fDE7ZG8gaD1ofHxcIi41XCIsZy89aCxtLnN0eWxlKGMuZWxlbSxhLGcrZik7d2hpbGUoaCE9PShoPWMuY3VyKCkvZCkmJjEhPT1oJiYtLWkpfXJldHVybiBlJiYoZz1jLnN0YXJ0PStnfHwrZHx8MCxjLnVuaXQ9ZixjLmVuZD1lWzFdP2crKGVbMV0rMSkqZVsyXTorZVsyXSksY31dfTtmdW5jdGlvbiBmYygpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7JGI9dm9pZCAwfSksJGI9bS5ub3coKX1mdW5jdGlvbiBnYyhhLGIpe3ZhciBjLGQ9e2hlaWdodDphfSxlPTA7Zm9yKGI9Yj8xOjA7ND5lO2UrPTItYiljPVRbZV0sZFtcIm1hcmdpblwiK2NdPWRbXCJwYWRkaW5nXCIrY109YTtyZXR1cm4gYiYmKGQub3BhY2l0eT1kLndpZHRoPWEpLGR9ZnVuY3Rpb24gaGMoYSxiLGMpe2Zvcih2YXIgZCxlPShlY1tiXXx8W10pLmNvbmNhdChlY1tcIipcIl0pLGY9MCxnPWUubGVuZ3RoO2c+ZjtmKyspaWYoZD1lW2ZdLmNhbGwoYyxiLGEpKXJldHVybiBkfWZ1bmN0aW9uIGljKGEsYixjKXt2YXIgZCxlLGYsZyxoLGksaixsLG49dGhpcyxvPXt9LHA9YS5zdHlsZSxxPWEubm9kZVR5cGUmJlUoYSkscj1tLl9kYXRhKGEsXCJmeHNob3dcIik7Yy5xdWV1ZXx8KGg9bS5fcXVldWVIb29rcyhhLFwiZnhcIiksbnVsbD09aC51bnF1ZXVlZCYmKGgudW5xdWV1ZWQ9MCxpPWguZW1wdHkuZmlyZSxoLmVtcHR5LmZpcmU9ZnVuY3Rpb24oKXtoLnVucXVldWVkfHxpKCl9KSxoLnVucXVldWVkKyssbi5hbHdheXMoZnVuY3Rpb24oKXtuLmFsd2F5cyhmdW5jdGlvbigpe2gudW5xdWV1ZWQtLSxtLnF1ZXVlKGEsXCJmeFwiKS5sZW5ndGh8fGguZW1wdHkuZmlyZSgpfSl9KSksMT09PWEubm9kZVR5cGUmJihcImhlaWdodFwiaW4gYnx8XCJ3aWR0aFwiaW4gYikmJihjLm92ZXJmbG93PVtwLm92ZXJmbG93LHAub3ZlcmZsb3dYLHAub3ZlcmZsb3dZXSxqPW0uY3NzKGEsXCJkaXNwbGF5XCIpLGw9XCJub25lXCI9PT1qP20uX2RhdGEoYSxcIm9sZGRpc3BsYXlcIil8fEZiKGEubm9kZU5hbWUpOmosXCJpbmxpbmVcIj09PWwmJlwibm9uZVwiPT09bS5jc3MoYSxcImZsb2F0XCIpJiYoay5pbmxpbmVCbG9ja05lZWRzTGF5b3V0JiZcImlubGluZVwiIT09RmIoYS5ub2RlTmFtZSk/cC56b29tPTE6cC5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIpKSxjLm92ZXJmbG93JiYocC5vdmVyZmxvdz1cImhpZGRlblwiLGsuc2hyaW5rV3JhcEJsb2NrcygpfHxuLmFsd2F5cyhmdW5jdGlvbigpe3Aub3ZlcmZsb3c9Yy5vdmVyZmxvd1swXSxwLm92ZXJmbG93WD1jLm92ZXJmbG93WzFdLHAub3ZlcmZsb3dZPWMub3ZlcmZsb3dbMl19KSk7Zm9yKGQgaW4gYilpZihlPWJbZF0sYWMuZXhlYyhlKSl7aWYoZGVsZXRlIGJbZF0sZj1mfHxcInRvZ2dsZVwiPT09ZSxlPT09KHE/XCJoaWRlXCI6XCJzaG93XCIpKXtpZihcInNob3dcIiE9PWV8fCFyfHx2b2lkIDA9PT1yW2RdKWNvbnRpbnVlO3E9ITB9b1tkXT1yJiZyW2RdfHxtLnN0eWxlKGEsZCl9ZWxzZSBqPXZvaWQgMDtpZihtLmlzRW1wdHlPYmplY3QobykpXCJpbmxpbmVcIj09PShcIm5vbmVcIj09PWo/RmIoYS5ub2RlTmFtZSk6aikmJihwLmRpc3BsYXk9aik7ZWxzZXtyP1wiaGlkZGVuXCJpbiByJiYocT1yLmhpZGRlbik6cj1tLl9kYXRhKGEsXCJmeHNob3dcIix7fSksZiYmKHIuaGlkZGVuPSFxKSxxP20oYSkuc2hvdygpOm4uZG9uZShmdW5jdGlvbigpe20oYSkuaGlkZSgpfSksbi5kb25lKGZ1bmN0aW9uKCl7dmFyIGI7bS5fcmVtb3ZlRGF0YShhLFwiZnhzaG93XCIpO2ZvcihiIGluIG8pbS5zdHlsZShhLGIsb1tiXSl9KTtmb3IoZCBpbiBvKWc9aGMocT9yW2RdOjAsZCxuKSxkIGluIHJ8fChyW2RdPWcuc3RhcnQscSYmKGcuZW5kPWcuc3RhcnQsZy5zdGFydD1cIndpZHRoXCI9PT1kfHxcImhlaWdodFwiPT09ZD8xOjApKX19ZnVuY3Rpb24gamMoYSxiKXt2YXIgYyxkLGUsZixnO2ZvcihjIGluIGEpaWYoZD1tLmNhbWVsQ2FzZShjKSxlPWJbZF0sZj1hW2NdLG0uaXNBcnJheShmKSYmKGU9ZlsxXSxmPWFbY109ZlswXSksYyE9PWQmJihhW2RdPWYsZGVsZXRlIGFbY10pLGc9bS5jc3NIb29rc1tkXSxnJiZcImV4cGFuZFwiaW4gZyl7Zj1nLmV4cGFuZChmKSxkZWxldGUgYVtkXTtmb3IoYyBpbiBmKWMgaW4gYXx8KGFbY109ZltjXSxiW2NdPWUpfWVsc2UgYltkXT1lfWZ1bmN0aW9uIGtjKGEsYixjKXt2YXIgZCxlLGY9MCxnPWRjLmxlbmd0aCxoPW0uRGVmZXJyZWQoKS5hbHdheXMoZnVuY3Rpb24oKXtkZWxldGUgaS5lbGVtfSksaT1mdW5jdGlvbigpe2lmKGUpcmV0dXJuITE7Zm9yKHZhciBiPSRifHxmYygpLGM9TWF0aC5tYXgoMCxqLnN0YXJ0VGltZStqLmR1cmF0aW9uLWIpLGQ9Yy9qLmR1cmF0aW9ufHwwLGY9MS1kLGc9MCxpPWoudHdlZW5zLmxlbmd0aDtpPmc7ZysrKWoudHdlZW5zW2ddLnJ1bihmKTtyZXR1cm4gaC5ub3RpZnlXaXRoKGEsW2osZixjXSksMT5mJiZpP2M6KGgucmVzb2x2ZVdpdGgoYSxbal0pLCExKX0saj1oLnByb21pc2Uoe2VsZW06YSxwcm9wczptLmV4dGVuZCh7fSxiKSxvcHRzOm0uZXh0ZW5kKCEwLHtzcGVjaWFsRWFzaW5nOnt9fSxjKSxvcmlnaW5hbFByb3BlcnRpZXM6YixvcmlnaW5hbE9wdGlvbnM6YyxzdGFydFRpbWU6JGJ8fGZjKCksZHVyYXRpb246Yy5kdXJhdGlvbix0d2VlbnM6W10sY3JlYXRlVHdlZW46ZnVuY3Rpb24oYixjKXt2YXIgZD1tLlR3ZWVuKGEsai5vcHRzLGIsYyxqLm9wdHMuc3BlY2lhbEVhc2luZ1tiXXx8ai5vcHRzLmVhc2luZyk7cmV0dXJuIGoudHdlZW5zLnB1c2goZCksZH0sc3RvcDpmdW5jdGlvbihiKXt2YXIgYz0wLGQ9Yj9qLnR3ZWVucy5sZW5ndGg6MDtpZihlKXJldHVybiB0aGlzO2ZvcihlPSEwO2Q+YztjKyspai50d2VlbnNbY10ucnVuKDEpO3JldHVybiBiP2gucmVzb2x2ZVdpdGgoYSxbaixiXSk6aC5yZWplY3RXaXRoKGEsW2osYl0pLHRoaXN9fSksaz1qLnByb3BzO2ZvcihqYyhrLGoub3B0cy5zcGVjaWFsRWFzaW5nKTtnPmY7ZisrKWlmKGQ9ZGNbZl0uY2FsbChqLGEsayxqLm9wdHMpKXJldHVybiBkO3JldHVybiBtLm1hcChrLGhjLGopLG0uaXNGdW5jdGlvbihqLm9wdHMuc3RhcnQpJiZqLm9wdHMuc3RhcnQuY2FsbChhLGopLG0uZngudGltZXIobS5leHRlbmQoaSx7ZWxlbTphLGFuaW06aixxdWV1ZTpqLm9wdHMucXVldWV9KSksai5wcm9ncmVzcyhqLm9wdHMucHJvZ3Jlc3MpLmRvbmUoai5vcHRzLmRvbmUsai5vcHRzLmNvbXBsZXRlKS5mYWlsKGoub3B0cy5mYWlsKS5hbHdheXMoai5vcHRzLmFsd2F5cyl9bS5BbmltYXRpb249bS5leHRlbmQoa2Mse3R3ZWVuZXI6ZnVuY3Rpb24oYSxiKXttLmlzRnVuY3Rpb24oYSk/KGI9YSxhPVtcIipcIl0pOmE9YS5zcGxpdChcIiBcIik7Zm9yKHZhciBjLGQ9MCxlPWEubGVuZ3RoO2U+ZDtkKyspYz1hW2RdLGVjW2NdPWVjW2NdfHxbXSxlY1tjXS51bnNoaWZ0KGIpfSxwcmVmaWx0ZXI6ZnVuY3Rpb24oYSxiKXtiP2RjLnVuc2hpZnQoYSk6ZGMucHVzaChhKX19KSxtLnNwZWVkPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hJiZcIm9iamVjdFwiPT10eXBlb2YgYT9tLmV4dGVuZCh7fSxhKTp7Y29tcGxldGU6Y3x8IWMmJmJ8fG0uaXNGdW5jdGlvbihhKSYmYSxkdXJhdGlvbjphLGVhc2luZzpjJiZifHxiJiYhbS5pc0Z1bmN0aW9uKGIpJiZifTtyZXR1cm4gZC5kdXJhdGlvbj1tLmZ4Lm9mZj8wOlwibnVtYmVyXCI9PXR5cGVvZiBkLmR1cmF0aW9uP2QuZHVyYXRpb246ZC5kdXJhdGlvbiBpbiBtLmZ4LnNwZWVkcz9tLmZ4LnNwZWVkc1tkLmR1cmF0aW9uXTptLmZ4LnNwZWVkcy5fZGVmYXVsdCwobnVsbD09ZC5xdWV1ZXx8ZC5xdWV1ZT09PSEwKSYmKGQucXVldWU9XCJmeFwiKSxkLm9sZD1kLmNvbXBsZXRlLGQuY29tcGxldGU9ZnVuY3Rpb24oKXttLmlzRnVuY3Rpb24oZC5vbGQpJiZkLm9sZC5jYWxsKHRoaXMpLGQucXVldWUmJm0uZGVxdWV1ZSh0aGlzLGQucXVldWUpfSxkfSxtLmZuLmV4dGVuZCh7ZmFkZVRvOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmZpbHRlcihVKS5jc3MoXCJvcGFjaXR5XCIsMCkuc2hvdygpLmVuZCgpLmFuaW1hdGUoe29wYWNpdHk6Yn0sYSxjLGQpfSxhbmltYXRlOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPW0uaXNFbXB0eU9iamVjdChhKSxmPW0uc3BlZWQoYixjLGQpLGc9ZnVuY3Rpb24oKXt2YXIgYj1rYyh0aGlzLG0uZXh0ZW5kKHt9LGEpLGYpOyhlfHxtLl9kYXRhKHRoaXMsXCJmaW5pc2hcIikpJiZiLnN0b3AoITApfTtyZXR1cm4gZy5maW5pc2g9ZyxlfHxmLnF1ZXVlPT09ITE/dGhpcy5lYWNoKGcpOnRoaXMucXVldWUoZi5xdWV1ZSxnKX0sc3RvcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5zdG9wO2RlbGV0ZSBhLnN0b3AsYihjKX07cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGEmJihjPWIsYj1hLGE9dm9pZCAwKSxiJiZhIT09ITEmJnRoaXMucXVldWUoYXx8XCJmeFwiLFtdKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYj0hMCxlPW51bGwhPWEmJmErXCJxdWV1ZUhvb2tzXCIsZj1tLnRpbWVycyxnPW0uX2RhdGEodGhpcyk7aWYoZSlnW2VdJiZnW2VdLnN0b3AmJmQoZ1tlXSk7ZWxzZSBmb3IoZSBpbiBnKWdbZV0mJmdbZV0uc3RvcCYmY2MudGVzdChlKSYmZChnW2VdKTtmb3IoZT1mLmxlbmd0aDtlLS07KWZbZV0uZWxlbSE9PXRoaXN8fG51bGwhPWEmJmZbZV0ucXVldWUhPT1hfHwoZltlXS5hbmltLnN0b3AoYyksYj0hMSxmLnNwbGljZShlLDEpKTsoYnx8IWMpJiZtLmRlcXVldWUodGhpcyxhKX0pfSxmaW5pc2g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT0hMSYmKGE9YXx8XCJmeFwiKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYixjPW0uX2RhdGEodGhpcyksZD1jW2ErXCJxdWV1ZVwiXSxlPWNbYStcInF1ZXVlSG9va3NcIl0sZj1tLnRpbWVycyxnPWQ/ZC5sZW5ndGg6MDtmb3IoYy5maW5pc2g9ITAsbS5xdWV1ZSh0aGlzLGEsW10pLGUmJmUuc3RvcCYmZS5zdG9wLmNhbGwodGhpcywhMCksYj1mLmxlbmd0aDtiLS07KWZbYl0uZWxlbT09PXRoaXMmJmZbYl0ucXVldWU9PT1hJiYoZltiXS5hbmltLnN0b3AoITApLGYuc3BsaWNlKGIsMSkpO2ZvcihiPTA7Zz5iO2IrKylkW2JdJiZkW2JdLmZpbmlzaCYmZFtiXS5maW5pc2guY2FsbCh0aGlzKTtkZWxldGUgYy5maW5pc2h9KX19KSxtLmVhY2goW1widG9nZ2xlXCIsXCJzaG93XCIsXCJoaWRlXCJdLGZ1bmN0aW9uKGEsYil7dmFyIGM9bS5mbltiXTttLmZuW2JdPWZ1bmN0aW9uKGEsZCxlKXtyZXR1cm4gbnVsbD09YXx8XCJib29sZWFuXCI9PXR5cGVvZiBhP2MuYXBwbHkodGhpcyxhcmd1bWVudHMpOnRoaXMuYW5pbWF0ZShnYyhiLCEwKSxhLGQsZSl9fSksbS5lYWNoKHtzbGlkZURvd246Z2MoXCJzaG93XCIpLHNsaWRlVXA6Z2MoXCJoaWRlXCIpLHNsaWRlVG9nZ2xlOmdjKFwidG9nZ2xlXCIpLGZhZGVJbjp7b3BhY2l0eTpcInNob3dcIn0sZmFkZU91dDp7b3BhY2l0eTpcImhpZGVcIn0sZmFkZVRvZ2dsZTp7b3BhY2l0eTpcInRvZ2dsZVwifX0sZnVuY3Rpb24oYSxiKXttLmZuW2FdPWZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4gdGhpcy5hbmltYXRlKGIsYSxjLGQpfX0pLG0udGltZXJzPVtdLG0uZngudGljaz1mdW5jdGlvbigpe3ZhciBhLGI9bS50aW1lcnMsYz0wO2ZvcigkYj1tLm5vdygpO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhKCl8fGJbY10hPT1hfHxiLnNwbGljZShjLS0sMSk7Yi5sZW5ndGh8fG0uZnguc3RvcCgpLCRiPXZvaWQgMH0sbS5meC50aW1lcj1mdW5jdGlvbihhKXttLnRpbWVycy5wdXNoKGEpLGEoKT9tLmZ4LnN0YXJ0KCk6bS50aW1lcnMucG9wKCl9LG0uZnguaW50ZXJ2YWw9MTMsbS5meC5zdGFydD1mdW5jdGlvbigpe19ifHwoX2I9c2V0SW50ZXJ2YWwobS5meC50aWNrLG0uZnguaW50ZXJ2YWwpKX0sbS5meC5zdG9wPWZ1bmN0aW9uKCl7Y2xlYXJJbnRlcnZhbChfYiksX2I9bnVsbH0sbS5meC5zcGVlZHM9e3Nsb3c6NjAwLGZhc3Q6MjAwLF9kZWZhdWx0OjQwMH0sbS5mbi5kZWxheT1mdW5jdGlvbihhLGIpe3JldHVybiBhPW0uZng/bS5meC5zcGVlZHNbYV18fGE6YSxiPWJ8fFwiZnhcIix0aGlzLnF1ZXVlKGIsZnVuY3Rpb24oYixjKXt2YXIgZD1zZXRUaW1lb3V0KGIsYSk7Yy5zdG9wPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KGQpfX0pfSxmdW5jdGlvbigpe3ZhciBhLGIsYyxkLGU7Yj15LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIixcInRcIiksYi5pbm5lckhUTUw9XCIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz5cIixkPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhXCIpWzBdLGM9eS5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpLGU9Yy5hcHBlbmRDaGlsZCh5LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpLGE9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWzBdLGQuc3R5bGUuY3NzVGV4dD1cInRvcDoxcHhcIixrLmdldFNldEF0dHJpYnV0ZT1cInRcIiE9PWIuY2xhc3NOYW1lLGsuc3R5bGU9L3RvcC8udGVzdChkLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpKSxrLmhyZWZOb3JtYWxpemVkPVwiL2FcIj09PWQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSxrLmNoZWNrT249ISFhLnZhbHVlLGsub3B0U2VsZWN0ZWQ9ZS5zZWxlY3RlZCxrLmVuY3R5cGU9ISF5LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLmVuY3R5cGUsYy5kaXNhYmxlZD0hMCxrLm9wdERpc2FibGVkPSFlLmRpc2FibGVkLGE9eS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIpLGsuaW5wdXQ9XCJcIj09PWEuZ2V0QXR0cmlidXRlKFwidmFsdWVcIiksYS52YWx1ZT1cInRcIixhLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInJhZGlvXCIpLGsucmFkaW9WYWx1ZT1cInRcIj09PWEudmFsdWV9KCk7dmFyIGxjPS9cXHIvZzttLmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPXRoaXNbMF07e2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQ9bS5pc0Z1bmN0aW9uKGEpLHRoaXMuZWFjaChmdW5jdGlvbihjKXt2YXIgZTsxPT09dGhpcy5ub2RlVHlwZSYmKGU9ZD9hLmNhbGwodGhpcyxjLG0odGhpcykudmFsKCkpOmEsbnVsbD09ZT9lPVwiXCI6XCJudW1iZXJcIj09dHlwZW9mIGU/ZSs9XCJcIjptLmlzQXJyYXkoZSkmJihlPW0ubWFwKGUsZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/XCJcIjphK1wiXCJ9KSksYj1tLnZhbEhvb2tzW3RoaXMudHlwZV18fG0udmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxiJiZcInNldFwiaW4gYiYmdm9pZCAwIT09Yi5zZXQodGhpcyxlLFwidmFsdWVcIil8fCh0aGlzLnZhbHVlPWUpKX0pO2lmKGUpcmV0dXJuIGI9bS52YWxIb29rc1tlLnR5cGVdfHxtLnZhbEhvb2tzW2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sYiYmXCJnZXRcImluIGImJnZvaWQgMCE9PShjPWIuZ2V0KGUsXCJ2YWx1ZVwiKSk/YzooYz1lLnZhbHVlLFwic3RyaW5nXCI9PXR5cGVvZiBjP2MucmVwbGFjZShsYyxcIlwiKTpudWxsPT1jP1wiXCI6Yyl9fX0pLG0uZXh0ZW5kKHt2YWxIb29rczp7b3B0aW9uOntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9bS5maW5kLmF0dHIoYSxcInZhbHVlXCIpO3JldHVybiBudWxsIT1iP2I6bS50cmltKG0udGV4dChhKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihhKXtmb3IodmFyIGIsYyxkPWEub3B0aW9ucyxlPWEuc2VsZWN0ZWRJbmRleCxmPVwic2VsZWN0LW9uZVwiPT09YS50eXBlfHwwPmUsZz1mP251bGw6W10saD1mP2UrMTpkLmxlbmd0aCxpPTA+ZT9oOmY/ZTowO2g+aTtpKyspaWYoYz1kW2ldLCEoIWMuc2VsZWN0ZWQmJmkhPT1lfHwoay5vcHREaXNhYmxlZD9jLmRpc2FibGVkOm51bGwhPT1jLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpKXx8Yy5wYXJlbnROb2RlLmRpc2FibGVkJiZtLm5vZGVOYW1lKGMucGFyZW50Tm9kZSxcIm9wdGdyb3VwXCIpKSl7aWYoYj1tKGMpLnZhbCgpLGYpcmV0dXJuIGI7Zy5wdXNoKGIpfXJldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU9YS5vcHRpb25zLGY9bS5tYWtlQXJyYXkoYiksZz1lLmxlbmd0aDt3aGlsZShnLS0paWYoZD1lW2ddLG0uaW5BcnJheShtLnZhbEhvb2tzLm9wdGlvbi5nZXQoZCksZik+PTApdHJ5e2Quc2VsZWN0ZWQ9Yz0hMH1jYXRjaChoKXtkLnNjcm9sbEhlaWdodH1lbHNlIGQuc2VsZWN0ZWQ9ITE7cmV0dXJuIGN8fChhLnNlbGVjdGVkSW5kZXg9LTEpLGV9fX19KSxtLmVhY2goW1wicmFkaW9cIixcImNoZWNrYm94XCJdLGZ1bmN0aW9uKCl7bS52YWxIb29rc1t0aGlzXT17c2V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG0uaXNBcnJheShiKT9hLmNoZWNrZWQ9bS5pbkFycmF5KG0oYSkudmFsKCksYik+PTA6dm9pZCAwfX0say5jaGVja09ufHwobS52YWxIb29rc1t0aGlzXS5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PT1hLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpP1wib25cIjphLnZhbHVlfSl9KTt2YXIgbWMsbmMsb2M9bS5leHByLmF0dHJIYW5kbGUscGM9L14oPzpjaGVja2VkfHNlbGVjdGVkKSQvaSxxYz1rLmdldFNldEF0dHJpYnV0ZSxyYz1rLmlucHV0O20uZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFYodGhpcyxtLmF0dHIsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe20ucmVtb3ZlQXR0cih0aGlzLGEpfSl9fSksbS5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1hLm5vZGVUeXBlO2lmKGEmJjMhPT1mJiY4IT09ZiYmMiE9PWYpcmV0dXJuIHR5cGVvZiBhLmdldEF0dHJpYnV0ZT09PUs/bS5wcm9wKGEsYixjKTooMT09PWYmJm0uaXNYTUxEb2MoYSl8fChiPWIudG9Mb3dlckNhc2UoKSxkPW0uYXR0ckhvb2tzW2JdfHwobS5leHByLm1hdGNoLmJvb2wudGVzdChiKT9uYzptYykpLHZvaWQgMD09PWM/ZCYmXCJnZXRcImluIGQmJm51bGwhPT0oZT1kLmdldChhLGIpKT9lOihlPW0uZmluZC5hdHRyKGEsYiksbnVsbD09ZT92b2lkIDA6ZSk6bnVsbCE9PWM/ZCYmXCJzZXRcImluIGQmJnZvaWQgMCE9PShlPWQuc2V0KGEsYyxiKSk/ZTooYS5zZXRBdHRyaWJ1dGUoYixjK1wiXCIpLGMpOnZvaWQgbS5yZW1vdmVBdHRyKGEsYikpfSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlPTAsZj1iJiZiLm1hdGNoKEUpO2lmKGYmJjE9PT1hLm5vZGVUeXBlKXdoaWxlKGM9ZltlKytdKWQ9bS5wcm9wRml4W2NdfHxjLG0uZXhwci5tYXRjaC5ib29sLnRlc3QoYyk/cmMmJnFjfHwhcGMudGVzdChjKT9hW2RdPSExOmFbbS5jYW1lbENhc2UoXCJkZWZhdWx0LVwiK2MpXT1hW2RdPSExOm0uYXR0cihhLGMsXCJcIiksYS5yZW1vdmVBdHRyaWJ1dGUocWM/YzpkKX0sYXR0ckhvb2tzOnt0eXBlOntzZXQ6ZnVuY3Rpb24oYSxiKXtpZighay5yYWRpb1ZhbHVlJiZcInJhZGlvXCI9PT1iJiZtLm5vZGVOYW1lKGEsXCJpbnB1dFwiKSl7dmFyIGM9YS52YWx1ZTtyZXR1cm4gYS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsYiksYyYmKGEudmFsdWU9YyksYn19fX19KSxuYz17c2V0OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYj09PSExP20ucmVtb3ZlQXR0cihhLGMpOnJjJiZxY3x8IXBjLnRlc3QoYyk/YS5zZXRBdHRyaWJ1dGUoIXFjJiZtLnByb3BGaXhbY118fGMsYyk6YVttLmNhbWVsQ2FzZShcImRlZmF1bHQtXCIrYyldPWFbY109ITAsY319LG0uZWFjaChtLmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goL1xcdysvZyksZnVuY3Rpb24oYSxiKXt2YXIgYz1vY1tiXXx8bS5maW5kLmF0dHI7b2NbYl09cmMmJnFjfHwhcGMudGVzdChiKT9mdW5jdGlvbihhLGIsZCl7dmFyIGUsZjtyZXR1cm4gZHx8KGY9b2NbYl0sb2NbYl09ZSxlPW51bGwhPWMoYSxiLGQpP2IudG9Mb3dlckNhc2UoKTpudWxsLG9jW2JdPWYpLGV9OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYz92b2lkIDA6YVttLmNhbWVsQ2FzZShcImRlZmF1bHQtXCIrYildP2IudG9Mb3dlckNhc2UoKTpudWxsfX0pLHJjJiZxY3x8KG0uYXR0ckhvb2tzLnZhbHVlPXtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBtLm5vZGVOYW1lKGEsXCJpbnB1dFwiKT92b2lkKGEuZGVmYXVsdFZhbHVlPWIpOm1jJiZtYy5zZXQoYSxiLGMpfX0pLHFjfHwobWM9e3NldDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9YS5nZXRBdHRyaWJ1dGVOb2RlKGMpO3JldHVybiBkfHxhLnNldEF0dHJpYnV0ZU5vZGUoZD1hLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKGMpKSxkLnZhbHVlPWIrPVwiXCIsXCJ2YWx1ZVwiPT09Y3x8Yj09PWEuZ2V0QXR0cmlidXRlKGMpP2I6dm9pZCAwfX0sb2MuaWQ9b2MubmFtZT1vYy5jb29yZHM9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO3JldHVybiBjP3ZvaWQgMDooZD1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZcIlwiIT09ZC52YWx1ZT9kLnZhbHVlOm51bGx9LG0udmFsSG9va3MuYnV0dG9uPXtnZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmdldEF0dHJpYnV0ZU5vZGUoYik7cmV0dXJuIGMmJmMuc3BlY2lmaWVkP2MudmFsdWU6dm9pZCAwfSxzZXQ6bWMuc2V0fSxtLmF0dHJIb29rcy5jb250ZW50ZWRpdGFibGU9e3NldDpmdW5jdGlvbihhLGIsYyl7bWMuc2V0KGEsXCJcIj09PWI/ITE6YixjKX19LG0uZWFjaChbXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLGZ1bmN0aW9uKGEsYil7bS5hdHRySG9va3NbYl09e3NldDpmdW5jdGlvbihhLGMpe3JldHVyblwiXCI9PT1jPyhhLnNldEF0dHJpYnV0ZShiLFwiYXV0b1wiKSxjKTp2b2lkIDB9fX0pKSxrLnN0eWxlfHwobS5hdHRySG9va3Muc3R5bGU9e2dldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5zdHlsZS5jc3NUZXh0fHx2b2lkIDB9LHNldDpmdW5jdGlvbihhLGIpe3JldHVybiBhLnN0eWxlLmNzc1RleHQ9YitcIlwifX0pO3ZhciBzYz0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0KSQvaSx0Yz0vXig/OmF8YXJlYSkkL2k7bS5mbi5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVih0aGlzLG0ucHJvcCxhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlUHJvcDpmdW5jdGlvbihhKXtyZXR1cm4gYT1tLnByb3BGaXhbYV18fGEsdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dHJ5e3RoaXNbYV09dm9pZCAwLGRlbGV0ZSB0aGlzW2FdfWNhdGNoKGIpe319KX19KSxtLmV4dGVuZCh7cHJvcEZpeDp7XCJmb3JcIjpcImh0bWxGb3JcIixcImNsYXNzXCI6XCJjbGFzc05hbWVcIn0scHJvcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGc9YS5ub2RlVHlwZTtpZihhJiYzIT09ZyYmOCE9PWcmJjIhPT1nKXJldHVybiBmPTEhPT1nfHwhbS5pc1hNTERvYyhhKSxmJiYoYj1tLnByb3BGaXhbYl18fGIsZT1tLnByb3BIb29rc1tiXSksdm9pZCAwIT09Yz9lJiZcInNldFwiaW4gZSYmdm9pZCAwIT09KGQ9ZS5zZXQoYSxjLGIpKT9kOmFbYl09YzplJiZcImdldFwiaW4gZSYmbnVsbCE9PShkPWUuZ2V0KGEsYikpP2Q6YVtiXX0scHJvcEhvb2tzOnt0YWJJbmRleDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPW0uZmluZC5hdHRyKGEsXCJ0YWJpbmRleFwiKTtyZXR1cm4gYj9wYXJzZUludChiLDEwKTpzYy50ZXN0KGEubm9kZU5hbWUpfHx0Yy50ZXN0KGEubm9kZU5hbWUpJiZhLmhyZWY/MDotMX19fX0pLGsuaHJlZk5vcm1hbGl6ZWR8fG0uZWFjaChbXCJocmVmXCIsXCJzcmNcIl0sZnVuY3Rpb24oYSxiKXttLnByb3BIb29rc1tiXT17Z2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShiLDQpfX19KSxrLm9wdFNlbGVjdGVkfHwobS5wcm9wSG9va3Muc2VsZWN0ZWQ9e2dldDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIGImJihiLnNlbGVjdGVkSW5kZXgsYi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCksbnVsbH19KSxtLmVhY2goW1widGFiSW5kZXhcIixcInJlYWRPbmx5XCIsXCJtYXhMZW5ndGhcIixcImNlbGxTcGFjaW5nXCIsXCJjZWxsUGFkZGluZ1wiLFwicm93U3BhblwiLFwiY29sU3BhblwiLFwidXNlTWFwXCIsXCJmcmFtZUJvcmRlclwiLFwiY29udGVudEVkaXRhYmxlXCJdLGZ1bmN0aW9uKCl7bS5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pLGsuZW5jdHlwZXx8KG0ucHJvcEZpeC5lbmN0eXBlPVwiZW5jb2RpbmdcIik7dmFyIHVjPS9bXFx0XFxyXFxuXFxmXS9nO20uZm4uZXh0ZW5kKHthZGRDbGFzczpmdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaD0wLGk9dGhpcy5sZW5ndGgsaj1cInN0cmluZ1wiPT10eXBlb2YgYSYmYTtpZihtLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXttKHRoaXMpLmFkZENsYXNzKGEuY2FsbCh0aGlzLGIsdGhpcy5jbGFzc05hbWUpKX0pO2lmKGopZm9yKGI9KGF8fFwiXCIpLm1hdGNoKEUpfHxbXTtpPmg7aCsrKWlmKGM9dGhpc1toXSxkPTE9PT1jLm5vZGVUeXBlJiYoYy5jbGFzc05hbWU/KFwiIFwiK2MuY2xhc3NOYW1lK1wiIFwiKS5yZXBsYWNlKHVjLFwiIFwiKTpcIiBcIikpe2Y9MDt3aGlsZShlPWJbZisrXSlkLmluZGV4T2YoXCIgXCIrZStcIiBcIik8MCYmKGQrPWUrXCIgXCIpO2c9bS50cmltKGQpLGMuY2xhc3NOYW1lIT09ZyYmKGMuY2xhc3NOYW1lPWcpfXJldHVybiB0aGlzfSxyZW1vdmVDbGFzczpmdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaD0wLGk9dGhpcy5sZW5ndGgsaj0wPT09YXJndW1lbnRzLmxlbmd0aHx8XCJzdHJpbmdcIj09dHlwZW9mIGEmJmE7aWYobS5pc0Z1bmN0aW9uKGEpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYil7bSh0aGlzKS5yZW1vdmVDbGFzcyhhLmNhbGwodGhpcyxiLHRoaXMuY2xhc3NOYW1lKSl9KTtpZihqKWZvcihiPShhfHxcIlwiKS5tYXRjaChFKXx8W107aT5oO2grKylpZihjPXRoaXNbaF0sZD0xPT09Yy5ub2RlVHlwZSYmKGMuY2xhc3NOYW1lPyhcIiBcIitjLmNsYXNzTmFtZStcIiBcIikucmVwbGFjZSh1YyxcIiBcIik6XCJcIikpe2Y9MDt3aGlsZShlPWJbZisrXSl3aGlsZShkLmluZGV4T2YoXCIgXCIrZStcIiBcIik+PTApZD1kLnJlcGxhY2UoXCIgXCIrZStcIiBcIixcIiBcIik7Zz1hP20udHJpbShkKTpcIlwiLGMuY2xhc3NOYW1lIT09ZyYmKGMuY2xhc3NOYW1lPWcpfXJldHVybiB0aGlzfSx0b2dnbGVDbGFzczpmdW5jdGlvbihhLGIpe3ZhciBjPXR5cGVvZiBhO3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgYiYmXCJzdHJpbmdcIj09PWM/Yj90aGlzLmFkZENsYXNzKGEpOnRoaXMucmVtb3ZlQ2xhc3MoYSk6dGhpcy5lYWNoKG0uaXNGdW5jdGlvbihhKT9mdW5jdGlvbihjKXttKHRoaXMpLnRvZ2dsZUNsYXNzKGEuY2FsbCh0aGlzLGMsdGhpcy5jbGFzc05hbWUsYiksYil9OmZ1bmN0aW9uKCl7aWYoXCJzdHJpbmdcIj09PWMpe3ZhciBiLGQ9MCxlPW0odGhpcyksZj1hLm1hdGNoKEUpfHxbXTt3aGlsZShiPWZbZCsrXSllLmhhc0NsYXNzKGIpP2UucmVtb3ZlQ2xhc3MoYik6ZS5hZGRDbGFzcyhiKX1lbHNlKGM9PT1LfHxcImJvb2xlYW5cIj09PWMpJiYodGhpcy5jbGFzc05hbWUmJm0uX2RhdGEodGhpcyxcIl9fY2xhc3NOYW1lX19cIix0aGlzLmNsYXNzTmFtZSksdGhpcy5jbGFzc05hbWU9dGhpcy5jbGFzc05hbWV8fGE9PT0hMT9cIlwiOm0uX2RhdGEodGhpcyxcIl9fY2xhc3NOYW1lX19cIil8fFwiXCIpfSl9LGhhc0NsYXNzOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1cIiBcIithK1wiIFwiLGM9MCxkPXRoaXMubGVuZ3RoO2Q+YztjKyspaWYoMT09PXRoaXNbY10ubm9kZVR5cGUmJihcIiBcIit0aGlzW2NdLmNsYXNzTmFtZStcIiBcIikucmVwbGFjZSh1YyxcIiBcIikuaW5kZXhPZihiKT49MClyZXR1cm4hMDtyZXR1cm4hMX19KSxtLmVhY2goXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7bS5mbltiXT1mdW5jdGlvbihhLGMpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjA/dGhpcy5vbihiLG51bGwsYSxjKTp0aGlzLnRyaWdnZXIoYil9fSksbS5mbi5leHRlbmQoe2hvdmVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMubW91c2VlbnRlcihhKS5tb3VzZWxlYXZlKGJ8fGEpfSxiaW5kOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGhpcy5vbihhLG51bGwsYixjKX0sdW5iaW5kOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMub2ZmKGEsbnVsbCxiKX0sZGVsZWdhdGU6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMub24oYixhLGMsZCl9LHVuZGVsZWdhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLm9mZihhLFwiKipcIik6dGhpcy5vZmYoYixhfHxcIioqXCIsYyl9fSk7dmFyIHZjPW0ubm93KCksd2M9L1xcPy8seGM9LygsKXwoXFxbfHspfCh9fF0pfFwiKD86W15cIlxcXFxcXHJcXG5dfFxcXFxbXCJcXFxcXFwvYmZucnRdfFxcXFx1W1xcZGEtZkEtRl17NH0pKlwiXFxzKjo/fHRydWV8ZmFsc2V8bnVsbHwtPyg/ITBcXGQpXFxkKyg/OlxcLlxcZCt8KSg/OltlRV1bKy1dP1xcZCt8KS9nO20ucGFyc2VKU09OPWZ1bmN0aW9uKGIpe2lmKGEuSlNPTiYmYS5KU09OLnBhcnNlKXJldHVybiBhLkpTT04ucGFyc2UoYitcIlwiKTt2YXIgYyxkPW51bGwsZT1tLnRyaW0oYitcIlwiKTtyZXR1cm4gZSYmIW0udHJpbShlLnJlcGxhY2UoeGMsZnVuY3Rpb24oYSxiLGUsZil7cmV0dXJuIGMmJmImJihkPTApLDA9PT1kP2E6KGM9ZXx8YixkKz0hZi0hZSxcIlwiKX0pKT9GdW5jdGlvbihcInJldHVybiBcIitlKSgpOm0uZXJyb3IoXCJJbnZhbGlkIEpTT046IFwiK2IpfSxtLnBhcnNlWE1MPWZ1bmN0aW9uKGIpe3ZhciBjLGQ7aWYoIWJ8fFwic3RyaW5nXCIhPXR5cGVvZiBiKXJldHVybiBudWxsO3RyeXthLkRPTVBhcnNlcj8oZD1uZXcgRE9NUGFyc2VyLGM9ZC5wYXJzZUZyb21TdHJpbmcoYixcInRleHQveG1sXCIpKTooYz1uZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxET01cIiksYy5hc3luYz1cImZhbHNlXCIsYy5sb2FkWE1MKGIpKX1jYXRjaChlKXtjPXZvaWQgMH1yZXR1cm4gYyYmYy5kb2N1bWVudEVsZW1lbnQmJiFjLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RofHxtLmVycm9yKFwiSW52YWxpZCBYTUw6IFwiK2IpLGN9O3ZhciB5Yyx6YyxBYz0vIy4qJC8sQmM9LyhbPyZdKV89W14mXSovLENjPS9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKVxccj8kL2dtLERjPS9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLEVjPS9eKD86R0VUfEhFQUQpJC8sRmM9L15cXC9cXC8vLEdjPS9eKFtcXHcuKy1dKzopKD86XFwvXFwvKD86W15cXC8/I10qQHwpKFteXFwvPyM6XSopKD86OihcXGQrKXwpfCkvLEhjPXt9LEljPXt9LEpjPVwiKi9cIi5jb25jYXQoXCIqXCIpO3RyeXt6Yz1sb2NhdGlvbi5ocmVmfWNhdGNoKEtjKXt6Yz15LmNyZWF0ZUVsZW1lbnQoXCJhXCIpLHpjLmhyZWY9XCJcIix6Yz16Yy5ocmVmfXljPUdjLmV4ZWMoemMudG9Mb3dlckNhc2UoKSl8fFtdO2Z1bmN0aW9uIExjKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe1wic3RyaW5nXCIhPXR5cGVvZiBiJiYoYz1iLGI9XCIqXCIpO3ZhciBkLGU9MCxmPWIudG9Mb3dlckNhc2UoKS5tYXRjaChFKXx8W107aWYobS5pc0Z1bmN0aW9uKGMpKXdoaWxlKGQ9ZltlKytdKVwiK1wiPT09ZC5jaGFyQXQoMCk/KGQ9ZC5zbGljZSgxKXx8XCIqXCIsKGFbZF09YVtkXXx8W10pLnVuc2hpZnQoYykpOihhW2RdPWFbZF18fFtdKS5wdXNoKGMpfX1mdW5jdGlvbiBNYyhhLGIsYyxkKXt2YXIgZT17fSxmPWE9PT1JYztmdW5jdGlvbiBnKGgpe3ZhciBpO3JldHVybiBlW2hdPSEwLG0uZWFjaChhW2hdfHxbXSxmdW5jdGlvbihhLGgpe3ZhciBqPWgoYixjLGQpO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBqfHxmfHxlW2pdP2Y/IShpPWopOnZvaWQgMDooYi5kYXRhVHlwZXMudW5zaGlmdChqKSxnKGopLCExKX0pLGl9cmV0dXJuIGcoYi5kYXRhVHlwZXNbMF0pfHwhZVtcIipcIl0mJmcoXCIqXCIpfWZ1bmN0aW9uIE5jKGEsYil7dmFyIGMsZCxlPW0uYWpheFNldHRpbmdzLmZsYXRPcHRpb25zfHx7fTtmb3IoZCBpbiBiKXZvaWQgMCE9PWJbZF0mJigoZVtkXT9hOmN8fChjPXt9KSlbZF09YltkXSk7cmV0dXJuIGMmJm0uZXh0ZW5kKCEwLGEsYyksYX1mdW5jdGlvbiBPYyhhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLmNvbnRlbnRzLGk9YS5kYXRhVHlwZXM7d2hpbGUoXCIqXCI9PT1pWzBdKWkuc2hpZnQoKSx2b2lkIDA9PT1lJiYoZT1hLm1pbWVUeXBlfHxiLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKTtpZihlKWZvcihnIGluIGgpaWYoaFtnXSYmaFtnXS50ZXN0KGUpKXtpLnVuc2hpZnQoZyk7YnJlYWt9aWYoaVswXWluIGMpZj1pWzBdO2Vsc2V7Zm9yKGcgaW4gYyl7aWYoIWlbMF18fGEuY29udmVydGVyc1tnK1wiIFwiK2lbMF1dKXtmPWc7YnJlYWt9ZHx8KGQ9Zyl9Zj1mfHxkfXJldHVybiBmPyhmIT09aVswXSYmaS51bnNoaWZ0KGYpLGNbZl0pOnZvaWQgMH1mdW5jdGlvbiBQYyhhLGIsYyxkKXt2YXIgZSxmLGcsaCxpLGo9e30saz1hLmRhdGFUeXBlcy5zbGljZSgpO2lmKGtbMV0pZm9yKGcgaW4gYS5jb252ZXJ0ZXJzKWpbZy50b0xvd2VyQ2FzZSgpXT1hLmNvbnZlcnRlcnNbZ107Zj1rLnNoaWZ0KCk7d2hpbGUoZilpZihhLnJlc3BvbnNlRmllbGRzW2ZdJiYoY1thLnJlc3BvbnNlRmllbGRzW2ZdXT1iKSwhaSYmZCYmYS5kYXRhRmlsdGVyJiYoYj1hLmRhdGFGaWx0ZXIoYixhLmRhdGFUeXBlKSksaT1mLGY9ay5zaGlmdCgpKWlmKFwiKlwiPT09ZilmPWk7ZWxzZSBpZihcIipcIiE9PWkmJmkhPT1mKXtpZihnPWpbaStcIiBcIitmXXx8altcIiogXCIrZl0sIWcpZm9yKGUgaW4gailpZihoPWUuc3BsaXQoXCIgXCIpLGhbMV09PT1mJiYoZz1qW2krXCIgXCIraFswXV18fGpbXCIqIFwiK2hbMF1dKSl7Zz09PSEwP2c9altlXTpqW2VdIT09ITAmJihmPWhbMF0say51bnNoaWZ0KGhbMV0pKTticmVha31pZihnIT09ITApaWYoZyYmYVtcInRocm93c1wiXSliPWcoYik7ZWxzZSB0cnl7Yj1nKGIpfWNhdGNoKGwpe3JldHVybntzdGF0ZTpcInBhcnNlcmVycm9yXCIsZXJyb3I6Zz9sOlwiTm8gY29udmVyc2lvbiBmcm9tIFwiK2krXCIgdG8gXCIrZn19fXJldHVybntzdGF0ZTpcInN1Y2Nlc3NcIixkYXRhOmJ9fW0uZXh0ZW5kKHthY3RpdmU6MCxsYXN0TW9kaWZpZWQ6e30sZXRhZzp7fSxhamF4U2V0dGluZ3M6e3VybDp6Yyx0eXBlOlwiR0VUXCIsaXNMb2NhbDpEYy50ZXN0KHljWzFdKSxnbG9iYWw6ITAscHJvY2Vzc0RhdGE6ITAsYXN5bmM6ITAsY29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixhY2NlcHRzOntcIipcIjpKYyx0ZXh0OlwidGV4dC9wbGFpblwiLGh0bWw6XCJ0ZXh0L2h0bWxcIix4bWw6XCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsanNvbjpcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwifSxjb250ZW50czp7eG1sOi94bWwvLGh0bWw6L2h0bWwvLGpzb246L2pzb24vfSxyZXNwb25zZUZpZWxkczp7eG1sOlwicmVzcG9uc2VYTUxcIix0ZXh0OlwicmVzcG9uc2VUZXh0XCIsanNvbjpcInJlc3BvbnNlSlNPTlwifSxjb252ZXJ0ZXJzOntcIiogdGV4dFwiOlN0cmluZyxcInRleHQgaHRtbFwiOiEwLFwidGV4dCBqc29uXCI6bS5wYXJzZUpTT04sXCJ0ZXh0IHhtbFwiOm0ucGFyc2VYTUx9LGZsYXRPcHRpb25zOnt1cmw6ITAsY29udGV4dDohMH19LGFqYXhTZXR1cDpmdW5jdGlvbihhLGIpe3JldHVybiBiP05jKE5jKGEsbS5hamF4U2V0dGluZ3MpLGIpOk5jKG0uYWpheFNldHRpbmdzLGEpfSxhamF4UHJlZmlsdGVyOkxjKEhjKSxhamF4VHJhbnNwb3J0OkxjKEljKSxhamF4OmZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIj09dHlwZW9mIGEmJihiPWEsYT12b2lkIDApLGI9Ynx8e307dmFyIGMsZCxlLGYsZyxoLGksaixrPW0uYWpheFNldHVwKHt9LGIpLGw9ay5jb250ZXh0fHxrLG49ay5jb250ZXh0JiYobC5ub2RlVHlwZXx8bC5qcXVlcnkpP20obCk6bS5ldmVudCxvPW0uRGVmZXJyZWQoKSxwPW0uQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikscT1rLnN0YXR1c0NvZGV8fHt9LHI9e30scz17fSx0PTAsdT1cImNhbmNlbGVkXCIsdj17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKDI9PT10KXtpZighail7aj17fTt3aGlsZShiPUNjLmV4ZWMoZikpaltiWzFdLnRvTG93ZXJDYXNlKCldPWJbMl19Yj1qW2EudG9Mb3dlckNhc2UoKV19cmV0dXJuIG51bGw9PWI/bnVsbDpifSxnZXRBbGxSZXNwb25zZUhlYWRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gMj09PXQ/ZjpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50b0xvd2VyQ2FzZSgpO3JldHVybiB0fHwoYT1zW2NdPXNbY118fGEsclthXT1iKSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGEpe3JldHVybiB0fHwoay5taW1lVHlwZT1hKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKGEpaWYoMj50KWZvcihiIGluIGEpcVtiXT1bcVtiXSxhW2JdXTtlbHNlIHYuYWx3YXlzKGFbdi5zdGF0dXNdKTtyZXR1cm4gdGhpc30sYWJvcnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YXx8dTtyZXR1cm4gaSYmaS5hYm9ydChiKSx4KDAsYiksdGhpc319O2lmKG8ucHJvbWlzZSh2KS5jb21wbGV0ZT1wLmFkZCx2LnN1Y2Nlc3M9di5kb25lLHYuZXJyb3I9di5mYWlsLGsudXJsPSgoYXx8ay51cmx8fHpjKStcIlwiKS5yZXBsYWNlKEFjLFwiXCIpLnJlcGxhY2UoRmMseWNbMV0rXCIvL1wiKSxrLnR5cGU9Yi5tZXRob2R8fGIudHlwZXx8ay5tZXRob2R8fGsudHlwZSxrLmRhdGFUeXBlcz1tLnRyaW0oay5kYXRhVHlwZXx8XCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2goRSl8fFtcIlwiXSxudWxsPT1rLmNyb3NzRG9tYWluJiYoYz1HYy5leGVjKGsudXJsLnRvTG93ZXJDYXNlKCkpLGsuY3Jvc3NEb21haW49ISghY3x8Y1sxXT09PXljWzFdJiZjWzJdPT09eWNbMl0mJihjWzNdfHwoXCJodHRwOlwiPT09Y1sxXT9cIjgwXCI6XCI0NDNcIikpPT09KHljWzNdfHwoXCJodHRwOlwiPT09eWNbMV0/XCI4MFwiOlwiNDQzXCIpKSkpLGsuZGF0YSYmay5wcm9jZXNzRGF0YSYmXCJzdHJpbmdcIiE9dHlwZW9mIGsuZGF0YSYmKGsuZGF0YT1tLnBhcmFtKGsuZGF0YSxrLnRyYWRpdGlvbmFsKSksTWMoSGMsayxiLHYpLDI9PT10KXJldHVybiB2O2g9bS5ldmVudCYmay5nbG9iYWwsaCYmMD09PW0uYWN0aXZlKysmJm0uZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSxrLnR5cGU9ay50eXBlLnRvVXBwZXJDYXNlKCksay5oYXNDb250ZW50PSFFYy50ZXN0KGsudHlwZSksZT1rLnVybCxrLmhhc0NvbnRlbnR8fChrLmRhdGEmJihlPWsudXJsKz0od2MudGVzdChlKT9cIiZcIjpcIj9cIikray5kYXRhLGRlbGV0ZSBrLmRhdGEpLGsuY2FjaGU9PT0hMSYmKGsudXJsPUJjLnRlc3QoZSk/ZS5yZXBsYWNlKEJjLFwiJDFfPVwiK3ZjKyspOmUrKHdjLnRlc3QoZSk/XCImXCI6XCI/XCIpK1wiXz1cIit2YysrKSksay5pZk1vZGlmaWVkJiYobS5sYXN0TW9kaWZpZWRbZV0mJnYuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsbS5sYXN0TW9kaWZpZWRbZV0pLG0uZXRhZ1tlXSYmdi5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLG0uZXRhZ1tlXSkpLChrLmRhdGEmJmsuaGFzQ29udGVudCYmay5jb250ZW50VHlwZSE9PSExfHxiLmNvbnRlbnRUeXBlKSYmdi5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsay5jb250ZW50VHlwZSksdi5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsay5kYXRhVHlwZXNbMF0mJmsuYWNjZXB0c1trLmRhdGFUeXBlc1swXV0/ay5hY2NlcHRzW2suZGF0YVR5cGVzWzBdXSsoXCIqXCIhPT1rLmRhdGFUeXBlc1swXT9cIiwgXCIrSmMrXCI7IHE9MC4wMVwiOlwiXCIpOmsuYWNjZXB0c1tcIipcIl0pO2ZvcihkIGluIGsuaGVhZGVycyl2LnNldFJlcXVlc3RIZWFkZXIoZCxrLmhlYWRlcnNbZF0pO2lmKGsuYmVmb3JlU2VuZCYmKGsuYmVmb3JlU2VuZC5jYWxsKGwsdixrKT09PSExfHwyPT09dCkpcmV0dXJuIHYuYWJvcnQoKTt1PVwiYWJvcnRcIjtmb3IoZCBpbntzdWNjZXNzOjEsZXJyb3I6MSxjb21wbGV0ZToxfSl2W2RdKGtbZF0pO2lmKGk9TWMoSWMsayxiLHYpKXt2LnJlYWR5U3RhdGU9MSxoJiZuLnRyaWdnZXIoXCJhamF4U2VuZFwiLFt2LGtdKSxrLmFzeW5jJiZrLnRpbWVvdXQ+MCYmKGc9c2V0VGltZW91dChmdW5jdGlvbigpe3YuYWJvcnQoXCJ0aW1lb3V0XCIpfSxrLnRpbWVvdXQpKTt0cnl7dD0xLGkuc2VuZChyLHgpfWNhdGNoKHcpe2lmKCEoMj50KSl0aHJvdyB3O3goLTEsdyl9fWVsc2UgeCgtMSxcIk5vIFRyYW5zcG9ydFwiKTtmdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBqLHIscyx1LHcseD1iOzIhPT10JiYodD0yLGcmJmNsZWFyVGltZW91dChnKSxpPXZvaWQgMCxmPWR8fFwiXCIsdi5yZWFkeVN0YXRlPWE+MD80OjAsaj1hPj0yMDAmJjMwMD5hfHwzMDQ9PT1hLGMmJih1PU9jKGssdixjKSksdT1QYyhrLHUsdixqKSxqPyhrLmlmTW9kaWZpZWQmJih3PXYuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpLHcmJihtLmxhc3RNb2RpZmllZFtlXT13KSx3PXYuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpLHcmJihtLmV0YWdbZV09dykpLDIwND09PWF8fFwiSEVBRFwiPT09ay50eXBlP3g9XCJub2NvbnRlbnRcIjozMDQ9PT1hP3g9XCJub3Rtb2RpZmllZFwiOih4PXUuc3RhdGUscj11LmRhdGEscz11LmVycm9yLGo9IXMpKToocz14LChhfHwheCkmJih4PVwiZXJyb3JcIiwwPmEmJihhPTApKSksdi5zdGF0dXM9YSx2LnN0YXR1c1RleHQ9KGJ8fHgpK1wiXCIsaj9vLnJlc29sdmVXaXRoKGwsW3IseCx2XSk6by5yZWplY3RXaXRoKGwsW3YseCxzXSksdi5zdGF0dXNDb2RlKHEpLHE9dm9pZCAwLGgmJm4udHJpZ2dlcihqP1wiYWpheFN1Y2Nlc3NcIjpcImFqYXhFcnJvclwiLFt2LGssaj9yOnNdKSxwLmZpcmVXaXRoKGwsW3YseF0pLGgmJihuLnRyaWdnZXIoXCJhamF4Q29tcGxldGVcIixbdixrXSksLS1tLmFjdGl2ZXx8bS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIikpKX1yZXR1cm4gdn0sZ2V0SlNPTjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG0uZ2V0KGEsYixjLFwianNvblwiKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG0uZ2V0KGEsdm9pZCAwLGIsXCJzY3JpcHRcIil9fSksbS5lYWNoKFtcImdldFwiLFwicG9zdFwiXSxmdW5jdGlvbihhLGIpe21bYl09ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIG0uaXNGdW5jdGlvbihjKSYmKGU9ZXx8ZCxkPWMsYz12b2lkIDApLG0uYWpheCh7dXJsOmEsdHlwZTpiLGRhdGFUeXBlOmUsZGF0YTpjLHN1Y2Nlc3M6ZH0pfX0pLG0uX2V2YWxVcmw9ZnVuY3Rpb24oYSl7cmV0dXJuIG0uYWpheCh7dXJsOmEsdHlwZTpcIkdFVFwiLGRhdGFUeXBlOlwic2NyaXB0XCIsYXN5bmM6ITEsZ2xvYmFsOiExLFwidGhyb3dzXCI6ITB9KX0sbS5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oYSl7aWYobS5pc0Z1bmN0aW9uKGEpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYil7bSh0aGlzKS53cmFwQWxsKGEuY2FsbCh0aGlzLGIpKX0pO2lmKHRoaXNbMF0pe3ZhciBiPW0oYSx0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKTt0aGlzWzBdLnBhcmVudE5vZGUmJmIuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLGIubWFwKGZ1bmN0aW9uKCl7dmFyIGE9dGhpczt3aGlsZShhLmZpcnN0Q2hpbGQmJjE9PT1hLmZpcnN0Q2hpbGQubm9kZVR5cGUpYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9KS5hcHBlbmQodGhpcyl9cmV0dXJuIHRoaXN9LHdyYXBJbm5lcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKG0uaXNGdW5jdGlvbihhKT9mdW5jdGlvbihiKXttKHRoaXMpLndyYXBJbm5lcihhLmNhbGwodGhpcyxiKSl9OmZ1bmN0aW9uKCl7dmFyIGI9bSh0aGlzKSxjPWIuY29udGVudHMoKTtjLmxlbmd0aD9jLndyYXBBbGwoYSk6Yi5hcHBlbmQoYSl9KX0sd3JhcDpmdW5jdGlvbihhKXt2YXIgYj1tLmlzRnVuY3Rpb24oYSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihjKXttKHRoaXMpLndyYXBBbGwoYj9hLmNhbGwodGhpcyxjKTphKX0pfSx1bndyYXA6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCl7bS5ub2RlTmFtZSh0aGlzLFwiYm9keVwiKXx8bSh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSkuZW5kKCl9fSksbS5leHByLmZpbHRlcnMuaGlkZGVuPWZ1bmN0aW9uKGEpe3JldHVybiBhLm9mZnNldFdpZHRoPD0wJiZhLm9mZnNldEhlaWdodDw9MHx8IWsucmVsaWFibGVIaWRkZW5PZmZzZXRzKCkmJlwibm9uZVwiPT09KGEuc3R5bGUmJmEuc3R5bGUuZGlzcGxheXx8bS5jc3MoYSxcImRpc3BsYXlcIikpfSxtLmV4cHIuZmlsdGVycy52aXNpYmxlPWZ1bmN0aW9uKGEpe3JldHVybiFtLmV4cHIuZmlsdGVycy5oaWRkZW4oYSl9O3ZhciBRYz0vJTIwL2csUmM9L1xcW1xcXSQvLFNjPS9cXHI/XFxuL2csVGM9L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFVjPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiBWYyhhLGIsYyxkKXt2YXIgZTtpZihtLmlzQXJyYXkoYikpbS5lYWNoKGIsZnVuY3Rpb24oYixlKXtjfHxSYy50ZXN0KGEpP2QoYSxlKTpWYyhhK1wiW1wiKyhcIm9iamVjdFwiPT10eXBlb2YgZT9iOlwiXCIpK1wiXVwiLGUsYyxkKX0pO2Vsc2UgaWYoY3x8XCJvYmplY3RcIiE9PW0udHlwZShiKSlkKGEsYik7ZWxzZSBmb3IoZSBpbiBiKVZjKGErXCJbXCIrZStcIl1cIixiW2VdLGMsZCl9bS5wYXJhbT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1mdW5jdGlvbihhLGIpe2I9bS5pc0Z1bmN0aW9uKGIpP2IoKTpudWxsPT1iP1wiXCI6YixkW2QubGVuZ3RoXT1lbmNvZGVVUklDb21wb25lbnQoYSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGIpfTtpZih2b2lkIDA9PT1iJiYoYj1tLmFqYXhTZXR0aW5ncyYmbS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWwpLG0uaXNBcnJheShhKXx8YS5qcXVlcnkmJiFtLmlzUGxhaW5PYmplY3QoYSkpbS5lYWNoKGEsZnVuY3Rpb24oKXtlKHRoaXMubmFtZSx0aGlzLnZhbHVlKX0pO2Vsc2UgZm9yKGMgaW4gYSlWYyhjLGFbY10sYixlKTtyZXR1cm4gZC5qb2luKFwiJlwiKS5yZXBsYWNlKFFjLFwiK1wiKX0sbS5mbi5leHRlbmQoe3NlcmlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiBtLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGE9bS5wcm9wKHRoaXMsXCJlbGVtZW50c1wiKTtyZXR1cm4gYT9tLm1ha2VBcnJheShhKTp0aGlzfSkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIGE9dGhpcy50eXBlO3JldHVybiB0aGlzLm5hbWUmJiFtKHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpJiZVYy50ZXN0KHRoaXMubm9kZU5hbWUpJiYhVGMudGVzdChhKSYmKHRoaXMuY2hlY2tlZHx8IVcudGVzdChhKSl9KS5tYXAoZnVuY3Rpb24oYSxiKXt2YXIgYz1tKHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1jP251bGw6bS5pc0FycmF5KGMpP20ubWFwKGMsZnVuY3Rpb24oYSl7cmV0dXJue25hbWU6Yi5uYW1lLHZhbHVlOmEucmVwbGFjZShTYyxcIlxcclxcblwiKX19KTp7bmFtZTpiLm5hbWUsdmFsdWU6Yy5yZXBsYWNlKFNjLFwiXFxyXFxuXCIpfX0pLmdldCgpfX0pLG0uYWpheFNldHRpbmdzLnhocj12b2lkIDAhPT1hLkFjdGl2ZVhPYmplY3Q/ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc0xvY2FsJiYvXihnZXR8cG9zdHxoZWFkfHB1dHxkZWxldGV8b3B0aW9ucykkL2kudGVzdCh0aGlzLnR5cGUpJiZaYygpfHwkYygpfTpaYzt2YXIgV2M9MCxYYz17fSxZYz1tLmFqYXhTZXR0aW5ncy54aHIoKTthLmF0dGFjaEV2ZW50JiZhLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIixmdW5jdGlvbigpe2Zvcih2YXIgYSBpbiBYYylYY1thXSh2b2lkIDAsITApfSksay5jb3JzPSEhWWMmJlwid2l0aENyZWRlbnRpYWxzXCJpbiBZYyxZYz1rLmFqYXg9ISFZYyxZYyYmbS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGEpe2lmKCFhLmNyb3NzRG9tYWlufHxrLmNvcnMpe3ZhciBiO3JldHVybntzZW5kOmZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hLnhocigpLGc9KytXYztpZihmLm9wZW4oYS50eXBlLGEudXJsLGEuYXN5bmMsYS51c2VybmFtZSxhLnBhc3N3b3JkKSxhLnhockZpZWxkcylmb3IoZSBpbiBhLnhockZpZWxkcylmW2VdPWEueGhyRmllbGRzW2VdO2EubWltZVR5cGUmJmYub3ZlcnJpZGVNaW1lVHlwZSYmZi5vdmVycmlkZU1pbWVUeXBlKGEubWltZVR5cGUpLGEuY3Jvc3NEb21haW58fGNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdfHwoY1tcIlgtUmVxdWVzdGVkLVdpdGhcIl09XCJYTUxIdHRwUmVxdWVzdFwiKTtmb3IoZSBpbiBjKXZvaWQgMCE9PWNbZV0mJmYuc2V0UmVxdWVzdEhlYWRlcihlLGNbZV0rXCJcIik7Zi5zZW5kKGEuaGFzQ29udGVudCYmYS5kYXRhfHxudWxsKSxiPWZ1bmN0aW9uKGMsZSl7dmFyIGgsaSxqO2lmKGImJihlfHw0PT09Zi5yZWFkeVN0YXRlKSlpZihkZWxldGUgWGNbZ10sYj12b2lkIDAsZi5vbnJlYWR5c3RhdGVjaGFuZ2U9bS5ub29wLGUpNCE9PWYucmVhZHlTdGF0ZSYmZi5hYm9ydCgpO2Vsc2V7aj17fSxoPWYuc3RhdHVzLFwic3RyaW5nXCI9PXR5cGVvZiBmLnJlc3BvbnNlVGV4dCYmKGoudGV4dD1mLnJlc3BvbnNlVGV4dCk7dHJ5e2k9Zi5zdGF0dXNUZXh0fWNhdGNoKGspe2k9XCJcIn1ofHwhYS5pc0xvY2FsfHxhLmNyb3NzRG9tYWluPzEyMjM9PT1oJiYoaD0yMDQpOmg9ai50ZXh0PzIwMDo0MDR9aiYmZChoLGksaixmLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKX0sYS5hc3luYz80PT09Zi5yZWFkeVN0YXRlP3NldFRpbWVvdXQoYik6Zi5vbnJlYWR5c3RhdGVjaGFuZ2U9WGNbZ109YjpiKCl9LGFib3J0OmZ1bmN0aW9uKCl7YiYmYih2b2lkIDAsITApfX19fSk7ZnVuY3Rpb24gWmMoKXt0cnl7cmV0dXJuIG5ldyBhLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGIpe319ZnVuY3Rpb24gJGMoKXt0cnl7cmV0dXJuIG5ldyBhLkFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MSFRUUFwiKX1jYXRjaChiKXt9fW0uYWpheFNldHVwKHthY2NlcHRzOntzY3JpcHQ6XCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwifSxjb250ZW50czp7c2NyaXB0Oi8oPzpqYXZhfGVjbWEpc2NyaXB0L30sY29udmVydGVyczp7XCJ0ZXh0IHNjcmlwdFwiOmZ1bmN0aW9uKGEpe3JldHVybiBtLmdsb2JhbEV2YWwoYSksYX19fSksbS5hamF4UHJlZmlsdGVyKFwic2NyaXB0XCIsZnVuY3Rpb24oYSl7dm9pZCAwPT09YS5jYWNoZSYmKGEuY2FjaGU9ITEpLGEuY3Jvc3NEb21haW4mJihhLnR5cGU9XCJHRVRcIixhLmdsb2JhbD0hMSl9KSxtLmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIixmdW5jdGlvbihhKXtpZihhLmNyb3NzRG9tYWluKXt2YXIgYixjPXkuaGVhZHx8bShcImhlYWRcIilbMF18fHkuZG9jdW1lbnRFbGVtZW50O3JldHVybntzZW5kOmZ1bmN0aW9uKGQsZSl7Yj15LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksYi5hc3luYz0hMCxhLnNjcmlwdENoYXJzZXQmJihiLmNoYXJzZXQ9YS5zY3JpcHRDaGFyc2V0KSxiLnNyYz1hLnVybCxiLm9ubG9hZD1iLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbihhLGMpeyhjfHwhYi5yZWFkeVN0YXRlfHwvbG9hZGVkfGNvbXBsZXRlLy50ZXN0KGIucmVhZHlTdGF0ZSkpJiYoYi5vbmxvYWQ9Yi5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSxiPW51bGwsY3x8ZSgyMDAsXCJzdWNjZXNzXCIpKX0sYy5pbnNlcnRCZWZvcmUoYixjLmZpcnN0Q2hpbGQpfSxhYm9ydDpmdW5jdGlvbigpe2ImJmIub25sb2FkKHZvaWQgMCwhMCl9fX19KTt2YXIgX2M9W10sYWQ9Lyg9KVxcPyg/PSZ8JCl8XFw/XFw/LzttLmFqYXhTZXR1cCh7anNvbnA6XCJjYWxsYmFja1wiLGpzb25wQ2FsbGJhY2s6ZnVuY3Rpb24oKXt2YXIgYT1fYy5wb3AoKXx8bS5leHBhbmRvK1wiX1wiK3ZjKys7cmV0dXJuIHRoaXNbYV09ITAsYX19KSxtLmFqYXhQcmVmaWx0ZXIoXCJqc29uIGpzb25wXCIsZnVuY3Rpb24oYixjLGQpe3ZhciBlLGYsZyxoPWIuanNvbnAhPT0hMSYmKGFkLnRlc3QoYi51cmwpP1widXJsXCI6XCJzdHJpbmdcIj09dHlwZW9mIGIuZGF0YSYmIShiLmNvbnRlbnRUeXBlfHxcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpJiZhZC50ZXN0KGIuZGF0YSkmJlwiZGF0YVwiKTtyZXR1cm4gaHx8XCJqc29ucFwiPT09Yi5kYXRhVHlwZXNbMF0/KGU9Yi5qc29ucENhbGxiYWNrPW0uaXNGdW5jdGlvbihiLmpzb25wQ2FsbGJhY2spP2IuanNvbnBDYWxsYmFjaygpOmIuanNvbnBDYWxsYmFjayxoP2JbaF09YltoXS5yZXBsYWNlKGFkLFwiJDFcIitlKTpiLmpzb25wIT09ITEmJihiLnVybCs9KHdjLnRlc3QoYi51cmwpP1wiJlwiOlwiP1wiKStiLmpzb25wK1wiPVwiK2UpLGIuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdPWZ1bmN0aW9uKCl7cmV0dXJuIGd8fG0uZXJyb3IoZStcIiB3YXMgbm90IGNhbGxlZFwiKSxnWzBdfSxiLmRhdGFUeXBlc1swXT1cImpzb25cIixmPWFbZV0sYVtlXT1mdW5jdGlvbigpe2c9YXJndW1lbnRzfSxkLmFsd2F5cyhmdW5jdGlvbigpe2FbZV09ZixiW2VdJiYoYi5qc29ucENhbGxiYWNrPWMuanNvbnBDYWxsYmFjayxfYy5wdXNoKGUpKSxnJiZtLmlzRnVuY3Rpb24oZikmJmYoZ1swXSksZz1mPXZvaWQgMH0pLFwic2NyaXB0XCIpOnZvaWQgMH0pLG0ucGFyc2VIVE1MPWZ1bmN0aW9uKGEsYixjKXtpZighYXx8XCJzdHJpbmdcIiE9dHlwZW9mIGEpcmV0dXJuIG51bGw7XCJib29sZWFuXCI9PXR5cGVvZiBiJiYoYz1iLGI9ITEpLGI9Ynx8eTt2YXIgZD11LmV4ZWMoYSksZT0hYyYmW107cmV0dXJuIGQ/W2IuY3JlYXRlRWxlbWVudChkWzFdKV06KGQ9bS5idWlsZEZyYWdtZW50KFthXSxiLGUpLGUmJmUubGVuZ3RoJiZtKGUpLnJlbW92ZSgpLG0ubWVyZ2UoW10sZC5jaGlsZE5vZGVzKSl9O3ZhciBiZD1tLmZuLmxvYWQ7bS5mbi5sb2FkPWZ1bmN0aW9uKGEsYixjKXtpZihcInN0cmluZ1wiIT10eXBlb2YgYSYmYmQpcmV0dXJuIGJkLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgZCxlLGYsZz10aGlzLGg9YS5pbmRleE9mKFwiIFwiKTtyZXR1cm4gaD49MCYmKGQ9bS50cmltKGEuc2xpY2UoaCxhLmxlbmd0aCkpLGE9YS5zbGljZSgwLGgpKSxtLmlzRnVuY3Rpb24oYik/KGM9YixiPXZvaWQgMCk6YiYmXCJvYmplY3RcIj09dHlwZW9mIGImJihmPVwiUE9TVFwiKSxnLmxlbmd0aD4wJiZtLmFqYXgoe3VybDphLHR5cGU6ZixkYXRhVHlwZTpcImh0bWxcIixkYXRhOmJ9KS5kb25lKGZ1bmN0aW9uKGEpe2U9YXJndW1lbnRzLGcuaHRtbChkP20oXCI8ZGl2PlwiKS5hcHBlbmQobS5wYXJzZUhUTUwoYSkpLmZpbmQoZCk6YSl9KS5jb21wbGV0ZShjJiZmdW5jdGlvbihhLGIpe2cuZWFjaChjLGV8fFthLnJlc3BvbnNlVGV4dCxiLGFdKX0pLHRoaXN9LG0uZWFjaChbXCJhamF4U3RhcnRcIixcImFqYXhTdG9wXCIsXCJhamF4Q29tcGxldGVcIixcImFqYXhFcnJvclwiLFwiYWpheFN1Y2Nlc3NcIixcImFqYXhTZW5kXCJdLGZ1bmN0aW9uKGEsYil7bS5mbltiXT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5vbihiLGEpfX0pLG0uZXhwci5maWx0ZXJzLmFuaW1hdGVkPWZ1bmN0aW9uKGEpe3JldHVybiBtLmdyZXAobS50aW1lcnMsZnVuY3Rpb24oYil7cmV0dXJuIGE9PT1iLmVsZW19KS5sZW5ndGh9O3ZhciBjZD1hLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtmdW5jdGlvbiBkZChhKXtyZXR1cm4gbS5pc1dpbmRvdyhhKT9hOjk9PT1hLm5vZGVUeXBlP2EuZGVmYXVsdFZpZXd8fGEucGFyZW50V2luZG93OiExfW0ub2Zmc2V0PXtzZXRPZmZzZXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGgsaSxqLGs9bS5jc3MoYSxcInBvc2l0aW9uXCIpLGw9bShhKSxuPXt9O1wic3RhdGljXCI9PT1rJiYoYS5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIpLGg9bC5vZmZzZXQoKSxmPW0uY3NzKGEsXCJ0b3BcIiksaT1tLmNzcyhhLFwibGVmdFwiKSxqPShcImFic29sdXRlXCI9PT1rfHxcImZpeGVkXCI9PT1rKSYmbS5pbkFycmF5KFwiYXV0b1wiLFtmLGldKT4tMSxqPyhkPWwucG9zaXRpb24oKSxnPWQudG9wLGU9ZC5sZWZ0KTooZz1wYXJzZUZsb2F0KGYpfHwwLGU9cGFyc2VGbG9hdChpKXx8MCksbS5pc0Z1bmN0aW9uKGIpJiYoYj1iLmNhbGwoYSxjLGgpKSxudWxsIT1iLnRvcCYmKG4udG9wPWIudG9wLWgudG9wK2cpLG51bGwhPWIubGVmdCYmKG4ubGVmdD1iLmxlZnQtaC5sZWZ0K2UpLFwidXNpbmdcImluIGI/Yi51c2luZy5jYWxsKGEsbik6bC5jc3Mobil9fSxtLmZuLmV4dGVuZCh7b2Zmc2V0OmZ1bmN0aW9uKGEpe2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PWE/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oYil7bS5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsYSxiKX0pO3ZhciBiLGMsZD17dG9wOjAsbGVmdDowfSxlPXRoaXNbMF0sZj1lJiZlLm93bmVyRG9jdW1lbnQ7aWYoZilyZXR1cm4gYj1mLmRvY3VtZW50RWxlbWVudCxtLmNvbnRhaW5zKGIsZSk/KHR5cGVvZiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCE9PUsmJihkPWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLGM9ZGQoZikse3RvcDpkLnRvcCsoYy5wYWdlWU9mZnNldHx8Yi5zY3JvbGxUb3ApLShiLmNsaWVudFRvcHx8MCksbGVmdDpkLmxlZnQrKGMucGFnZVhPZmZzZXR8fGIuc2Nyb2xsTGVmdCktKGIuY2xpZW50TGVmdHx8MCl9KTpkfSxwb3NpdGlvbjpmdW5jdGlvbigpe2lmKHRoaXNbMF0pe3ZhciBhLGIsYz17dG9wOjAsbGVmdDowfSxkPXRoaXNbMF07cmV0dXJuXCJmaXhlZFwiPT09bS5jc3MoZCxcInBvc2l0aW9uXCIpP2I9ZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTooYT10aGlzLm9mZnNldFBhcmVudCgpLGI9dGhpcy5vZmZzZXQoKSxtLm5vZGVOYW1lKGFbMF0sXCJodG1sXCIpfHwoYz1hLm9mZnNldCgpKSxjLnRvcCs9bS5jc3MoYVswXSxcImJvcmRlclRvcFdpZHRoXCIsITApLGMubGVmdCs9bS5jc3MoYVswXSxcImJvcmRlckxlZnRXaWR0aFwiLCEwKSkse3RvcDpiLnRvcC1jLnRvcC1tLmNzcyhkLFwibWFyZ2luVG9wXCIsITApLGxlZnQ6Yi5sZWZ0LWMubGVmdC1tLmNzcyhkLFwibWFyZ2luTGVmdFwiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9mZnNldFBhcmVudHx8Y2Q7d2hpbGUoYSYmIW0ubm9kZU5hbWUoYSxcImh0bWxcIikmJlwic3RhdGljXCI9PT1tLmNzcyhhLFwicG9zaXRpb25cIikpYT1hLm9mZnNldFBhcmVudDtyZXR1cm4gYXx8Y2R9KX19KSxtLmVhY2goe3Njcm9sbExlZnQ6XCJwYWdlWE9mZnNldFwiLHNjcm9sbFRvcDpcInBhZ2VZT2Zmc2V0XCJ9LGZ1bmN0aW9uKGEsYil7dmFyIGM9L1kvLnRlc3QoYik7bS5mblthXT1mdW5jdGlvbihkKXtyZXR1cm4gVih0aGlzLGZ1bmN0aW9uKGEsZCxlKXt2YXIgZj1kZChhKTtyZXR1cm4gdm9pZCAwPT09ZT9mP2IgaW4gZj9mW2JdOmYuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W2RdOmFbZF06dm9pZChmP2Yuc2Nyb2xsVG8oYz9tKGYpLnNjcm9sbExlZnQoKTplLGM/ZTptKGYpLnNjcm9sbFRvcCgpKTphW2RdPWUpfSxhLGQsYXJndW1lbnRzLmxlbmd0aCxudWxsKX19KSxtLmVhY2goW1widG9wXCIsXCJsZWZ0XCJdLGZ1bmN0aW9uKGEsYil7bS5jc3NIb29rc1tiXT1MYihrLnBpeGVsUG9zaXRpb24sZnVuY3Rpb24oYSxjKXtyZXR1cm4gYz8oYz1KYihhLGIpLEhiLnRlc3QoYyk/bShhKS5wb3NpdGlvbigpW2JdK1wicHhcIjpjKTp2b2lkIDB9KX0pLG0uZWFjaCh7SGVpZ2h0OlwiaGVpZ2h0XCIsV2lkdGg6XCJ3aWR0aFwifSxmdW5jdGlvbihhLGIpe20uZWFjaCh7cGFkZGluZzpcImlubmVyXCIrYSxjb250ZW50OmIsXCJcIjpcIm91dGVyXCIrYX0sZnVuY3Rpb24oYyxkKXttLmZuW2RdPWZ1bmN0aW9uKGQsZSl7dmFyIGY9YXJndW1lbnRzLmxlbmd0aCYmKGN8fFwiYm9vbGVhblwiIT10eXBlb2YgZCksZz1jfHwoZD09PSEwfHxlPT09ITA/XCJtYXJnaW5cIjpcImJvcmRlclwiKTtyZXR1cm4gVih0aGlzLGZ1bmN0aW9uKGIsYyxkKXt2YXIgZTtyZXR1cm4gbS5pc1dpbmRvdyhiKT9iLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiK2FdOjk9PT1iLm5vZGVUeXBlPyhlPWIuZG9jdW1lbnRFbGVtZW50LE1hdGgubWF4KGIuYm9keVtcInNjcm9sbFwiK2FdLGVbXCJzY3JvbGxcIithXSxiLmJvZHlbXCJvZmZzZXRcIithXSxlW1wib2Zmc2V0XCIrYV0sZVtcImNsaWVudFwiK2FdKSk6dm9pZCAwPT09ZD9tLmNzcyhiLGMsZyk6bS5zdHlsZShiLGMsZCxnKX0sYixmP2Q6dm9pZCAwLGYsbnVsbCl9fSl9KSxtLmZuLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZW5ndGh9LG0uZm4uYW5kU2VsZj1tLmZuLmFkZEJhY2ssXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoXCJqcXVlcnlcIixbXSxmdW5jdGlvbigpe3JldHVybiBtfSk7dmFyIGVkPWEualF1ZXJ5LGZkPWEuJDtyZXR1cm4gbS5ub0NvbmZsaWN0PWZ1bmN0aW9uKGIpe3JldHVybiBhLiQ9PT1tJiYoYS4kPWZkKSxiJiZhLmpRdWVyeT09PW0mJihhLmpRdWVyeT1lZCksbX0sdHlwZW9mIGI9PT1LJiYoYS5qUXVlcnk9YS4kPW0pLG19KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpxdWVyeS5taW4ubWFwIiwiLyogTW9kZXJuaXpyIDIuOC4zIChDdXN0b20gQnVpbGQpIHwgTUlUICYgQlNEXG4gKiBCdWlsZDogaHR0cDovL21vZGVybml6ci5jb20vZG93bmxvYWQvIy1mb250ZmFjZS1iYWNrZ3JvdW5kc2l6ZS1ib3JkZXJpbWFnZS1ib3JkZXJyYWRpdXMtYm94c2hhZG93LWZsZXhib3gtaHNsYS1tdWx0aXBsZWJncy1vcGFjaXR5LXJnYmEtdGV4dHNoYWRvdy1jc3NhbmltYXRpb25zLWNzc2NvbHVtbnMtZ2VuZXJhdGVkY29udGVudC1jc3NncmFkaWVudHMtY3NzcmVmbGVjdGlvbnMtY3NzdHJhbnNmb3Jtcy1jc3N0cmFuc2Zvcm1zM2QtY3NzdHJhbnNpdGlvbnMtYXBwbGljYXRpb25jYWNoZS1jYW52YXMtY2FudmFzdGV4dC1kcmFnYW5kZHJvcC1oYXNoY2hhbmdlLWhpc3RvcnktYXVkaW8tdmlkZW8taW5kZXhlZGRiLWlucHV0LWlucHV0dHlwZXMtbG9jYWxzdG9yYWdlLXBvc3RtZXNzYWdlLXNlc3Npb25zdG9yYWdlLXdlYnNvY2tldHMtd2Vic3FsZGF0YWJhc2Utd2Vid29ya2Vycy1nZW9sb2NhdGlvbi1pbmxpbmVzdmctc21pbC1zdmctc3ZnY2xpcHBhdGhzLXRvdWNoLXdlYmdsLXNoaXYtbXEtY3NzY2xhc3Nlcy1hZGR0ZXN0LXByZWZpeGVkLXRlc3RzdHlsZXMtdGVzdHByb3AtdGVzdGFsbHByb3BzLWhhc2V2ZW50LXByZWZpeGVzLWRvbXByZWZpeGVzLWxvYWRcbiAqL1xuO3dpbmRvdy5Nb2Rlcm5penI9ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIEQoYSl7ai5jc3NUZXh0PWF9ZnVuY3Rpb24gRShhLGIpe3JldHVybiBEKG4uam9pbihhK1wiO1wiKSsoYnx8XCJcIikpfWZ1bmN0aW9uIEYoYSxiKXtyZXR1cm4gdHlwZW9mIGE9PT1ifWZ1bmN0aW9uIEcoYSxiKXtyZXR1cm4hIX4oXCJcIithKS5pbmRleE9mKGIpfWZ1bmN0aW9uIEgoYSxiKXtmb3IodmFyIGQgaW4gYSl7dmFyIGU9YVtkXTtpZighRyhlLFwiLVwiKSYmaltlXSE9PWMpcmV0dXJuIGI9PVwicGZ4XCI/ZTohMH1yZXR1cm4hMX1mdW5jdGlvbiBJKGEsYixkKXtmb3IodmFyIGUgaW4gYSl7dmFyIGY9YlthW2VdXTtpZihmIT09YylyZXR1cm4gZD09PSExP2FbZV06RihmLFwiZnVuY3Rpb25cIik/Zi5iaW5kKGR8fGIpOmZ9cmV0dXJuITF9ZnVuY3Rpb24gSihhLGIsYyl7dmFyIGQ9YS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnNsaWNlKDEpLGU9KGErXCIgXCIrcC5qb2luKGQrXCIgXCIpK2QpLnNwbGl0KFwiIFwiKTtyZXR1cm4gRihiLFwic3RyaW5nXCIpfHxGKGIsXCJ1bmRlZmluZWRcIik/SChlLGIpOihlPShhK1wiIFwiK3Euam9pbihkK1wiIFwiKStkKS5zcGxpdChcIiBcIiksSShlLGIsYykpfWZ1bmN0aW9uIEsoKXtlLmlucHV0PWZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wLGU9Yy5sZW5ndGg7ZDxlO2QrKyl1W2NbZF1dPWNbZF1pbiBrO3JldHVybiB1Lmxpc3QmJih1Lmxpc3Q9ISFiLmNyZWF0ZUVsZW1lbnQoXCJkYXRhbGlzdFwiKSYmISFhLkhUTUxEYXRhTGlzdEVsZW1lbnQpLHV9KFwiYXV0b2NvbXBsZXRlIGF1dG9mb2N1cyBsaXN0IHBsYWNlaG9sZGVyIG1heCBtaW4gbXVsdGlwbGUgcGF0dGVybiByZXF1aXJlZCBzdGVwXCIuc3BsaXQoXCIgXCIpKSxlLmlucHV0dHlwZXM9ZnVuY3Rpb24oYSl7Zm9yKHZhciBkPTAsZSxmLGgsaT1hLmxlbmd0aDtkPGk7ZCsrKWsuc2V0QXR0cmlidXRlKFwidHlwZVwiLGY9YVtkXSksZT1rLnR5cGUhPT1cInRleHRcIixlJiYoay52YWx1ZT1sLGsuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO3Zpc2liaWxpdHk6aGlkZGVuO1wiLC9ecmFuZ2UkLy50ZXN0KGYpJiZrLnN0eWxlLldlYmtpdEFwcGVhcmFuY2UhPT1jPyhnLmFwcGVuZENoaWxkKGspLGg9Yi5kZWZhdWx0VmlldyxlPWguZ2V0Q29tcHV0ZWRTdHlsZSYmaC5nZXRDb21wdXRlZFN0eWxlKGssbnVsbCkuV2Via2l0QXBwZWFyYW5jZSE9PVwidGV4dGZpZWxkXCImJmsub2Zmc2V0SGVpZ2h0IT09MCxnLnJlbW92ZUNoaWxkKGspKTovXihzZWFyY2h8dGVsKSQvLnRlc3QoZil8fCgvXih1cmx8ZW1haWwpJC8udGVzdChmKT9lPWsuY2hlY2tWYWxpZGl0eSYmay5jaGVja1ZhbGlkaXR5KCk9PT0hMTplPWsudmFsdWUhPWwpKSx0W2FbZF1dPSEhZTtyZXR1cm4gdH0oXCJzZWFyY2ggdGVsIHVybCBlbWFpbCBkYXRldGltZSBkYXRlIG1vbnRoIHdlZWsgdGltZSBkYXRldGltZS1sb2NhbCBudW1iZXIgcmFuZ2UgY29sb3JcIi5zcGxpdChcIiBcIikpfXZhciBkPVwiMi44LjNcIixlPXt9LGY9ITAsZz1iLmRvY3VtZW50RWxlbWVudCxoPVwibW9kZXJuaXpyXCIsaT1iLmNyZWF0ZUVsZW1lbnQoaCksaj1pLnN0eWxlLGs9Yi5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksbD1cIjopXCIsbT17fS50b1N0cmluZyxuPVwiIC13ZWJraXQtIC1tb3otIC1vLSAtbXMtIFwiLnNwbGl0KFwiIFwiKSxvPVwiV2Via2l0IE1veiBPIG1zXCIscD1vLnNwbGl0KFwiIFwiKSxxPW8udG9Mb3dlckNhc2UoKS5zcGxpdChcIiBcIikscj17c3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn0scz17fSx0PXt9LHU9e30sdj1bXSx3PXYuc2xpY2UseCx5PWZ1bmN0aW9uKGEsYyxkLGUpe3ZhciBmLGksaixrLGw9Yi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG09Yi5ib2R5LG49bXx8Yi5jcmVhdGVFbGVtZW50KFwiYm9keVwiKTtpZihwYXJzZUludChkLDEwKSl3aGlsZShkLS0paj1iLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksai5pZD1lP2VbZF06aCsoZCsxKSxsLmFwcGVuZENoaWxkKGopO3JldHVybiBmPVtcIiYjMTczO1wiLCc8c3R5bGUgaWQ9XCJzJyxoLCdcIj4nLGEsXCI8L3N0eWxlPlwiXS5qb2luKFwiXCIpLGwuaWQ9aCwobT9sOm4pLmlubmVySFRNTCs9ZixuLmFwcGVuZENoaWxkKGwpLG18fChuLnN0eWxlLmJhY2tncm91bmQ9XCJcIixuLnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIsaz1nLnN0eWxlLm92ZXJmbG93LGcuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIixnLmFwcGVuZENoaWxkKG4pKSxpPWMobCxhKSxtP2wucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsKToobi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pLGcuc3R5bGUub3ZlcmZsb3c9ayksISFpfSx6PWZ1bmN0aW9uKGIpe3ZhciBjPWEubWF0Y2hNZWRpYXx8YS5tc01hdGNoTWVkaWE7aWYoYylyZXR1cm4gYyhiKSYmYyhiKS5tYXRjaGVzfHwhMTt2YXIgZDtyZXR1cm4geShcIkBtZWRpYSBcIitiK1wiIHsgI1wiK2grXCIgeyBwb3NpdGlvbjogYWJzb2x1dGU7IH0gfVwiLGZ1bmN0aW9uKGIpe2Q9KGEuZ2V0Q29tcHV0ZWRTdHlsZT9nZXRDb21wdXRlZFN0eWxlKGIsbnVsbCk6Yi5jdXJyZW50U3R5bGUpW1wicG9zaXRpb25cIl09PVwiYWJzb2x1dGVcIn0pLGR9LEE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkKGQsZSl7ZT1lfHxiLmNyZWF0ZUVsZW1lbnQoYVtkXXx8XCJkaXZcIiksZD1cIm9uXCIrZDt2YXIgZj1kIGluIGU7cmV0dXJuIGZ8fChlLnNldEF0dHJpYnV0ZXx8KGU9Yi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxlLnNldEF0dHJpYnV0ZSYmZS5yZW1vdmVBdHRyaWJ1dGUmJihlLnNldEF0dHJpYnV0ZShkLFwiXCIpLGY9RihlW2RdLFwiZnVuY3Rpb25cIiksRihlW2RdLFwidW5kZWZpbmVkXCIpfHwoZVtkXT1jKSxlLnJlbW92ZUF0dHJpYnV0ZShkKSkpLGU9bnVsbCxmfXZhciBhPXtzZWxlY3Q6XCJpbnB1dFwiLGNoYW5nZTpcImlucHV0XCIsc3VibWl0OlwiZm9ybVwiLHJlc2V0OlwiZm9ybVwiLGVycm9yOlwiaW1nXCIsbG9hZDpcImltZ1wiLGFib3J0OlwiaW1nXCJ9O3JldHVybiBkfSgpLEI9e30uaGFzT3duUHJvcGVydHksQzshRihCLFwidW5kZWZpbmVkXCIpJiYhRihCLmNhbGwsXCJ1bmRlZmluZWRcIik/Qz1mdW5jdGlvbihhLGIpe3JldHVybiBCLmNhbGwoYSxiKX06Qz1mdW5jdGlvbihhLGIpe3JldHVybiBiIGluIGEmJkYoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbYl0sXCJ1bmRlZmluZWRcIil9LEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kfHwoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcztpZih0eXBlb2YgYyE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIGQ9dy5jYWxsKGFyZ3VtZW50cywxKSxlPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mIGUpe3ZhciBhPWZ1bmN0aW9uKCl7fTthLnByb3RvdHlwZT1jLnByb3RvdHlwZTt2YXIgZj1uZXcgYSxnPWMuYXBwbHkoZixkLmNvbmNhdCh3LmNhbGwoYXJndW1lbnRzKSkpO3JldHVybiBPYmplY3QoZyk9PT1nP2c6Zn1yZXR1cm4gYy5hcHBseShiLGQuY29uY2F0KHcuY2FsbChhcmd1bWVudHMpKSl9O3JldHVybiBlfSkscy5mbGV4Ym94PWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJmbGV4V3JhcFwiKX0scy5jYW52YXM9ZnVuY3Rpb24oKXt2YXIgYT1iLmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cmV0dXJuISFhLmdldENvbnRleHQmJiEhYS5nZXRDb250ZXh0KFwiMmRcIil9LHMuY2FudmFzdGV4dD1mdW5jdGlvbigpe3JldHVybiEhZS5jYW52YXMmJiEhRihiLmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpLmZpbGxUZXh0LFwiZnVuY3Rpb25cIil9LHMud2ViZ2w9ZnVuY3Rpb24oKXtyZXR1cm4hIWEuV2ViR0xSZW5kZXJpbmdDb250ZXh0fSxzLnRvdWNoPWZ1bmN0aW9uKCl7dmFyIGM7cmV0dXJuXCJvbnRvdWNoc3RhcnRcImluIGF8fGEuRG9jdW1lbnRUb3VjaCYmYiBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2g/Yz0hMDp5KFtcIkBtZWRpYSAoXCIsbi5qb2luKFwidG91Y2gtZW5hYmxlZCksKFwiKSxoLFwiKVwiLFwieyNtb2Rlcm5penJ7dG9wOjlweDtwb3NpdGlvbjphYnNvbHV0ZX19XCJdLmpvaW4oXCJcIiksZnVuY3Rpb24oYSl7Yz1hLm9mZnNldFRvcD09PTl9KSxjfSxzLmdlb2xvY2F0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuXCJnZW9sb2NhdGlvblwiaW4gbmF2aWdhdG9yfSxzLnBvc3RtZXNzYWdlPWZ1bmN0aW9uKCl7cmV0dXJuISFhLnBvc3RNZXNzYWdlfSxzLndlYnNxbGRhdGFiYXNlPWZ1bmN0aW9uKCl7cmV0dXJuISFhLm9wZW5EYXRhYmFzZX0scy5pbmRleGVkREI9ZnVuY3Rpb24oKXtyZXR1cm4hIUooXCJpbmRleGVkREJcIixhKX0scy5oYXNoY2hhbmdlPWZ1bmN0aW9uKCl7cmV0dXJuIEEoXCJoYXNoY2hhbmdlXCIsYSkmJihiLmRvY3VtZW50TW9kZT09PWN8fGIuZG9jdW1lbnRNb2RlPjcpfSxzLmhpc3Rvcnk9ZnVuY3Rpb24oKXtyZXR1cm4hIWEuaGlzdG9yeSYmISFoaXN0b3J5LnB1c2hTdGF0ZX0scy5kcmFnYW5kZHJvcD1mdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm5cImRyYWdnYWJsZVwiaW4gYXx8XCJvbmRyYWdzdGFydFwiaW4gYSYmXCJvbmRyb3BcImluIGF9LHMud2Vic29ja2V0cz1mdW5jdGlvbigpe3JldHVyblwiV2ViU29ja2V0XCJpbiBhfHxcIk1veldlYlNvY2tldFwiaW4gYX0scy5yZ2JhPWZ1bmN0aW9uKCl7cmV0dXJuIEQoXCJiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTUwLDI1NSwxNTAsLjUpXCIpLEcoai5iYWNrZ3JvdW5kQ29sb3IsXCJyZ2JhXCIpfSxzLmhzbGE9ZnVuY3Rpb24oKXtyZXR1cm4gRChcImJhY2tncm91bmQtY29sb3I6aHNsYSgxMjAsNDAlLDEwMCUsLjUpXCIpLEcoai5iYWNrZ3JvdW5kQ29sb3IsXCJyZ2JhXCIpfHxHKGouYmFja2dyb3VuZENvbG9yLFwiaHNsYVwiKX0scy5tdWx0aXBsZWJncz1mdW5jdGlvbigpe3JldHVybiBEKFwiYmFja2dyb3VuZDp1cmwoaHR0cHM6Ly8pLHVybChodHRwczovLykscmVkIHVybChodHRwczovLylcIiksLyh1cmxcXHMqXFwoLio/KXszfS8udGVzdChqLmJhY2tncm91bmQpfSxzLmJhY2tncm91bmRzaXplPWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJiYWNrZ3JvdW5kU2l6ZVwiKX0scy5ib3JkZXJpbWFnZT1mdW5jdGlvbigpe3JldHVybiBKKFwiYm9yZGVySW1hZ2VcIil9LHMuYm9yZGVycmFkaXVzPWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJib3JkZXJSYWRpdXNcIil9LHMuYm94c2hhZG93PWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJib3hTaGFkb3dcIil9LHMudGV4dHNoYWRvdz1mdW5jdGlvbigpe3JldHVybiBiLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUudGV4dFNoYWRvdz09PVwiXCJ9LHMub3BhY2l0eT1mdW5jdGlvbigpe3JldHVybiBFKFwib3BhY2l0eTouNTVcIiksL14wLjU1JC8udGVzdChqLm9wYWNpdHkpfSxzLmNzc2FuaW1hdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gSihcImFuaW1hdGlvbk5hbWVcIil9LHMuY3NzY29sdW1ucz1mdW5jdGlvbigpe3JldHVybiBKKFwiY29sdW1uQ291bnRcIil9LHMuY3NzZ3JhZGllbnRzPWZ1bmN0aW9uKCl7dmFyIGE9XCJiYWNrZ3JvdW5kLWltYWdlOlwiLGI9XCJncmFkaWVudChsaW5lYXIsbGVmdCB0b3AscmlnaHQgYm90dG9tLGZyb20oIzlmOSksdG8od2hpdGUpKTtcIixjPVwibGluZWFyLWdyYWRpZW50KGxlZnQgdG9wLCM5ZjksIHdoaXRlKTtcIjtyZXR1cm4gRCgoYStcIi13ZWJraXQtIFwiLnNwbGl0KFwiIFwiKS5qb2luKGIrYSkrbi5qb2luKGMrYSkpLnNsaWNlKDAsLWEubGVuZ3RoKSksRyhqLmJhY2tncm91bmRJbWFnZSxcImdyYWRpZW50XCIpfSxzLmNzc3JlZmxlY3Rpb25zPWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJib3hSZWZsZWN0XCIpfSxzLmNzc3RyYW5zZm9ybXM9ZnVuY3Rpb24oKXtyZXR1cm4hIUooXCJ0cmFuc2Zvcm1cIil9LHMuY3NzdHJhbnNmb3JtczNkPWZ1bmN0aW9uKCl7dmFyIGE9ISFKKFwicGVyc3BlY3RpdmVcIik7cmV0dXJuIGEmJlwid2Via2l0UGVyc3BlY3RpdmVcImluIGcuc3R5bGUmJnkoXCJAbWVkaWEgKHRyYW5zZm9ybS0zZCksKC13ZWJraXQtdHJhbnNmb3JtLTNkKXsjbW9kZXJuaXpye2xlZnQ6OXB4O3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDozcHg7fX1cIixmdW5jdGlvbihiLGMpe2E9Yi5vZmZzZXRMZWZ0PT09OSYmYi5vZmZzZXRIZWlnaHQ9PT0zfSksYX0scy5jc3N0cmFuc2l0aW9ucz1mdW5jdGlvbigpe3JldHVybiBKKFwidHJhbnNpdGlvblwiKX0scy5mb250ZmFjZT1mdW5jdGlvbigpe3ZhciBhO3JldHVybiB5KCdAZm9udC1mYWNlIHtmb250LWZhbWlseTpcImZvbnRcIjtzcmM6dXJsKFwiaHR0cHM6Ly9cIil9JyxmdW5jdGlvbihjLGQpe3ZhciBlPWIuZ2V0RWxlbWVudEJ5SWQoXCJzbW9kZXJuaXpyXCIpLGY9ZS5zaGVldHx8ZS5zdHlsZVNoZWV0LGc9Zj9mLmNzc1J1bGVzJiZmLmNzc1J1bGVzWzBdP2YuY3NzUnVsZXNbMF0uY3NzVGV4dDpmLmNzc1RleHR8fFwiXCI6XCJcIjthPS9zcmMvaS50ZXN0KGcpJiZnLmluZGV4T2YoZC5zcGxpdChcIiBcIilbMF0pPT09MH0pLGF9LHMuZ2VuZXJhdGVkY29udGVudD1mdW5jdGlvbigpe3ZhciBhO3JldHVybiB5KFtcIiNcIixoLFwie2ZvbnQ6MC8wIGF9I1wiLGgsJzphZnRlcntjb250ZW50OlwiJyxsLCdcIjt2aXNpYmlsaXR5OmhpZGRlbjtmb250OjNweC8xIGF9J10uam9pbihcIlwiKSxmdW5jdGlvbihiKXthPWIub2Zmc2V0SGVpZ2h0Pj0zfSksYX0scy52aWRlbz1mdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcInZpZGVvXCIpLGM9ITE7dHJ5e2lmKGM9ISFhLmNhblBsYXlUeXBlKWM9bmV3IEJvb2xlYW4oYyksYy5vZ2c9YS5jYW5QbGF5VHlwZSgndmlkZW8vb2dnOyBjb2RlY3M9XCJ0aGVvcmFcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpLGMuaDI2ND1hLmNhblBsYXlUeXBlKCd2aWRlby9tcDQ7IGNvZGVjcz1cImF2YzEuNDJFMDFFXCInKS5yZXBsYWNlKC9ebm8kLyxcIlwiKSxjLndlYm09YS5jYW5QbGF5VHlwZSgndmlkZW8vd2VibTsgY29kZWNzPVwidnA4LCB2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpfWNhdGNoKGQpe31yZXR1cm4gY30scy5hdWRpbz1mdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIpLGM9ITE7dHJ5e2lmKGM9ISFhLmNhblBsYXlUeXBlKWM9bmV3IEJvb2xlYW4oYyksYy5vZ2c9YS5jYW5QbGF5VHlwZSgnYXVkaW8vb2dnOyBjb2RlY3M9XCJ2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpLGMubXAzPWEuY2FuUGxheVR5cGUoXCJhdWRpby9tcGVnO1wiKS5yZXBsYWNlKC9ebm8kLyxcIlwiKSxjLndhdj1hLmNhblBsYXlUeXBlKCdhdWRpby93YXY7IGNvZGVjcz1cIjFcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpLGMubTRhPShhLmNhblBsYXlUeXBlKFwiYXVkaW8veC1tNGE7XCIpfHxhLmNhblBsYXlUeXBlKFwiYXVkaW8vYWFjO1wiKSkucmVwbGFjZSgvXm5vJC8sXCJcIil9Y2F0Y2goZCl7fXJldHVybiBjfSxzLmxvY2Fsc3RvcmFnZT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gbG9jYWxTdG9yYWdlLnNldEl0ZW0oaCxoKSxsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShoKSwhMH1jYXRjaChhKXtyZXR1cm4hMX19LHMuc2Vzc2lvbnN0b3JhZ2U9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oaCxoKSxzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGgpLCEwfWNhdGNoKGEpe3JldHVybiExfX0scy53ZWJ3b3JrZXJzPWZ1bmN0aW9uKCl7cmV0dXJuISFhLldvcmtlcn0scy5hcHBsaWNhdGlvbmNhY2hlPWZ1bmN0aW9uKCl7cmV0dXJuISFhLmFwcGxpY2F0aW9uQ2FjaGV9LHMuc3ZnPWZ1bmN0aW9uKCl7cmV0dXJuISFiLmNyZWF0ZUVsZW1lbnROUyYmISFiLmNyZWF0ZUVsZW1lbnROUyhyLnN2ZyxcInN2Z1wiKS5jcmVhdGVTVkdSZWN0fSxzLmlubGluZXN2Zz1mdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gYS5pbm5lckhUTUw9XCI8c3ZnLz5cIiwoYS5maXJzdENoaWxkJiZhLmZpcnN0Q2hpbGQubmFtZXNwYWNlVVJJKT09ci5zdmd9LHMuc21pbD1mdW5jdGlvbigpe3JldHVybiEhYi5jcmVhdGVFbGVtZW50TlMmJi9TVkdBbmltYXRlLy50ZXN0KG0uY2FsbChiLmNyZWF0ZUVsZW1lbnROUyhyLnN2ZyxcImFuaW1hdGVcIikpKX0scy5zdmdjbGlwcGF0aHM9ZnVuY3Rpb24oKXtyZXR1cm4hIWIuY3JlYXRlRWxlbWVudE5TJiYvU1ZHQ2xpcFBhdGgvLnRlc3QobS5jYWxsKGIuY3JlYXRlRWxlbWVudE5TKHIuc3ZnLFwiY2xpcFBhdGhcIikpKX07Zm9yKHZhciBMIGluIHMpQyhzLEwpJiYoeD1MLnRvTG93ZXJDYXNlKCksZVt4XT1zW0xdKCksdi5wdXNoKChlW3hdP1wiXCI6XCJuby1cIikreCkpO3JldHVybiBlLmlucHV0fHxLKCksZS5hZGRUZXN0PWZ1bmN0aW9uKGEsYil7aWYodHlwZW9mIGE9PVwib2JqZWN0XCIpZm9yKHZhciBkIGluIGEpQyhhLGQpJiZlLmFkZFRlc3QoZCxhW2RdKTtlbHNle2E9YS50b0xvd2VyQ2FzZSgpO2lmKGVbYV0hPT1jKXJldHVybiBlO2I9dHlwZW9mIGI9PVwiZnVuY3Rpb25cIj9iKCk6Yix0eXBlb2YgZiE9XCJ1bmRlZmluZWRcIiYmZiYmKGcuY2xhc3NOYW1lKz1cIiBcIisoYj9cIlwiOlwibm8tXCIpK2EpLGVbYV09Yn1yZXR1cm4gZX0sRChcIlwiKSxpPWs9bnVsbCxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGwoYSxiKXt2YXIgYz1hLmNyZWF0ZUVsZW1lbnQoXCJwXCIpLGQ9YS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF18fGEuZG9jdW1lbnRFbGVtZW50O3JldHVybiBjLmlubmVySFRNTD1cIng8c3R5bGU+XCIrYitcIjwvc3R5bGU+XCIsZC5pbnNlcnRCZWZvcmUoYy5sYXN0Q2hpbGQsZC5maXJzdENoaWxkKX1mdW5jdGlvbiBtKCl7dmFyIGE9cy5lbGVtZW50cztyZXR1cm4gdHlwZW9mIGE9PVwic3RyaW5nXCI/YS5zcGxpdChcIiBcIik6YX1mdW5jdGlvbiBuKGEpe3ZhciBiPWpbYVtoXV07cmV0dXJuIGJ8fChiPXt9LGkrKyxhW2hdPWksaltpXT1iKSxifWZ1bmN0aW9uIG8oYSxjLGQpe2N8fChjPWIpO2lmKGspcmV0dXJuIGMuY3JlYXRlRWxlbWVudChhKTtkfHwoZD1uKGMpKTt2YXIgZztyZXR1cm4gZC5jYWNoZVthXT9nPWQuY2FjaGVbYV0uY2xvbmVOb2RlKCk6Zi50ZXN0KGEpP2c9KGQuY2FjaGVbYV09ZC5jcmVhdGVFbGVtKGEpKS5jbG9uZU5vZGUoKTpnPWQuY3JlYXRlRWxlbShhKSxnLmNhbkhhdmVDaGlsZHJlbiYmIWUudGVzdChhKSYmIWcudGFnVXJuP2QuZnJhZy5hcHBlbmRDaGlsZChnKTpnfWZ1bmN0aW9uIHAoYSxjKXthfHwoYT1iKTtpZihrKXJldHVybiBhLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtjPWN8fG4oYSk7dmFyIGQ9Yy5mcmFnLmNsb25lTm9kZSgpLGU9MCxmPW0oKSxnPWYubGVuZ3RoO2Zvcig7ZTxnO2UrKylkLmNyZWF0ZUVsZW1lbnQoZltlXSk7cmV0dXJuIGR9ZnVuY3Rpb24gcShhLGIpe2IuY2FjaGV8fChiLmNhY2hlPXt9LGIuY3JlYXRlRWxlbT1hLmNyZWF0ZUVsZW1lbnQsYi5jcmVhdGVGcmFnPWEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCxiLmZyYWc9Yi5jcmVhdGVGcmFnKCkpLGEuY3JlYXRlRWxlbWVudD1mdW5jdGlvbihjKXtyZXR1cm4gcy5zaGl2TWV0aG9kcz9vKGMsYSxiKTpiLmNyZWF0ZUVsZW0oYyl9LGEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudD1GdW5jdGlvbihcImgsZlwiLFwicmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49Zi5jbG9uZU5vZGUoKSxjPW4uY3JlYXRlRWxlbWVudDtoLnNoaXZNZXRob2RzJiYoXCIrbSgpLmpvaW4oKS5yZXBsYWNlKC9bXFx3XFwtXSsvZyxmdW5jdGlvbihhKXtyZXR1cm4gYi5jcmVhdGVFbGVtKGEpLGIuZnJhZy5jcmVhdGVFbGVtZW50KGEpLCdjKFwiJythKydcIiknfSkrXCIpO3JldHVybiBufVwiKShzLGIuZnJhZyl9ZnVuY3Rpb24gcihhKXthfHwoYT1iKTt2YXIgYz1uKGEpO3JldHVybiBzLnNoaXZDU1MmJiFnJiYhYy5oYXNDU1MmJihjLmhhc0NTUz0hIWwoYSxcImFydGljbGUsYXNpZGUsZGlhbG9nLGZpZ2NhcHRpb24sZmlndXJlLGZvb3RlcixoZWFkZXIsaGdyb3VwLG1haW4sbmF2LHNlY3Rpb257ZGlzcGxheTpibG9ja31tYXJre2JhY2tncm91bmQ6I0ZGMDtjb2xvcjojMDAwfXRlbXBsYXRle2Rpc3BsYXk6bm9uZX1cIikpLGt8fHEoYSxjKSxhfXZhciBjPVwiMy43LjBcIixkPWEuaHRtbDV8fHt9LGU9L148fF4oPzpidXR0b258bWFwfHNlbGVjdHx0ZXh0YXJlYXxvYmplY3R8aWZyYW1lfG9wdGlvbnxvcHRncm91cCkkL2ksZj0vXig/OmF8Ynxjb2RlfGRpdnxmaWVsZHNldHxoMXxoMnxoM3xoNHxoNXxoNnxpfGxhYmVsfGxpfG9sfHB8cXxzcGFufHN0cm9uZ3xzdHlsZXx0YWJsZXx0Ym9keXx0ZHx0aHx0cnx1bCkkL2ksZyxoPVwiX2h0bWw1c2hpdlwiLGk9MCxqPXt9LGs7KGZ1bmN0aW9uKCl7dHJ5e3ZhciBhPWIuY3JlYXRlRWxlbWVudChcImFcIik7YS5pbm5lckhUTUw9XCI8eHl6PjwveHl6PlwiLGc9XCJoaWRkZW5cImluIGEsaz1hLmNoaWxkTm9kZXMubGVuZ3RoPT0xfHxmdW5jdGlvbigpe2IuY3JlYXRlRWxlbWVudChcImFcIik7dmFyIGE9Yi5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7cmV0dXJuIHR5cGVvZiBhLmNsb25lTm9kZT09XCJ1bmRlZmluZWRcInx8dHlwZW9mIGEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudD09XCJ1bmRlZmluZWRcInx8dHlwZW9mIGEuY3JlYXRlRWxlbWVudD09XCJ1bmRlZmluZWRcIn0oKX1jYXRjaChjKXtnPSEwLGs9ITB9fSkoKTt2YXIgcz17ZWxlbWVudHM6ZC5lbGVtZW50c3x8XCJhYmJyIGFydGljbGUgYXNpZGUgYXVkaW8gYmRpIGNhbnZhcyBkYXRhIGRhdGFsaXN0IGRldGFpbHMgZGlhbG9nIGZpZ2NhcHRpb24gZmlndXJlIGZvb3RlciBoZWFkZXIgaGdyb3VwIG1haW4gbWFyayBtZXRlciBuYXYgb3V0cHV0IHByb2dyZXNzIHNlY3Rpb24gc3VtbWFyeSB0ZW1wbGF0ZSB0aW1lIHZpZGVvXCIsdmVyc2lvbjpjLHNoaXZDU1M6ZC5zaGl2Q1NTIT09ITEsc3VwcG9ydHNVbmtub3duRWxlbWVudHM6ayxzaGl2TWV0aG9kczpkLnNoaXZNZXRob2RzIT09ITEsdHlwZTpcImRlZmF1bHRcIixzaGl2RG9jdW1lbnQ6cixjcmVhdGVFbGVtZW50Om8sY3JlYXRlRG9jdW1lbnRGcmFnbWVudDpwfTthLmh0bWw1PXMscihiKX0odGhpcyxiKSxlLl92ZXJzaW9uPWQsZS5fcHJlZml4ZXM9bixlLl9kb21QcmVmaXhlcz1xLGUuX2Nzc29tUHJlZml4ZXM9cCxlLm1xPXosZS5oYXNFdmVudD1BLGUudGVzdFByb3A9ZnVuY3Rpb24oYSl7cmV0dXJuIEgoW2FdKX0sZS50ZXN0QWxsUHJvcHM9SixlLnRlc3RTdHlsZXM9eSxlLnByZWZpeGVkPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYj9KKGEsYixjKTpKKGEsXCJwZnhcIil9LGcuY2xhc3NOYW1lPWcuY2xhc3NOYW1lLnJlcGxhY2UoLyhefFxccyluby1qcyhcXHN8JCkvLFwiJDEkMlwiKSsoZj9cIiBqcyBcIit2LmpvaW4oXCIgXCIpOlwiXCIpLGV9KHRoaXMsdGhpcy5kb2N1bWVudCksZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoYSl7cmV0dXJuXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT1vLmNhbGwoYSl9ZnVuY3Rpb24gZShhKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYX1mdW5jdGlvbiBmKCl7fWZ1bmN0aW9uIGcoYSl7cmV0dXJuIWF8fFwibG9hZGVkXCI9PWF8fFwiY29tcGxldGVcIj09YXx8XCJ1bmluaXRpYWxpemVkXCI9PWF9ZnVuY3Rpb24gaCgpe3ZhciBhPXAuc2hpZnQoKTtxPTEsYT9hLnQ/bShmdW5jdGlvbigpeyhcImNcIj09YS50P0IuaW5qZWN0Q3NzOkIuaW5qZWN0SnMpKGEucywwLGEuYSxhLngsYS5lLDEpfSwwKTooYSgpLGgoKSk6cT0wfWZ1bmN0aW9uIGkoYSxjLGQsZSxmLGksail7ZnVuY3Rpb24gayhiKXtpZighbyYmZyhsLnJlYWR5U3RhdGUpJiYodS5yPW89MSwhcSYmaCgpLGwub25sb2FkPWwub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsYikpe1wiaW1nXCIhPWEmJm0oZnVuY3Rpb24oKXt0LnJlbW92ZUNoaWxkKGwpfSw1MCk7Zm9yKHZhciBkIGluIHlbY10peVtjXS5oYXNPd25Qcm9wZXJ0eShkKSYmeVtjXVtkXS5vbmxvYWQoKX19dmFyIGo9anx8Qi5lcnJvclRpbWVvdXQsbD1iLmNyZWF0ZUVsZW1lbnQoYSksbz0wLHI9MCx1PXt0OmQsczpjLGU6ZixhOmkseDpqfTsxPT09eVtjXSYmKHI9MSx5W2NdPVtdKSxcIm9iamVjdFwiPT1hP2wuZGF0YT1jOihsLnNyYz1jLGwudHlwZT1hKSxsLndpZHRoPWwuaGVpZ2h0PVwiMFwiLGwub25lcnJvcj1sLm9ubG9hZD1sLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2suY2FsbCh0aGlzLHIpfSxwLnNwbGljZShlLDAsdSksXCJpbWdcIiE9YSYmKHJ8fDI9PT15W2NdPyh0Lmluc2VydEJlZm9yZShsLHM/bnVsbDpuKSxtKGssaikpOnlbY10ucHVzaChsKSl9ZnVuY3Rpb24gaihhLGIsYyxkLGYpe3JldHVybiBxPTAsYj1ifHxcImpcIixlKGEpP2koXCJjXCI9PWI/djp1LGEsYix0aGlzLmkrKyxjLGQsZik6KHAuc3BsaWNlKHRoaXMuaSsrLDAsYSksMT09cC5sZW5ndGgmJmgoKSksdGhpc31mdW5jdGlvbiBrKCl7dmFyIGE9QjtyZXR1cm4gYS5sb2FkZXI9e2xvYWQ6aixpOjB9LGF9dmFyIGw9Yi5kb2N1bWVudEVsZW1lbnQsbT1hLnNldFRpbWVvdXQsbj1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdLG89e30udG9TdHJpbmcscD1bXSxxPTAscj1cIk1vekFwcGVhcmFuY2VcImluIGwuc3R5bGUscz1yJiYhIWIuY3JlYXRlUmFuZ2UoKS5jb21wYXJlTm9kZSx0PXM/bDpuLnBhcmVudE5vZGUsbD1hLm9wZXJhJiZcIltvYmplY3QgT3BlcmFdXCI9PW8uY2FsbChhLm9wZXJhKSxsPSEhYi5hdHRhY2hFdmVudCYmIWwsdT1yP1wib2JqZWN0XCI6bD9cInNjcmlwdFwiOlwiaW1nXCIsdj1sP1wic2NyaXB0XCI6dSx3PUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGEpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09by5jYWxsKGEpfSx4PVtdLHk9e30sej17dGltZW91dDpmdW5jdGlvbihhLGIpe3JldHVybiBiLmxlbmd0aCYmKGEudGltZW91dD1iWzBdKSxhfX0sQSxCO0I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhKXt2YXIgYT1hLnNwbGl0KFwiIVwiKSxiPXgubGVuZ3RoLGM9YS5wb3AoKSxkPWEubGVuZ3RoLGM9e3VybDpjLG9yaWdVcmw6YyxwcmVmaXhlczphfSxlLGYsZztmb3IoZj0wO2Y8ZDtmKyspZz1hW2ZdLnNwbGl0KFwiPVwiKSwoZT16W2cuc2hpZnQoKV0pJiYoYz1lKGMsZykpO2ZvcihmPTA7ZjxiO2YrKyljPXhbZl0oYyk7cmV0dXJuIGN9ZnVuY3Rpb24gZyhhLGUsZixnLGgpe3ZhciBpPWIoYSksaj1pLmF1dG9DYWxsYmFjaztpLnVybC5zcGxpdChcIi5cIikucG9wKCkuc3BsaXQoXCI/XCIpLnNoaWZ0KCksaS5ieXBhc3N8fChlJiYoZT1kKGUpP2U6ZVthXXx8ZVtnXXx8ZVthLnNwbGl0KFwiL1wiKS5wb3AoKS5zcGxpdChcIj9cIilbMF1dKSxpLmluc3RlYWQ/aS5pbnN0ZWFkKGEsZSxmLGcsaCk6KHlbaS51cmxdP2kubm9leGVjPSEwOnlbaS51cmxdPTEsZi5sb2FkKGkudXJsLGkuZm9yY2VDU1N8fCFpLmZvcmNlSlMmJlwiY3NzXCI9PWkudXJsLnNwbGl0KFwiLlwiKS5wb3AoKS5zcGxpdChcIj9cIikuc2hpZnQoKT9cImNcIjpjLGkubm9leGVjLGkuYXR0cnMsaS50aW1lb3V0KSwoZChlKXx8ZChqKSkmJmYubG9hZChmdW5jdGlvbigpe2soKSxlJiZlKGkub3JpZ1VybCxoLGcpLGomJmooaS5vcmlnVXJsLGgsZykseVtpLnVybF09Mn0pKSl9ZnVuY3Rpb24gaChhLGIpe2Z1bmN0aW9uIGMoYSxjKXtpZihhKXtpZihlKGEpKWN8fChqPWZ1bmN0aW9uKCl7dmFyIGE9W10uc2xpY2UuY2FsbChhcmd1bWVudHMpO2suYXBwbHkodGhpcyxhKSxsKCl9KSxnKGEsaixiLDAsaCk7ZWxzZSBpZihPYmplY3QoYSk9PT1hKWZvcihuIGluIG09ZnVuY3Rpb24oKXt2YXIgYj0wLGM7Zm9yKGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiZiKys7cmV0dXJuIGJ9KCksYSlhLmhhc093blByb3BlcnR5KG4pJiYoIWMmJiEtLW0mJihkKGopP2o9ZnVuY3Rpb24oKXt2YXIgYT1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7ay5hcHBseSh0aGlzLGEpLGwoKX06altuXT1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYj1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7YSYmYS5hcHBseSh0aGlzLGIpLGwoKX19KGtbbl0pKSxnKGFbbl0saixiLG4saCkpfWVsc2UhYyYmbCgpfXZhciBoPSEhYS50ZXN0LGk9YS5sb2FkfHxhLmJvdGgsaj1hLmNhbGxiYWNrfHxmLGs9aixsPWEuY29tcGxldGV8fGYsbSxuO2MoaD9hLnllcDphLm5vcGUsISFpKSxpJiZjKGkpfXZhciBpLGosbD10aGlzLnllcG5vcGUubG9hZGVyO2lmKGUoYSkpZyhhLDAsbCwwKTtlbHNlIGlmKHcoYSkpZm9yKGk9MDtpPGEubGVuZ3RoO2krKylqPWFbaV0sZShqKT9nKGosMCxsLDApOncoaik/QihqKTpPYmplY3Qoaik9PT1qJiZoKGosbCk7ZWxzZSBPYmplY3QoYSk9PT1hJiZoKGEsbCl9LEIuYWRkUHJlZml4PWZ1bmN0aW9uKGEsYil7elthXT1ifSxCLmFkZEZpbHRlcj1mdW5jdGlvbihhKXt4LnB1c2goYSl9LEIuZXJyb3JUaW1lb3V0PTFlNCxudWxsPT1iLnJlYWR5U3RhdGUmJmIuYWRkRXZlbnRMaXN0ZW5lciYmKGIucmVhZHlTdGF0ZT1cImxvYWRpbmdcIixiLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsQT1mdW5jdGlvbigpe2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixBLDApLGIucmVhZHlTdGF0ZT1cImNvbXBsZXRlXCJ9LDApKSxhLnllcG5vcGU9aygpLGEueWVwbm9wZS5leGVjdXRlU3RhY2s9aCxhLnllcG5vcGUuaW5qZWN0SnM9ZnVuY3Rpb24oYSxjLGQsZSxpLGope3ZhciBrPWIuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxsLG8sZT1lfHxCLmVycm9yVGltZW91dDtrLnNyYz1hO2ZvcihvIGluIGQpay5zZXRBdHRyaWJ1dGUobyxkW29dKTtjPWo/aDpjfHxmLGsub25yZWFkeXN0YXRlY2hhbmdlPWsub25sb2FkPWZ1bmN0aW9uKCl7IWwmJmcoay5yZWFkeVN0YXRlKSYmKGw9MSxjKCksay5vbmxvYWQ9ay5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCl9LG0oZnVuY3Rpb24oKXtsfHwobD0xLGMoMSkpfSxlKSxpP2sub25sb2FkKCk6bi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShrLG4pfSxhLnllcG5vcGUuaW5qZWN0Q3NzPWZ1bmN0aW9uKGEsYyxkLGUsZyxpKXt2YXIgZT1iLmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpLGosYz1pP2g6Y3x8ZjtlLmhyZWY9YSxlLnJlbD1cInN0eWxlc2hlZXRcIixlLnR5cGU9XCJ0ZXh0L2Nzc1wiO2ZvcihqIGluIGQpZS5zZXRBdHRyaWJ1dGUoaixkW2pdKTtnfHwobi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLG4pLG0oYywwKSl9fSh0aGlzLGRvY3VtZW50KSxNb2Rlcm5penIubG9hZD1mdW5jdGlvbigpe3llcG5vcGUuYXBwbHkod2luZG93LFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApKX07XG4iLCIvLyBBdm9pZCBgY29uc29sZWAgZXJyb3JzIGluIGJyb3dzZXJzIHRoYXQgbGFjayBhIGNvbnNvbGUuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBtZXRob2Q7XG4gIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcbiAgdmFyIG1ldGhvZHMgPSBbXG4gICAgJ2Fzc2VydCcsICdjbGVhcicsICdjb3VudCcsICdkZWJ1ZycsICdkaXInLCAnZGlyeG1sJywgJ2Vycm9yJyxcbiAgICAnZXhjZXB0aW9uJywgJ2dyb3VwJywgJ2dyb3VwQ29sbGFwc2VkJywgJ2dyb3VwRW5kJywgJ2luZm8nLCAnbG9nJyxcbiAgICAnbWFya1RpbWVsaW5lJywgJ3Byb2ZpbGUnLCAncHJvZmlsZUVuZCcsICd0YWJsZScsICd0aW1lJywgJ3RpbWVFbmQnLFxuICAgICd0aW1lbGluZScsICd0aW1lbGluZUVuZCcsICd0aW1lU3RhbXAnLCAndHJhY2UnLCAnd2FybidcbiAgXTtcbiAgdmFyIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoO1xuICB2YXIgY29uc29sZSA9ICh3aW5kb3cuY29uc29sZSA9IHdpbmRvdy5jb25zb2xlIHx8IHt9KTtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBtZXRob2QgPSBtZXRob2RzW2xlbmd0aF07XG5cbiAgICAvLyBPbmx5IHN0dWIgdW5kZWZpbmVkIG1ldGhvZHMuXG4gICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHtcbiAgICAgIGNvbnNvbGVbbWV0aG9kXSA9IG5vb3A7XG4gICAgfVxuICB9XG59KCkpO1xuXG4vLyBQbGFjZSBhbnkgalF1ZXJ5L2hlbHBlciBwbHVnaW5zIGluIGhlcmUuXG4iLCIvKlxuICogIFJlbW9kYWwgLSB2MS4xLjBcbiAqICBSZXNwb25zaXZlLCBsaWdodHdlaWdodCwgZmFzdCwgc3luY2hyb25pemVkIHdpdGggQ1NTIGFuaW1hdGlvbnMsIGZ1bGx5IGN1c3RvbWl6YWJsZSBtb2RhbCB3aW5kb3cgcGx1Z2luIHdpdGggZGVjbGFyYXRpdmUgY29uZmlndXJhdGlvbiBhbmQgaGFzaCB0cmFja2luZy5cbiAqICBodHRwOi8vdm9ka2FiZWFycy5naXRodWIuaW8vcmVtb2RhbC9cbiAqXG4gKiAgTWFkZSBieSBJbHlhIE1ha2Fyb3ZcbiAqICBVbmRlciBNSVQgTGljZW5zZVxuICovXG5cbiFmdW5jdGlvbihhLGIpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wianF1ZXJ5XCJdLGZ1bmN0aW9uKGMpe3JldHVybiBiKGEsYyl9KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9iKGEscmVxdWlyZShcImpxdWVyeVwiKSk6YihhLGEualF1ZXJ5fHxhLlplcHRvKX0odGhpcyxmdW5jdGlvbihhLGIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGMoYSl7aWYodyYmXCJub25lXCI9PT1hLmNzcyhcImFuaW1hdGlvbi1uYW1lXCIpJiZcIm5vbmVcIj09PWEuY3NzKFwiLXdlYmtpdC1hbmltYXRpb24tbmFtZVwiKSYmXCJub25lXCI9PT1hLmNzcyhcIi1tb3otYW5pbWF0aW9uLW5hbWVcIikmJlwibm9uZVwiPT09YS5jc3MoXCItby1hbmltYXRpb24tbmFtZVwiKSYmXCJub25lXCI9PT1hLmNzcyhcIi1tcy1hbmltYXRpb24tbmFtZVwiKSlyZXR1cm4gMDt2YXIgYixjLGQsZSxmPWEuY3NzKFwiYW5pbWF0aW9uLWR1cmF0aW9uXCIpfHxhLmNzcyhcIi13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uXCIpfHxhLmNzcyhcIi1tb3otYW5pbWF0aW9uLWR1cmF0aW9uXCIpfHxhLmNzcyhcIi1vLWFuaW1hdGlvbi1kdXJhdGlvblwiKXx8YS5jc3MoXCItbXMtYW5pbWF0aW9uLWR1cmF0aW9uXCIpfHxcIjBzXCIsZz1hLmNzcyhcImFuaW1hdGlvbi1kZWxheVwiKXx8YS5jc3MoXCItd2Via2l0LWFuaW1hdGlvbi1kZWxheVwiKXx8YS5jc3MoXCItbW96LWFuaW1hdGlvbi1kZWxheVwiKXx8YS5jc3MoXCItby1hbmltYXRpb24tZGVsYXlcIil8fGEuY3NzKFwiLW1zLWFuaW1hdGlvbi1kZWxheVwiKXx8XCIwc1wiLGg9YS5jc3MoXCJhbmltYXRpb24taXRlcmF0aW9uLWNvdW50XCIpfHxhLmNzcyhcIi13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudFwiKXx8YS5jc3MoXCItbW96LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnRcIil8fGEuY3NzKFwiLW8tYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudFwiKXx8YS5jc3MoXCItbXMtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudFwiKXx8XCIxXCI7Zm9yKGY9Zi5zcGxpdChcIiwgXCIpLGc9Zy5zcGxpdChcIiwgXCIpLGg9aC5zcGxpdChcIiwgXCIpLGU9MCxjPWYubGVuZ3RoLGI9TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO2U8YztlKyspZD1wYXJzZUZsb2F0KGZbZV0pKnBhcnNlSW50KGhbZV0sMTApK3BhcnNlRmxvYXQoZ1tlXSksZD5iJiYoYj1kKTtyZXR1cm4gYn1mdW5jdGlvbiBkKCl7aWYoYihkb2N1bWVudC5ib2R5KS5oZWlnaHQoKTw9Yih3aW5kb3cpLmhlaWdodCgpKXJldHVybiAwO3ZhciBhLGMsZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gZC5zdHlsZS52aXNpYmlsaXR5PVwiaGlkZGVuXCIsZC5zdHlsZS53aWR0aD1cIjEwMHB4XCIsZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkKSxhPWQub2Zmc2V0V2lkdGgsZC5zdHlsZS5vdmVyZmxvdz1cInNjcm9sbFwiLGUuc3R5bGUud2lkdGg9XCIxMDAlXCIsZC5hcHBlbmRDaGlsZChlKSxjPWUub2Zmc2V0V2lkdGgsZC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGQpLGEtY31mdW5jdGlvbiBlKCl7aWYoIXgpe3ZhciBhLGMsZT1iKFwiaHRtbFwiKSxmPWsoXCJpcy1sb2NrZWRcIik7ZS5oYXNDbGFzcyhmKXx8KGM9Yihkb2N1bWVudC5ib2R5KSxhPXBhcnNlSW50KGMuY3NzKFwicGFkZGluZy1yaWdodFwiKSwxMCkrZCgpLGMuY3NzKFwicGFkZGluZy1yaWdodFwiLGErXCJweFwiKSxlLmFkZENsYXNzKGYpKX19ZnVuY3Rpb24gZigpe2lmKCF4KXt2YXIgYSxjLGU9YihcImh0bWxcIiksZj1rKFwiaXMtbG9ja2VkXCIpO2UuaGFzQ2xhc3MoZikmJihjPWIoZG9jdW1lbnQuYm9keSksYT1wYXJzZUludChjLmNzcyhcInBhZGRpbmctcmlnaHRcIiksMTApLWQoKSxjLmNzcyhcInBhZGRpbmctcmlnaHRcIixhK1wicHhcIiksZS5yZW1vdmVDbGFzcyhmKSl9fWZ1bmN0aW9uIGcoYSxiLGMsZCl7dmFyIGU9ayhcImlzXCIsYiksZj1bayhcImlzXCIsdS5DTE9TSU5HKSxrKFwiaXNcIix1Lk9QRU5JTkcpLGsoXCJpc1wiLHUuQ0xPU0VEKSxrKFwiaXNcIix1Lk9QRU5FRCldLmpvaW4oXCIgXCIpO2EuJGJnLnJlbW92ZUNsYXNzKGYpLmFkZENsYXNzKGUpLGEuJG92ZXJsYXkucmVtb3ZlQ2xhc3MoZikuYWRkQ2xhc3MoZSksYS4kd3JhcHBlci5yZW1vdmVDbGFzcyhmKS5hZGRDbGFzcyhlKSxhLiRtb2RhbC5yZW1vdmVDbGFzcyhmKS5hZGRDbGFzcyhlKSxhLnN0YXRlPWIsIWMmJmEuJG1vZGFsLnRyaWdnZXIoe3R5cGU6YixyZWFzb246ZH0sW3tyZWFzb246ZH1dKX1mdW5jdGlvbiBoKGEsZCxlKXt2YXIgZj0wLGc9ZnVuY3Rpb24oYSl7YS50YXJnZXQ9PT10aGlzJiZmKyt9LGg9ZnVuY3Rpb24oYSl7YS50YXJnZXQ9PT10aGlzJiYwPT09LS1mJiYoYi5lYWNoKFtcIiRiZ1wiLFwiJG92ZXJsYXlcIixcIiR3cmFwcGVyXCIsXCIkbW9kYWxcIl0sZnVuY3Rpb24oYSxiKXtlW2JdLm9mZihyK1wiIFwiK3MpfSksZCgpKX07Yi5lYWNoKFtcIiRiZ1wiLFwiJG92ZXJsYXlcIixcIiR3cmFwcGVyXCIsXCIkbW9kYWxcIl0sZnVuY3Rpb24oYSxiKXtlW2JdLm9uKHIsZykub24ocyxoKX0pLGEoKSwwPT09YyhlLiRiZykmJjA9PT1jKGUuJG92ZXJsYXkpJiYwPT09YyhlLiR3cmFwcGVyKSYmMD09PWMoZS4kbW9kYWwpJiYoYi5lYWNoKFtcIiRiZ1wiLFwiJG92ZXJsYXlcIixcIiR3cmFwcGVyXCIsXCIkbW9kYWxcIl0sZnVuY3Rpb24oYSxiKXtlW2JdLm9mZihyK1wiIFwiK3MpfSksZCgpKX1mdW5jdGlvbiBpKGEpe2Euc3RhdGUhPT11LkNMT1NFRCYmKGIuZWFjaChbXCIkYmdcIixcIiRvdmVybGF5XCIsXCIkd3JhcHBlclwiLFwiJG1vZGFsXCJdLGZ1bmN0aW9uKGIsYyl7YVtjXS5vZmYocitcIiBcIitzKX0pLGEuJGJnLnJlbW92ZUNsYXNzKGEuc2V0dGluZ3MubW9kaWZpZXIpLGEuJG92ZXJsYXkucmVtb3ZlQ2xhc3MoYS5zZXR0aW5ncy5tb2RpZmllcikuaGlkZSgpLGEuJHdyYXBwZXIuaGlkZSgpLGYoKSxnKGEsdS5DTE9TRUQsITApKX1mdW5jdGlvbiBqKGEpe3ZhciBiLGMsZCxlLGY9e307Zm9yKGE9YS5yZXBsYWNlKC9cXHMqOlxccyovZyxcIjpcIikucmVwbGFjZSgvXFxzKixcXHMqL2csXCIsXCIpLGI9YS5zcGxpdChcIixcIiksZT0wLGM9Yi5sZW5ndGg7ZTxjO2UrKyliW2VdPWJbZV0uc3BsaXQoXCI6XCIpLGQ9YltlXVsxXSwoXCJzdHJpbmdcIj09dHlwZW9mIGR8fGQgaW5zdGFuY2VvZiBTdHJpbmcpJiYoZD1cInRydWVcIj09PWR8fFwiZmFsc2VcIiE9PWQmJmQpLChcInN0cmluZ1wiPT10eXBlb2YgZHx8ZCBpbnN0YW5jZW9mIFN0cmluZykmJihkPWlzTmFOKGQpP2Q6K2QpLGZbYltlXVswXV09ZDtyZXR1cm4gZn1mdW5jdGlvbiBrKCl7Zm9yKHZhciBhPXEsYj0wO2I8YXJndW1lbnRzLmxlbmd0aDsrK2IpYSs9XCItXCIrYXJndW1lbnRzW2JdO3JldHVybiBhfWZ1bmN0aW9uIGwoKXt2YXIgYSxjLGQ9bG9jYXRpb24uaGFzaC5yZXBsYWNlKFwiI1wiLFwiXCIpO2lmKGQpe3RyeXtjPWIoJ1tkYXRhLXJlbW9kYWwtaWQ9XCInK2QrJ1wiXScpfWNhdGNoKGUpe31jJiZjLmxlbmd0aCYmKGE9YltwXS5sb29rdXBbYy5kYXRhKHApXSxhJiZhLnNldHRpbmdzLmhhc2hUcmFja2luZyYmYS5vcGVuKCkpfWVsc2UgbiYmbi5zdGF0ZT09PXUuT1BFTkVEJiZuLnNldHRpbmdzLmhhc2hUcmFja2luZyYmbi5jbG9zZSgpfWZ1bmN0aW9uIG0oYSxjKXt2YXIgZD1iKGRvY3VtZW50LmJvZHkpLGU9ZCxmPXRoaXM7Zi5zZXR0aW5ncz1iLmV4dGVuZCh7fSx0LGMpLGYuaW5kZXg9YltwXS5sb29rdXAucHVzaChmKS0xLGYuc3RhdGU9dS5DTE9TRUQsZi4kb3ZlcmxheT1iKFwiLlwiK2soXCJvdmVybGF5XCIpKSxudWxsIT09Zi5zZXR0aW5ncy5hcHBlbmRUbyYmZi5zZXR0aW5ncy5hcHBlbmRUby5sZW5ndGgmJihlPWIoZi5zZXR0aW5ncy5hcHBlbmRUbykpLGYuJG92ZXJsYXkubGVuZ3RofHwoZi4kb3ZlcmxheT1iKFwiPGRpdj5cIikuYWRkQ2xhc3MoayhcIm92ZXJsYXlcIikrXCIgXCIrayhcImlzXCIsdS5DTE9TRUQpKS5oaWRlKCksZS5hcHBlbmQoZi4kb3ZlcmxheSkpLGYuJGJnPWIoXCIuXCIrayhcImJnXCIpKS5hZGRDbGFzcyhrKFwiaXNcIix1LkNMT1NFRCkpLGYuJG1vZGFsPWEuYWRkQ2xhc3MocStcIiBcIitrKFwiaXMtaW5pdGlhbGl6ZWRcIikrXCIgXCIrZi5zZXR0aW5ncy5tb2RpZmllcitcIiBcIitrKFwiaXNcIix1LkNMT1NFRCkpLmF0dHIoXCJ0YWJpbmRleFwiLFwiLTFcIiksZi4kd3JhcHBlcj1iKFwiPGRpdj5cIikuYWRkQ2xhc3MoayhcIndyYXBwZXJcIikrXCIgXCIrZi5zZXR0aW5ncy5tb2RpZmllcitcIiBcIitrKFwiaXNcIix1LkNMT1NFRCkpLmhpZGUoKS5hcHBlbmQoZi4kbW9kYWwpLGUuYXBwZW5kKGYuJHdyYXBwZXIpLGYuJHdyYXBwZXIub24oXCJjbGljay5cIitxLCdbZGF0YS1yZW1vZGFsLWFjdGlvbj1cImNsb3NlXCJdJyxmdW5jdGlvbihhKXthLnByZXZlbnREZWZhdWx0KCksZi5jbG9zZSgpfSksZi4kd3JhcHBlci5vbihcImNsaWNrLlwiK3EsJ1tkYXRhLXJlbW9kYWwtYWN0aW9uPVwiY2FuY2VsXCJdJyxmdW5jdGlvbihhKXthLnByZXZlbnREZWZhdWx0KCksZi4kbW9kYWwudHJpZ2dlcih2LkNBTkNFTExBVElPTiksZi5zZXR0aW5ncy5jbG9zZU9uQ2FuY2VsJiZmLmNsb3NlKHYuQ0FOQ0VMTEFUSU9OKX0pLGYuJHdyYXBwZXIub24oXCJjbGljay5cIitxLCdbZGF0YS1yZW1vZGFsLWFjdGlvbj1cImNvbmZpcm1cIl0nLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKSxmLiRtb2RhbC50cmlnZ2VyKHYuQ09ORklSTUFUSU9OKSxmLnNldHRpbmdzLmNsb3NlT25Db25maXJtJiZmLmNsb3NlKHYuQ09ORklSTUFUSU9OKX0pLGYuJHdyYXBwZXIub24oXCJjbGljay5cIitxLGZ1bmN0aW9uKGEpe3ZhciBjPWIoYS50YXJnZXQpO2MuaGFzQ2xhc3MoayhcIndyYXBwZXJcIikpJiZmLnNldHRpbmdzLmNsb3NlT25PdXRzaWRlQ2xpY2smJmYuY2xvc2UoKX0pfXZhciBuLG8scD1cInJlbW9kYWxcIixxPWEuUkVNT0RBTF9HTE9CQUxTJiZhLlJFTU9EQUxfR0xPQkFMUy5OQU1FU1BBQ0V8fHAscj1iLm1hcChbXCJhbmltYXRpb25zdGFydFwiLFwid2Via2l0QW5pbWF0aW9uU3RhcnRcIixcIk1TQW5pbWF0aW9uU3RhcnRcIixcIm9BbmltYXRpb25TdGFydFwiXSxmdW5jdGlvbihhKXtyZXR1cm4gYStcIi5cIitxfSkuam9pbihcIiBcIikscz1iLm1hcChbXCJhbmltYXRpb25lbmRcIixcIndlYmtpdEFuaW1hdGlvbkVuZFwiLFwiTVNBbmltYXRpb25FbmRcIixcIm9BbmltYXRpb25FbmRcIl0sZnVuY3Rpb24oYSl7cmV0dXJuIGErXCIuXCIrcX0pLmpvaW4oXCIgXCIpLHQ9Yi5leHRlbmQoe2hhc2hUcmFja2luZzohMCxjbG9zZU9uQ29uZmlybTohMCxjbG9zZU9uQ2FuY2VsOiEwLGNsb3NlT25Fc2NhcGU6ITAsY2xvc2VPbk91dHNpZGVDbGljazohMCxtb2RpZmllcjpcIlwiLGFwcGVuZFRvOm51bGx9LGEuUkVNT0RBTF9HTE9CQUxTJiZhLlJFTU9EQUxfR0xPQkFMUy5ERUZBVUxUUyksdT17Q0xPU0lORzpcImNsb3NpbmdcIixDTE9TRUQ6XCJjbG9zZWRcIixPUEVOSU5HOlwib3BlbmluZ1wiLE9QRU5FRDpcIm9wZW5lZFwifSx2PXtDT05GSVJNQVRJT046XCJjb25maXJtYXRpb25cIixDQU5DRUxMQVRJT046XCJjYW5jZWxsYXRpb25cIn0sdz1mdW5jdGlvbigpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGU7cmV0dXJuIHZvaWQgMCE9PWEuYW5pbWF0aW9uTmFtZXx8dm9pZCAwIT09YS5XZWJraXRBbmltYXRpb25OYW1lfHx2b2lkIDAhPT1hLk1vekFuaW1hdGlvbk5hbWV8fHZvaWQgMCE9PWEubXNBbmltYXRpb25OYW1lfHx2b2lkIDAhPT1hLk9BbmltYXRpb25OYW1lfSgpLHg9L2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTttLnByb3RvdHlwZS5vcGVuPWZ1bmN0aW9uKCl7dmFyIGEsYz10aGlzO2Muc3RhdGUhPT11Lk9QRU5JTkcmJmMuc3RhdGUhPT11LkNMT1NJTkcmJihhPWMuJG1vZGFsLmF0dHIoXCJkYXRhLXJlbW9kYWwtaWRcIiksYSYmYy5zZXR0aW5ncy5oYXNoVHJhY2tpbmcmJihvPWIod2luZG93KS5zY3JvbGxUb3AoKSxsb2NhdGlvbi5oYXNoPWEpLG4mJm4hPT1jJiZpKG4pLG49YyxlKCksYy4kYmcuYWRkQ2xhc3MoYy5zZXR0aW5ncy5tb2RpZmllciksYy4kb3ZlcmxheS5hZGRDbGFzcyhjLnNldHRpbmdzLm1vZGlmaWVyKS5zaG93KCksYy4kd3JhcHBlci5zaG93KCkuc2Nyb2xsVG9wKDApLGMuJG1vZGFsLmZvY3VzKCksaChmdW5jdGlvbigpe2coYyx1Lk9QRU5JTkcpfSxmdW5jdGlvbigpe2coYyx1Lk9QRU5FRCl9LGMpKX0sbS5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcztjLnN0YXRlIT09dS5PUEVOSU5HJiZjLnN0YXRlIT09dS5DTE9TSU5HJiYoYy5zZXR0aW5ncy5oYXNoVHJhY2tpbmcmJmMuJG1vZGFsLmF0dHIoXCJkYXRhLXJlbW9kYWwtaWRcIik9PT1sb2NhdGlvbi5oYXNoLnN1YnN0cigxKSYmKGxvY2F0aW9uLmhhc2g9XCJcIixiKHdpbmRvdykuc2Nyb2xsVG9wKG8pKSxoKGZ1bmN0aW9uKCl7ZyhjLHUuQ0xPU0lORywhMSxhKX0sZnVuY3Rpb24oKXtjLiRiZy5yZW1vdmVDbGFzcyhjLnNldHRpbmdzLm1vZGlmaWVyKSxjLiRvdmVybGF5LnJlbW92ZUNsYXNzKGMuc2V0dGluZ3MubW9kaWZpZXIpLmhpZGUoKSxjLiR3cmFwcGVyLmhpZGUoKSxmKCksZyhjLHUuQ0xPU0VELCExLGEpfSxjKSl9LG0ucHJvdG90eXBlLmdldFN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhdGV9LG0ucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxjPWJbcF0ubG9va3VwO2kodGhpcyksdGhpcy4kd3JhcHBlci5yZW1vdmUoKSxkZWxldGUgY1t0aGlzLmluZGV4XSxhPWIuZ3JlcChjLGZ1bmN0aW9uKGEpe3JldHVybiEhYX0pLmxlbmd0aCwwPT09YSYmKHRoaXMuJG92ZXJsYXkucmVtb3ZlKCksdGhpcy4kYmcucmVtb3ZlQ2xhc3MoayhcImlzXCIsdS5DTE9TSU5HKStcIiBcIitrKFwiaXNcIix1Lk9QRU5JTkcpK1wiIFwiK2soXCJpc1wiLHUuQ0xPU0VEKStcIiBcIitrKFwiaXNcIix1Lk9QRU5FRCkpKX0sYltwXT17bG9va3VwOltdfSxiLmZuW3BdPWZ1bmN0aW9uKGEpe3ZhciBjLGQ7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlLGYpe2Q9YihmKSxudWxsPT1kLmRhdGEocCk/KGM9bmV3IG0oZCxhKSxkLmRhdGEocCxjLmluZGV4KSxjLnNldHRpbmdzLmhhc2hUcmFja2luZyYmZC5hdHRyKFwiZGF0YS1yZW1vZGFsLWlkXCIpPT09bG9jYXRpb24uaGFzaC5zdWJzdHIoMSkmJmMub3BlbigpKTpjPWJbcF0ubG9va3VwW2QuZGF0YShwKV19KSxjfSxiKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpe2IoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIixcIltkYXRhLXJlbW9kYWwtdGFyZ2V0XVwiLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKTt2YXIgYz1hLmN1cnJlbnRUYXJnZXQsZD1jLmdldEF0dHJpYnV0ZShcImRhdGEtcmVtb2RhbC10YXJnZXRcIiksZT1iKCdbZGF0YS1yZW1vZGFsLWlkPVwiJytkKydcIl0nKTtiW3BdLmxvb2t1cFtlLmRhdGEocCldLm9wZW4oKX0pLGIoZG9jdW1lbnQpLmZpbmQoXCIuXCIrcSkuZWFjaChmdW5jdGlvbihhLGMpe3ZhciBkPWIoYyksZT1kLmRhdGEoXCJyZW1vZGFsLW9wdGlvbnNcIik7ZT8oXCJzdHJpbmdcIj09dHlwZW9mIGV8fGUgaW5zdGFuY2VvZiBTdHJpbmcpJiYoZT1qKGUpKTplPXt9LGRbcF0oZSl9KSxiKGRvY3VtZW50KS5vbihcImtleWRvd24uXCIrcSxmdW5jdGlvbihhKXtuJiZuLnNldHRpbmdzLmNsb3NlT25Fc2NhcGUmJm4uc3RhdGU9PT11Lk9QRU5FRCYmMjc9PT1hLmtleUNvZGUmJm4uY2xvc2UoKX0pLGIod2luZG93KS5vbihcImhhc2hjaGFuZ2UuXCIrcSxsKX0pfSk7IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6ZS5Td2VldGFsZXJ0Mj10KCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgZT1cInN3YWwyLVwiLHQ9ZnVuY3Rpb24odCl7dmFyIG49e307Zm9yKHZhciBvIGluIHQpblt0W29dXT1lK3Rbb107cmV0dXJuIG59LG49dChbXCJjb250YWluZXJcIixcImluXCIsXCJpb3NmaXhcIixcIm1vZGFsXCIsXCJvdmVybGF5XCIsXCJmYWRlXCIsXCJzaG93XCIsXCJoaWRlXCIsXCJub2FuaW1hdGlvblwiLFwiY2xvc2VcIixcInRpdGxlXCIsXCJjb250ZW50XCIsXCJzcGFjZXJcIixcImNvbmZpcm1cIixcImNhbmNlbFwiLFwiaWNvblwiLFwiaW1hZ2VcIixcImlucHV0XCIsXCJmaWxlXCIsXCJyYW5nZVwiLFwic2VsZWN0XCIsXCJyYWRpb1wiLFwiY2hlY2tib3hcIixcInRleHRhcmVhXCIsXCJpbnB1dGVycm9yXCIsXCJ2YWxpZGF0aW9uZXJyb3JcIixcInByb2dyZXNzc3RlcHNcIixcImFjdGl2ZXByb2dyZXNzc3RlcFwiLFwicHJvZ3Jlc3NjaXJjbGVcIixcInByb2dyZXNzbGluZVwiLFwibG9hZGluZ1wiLFwic3R5bGVkXCJdKSxvPXQoW1wic3VjY2Vzc1wiLFwid2FybmluZ1wiLFwiaW5mb1wiLFwicXVlc3Rpb25cIixcImVycm9yXCJdKSxyPXt0aXRsZTpcIlwiLHRpdGxlVGV4dDpcIlwiLHRleHQ6XCJcIixodG1sOlwiXCIsdHlwZTpudWxsLGN1c3RvbUNsYXNzOlwiXCIsYW5pbWF0aW9uOiEwLGFsbG93T3V0c2lkZUNsaWNrOiEwLGFsbG93RXNjYXBlS2V5OiEwLHNob3dDb25maXJtQnV0dG9uOiEwLHNob3dDYW5jZWxCdXR0b246ITEscHJlQ29uZmlybTpudWxsLGNvbmZpcm1CdXR0b25UZXh0OlwiT0tcIixjb25maXJtQnV0dG9uQ29sb3I6XCIjMzA4NWQ2XCIsY29uZmlybUJ1dHRvbkNsYXNzOm51bGwsY2FuY2VsQnV0dG9uVGV4dDpcIkNhbmNlbFwiLGNhbmNlbEJ1dHRvbkNvbG9yOlwiI2FhYVwiLGNhbmNlbEJ1dHRvbkNsYXNzOm51bGwsYnV0dG9uc1N0eWxpbmc6ITAscmV2ZXJzZUJ1dHRvbnM6ITEsZm9jdXNDYW5jZWw6ITEsc2hvd0Nsb3NlQnV0dG9uOiExLHNob3dMb2FkZXJPbkNvbmZpcm06ITEsaW1hZ2VVcmw6bnVsbCxpbWFnZVdpZHRoOm51bGwsaW1hZ2VIZWlnaHQ6bnVsbCxpbWFnZUNsYXNzOm51bGwsdGltZXI6bnVsbCx3aWR0aDo1MDAscGFkZGluZzoyMCxiYWNrZ3JvdW5kOlwiI2ZmZlwiLGlucHV0Om51bGwsaW5wdXRQbGFjZWhvbGRlcjpcIlwiLGlucHV0VmFsdWU6XCJcIixpbnB1dE9wdGlvbnM6e30saW5wdXRBdXRvVHJpbTohMCxpbnB1dENsYXNzOm51bGwsaW5wdXRBdHRyaWJ1dGVzOnt9LGlucHV0VmFsaWRhdG9yOm51bGwscHJvZ3Jlc3NTdGVwczpbXSxjdXJyZW50UHJvZ3Jlc3NTdGVwOm51bGwscHJvZ3Jlc3NTdGVwc0Rpc3RhbmNlOlwiNDBweFwiLG9uT3BlbjpudWxsLG9uQ2xvc2U6bnVsbH0saT0oJ1xcbiAgPGRpdiBjbGFzcz1cIicrbi5tb2RhbCsnXCIgdGFiSW5kZXg9XCItMVwiPlxcbiAgICA8dWwgY2xhc3M9XCInK24ucHJvZ3Jlc3NzdGVwcysnXCI+PC91bD5cXG4gICAgPGRpdiBjbGFzcz1cIicrbi5pY29uK1wiIFwiK28uZXJyb3IrJ1wiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwieC1tYXJrXCI+PHNwYW4gY2xhc3M9XCJsaW5lIGxlZnRcIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJsaW5lIHJpZ2h0XCI+PC9zcGFuPjwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCInK24uaWNvbitcIiBcIitvLnF1ZXN0aW9uKydcIj4/PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCInK24uaWNvbitcIiBcIitvLndhcm5pbmcrJ1wiPiE8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cIicrbi5pY29uK1wiIFwiK28uaW5mbysnXCI+aTwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVwiJytuLmljb24rXCIgXCIrby5zdWNjZXNzKydcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cImxpbmUgdGlwXCI+PC9zcGFuPiA8c3BhbiBjbGFzcz1cImxpbmUgbG9uZ1wiPjwvc3Bhbj5cXG4gICAgICA8ZGl2IGNsYXNzPVwicGxhY2Vob2xkZXJcIj48L2Rpdj4gPGRpdiBjbGFzcz1cImZpeFwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGltZyBjbGFzcz1cIicrbi5pbWFnZSsnXCI+XFxuICAgIDxoMiBjbGFzcz1cIicrbi50aXRsZSsnXCI+PC9oMj5cXG4gICAgPGRpdiBjbGFzcz1cIicrbi5jb250ZW50KydcIj48L2Rpdj5cXG4gICAgPGlucHV0IGNsYXNzPVwiJytuLmlucHV0KydcIj5cXG4gICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgY2xhc3M9XCInK24uZmlsZSsnXCI+XFxuICAgIDxkaXYgY2xhc3M9XCInK24ucmFuZ2UrJ1wiPlxcbiAgICAgIDxvdXRwdXQ+PC9vdXRwdXQ+XFxuICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiPlxcbiAgICA8L2Rpdj5cXG4gICAgPHNlbGVjdCBjbGFzcz1cIicrbi5zZWxlY3QrJ1wiPjwvc2VsZWN0PlxcbiAgICA8ZGl2IGNsYXNzPVwiJytuLnJhZGlvKydcIj48L2Rpdj5cXG4gICAgPGxhYmVsIGZvcj1cIicrbi5jaGVja2JveCsnXCIgY2xhc3M9XCInK24uY2hlY2tib3grJ1wiPlxcbiAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIj5cXG4gICAgPC9sYWJlbD5cXG4gICAgPHRleHRhcmVhIGNsYXNzPVwiJytuLnRleHRhcmVhKydcIj48L3RleHRhcmVhPlxcbiAgICA8ZGl2IGNsYXNzPVwiJytuLnZhbGlkYXRpb25lcnJvcisnXCI+PC9kaXY+XFxuICAgIDxociBjbGFzcz1cIicrbi5zcGFjZXIrJ1wiPlxcbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIicrbi5jb25maXJtKydcIj5PSzwvYnV0dG9uPlxcbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIicrbi5jYW5jZWwrJ1wiPkNhbmNlbDwvYnV0dG9uPlxcbiAgICA8c3BhbiBjbGFzcz1cIicrbi5jbG9zZSsnXCI+JnRpbWVzOzwvc3Bhbj5cXG4gIDwvZGl2PlxcbicpLnJlcGxhY2UoLyhefFxcbilcXHMqL2csXCJcIiksYT12b2lkIDAsbD1kb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG4uY29udGFpbmVyKTtsLmxlbmd0aD9hPWxbMF06KGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmNsYXNzTmFtZT1uLmNvbnRhaW5lcixhLmlubmVySFRNTD1pKTt2YXIgcz1mdW5jdGlvbihlLHQpe2U9U3RyaW5nKGUpLnJlcGxhY2UoL1teMC05YS1mXS9naSxcIlwiKSxlLmxlbmd0aDw2JiYoZT1lWzBdK2VbMF0rZVsxXStlWzFdK2VbMl0rZVsyXSksdD10fHwwO2Zvcih2YXIgbj1cIiNcIixvPTA7bzwzO28rKyl7dmFyIHI9cGFyc2VJbnQoZS5zdWJzdHIoMipvLDIpLDE2KTtyPU1hdGgucm91bmQoTWF0aC5taW4oTWF0aC5tYXgoMCxyK3IqdCksMjU1KSkudG9TdHJpbmcoMTYpLG4rPShcIjAwXCIrcikuc3Vic3RyKHIubGVuZ3RoKX1yZXR1cm4gbn0sYz17cHJldmlvdXNXaW5kb3dLZXlEb3duOm51bGwscHJldmlvdXNBY3RpdmVFbGVtZW50Om51bGwscHJldmlvdXNCb2R5UGFkZGluZzpudWxsfSx1PWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50KXJldHVybiB2b2lkIGNvbnNvbGUuZXJyb3IoXCJTd2VldEFsZXJ0MiByZXF1aXJlcyBkb2N1bWVudCB0byBpbml0aWFsaXplXCIpO2lmKCFkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG4uY29udGFpbmVyKS5sZW5ndGgpe2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7dmFyIGU9cCgpLHQ9UChlLG4uaW5wdXQpLG89UChlLG4uZmlsZSkscj1lLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrbi5yYW5nZStcIiBpbnB1dFwiKSxpPWUucXVlcnlTZWxlY3RvcihcIi5cIituLnJhbmdlK1wiIG91dHB1dFwiKSxsPVAoZSxuLnNlbGVjdCkscz1lLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrbi5jaGVja2JveCtcIiBpbnB1dFwiKSxjPVAoZSxuLnRleHRhcmVhKTtyZXR1cm4gdC5vbmlucHV0PWZ1bmN0aW9uKCl7Ri5yZXNldFZhbGlkYXRpb25FcnJvcigpfSx0Lm9ua2V5ZG93bj1mdW5jdGlvbihlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7MTM9PT1lLmtleUNvZGUmJihlLnN0b3BQcm9wYWdhdGlvbigpLEYuY2xpY2tDb25maXJtKCkpfSwwKX0sby5vbmNoYW5nZT1mdW5jdGlvbigpe0YucmVzZXRWYWxpZGF0aW9uRXJyb3IoKX0sci5vbmlucHV0PWZ1bmN0aW9uKCl7Ri5yZXNldFZhbGlkYXRpb25FcnJvcigpLGkudmFsdWU9ci52YWx1ZX0sci5vbmNoYW5nZT1mdW5jdGlvbigpe0YucmVzZXRWYWxpZGF0aW9uRXJyb3IoKSxyLnByZXZpb3VzU2libGluZy52YWx1ZT1yLnZhbHVlfSxsLm9uY2hhbmdlPWZ1bmN0aW9uKCl7Ri5yZXNldFZhbGlkYXRpb25FcnJvcigpfSxzLm9uY2hhbmdlPWZ1bmN0aW9uKCl7Ri5yZXNldFZhbGlkYXRpb25FcnJvcigpfSxjLm9uaW5wdXQ9ZnVuY3Rpb24oKXtGLnJlc2V0VmFsaWRhdGlvbkVycm9yKCl9LGV9fSxkPWZ1bmN0aW9uKGUpe3JldHVybiBhLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrZSl9LHA9ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiLlwiK24ubW9kYWwpfHx1KCl9LGY9ZnVuY3Rpb24oKXt2YXIgZT1wKCk7cmV0dXJuIGUucXVlcnlTZWxlY3RvckFsbChcIi5cIituLmljb24pfSxtPWZ1bmN0aW9uKCl7cmV0dXJuIGQobi50aXRsZSl9LHY9ZnVuY3Rpb24oKXtyZXR1cm4gZChuLmNvbnRlbnQpfSxoPWZ1bmN0aW9uKCl7cmV0dXJuIGQobi5pbWFnZSl9LHk9ZnVuY3Rpb24oKXtyZXR1cm4gZChuLnNwYWNlcil9LGc9ZnVuY3Rpb24oKXtyZXR1cm4gZChuLnByb2dyZXNzc3RlcHMpfSxiPWZ1bmN0aW9uKCl7cmV0dXJuIGQobi52YWxpZGF0aW9uZXJyb3IpfSx3PWZ1bmN0aW9uKCl7cmV0dXJuIGQobi5jb25maXJtKX0sQz1mdW5jdGlvbigpe3JldHVybiBkKG4uY2FuY2VsKX0saz1mdW5jdGlvbigpe3JldHVybiBkKG4uY2xvc2UpfSxTPWZ1bmN0aW9uKHQpe3ZhciBuPVt3KCksQygpXTtyZXR1cm4gdCYmbi5yZXZlcnNlKCksbi5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocCgpLnF1ZXJ5U2VsZWN0b3JBbGwoXCJidXR0b246bm90KFtjbGFzc149XCIrZStcIl0pLCBpbnB1dDpub3QoW3R5cGU9aGlkZGVuXSksIHRleHRhcmVhLCBzZWxlY3RcIikpKX0seD1mdW5jdGlvbihlLHQpe3JldHVybiEhZS5jbGFzc0xpc3QmJmUuY2xhc3NMaXN0LmNvbnRhaW5zKHQpfSxFPWZ1bmN0aW9uKGUpe2lmKGUuZm9jdXMoKSxcImZpbGVcIiE9PWUudHlwZSl7dmFyIHQ9ZS52YWx1ZTtlLnZhbHVlPVwiXCIsZS52YWx1ZT10fX0sQT1mdW5jdGlvbihlLHQpe2lmKGUmJnQpe3ZhciBuPXQuc3BsaXQoL1xccysvKS5maWx0ZXIoQm9vbGVhbik7bi5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuY2xhc3NMaXN0LmFkZCh0KX0pfX0sQj1mdW5jdGlvbihlLHQpe2lmKGUmJnQpe3ZhciBuPXQuc3BsaXQoL1xccysvKS5maWx0ZXIoQm9vbGVhbik7bi5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuY2xhc3NMaXN0LnJlbW92ZSh0KX0pfX0sUD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wO248ZS5jaGlsZE5vZGVzLmxlbmd0aDtuKyspaWYoeChlLmNoaWxkTm9kZXNbbl0sdCkpcmV0dXJuIGUuY2hpbGROb2Rlc1tuXX0sTD1mdW5jdGlvbihlLHQpe3R8fCh0PVwiYmxvY2tcIiksZS5zdHlsZS5vcGFjaXR5PVwiXCIsZS5zdHlsZS5kaXNwbGF5PXR9LHE9ZnVuY3Rpb24oZSl7ZS5zdHlsZS5vcGFjaXR5PVwiXCIsZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwifSxUPWZ1bmN0aW9uKGUpe2Zvcig7ZS5maXJzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCl9LE09ZnVuY3Rpb24oZSl7cmV0dXJuIGUub2Zmc2V0V2lkdGh8fGUub2Zmc2V0SGVpZ2h0fHxlLmdldENsaWVudFJlY3RzKCkubGVuZ3RofSxWPWZ1bmN0aW9uKGUsdCl7ZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eT9lLnN0eWxlLnJlbW92ZVByb3BlcnR5KHQpOmUuc3R5bGUucmVtb3ZlQXR0cmlidXRlKHQpfSxIPWZ1bmN0aW9uKGUpe2lmKCFNKGUpKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIE1vdXNlRXZlbnQpe3ZhciB0PW5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIix7dmlldzp3aW5kb3csYnViYmxlczohMSxjYW5jZWxhYmxlOiEwfSk7ZS5kaXNwYXRjaEV2ZW50KHQpfWVsc2UgaWYoZG9jdW1lbnQuY3JlYXRlRXZlbnQpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7bi5pbml0RXZlbnQoXCJjbGlja1wiLCExLCExKSxlLmRpc3BhdGNoRXZlbnQobil9ZWxzZSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdD9lLmZpcmVFdmVudChcIm9uY2xpY2tcIik6XCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbmNsaWNrJiZlLm9uY2xpY2soKX0sTz1mdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdD17V2Via2l0QW5pbWF0aW9uOlwid2Via2l0QW5pbWF0aW9uRW5kXCIsT0FuaW1hdGlvbjpcIm9BbmltYXRpb25FbmQgb2FuaW1hdGlvbmVuZFwiLG1zQW5pbWF0aW9uOlwiTVNBbmltYXRpb25FbmRcIixhbmltYXRpb246XCJhbmltYXRpb25lbmRcIn07Zm9yKHZhciBuIGluIHQpaWYodC5oYXNPd25Qcm9wZXJ0eShuKSYmdm9pZCAwIT09ZS5zdHlsZVtuXSlyZXR1cm4gdFtuXTtyZXR1cm4hMX0oKSxOPWZ1bmN0aW9uKCl7dmFyIGU9cCgpO3dpbmRvdy5vbmtleWRvd249Yy5wcmV2aW91c1dpbmRvd0tleURvd24sYy5wcmV2aW91c0FjdGl2ZUVsZW1lbnQmJmMucHJldmlvdXNBY3RpdmVFbGVtZW50LmZvY3VzJiZjLnByZXZpb3VzQWN0aXZlRWxlbWVudC5mb2N1cygpLGNsZWFyVGltZW91dChlLnRpbWVvdXQpfSxqPWZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtlLnN0eWxlLndpZHRoPVwiNTBweFwiLGUuc3R5bGUuaGVpZ2h0PVwiNTBweFwiLGUuc3R5bGUub3ZlcmZsb3c9XCJzY3JvbGxcIixkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpO3ZhciB0PWUub2Zmc2V0V2lkdGgtZS5jbGllbnRXaWR0aDtyZXR1cm4gZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlKSx0fSxJPWZ1bmN0aW9uKGUsdCl7dmFyIG49dm9pZCAwO3JldHVybiBmdW5jdGlvbigpe3ZhciBvPWZ1bmN0aW9uKCl7bj1udWxsLGUoKX07Y2xlYXJUaW1lb3V0KG4pLG49c2V0VGltZW91dChvLHQpfX0sRD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxXPShmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy52YWx1ZT1lfWZ1bmN0aW9uIHQodCl7ZnVuY3Rpb24gbihlLHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuLHIpe3ZhciBsPXtrZXk6ZSxhcmc6dCxyZXNvbHZlOm4scmVqZWN0OnIsbmV4dDpudWxsfTthP2E9YS5uZXh0PWw6KGk9YT1sLG8oZSx0KSl9KX1mdW5jdGlvbiBvKG4saSl7dHJ5e3ZhciBhPXRbbl0oaSksbD1hLnZhbHVlO2wgaW5zdGFuY2VvZiBlP1Byb21pc2UucmVzb2x2ZShsLnZhbHVlKS50aGVuKGZ1bmN0aW9uKGUpe28oXCJuZXh0XCIsZSl9LGZ1bmN0aW9uKGUpe28oXCJ0aHJvd1wiLGUpfSk6cihhLmRvbmU/XCJyZXR1cm5cIjpcIm5vcm1hbFwiLGEudmFsdWUpfWNhdGNoKGUpe3IoXCJ0aHJvd1wiLGUpfX1mdW5jdGlvbiByKGUsdCl7c3dpdGNoKGUpe2Nhc2VcInJldHVyblwiOmkucmVzb2x2ZSh7dmFsdWU6dCxkb25lOiEwfSk7YnJlYWs7Y2FzZVwidGhyb3dcIjppLnJlamVjdCh0KTticmVhaztkZWZhdWx0OmkucmVzb2x2ZSh7dmFsdWU6dCxkb25lOiExfSl9aT1pLm5leHQsaT9vKGkua2V5LGkuYXJnKTphPW51bGx9dmFyIGksYTt0aGlzLl9pbnZva2U9bixcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LnJldHVybiYmKHRoaXMucmV0dXJuPXZvaWQgMCl9cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuYXN5bmNJdGVyYXRvciYmKHQucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksdC5wcm90b3R5cGUubmV4dD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faW52b2tlKFwibmV4dFwiLGUpfSx0LnByb3RvdHlwZS50aHJvdz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faW52b2tlKFwidGhyb3dcIixlKX0sdC5wcm90b3R5cGUucmV0dXJuPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pbnZva2UoXCJyZXR1cm5cIixlKX0se3dyYXA6ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0KGUuYXBwbHkodGhpcyxhcmd1bWVudHMpKX19LGF3YWl0OmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZSh0KX19fSgpLE9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIG8gaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixvKSYmKGVbb109bltvXSl9cmV0dXJuIGV9KSxVPVcoe30sciksSz1bXSxSPXZvaWQgMCxfPWZ1bmN0aW9uKGUpe3ZhciB0PXAoKTtmb3IodmFyIGkgaW4gZSlyLmhhc093blByb3BlcnR5KGkpfHxcImV4dHJhUGFyYW1zXCI9PT1pfHxjb25zb2xlLndhcm4oJ1N3ZWV0QWxlcnQyOiBVbmtub3duIHBhcmFtZXRlciBcIicraSsnXCInKTt0LnN0eWxlLndpZHRoPVwibnVtYmVyXCI9PXR5cGVvZiBlLndpZHRoP2Uud2lkdGgrXCJweFwiOmUud2lkdGgsdC5zdHlsZS5wYWRkaW5nPWUucGFkZGluZytcInB4XCIsdC5zdHlsZS5iYWNrZ3JvdW5kPWUuYmFja2dyb3VuZDt2YXIgYT1tKCksbD12KCkscz13KCksYz1DKCksdT1rKCk7aWYoZS50aXRsZVRleHQ/YS5pbm5lclRleHQ9ZS50aXRsZVRleHQ6YS5pbm5lckhUTUw9ZS50aXRsZS5zcGxpdChcIlxcblwiKS5qb2luKFwiPGJyPlwiKSxlLnRleHR8fGUuaHRtbCl7aWYoXCJvYmplY3RcIj09PUQoZS5odG1sKSlpZihsLmlubmVySFRNTD1cIlwiLDAgaW4gZS5odG1sKWZvcih2YXIgZD0wO2QgaW4gZS5odG1sO2QrKylsLmFwcGVuZENoaWxkKGUuaHRtbFtkXS5jbG9uZU5vZGUoITApKTtlbHNlIGwuYXBwZW5kQ2hpbGQoZS5odG1sLmNsb25lTm9kZSghMCkpO2Vsc2UgZS5odG1sP2wuaW5uZXJIVE1MPWUuaHRtbDplLnRleHQmJihsLnRleHRDb250ZW50PWUudGV4dCk7TChsKX1lbHNlIHEobCk7ZS5zaG93Q2xvc2VCdXR0b24/TCh1KTpxKHUpLHQuY2xhc3NOYW1lPW4ubW9kYWwsZS5jdXN0b21DbGFzcyYmQSh0LGUuY3VzdG9tQ2xhc3MpO3ZhciBiPWcoKSxTPXBhcnNlSW50KG51bGw9PT1lLmN1cnJlbnRQcm9ncmVzc1N0ZXA/Ri5nZXRRdWV1ZVN0ZXAoKTplLmN1cnJlbnRQcm9ncmVzc1N0ZXAsMTApO2UucHJvZ3Jlc3NTdGVwcy5sZW5ndGg/KEwoYiksVChiKSxTPj1lLnByb2dyZXNzU3RlcHMubGVuZ3RoJiZjb25zb2xlLndhcm4oXCJTd2VldEFsZXJ0MjogSW52YWxpZCBjdXJyZW50UHJvZ3Jlc3NTdGVwIHBhcmFtZXRlciwgaXQgc2hvdWxkIGJlIGxlc3MgdGhhbiBwcm9ncmVzc1N0ZXBzLmxlbmd0aCAoY3VycmVudFByb2dyZXNzU3RlcCBsaWtlIEpTIGFycmF5cyBzdGFydHMgZnJvbSAwKVwiKSxlLnByb2dyZXNzU3RlcHMuZm9yRWFjaChmdW5jdGlvbih0LG8pe3ZhciByPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtpZihBKHIsbi5wcm9ncmVzc2NpcmNsZSksci5pbm5lckhUTUw9dCxvPT09UyYmQShyLG4uYWN0aXZlcHJvZ3Jlc3NzdGVwKSxiLmFwcGVuZENoaWxkKHIpLG8hPT1lLnByb2dyZXNzU3RlcHMubGVuZ3RoLTEpe3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtBKGksbi5wcm9ncmVzc2xpbmUpLGkuc3R5bGUud2lkdGg9ZS5wcm9ncmVzc1N0ZXBzRGlzdGFuY2UsYi5hcHBlbmRDaGlsZChpKX19KSk6cShiKTtmb3IodmFyIHg9ZigpLEU9MDtFPHgubGVuZ3RoO0UrKylxKHhbRV0pO2lmKGUudHlwZSl7dmFyIFA9ITE7Zm9yKHZhciBNIGluIG8paWYoZS50eXBlPT09TSl7UD0hMDticmVha31pZighUClyZXR1cm4gY29uc29sZS5lcnJvcihcIlN3ZWV0QWxlcnQyOiBVbmtub3duIGFsZXJ0IHR5cGU6IFwiK2UudHlwZSksITE7dmFyIEg9dC5xdWVyeVNlbGVjdG9yKFwiLlwiK24uaWNvbitcIi5cIitvW2UudHlwZV0pO3N3aXRjaChMKEgpLGUudHlwZSl7Y2FzZVwic3VjY2Vzc1wiOkEoSCxcImFuaW1hdGVcIiksQShILnF1ZXJ5U2VsZWN0b3IoXCIudGlwXCIpLFwiYW5pbWF0ZS1zdWNjZXNzLXRpcFwiKSxBKEgucXVlcnlTZWxlY3RvcihcIi5sb25nXCIpLFwiYW5pbWF0ZS1zdWNjZXNzLWxvbmdcIik7YnJlYWs7Y2FzZVwiZXJyb3JcIjpBKEgsXCJhbmltYXRlLWVycm9yLWljb25cIiksQShILnF1ZXJ5U2VsZWN0b3IoXCIueC1tYXJrXCIpLFwiYW5pbWF0ZS14LW1hcmtcIik7YnJlYWs7Y2FzZVwid2FybmluZ1wiOkEoSCxcInB1bHNlLXdhcm5pbmdcIil9fXZhciBPPWgoKTtlLmltYWdlVXJsPyhPLnNldEF0dHJpYnV0ZShcInNyY1wiLGUuaW1hZ2VVcmwpLEwoTyksZS5pbWFnZVdpZHRoP08uc2V0QXR0cmlidXRlKFwid2lkdGhcIixlLmltYWdlV2lkdGgpOk8ucmVtb3ZlQXR0cmlidXRlKFwid2lkdGhcIiksZS5pbWFnZUhlaWdodD9PLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLGUuaW1hZ2VIZWlnaHQpOk8ucmVtb3ZlQXR0cmlidXRlKFwiaGVpZ2h0XCIpLE8uY2xhc3NOYW1lPW4uaW1hZ2UsZS5pbWFnZUNsYXNzJiZBKE8sZS5pbWFnZUNsYXNzKSk6cShPKSxlLnNob3dDYW5jZWxCdXR0b24/Yy5zdHlsZS5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCI6cShjKSxlLnNob3dDb25maXJtQnV0dG9uP1YocyxcImRpc3BsYXlcIik6cShzKTt2YXIgTj15KCk7ZS5zaG93Q29uZmlybUJ1dHRvbnx8ZS5zaG93Q2FuY2VsQnV0dG9uP0woTik6cShOKSxzLmlubmVySFRNTD1lLmNvbmZpcm1CdXR0b25UZXh0LGMuaW5uZXJIVE1MPWUuY2FuY2VsQnV0dG9uVGV4dCxlLmJ1dHRvbnNTdHlsaW5nJiYocy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9ZS5jb25maXJtQnV0dG9uQ29sb3IsYy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9ZS5jYW5jZWxCdXR0b25Db2xvcikscy5jbGFzc05hbWU9bi5jb25maXJtLEEocyxlLmNvbmZpcm1CdXR0b25DbGFzcyksYy5jbGFzc05hbWU9bi5jYW5jZWwsQShjLGUuY2FuY2VsQnV0dG9uQ2xhc3MpLGUuYnV0dG9uc1N0eWxpbmc/KEEocyxuLnN0eWxlZCksQShjLG4uc3R5bGVkKSk6KEIocyxuLnN0eWxlZCksQihjLG4uc3R5bGVkKSxzLnN0eWxlLmJhY2tncm91bmRDb2xvcj1zLnN0eWxlLmJvcmRlckxlZnRDb2xvcj1zLnN0eWxlLmJvcmRlclJpZ2h0Q29sb3I9XCJcIixjLnN0eWxlLmJhY2tncm91bmRDb2xvcj1jLnN0eWxlLmJvcmRlckxlZnRDb2xvcj1jLnN0eWxlLmJvcmRlclJpZ2h0Q29sb3I9XCJcIiksZS5hbmltYXRpb249PT0hMD9CKHQsbi5ub2FuaW1hdGlvbik6QSh0LG4ubm9hbmltYXRpb24pfSx6PWZ1bmN0aW9uKGUsdCl7dmFyIG89cCgpO2U/KEEobyxuLnNob3cpLEEoYSxuLmZhZGUpLEIobyxuLmhpZGUpKTpCKG8sbi5mYWRlKSxMKG8pLGEuc3R5bGUub3ZlcmZsb3dZPVwiaGlkZGVuXCIsTyYmIXgobyxuLm5vYW5pbWF0aW9uKT9vLmFkZEV2ZW50TGlzdGVuZXIoTyxmdW5jdGlvbiBlKCl7by5yZW1vdmVFdmVudExpc3RlbmVyKE8sZSksYS5zdHlsZS5vdmVyZmxvd1k9XCJhdXRvXCJ9KTphLnN0eWxlLm92ZXJmbG93WT1cImF1dG9cIixBKGEsbi5pbiksQShkb2N1bWVudC5ib2R5LG4uaW4pLFEoKSxaKCksYy5wcmV2aW91c0FjdGl2ZUVsZW1lbnQ9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCxudWxsIT09dCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmdChvKX0sUT1mdW5jdGlvbigpe251bGw9PT1jLnByZXZpb3VzQm9keVBhZGRpbmcmJmRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0PndpbmRvdy5pbm5lckhlaWdodCYmKGMucHJldmlvdXNCb2R5UGFkZGluZz1kb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCxkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD1qKCkrXCJweFwiKX0sWT1mdW5jdGlvbigpe251bGwhPT1jLnByZXZpb3VzQm9keVBhZGRpbmcmJihkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD1jLnByZXZpb3VzQm9keVBhZGRpbmcsYy5wcmV2aW91c0JvZHlQYWRkaW5nPW51bGwpfSxaPWZ1bmN0aW9uKCl7dmFyIGU9L2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJiF3aW5kb3cuTVNTdHJlYW07aWYoZSYmIXgoZG9jdW1lbnQuYm9keSxuLmlvc2ZpeCkpe3ZhciB0PWRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO2RvY3VtZW50LmJvZHkuc3R5bGUudG9wPXQqLTErXCJweFwiLEEoZG9jdW1lbnQuYm9keSxuLmlvc2ZpeCl9fSxKPWZ1bmN0aW9uKCl7aWYoeChkb2N1bWVudC5ib2R5LG4uaW9zZml4KSl7dmFyIGU9cGFyc2VJbnQoZG9jdW1lbnQuYm9keS5zdHlsZS50b3AsMTApO0IoZG9jdW1lbnQuYm9keSxuLmlvc2ZpeCksZG9jdW1lbnQuYm9keS5zdHlsZS50b3A9XCJcIixkb2N1bWVudC5ib2R5LnNjcm9sbFRvcD1lKi0xfX0sJD1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9QXJyYXkoZSksbz0wO288ZTtvKyspdFtvXT1hcmd1bWVudHNbb107aWYodm9pZCAwPT09dFswXSlyZXR1cm4gY29uc29sZS5lcnJvcihcIlN3ZWV0QWxlcnQyIGV4cGVjdHMgYXQgbGVhc3QgMSBhdHRyaWJ1dGUhXCIpLCExO3ZhciByPVcoe30sVSk7c3dpdGNoKEQodFswXSkpe2Nhc2VcInN0cmluZ1wiOnIudGl0bGU9dFswXSxyLmh0bWw9dFsxXSxyLnR5cGU9dFsyXTticmVhaztjYXNlXCJvYmplY3RcIjpXKHIsdFswXSksci5leHRyYVBhcmFtcz10WzBdLmV4dHJhUGFyYW1zLFwiZW1haWxcIj09PXIuaW5wdXQmJm51bGw9PT1yLmlucHV0VmFsaWRhdG9yJiYoci5pbnB1dFZhbGlkYXRvcj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCxuKXt2YXIgbz0vXlthLXpBLVowLTkuXy1dK0BbYS16QS1aMC05Li1dK1xcLlthLXpBLVpdezIsNn0kLztvLnRlc3QoZSk/dCgpOm4oXCJJbnZhbGlkIGVtYWlsIGFkZHJlc3NcIil9KX0pO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIGNvbnNvbGUuZXJyb3IoJ1N3ZWV0QWxlcnQyOiBVbmV4cGVjdGVkIHR5cGUgb2YgYXJndW1lbnQhIEV4cGVjdGVkIFwic3RyaW5nXCIgb3IgXCJvYmplY3RcIiwgZ290ICcrRCh0WzBdKSksITF9XyhyKTt2YXIgaT1wKCk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsdCl7ci50aW1lciYmKGkudGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Ri5jbG9zZU1vZGFsKHIub25DbG9zZSksdChcInRpbWVyXCIpfSxyLnRpbWVyKSk7dmFyIG89ZnVuY3Rpb24oZSl7c3dpdGNoKGU9ZXx8ci5pbnB1dCl7Y2FzZVwic2VsZWN0XCI6Y2FzZVwidGV4dGFyZWFcIjpjYXNlXCJmaWxlXCI6cmV0dXJuIFAoaSxuW2VdKTtjYXNlXCJjaGVja2JveFwiOnJldHVybiBpLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrbi5jaGVja2JveCtcIiBpbnB1dFwiKTtjYXNlXCJyYWRpb1wiOnJldHVybiBpLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrbi5yYWRpbytcIiBpbnB1dDpjaGVja2VkXCIpfHxpLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrbi5yYWRpbytcIiBpbnB1dDpmaXJzdC1jaGlsZFwiKTtjYXNlXCJyYW5nZVwiOnJldHVybiBpLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrbi5yYW5nZStcIiBpbnB1dFwiKTtkZWZhdWx0OnJldHVybiBQKGksbi5pbnB1dCl9fSxsPWZ1bmN0aW9uKCl7dmFyIGU9bygpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChyLmlucHV0KXtjYXNlXCJjaGVja2JveFwiOnJldHVybiBlLmNoZWNrZWQ/MTowO2Nhc2VcInJhZGlvXCI6cmV0dXJuIGUuY2hlY2tlZD9lLnZhbHVlOm51bGw7Y2FzZVwiZmlsZVwiOnJldHVybiBlLmZpbGVzLmxlbmd0aD9lLmZpbGVzWzBdOm51bGw7ZGVmYXVsdDpyZXR1cm4gci5pbnB1dEF1dG9UcmltP2UudmFsdWUudHJpbSgpOmUudmFsdWV9fTtyLmlucHV0JiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGU9bygpO2UmJkUoZSl9LDApO2Zvcih2YXIgdT1mdW5jdGlvbih0KXtyLnNob3dMb2FkZXJPbkNvbmZpcm0mJkYuc2hvd0xvYWRpbmcoKSxyLnByZUNvbmZpcm0/ci5wcmVDb25maXJtKHQsci5leHRyYVBhcmFtcykudGhlbihmdW5jdGlvbihuKXtGLmNsb3NlTW9kYWwoci5vbkNsb3NlKSxlKG58fHQpfSxmdW5jdGlvbihlKXtGLmhpZGVMb2FkaW5nKCksZSYmRi5zaG93VmFsaWRhdGlvbkVycm9yKGUpfSk6KEYuY2xvc2VNb2RhbChyLm9uQ2xvc2UpLGUodCkpfSxkPWZ1bmN0aW9uKGUpe3ZhciBuPWV8fHdpbmRvdy5ldmVudCxvPW4udGFyZ2V0fHxuLnNyY0VsZW1lbnQsaT13KCksYT1DKCksYz1pPT09b3x8aS5jb250YWlucyhvKSxkPWE9PT1vfHxhLmNvbnRhaW5zKG8pO3N3aXRjaChuLnR5cGUpe2Nhc2VcIm1vdXNlb3ZlclwiOmNhc2VcIm1vdXNldXBcIjpyLmJ1dHRvbnNTdHlsaW5nJiYoYz9pLnN0eWxlLmJhY2tncm91bmRDb2xvcj1zKHIuY29uZmlybUJ1dHRvbkNvbG9yLC0uMSk6ZCYmKGEuc3R5bGUuYmFja2dyb3VuZENvbG9yPXMoci5jYW5jZWxCdXR0b25Db2xvciwtLjEpKSk7YnJlYWs7Y2FzZVwibW91c2VvdXRcIjpyLmJ1dHRvbnNTdHlsaW5nJiYoYz9pLnN0eWxlLmJhY2tncm91bmRDb2xvcj1yLmNvbmZpcm1CdXR0b25Db2xvcjpkJiYoYS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9ci5jYW5jZWxCdXR0b25Db2xvcikpO2JyZWFrO2Nhc2VcIm1vdXNlZG93blwiOnIuYnV0dG9uc1N0eWxpbmcmJihjP2kuc3R5bGUuYmFja2dyb3VuZENvbG9yPXMoci5jb25maXJtQnV0dG9uQ29sb3IsLS4yKTpkJiYoYS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9cyhyLmNhbmNlbEJ1dHRvbkNvbG9yLC0uMikpKTticmVhaztjYXNlXCJjbGlja1wiOmMmJkYuaXNWaXNpYmxlKCk/ci5pbnB1dD8hZnVuY3Rpb24oKXt2YXIgZT1sKCk7ci5pbnB1dFZhbGlkYXRvcj8oRi5kaXNhYmxlSW5wdXQoKSxyLmlucHV0VmFsaWRhdG9yKGUsci5leHRyYVBhcmFtcykudGhlbihmdW5jdGlvbigpe0YuZW5hYmxlSW5wdXQoKSx1KGUpfSxmdW5jdGlvbihlKXtGLmVuYWJsZUlucHV0KCksZSYmRi5zaG93VmFsaWRhdGlvbkVycm9yKGUpfSkpOnUoZSl9KCk6dSghMCk6ZCYmRi5pc1Zpc2libGUoKSYmKEYuY2xvc2VNb2RhbChyLm9uQ2xvc2UpLHQoXCJjYW5jZWxcIikpfX0sZj1pLnF1ZXJ5U2VsZWN0b3JBbGwoXCJidXR0b25cIiksbT0wO208Zi5sZW5ndGg7bSsrKWZbbV0ub25jbGljaz1kLGZbbV0ub25tb3VzZW92ZXI9ZCxmW21dLm9ubW91c2VvdXQ9ZCxmW21dLm9ubW91c2Vkb3duPWQ7aygpLm9uY2xpY2s9ZnVuY3Rpb24oKXtGLmNsb3NlTW9kYWwoci5vbkNsb3NlKSx0KFwiY2xvc2VcIil9LGEub25jbGljaz1mdW5jdGlvbihlKXtlLnRhcmdldD09PWEmJnIuYWxsb3dPdXRzaWRlQ2xpY2smJihGLmNsb3NlTW9kYWwoci5vbkNsb3NlKSx0KFwib3ZlcmxheVwiKSl9O3ZhciB2PXcoKSxoPUMoKTtyLnJldmVyc2VCdXR0b25zP3YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaCx2KTp2LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHYsaCk7dmFyIHg9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49UyhyLmZvY3VzQ2FuY2VsKSxvPTA7bzxuLmxlbmd0aDtvKyspe2UrPXQsZT09PW4ubGVuZ3RoP2U9MDplPT09LTEmJihlPW4ubGVuZ3RoLTEpO3ZhciBpPW5bZV07aWYoTShpKSlyZXR1cm4gaS5mb2N1cygpfX0sVD1mdW5jdGlvbihlKXt2YXIgbj1lfHx3aW5kb3cuZXZlbnQsbz1uLmtleUNvZGV8fG4ud2hpY2g7aWYoWzksMTMsMzIsMjddLmluZGV4T2YobykhPT0tMSl7Zm9yKHZhciBpPW4udGFyZ2V0fHxuLnNyY0VsZW1lbnQsYT1TKHIuZm9jdXNDYW5jZWwpLGw9LTEscz0wO3M8YS5sZW5ndGg7cysrKWlmKGk9PT1hW3NdKXtsPXM7YnJlYWt9OT09PW8/KG4uc2hpZnRLZXk/eChsLC0xKTp4KGwsMSksbi5zdG9wUHJvcGFnYXRpb24oKSxuLnByZXZlbnREZWZhdWx0KCkpOjEzPT09b3x8MzI9PT1vP2w9PT0tMSYmKHIuZm9jdXNDYW5jZWw/SChoLG4pOkgodixuKSk6Mjc9PT1vJiZyLmFsbG93RXNjYXBlS2V5PT09ITAmJihGLmNsb3NlTW9kYWwoci5vbkNsb3NlKSx0KFwiZXNjXCIpKX19O2MucHJldmlvdXNXaW5kb3dLZXlEb3duPXdpbmRvdy5vbmtleWRvd24sd2luZG93Lm9ua2V5ZG93bj1ULHIuYnV0dG9uc1N0eWxpbmcmJih2LnN0eWxlLmJvcmRlckxlZnRDb2xvcj1yLmNvbmZpcm1CdXR0b25Db2xvcix2LnN0eWxlLmJvcmRlclJpZ2h0Q29sb3I9ci5jb25maXJtQnV0dG9uQ29sb3IpLEYuc2hvd0xvYWRpbmc9Ri5lbmFibGVMb2FkaW5nPWZ1bmN0aW9uKCl7TCh5KCkpLEwodixcImlubGluZS1ibG9ja1wiKSxBKHYsbi5sb2FkaW5nKSxBKGksbi5sb2FkaW5nKSx2LmRpc2FibGVkPSEwLGguZGlzYWJsZWQ9ITB9LEYuaGlkZUxvYWRpbmc9Ri5kaXNhYmxlTG9hZGluZz1mdW5jdGlvbigpe3Iuc2hvd0NvbmZpcm1CdXR0b258fChxKHYpLHIuc2hvd0NhbmNlbEJ1dHRvbnx8cSh5KCkpKSxCKHYsbi5sb2FkaW5nKSxCKGksbi5sb2FkaW5nKSx2LmRpc2FibGVkPSExLGguZGlzYWJsZWQ9ITF9LEYuZW5hYmxlQnV0dG9ucz1mdW5jdGlvbigpe3YuZGlzYWJsZWQ9ITEsaC5kaXNhYmxlZD0hMX0sRi5kaXNhYmxlQnV0dG9ucz1mdW5jdGlvbigpe3YuZGlzYWJsZWQ9ITAsaC5kaXNhYmxlZD0hMH0sRi5lbmFibGVDb25maXJtQnV0dG9uPWZ1bmN0aW9uKCl7di5kaXNhYmxlZD0hMX0sRi5kaXNhYmxlQ29uZmlybUJ1dHRvbj1mdW5jdGlvbigpe3YuZGlzYWJsZWQ9ITB9LEYuZW5hYmxlSW5wdXQ9ZnVuY3Rpb24oKXt2YXIgZT1vKCk7aWYoIWUpcmV0dXJuITE7aWYoXCJyYWRpb1wiPT09ZS50eXBlKWZvcih2YXIgdD1lLnBhcmVudE5vZGUucGFyZW50Tm9kZSxuPXQucXVlcnlTZWxlY3RvckFsbChcImlucHV0XCIpLHI9MDtyPG4ubGVuZ3RoO3IrKyluW3JdLmRpc2FibGVkPSExO2Vsc2UgZS5kaXNhYmxlZD0hMX0sRi5kaXNhYmxlSW5wdXQ9ZnVuY3Rpb24oKXt2YXIgZT1vKCk7aWYoIWUpcmV0dXJuITE7aWYoZSYmXCJyYWRpb1wiPT09ZS50eXBlKWZvcih2YXIgdD1lLnBhcmVudE5vZGUucGFyZW50Tm9kZSxuPXQucXVlcnlTZWxlY3RvckFsbChcImlucHV0XCIpLHI9MDtyPG4ubGVuZ3RoO3IrKyluW3JdLmRpc2FibGVkPSEwO2Vsc2UgZS5kaXNhYmxlZD0hMH0sRi5yZWNhbGN1bGF0ZUhlaWdodD1JKGZ1bmN0aW9uKCl7dmFyIGU9cCgpLHQ9ZS5zdHlsZS5kaXNwbGF5O2Uuc3R5bGUubWluSGVpZ2h0PVwiXCIsTChlKSxlLnN0eWxlLm1pbkhlaWdodD1lLnNjcm9sbEhlaWdodCsxK1wicHhcIixlLnN0eWxlLmRpc3BsYXk9dH0sNTApLEYuc2hvd1ZhbGlkYXRpb25FcnJvcj1mdW5jdGlvbihlKXt2YXIgdD1iKCk7dC5pbm5lckhUTUw9ZSxMKHQpO3ZhciByPW8oKTtFKHIpLEEocixuLmlucHV0ZXJyb3IpfSxGLnJlc2V0VmFsaWRhdGlvbkVycm9yPWZ1bmN0aW9uKCl7dmFyIGU9YigpO3EoZSksRi5yZWNhbGN1bGF0ZUhlaWdodCgpO3ZhciB0PW8oKTt0JiZCKHQsbi5pbnB1dGVycm9yKX0sRi5nZXRQcm9ncmVzc1N0ZXBzPWZ1bmN0aW9uKCl7cmV0dXJuIHIucHJvZ3Jlc3NTdGVwc30sRi5zZXRQcm9ncmVzc1N0ZXBzPWZ1bmN0aW9uKGUpe3IucHJvZ3Jlc3NTdGVwcz1lLF8ocil9LEYuc2hvd1Byb2dyZXNzU3RlcHM9ZnVuY3Rpb24oKXtMKGcoKSl9LEYuaGlkZVByb2dyZXNzU3RlcHM9ZnVuY3Rpb24oKXtxKGcoKSl9LEYuZW5hYmxlQnV0dG9ucygpLEYuaGlkZUxvYWRpbmcoKSxGLnJlc2V0VmFsaWRhdGlvbkVycm9yKCk7Zm9yKHZhciBWPVtcImlucHV0XCIsXCJmaWxlXCIsXCJyYW5nZVwiLFwic2VsZWN0XCIsXCJyYWRpb1wiLFwiY2hlY2tib3hcIixcInRleHRhcmVhXCJdLE89dm9pZCAwLE49MDtOPFYubGVuZ3RoO04rKyl7dmFyIGo9bltWW05dXSxXPVAoaSxqKTtpZihPPW8oVltOXSkpe2Zvcih2YXIgVSBpbiBPLmF0dHJpYnV0ZXMpaWYoTy5hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KFUpKXt2YXIgSz1PLmF0dHJpYnV0ZXNbVV0ubmFtZTtcInR5cGVcIiE9PUsmJlwidmFsdWVcIiE9PUsmJk8ucmVtb3ZlQXR0cmlidXRlKEspfWZvcih2YXIgUSBpbiByLmlucHV0QXR0cmlidXRlcylPLnNldEF0dHJpYnV0ZShRLHIuaW5wdXRBdHRyaWJ1dGVzW1FdKX1XLmNsYXNzTmFtZT1qLHIuaW5wdXRDbGFzcyYmQShXLHIuaW5wdXRDbGFzcykscShXKX12YXIgWT12b2lkIDA7IWZ1bmN0aW9uKCl7c3dpdGNoKHIuaW5wdXQpe2Nhc2VcInRleHRcIjpjYXNlXCJlbWFpbFwiOmNhc2VcInBhc3N3b3JkXCI6Y2FzZVwibnVtYmVyXCI6Y2FzZVwidGVsXCI6Tz1QKGksbi5pbnB1dCksTy52YWx1ZT1yLmlucHV0VmFsdWUsTy5wbGFjZWhvbGRlcj1yLmlucHV0UGxhY2Vob2xkZXIsTy50eXBlPXIuaW5wdXQsTChPKTticmVhaztjYXNlXCJmaWxlXCI6Tz1QKGksbi5maWxlKSxPLnBsYWNlaG9sZGVyPXIuaW5wdXRQbGFjZWhvbGRlcixPLnR5cGU9ci5pbnB1dCxMKE8pO2JyZWFrO2Nhc2VcInJhbmdlXCI6dmFyIGU9UChpLG4ucmFuZ2UpLHQ9ZS5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIiksYT1lLnF1ZXJ5U2VsZWN0b3IoXCJvdXRwdXRcIik7dC52YWx1ZT1yLmlucHV0VmFsdWUsdC50eXBlPXIuaW5wdXQsYS52YWx1ZT1yLmlucHV0VmFsdWUsTChlKTticmVhaztjYXNlXCJzZWxlY3RcIjp2YXIgbD1QKGksbi5zZWxlY3QpO2lmKGwuaW5uZXJIVE1MPVwiXCIsci5pbnB1dFBsYWNlaG9sZGVyKXt2YXIgcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO3MuaW5uZXJIVE1MPXIuaW5wdXRQbGFjZWhvbGRlcixzLnZhbHVlPVwiXCIscy5kaXNhYmxlZD0hMCxzLnNlbGVjdGVkPSEwLGwuYXBwZW5kQ2hpbGQocyl9WT1mdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gZSl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtuLnZhbHVlPXQsbi5pbm5lckhUTUw9ZVt0XSxyLmlucHV0VmFsdWU9PT10JiYobi5zZWxlY3RlZD0hMCksbC5hcHBlbmRDaGlsZChuKX1MKGwpLGwuZm9jdXMoKX07YnJlYWs7Y2FzZVwicmFkaW9cIjp2YXIgYz1QKGksbi5yYWRpbyk7Yy5pbm5lckhUTUw9XCJcIixZPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiBlKXt2YXIgbz0xLGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpLGw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7aS50eXBlPVwicmFkaW9cIixpLm5hbWU9bi5yYWRpbyxpLnZhbHVlPXQsaS5pZD1uLnJhZGlvK1wiLVwiK28rKyxyLmlucHV0VmFsdWU9PT10JiYoaS5jaGVja2VkPSEwKSxsLmlubmVySFRNTD1lW3RdLGEuYXBwZW5kQ2hpbGQoaSksYS5hcHBlbmRDaGlsZChsKSxhLmZvcj1pLmlkLGMuYXBwZW5kQ2hpbGQoYSl9TChjKTt2YXIgcz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKTtzLmxlbmd0aCYmc1swXS5mb2N1cygpfTticmVhaztjYXNlXCJjaGVja2JveFwiOnZhciB1PVAoaSxuLmNoZWNrYm94KSxkPW8oXCJjaGVja2JveFwiKTtkLnR5cGU9XCJjaGVja2JveFwiLGQudmFsdWU9MSxkLmlkPW4uY2hlY2tib3gsZC5jaGVja2VkPUJvb2xlYW4oci5pbnB1dFZhbHVlKTt2YXIgcD11LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3BhblwiKTtwLmxlbmd0aCYmdS5yZW1vdmVDaGlsZChwWzBdKSxwPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLHAuaW5uZXJIVE1MPXIuaW5wdXRQbGFjZWhvbGRlcix1LmFwcGVuZENoaWxkKHApLEwodSk7YnJlYWs7Y2FzZVwidGV4dGFyZWFcIjp2YXIgZj1QKGksbi50ZXh0YXJlYSk7Zi52YWx1ZT1yLmlucHV0VmFsdWUsZi5wbGFjZWhvbGRlcj1yLmlucHV0UGxhY2Vob2xkZXIsTChmKTticmVhaztjYXNlIG51bGw6YnJlYWs7ZGVmYXVsdDpjb25zb2xlLmVycm9yKCdTd2VldEFsZXJ0MjogVW5leHBlY3RlZCB0eXBlIG9mIGlucHV0ISBFeHBlY3RlZCBcInRleHRcIiwgXCJlbWFpbFwiLCBcInBhc3N3b3JkXCIsIFwic2VsZWN0XCIsIFwiY2hlY2tib3hcIiwgXCJ0ZXh0YXJlYVwiIG9yIFwiZmlsZVwiLCBnb3QgXCInK3IuaW5wdXQrJ1wiJyl9fSgpLFwic2VsZWN0XCIhPT1yLmlucHV0JiZcInJhZGlvXCIhPT1yLmlucHV0fHwoci5pbnB1dE9wdGlvbnMgaW5zdGFuY2VvZiBQcm9taXNlPyhGLnNob3dMb2FkaW5nKCksci5pbnB1dE9wdGlvbnMudGhlbihmdW5jdGlvbihlKXtGLmhpZGVMb2FkaW5nKCksWShlKX0pKTpcIm9iamVjdFwiPT09RChyLmlucHV0T3B0aW9ucyk/WShyLmlucHV0T3B0aW9ucyk6Y29uc29sZS5lcnJvcihcIlN3ZWV0QWxlcnQyOiBVbmV4cGVjdGVkIHR5cGUgb2YgaW5wdXRPcHRpb25zISBFeHBlY3RlZCBvYmplY3Qgb3IgUHJvbWlzZSwgZ290IFwiK0Qoci5pbnB1dE9wdGlvbnMpKSkseihyLmFuaW1hdGlvbixyLm9uT3BlbikseCgtMSwxKSxhLnNjcm9sbFRvcD0wLFwidW5kZWZpbmVkXCI9PXR5cGVvZiBNdXRhdGlvbk9ic2VydmVyfHxSfHwoUj1uZXcgTXV0YXRpb25PYnNlcnZlcihGLnJlY2FsY3VsYXRlSGVpZ2h0KSxSLm9ic2VydmUoaSx7Y2hpbGRMaXN0OiEwLGNoYXJhY3RlckRhdGE6ITAsc3VidHJlZTohMH0pKX0pfSxGPWZ1bmN0aW9uIGUoKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPUFycmF5KHQpLG89MDtvPHQ7bysrKW5bb109YXJndW1lbnRzW29dO3JldHVybiBlLmlzVmlzaWJsZSgpJiZlLmNsb3NlKCksJC5hcHBseSh2b2lkIDAsbil9O3JldHVybiBGLmlzVmlzaWJsZT1mdW5jdGlvbigpe3ZhciBlPXAoKTtyZXR1cm4gTShlKX0sRi5xdWV1ZT1mdW5jdGlvbihlKXtLPWU7dmFyIHQ9cCgpLG49ZnVuY3Rpb24oKXtLPVtdLHQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1xdWV1ZS1zdGVwXCIpfSxvPVtdO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlLHIpeyFmdW5jdGlvbiBpKGEsbCl7YTxLLmxlbmd0aD8odC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXF1ZXVlLXN0ZXBcIixhKSxGKEtbYV0pLnRoZW4oZnVuY3Rpb24oZSl7by5wdXNoKGUpLGkoYSsxLGwpfSxmdW5jdGlvbihlKXtuKCkscihlKX0pKToobigpLGUobykpfSgwKX0pfSxGLmdldFF1ZXVlU3RlcD1mdW5jdGlvbigpe3JldHVybiBwKCkuZ2V0QXR0cmlidXRlKFwiZGF0YS1xdWV1ZS1zdGVwXCIpfSxGLmluc2VydFF1ZXVlU3RlcD1mdW5jdGlvbihlLHQpe3JldHVybiB0JiZ0PEsubGVuZ3RoP0suc3BsaWNlKHQsMCxlKTpLLnB1c2goZSl9LEYuZGVsZXRlUXVldWVTdGVwPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBLW2VdJiZLLnNwbGljZShlLDEpfSxGLmNsb3NlPUYuY2xvc2VNb2RhbD1mdW5jdGlvbihlKXt2YXIgdD1wKCk7Qih0LG4uc2hvdyksQSh0LG4uaGlkZSk7dmFyIHI9dC5xdWVyeVNlbGVjdG9yKFwiLlwiK24uaWNvbitcIi5cIitvLnN1Y2Nlc3MpO0IocixcImFuaW1hdGVcIiksQihyLnF1ZXJ5U2VsZWN0b3IoXCIudGlwXCIpLFwiYW5pbWF0ZS1zdWNjZXNzLXRpcFwiKSxCKHIucXVlcnlTZWxlY3RvcihcIi5sb25nXCIpLFwiYW5pbWF0ZS1zdWNjZXNzLWxvbmdcIik7dmFyIGk9dC5xdWVyeVNlbGVjdG9yKFwiLlwiK24uaWNvbitcIi5cIitvLmVycm9yKTtCKGksXCJhbmltYXRlLWVycm9yLWljb25cIiksQihpLnF1ZXJ5U2VsZWN0b3IoXCIueC1tYXJrXCIpLFwiYW5pbWF0ZS14LW1hcmtcIik7dmFyIGw9dC5xdWVyeVNlbGVjdG9yKFwiLlwiK24uaWNvbitcIi5cIitvLndhcm5pbmcpO0IobCxcInB1bHNlLXdhcm5pbmdcIiksTigpO3ZhciBzPWZ1bmN0aW9uKCl7cSh0KSx0LnN0eWxlLm1pbkhlaWdodD1cIlwiLEIoYSxuLmluKSxCKGRvY3VtZW50LmJvZHksbi5pbiksWSgpLEooKX07TyYmIXgodCxuLm5vYW5pbWF0aW9uKT90LmFkZEV2ZW50TGlzdGVuZXIoTyxmdW5jdGlvbiBlKCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKE8sZSkseCh0LG4uaGlkZSkmJnMoKX0pOnMoKSxudWxsIT09ZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZSh0KX0sRi5jbGlja0NvbmZpcm09ZnVuY3Rpb24oKXtyZXR1cm4gdygpLmNsaWNrKCl9LEYuY2xpY2tDYW5jZWw9ZnVuY3Rpb24oKXtyZXR1cm4gQygpLmNsaWNrKCl9LEYuc2V0RGVmYXVsdHM9ZnVuY3Rpb24oZSl7aWYoIWV8fFwib2JqZWN0XCIhPT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpEKGUpKSlyZXR1cm4gY29uc29sZS5lcnJvcihcIlN3ZWV0QWxlcnQyOiB0aGUgYXJndW1lbnQgZm9yIHNldERlZmF1bHRzKCkgaXMgcmVxdWlyZWQgYW5kIGhhcyB0byBiZSBhIG9iamVjdFwiKTtmb3IodmFyIHQgaW4gZSlyLmhhc093blByb3BlcnR5KHQpfHxcImV4dHJhUGFyYW1zXCI9PT10fHwoY29uc29sZS53YXJuKCdTd2VldEFsZXJ0MjogVW5rbm93biBwYXJhbWV0ZXIgXCInK3QrJ1wiJyksZGVsZXRlIGVbdF0pO1coVSxlKX0sRi5yZXNldERlZmF1bHRzPWZ1bmN0aW9uKCl7VT1XKHt9LHIpfSxGLm5vb3A9ZnVuY3Rpb24oKXt9LEYudmVyc2lvbj1cIjYuMi44XCIsRn0pLHdpbmRvdy5Td2VldGFsZXJ0MiYmKHdpbmRvdy5zd2VldEFsZXJ0PXdpbmRvdy5zd2FsPXdpbmRvdy5Td2VldGFsZXJ0Mik7IiwiLyoqXG4gKiBVQVBhcnNlci5qcyB2MC43LjEyXG4gKiBMaWdodHdlaWdodCBKYXZhU2NyaXB0LWJhc2VkIFVzZXItQWdlbnQgc3RyaW5nIHBhcnNlclxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhaXNhbG1hbi91YS1wYXJzZXItanNcbiAqXG4gKiBDb3B5cmlnaHQgwqkgMjAxMi0yMDE2IEZhaXNhbCBTYWxtYW4gPGZ5emxtYW5AZ21haWwuY29tPlxuICogRHVhbCBsaWNlbnNlZCB1bmRlciBHUEx2MiAmIE1JVFxuICovKGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49XCIwLjcuMTJcIixyPVwiXCIsaT1cIj9cIixzPVwiZnVuY3Rpb25cIixvPVwidW5kZWZpbmVkXCIsdT1cIm9iamVjdFwiLGE9XCJzdHJpbmdcIixmPVwibWFqb3JcIixsPVwibW9kZWxcIixjPVwibmFtZVwiLGg9XCJ0eXBlXCIscD1cInZlbmRvclwiLGQ9XCJ2ZXJzaW9uXCIsdj1cImFyY2hpdGVjdHVyZVwiLG09XCJjb25zb2xlXCIsZz1cIm1vYmlsZVwiLHk9XCJ0YWJsZXRcIixiPVwic21hcnR0dlwiLHc9XCJ3ZWFyYWJsZVwiLEU9XCJlbWJlZGRlZFwiLFM9e2V4dGVuZDpmdW5jdGlvbihlLHQpe3ZhciBuPXt9O2Zvcih2YXIgciBpbiBlKXRbcl0mJnRbcl0ubGVuZ3RoJTI9PT0wP25bcl09dFtyXS5jb25jYXQoZVtyXSk6bltyXT1lW3JdO3JldHVybiBufSxoYXM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHlwZW9mIGU9PVwic3RyaW5nXCI/dC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZS50b0xvd2VyQ2FzZSgpKSE9PS0xOiExfSxsb3dlcml6ZTpmdW5jdGlvbihlKXtyZXR1cm4gZS50b0xvd2VyQ2FzZSgpfSxtYWpvcjpmdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGU9PT1hP2UucmVwbGFjZSgvW15cXGRcXC5dL2csXCJcIikuc3BsaXQoXCIuXCIpWzBdOnR9LHRyaW06ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXCJcIil9fSx4PXtyZ3g6ZnVuY3Rpb24oKXt2YXIgZSxuPTAscixpLGEsZixsLGMsaD1hcmd1bWVudHM7d2hpbGUobjxoLmxlbmd0aCYmIWwpe3ZhciBwPWhbbl0sZD1oW24rMV07aWYodHlwZW9mIGU9PT1vKXtlPXt9O2ZvcihhIGluIGQpZC5oYXNPd25Qcm9wZXJ0eShhKSYmKGY9ZFthXSx0eXBlb2YgZj09PXU/ZVtmWzBdXT10OmVbZl09dCl9cj1pPTA7d2hpbGUocjxwLmxlbmd0aCYmIWwpe2w9cFtyKytdLmV4ZWModGhpcy5nZXRVQSgpKTtpZighIWwpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWxbKytpXSxmPWRbYV0sdHlwZW9mIGY9PT11JiZmLmxlbmd0aD4wP2YubGVuZ3RoPT0yP3R5cGVvZiBmWzFdPT1zP2VbZlswXV09ZlsxXS5jYWxsKHRoaXMsYyk6ZVtmWzBdXT1mWzFdOmYubGVuZ3RoPT0zP3R5cGVvZiBmWzFdPT09cyYmKCFmWzFdLmV4ZWN8fCFmWzFdLnRlc3QpP2VbZlswXV09Yz9mWzFdLmNhbGwodGhpcyxjLGZbMl0pOnQ6ZVtmWzBdXT1jP2MucmVwbGFjZShmWzFdLGZbMl0pOnQ6Zi5sZW5ndGg9PTQmJihlW2ZbMF1dPWM/ZlszXS5jYWxsKHRoaXMsYy5yZXBsYWNlKGZbMV0sZlsyXSkpOnQpOmVbZl09Yz9jOnR9bis9Mn1yZXR1cm4gZX0sc3RyOmZ1bmN0aW9uKGUsbil7Zm9yKHZhciByIGluIG4paWYodHlwZW9mIG5bcl09PT11JiZuW3JdLmxlbmd0aD4wKXtmb3IodmFyIHM9MDtzPG5bcl0ubGVuZ3RoO3MrKylpZihTLmhhcyhuW3JdW3NdLGUpKXJldHVybiByPT09aT90OnJ9ZWxzZSBpZihTLmhhcyhuW3JdLGUpKXJldHVybiByPT09aT90OnI7cmV0dXJuIGV9fSxUPXticm93c2VyOntvbGRzYWZhcmk6e3ZlcnNpb246e1wiMS4wXCI6XCIvOFwiLDEuMjpcIi8xXCIsMS4zOlwiLzNcIixcIjIuMFwiOlwiLzQxMlwiLFwiMi4wLjJcIjpcIi80MTZcIixcIjIuMC4zXCI6XCIvNDE3XCIsXCIyLjAuNFwiOlwiLzQxOVwiLFwiP1wiOlwiL1wifX19LGRldmljZTp7YW1hem9uOnttb2RlbDp7XCJGaXJlIFBob25lXCI6W1wiU0RcIixcIktGXCJdfX0sc3ByaW50Onttb2RlbDp7XCJFdm8gU2hpZnQgNEdcIjpcIjczNzNLVFwifSx2ZW5kb3I6e0hUQzpcIkFQQVwiLFNwcmludDpcIlNwcmludFwifX19LG9zOnt3aW5kb3dzOnt2ZXJzaW9uOntNRTpcIjQuOTBcIixcIk5UIDMuMTFcIjpcIk5UMy41MVwiLFwiTlQgNC4wXCI6XCJOVDQuMFwiLDJlMzpcIk5UIDUuMFwiLFhQOltcIk5UIDUuMVwiLFwiTlQgNS4yXCJdLFZpc3RhOlwiTlQgNi4wXCIsNzpcIk5UIDYuMVwiLDg6XCJOVCA2LjJcIiw4LjE6XCJOVCA2LjNcIiwxMDpbXCJOVCA2LjRcIixcIk5UIDEwLjBcIl0sUlQ6XCJBUk1cIn19fX0sTj17YnJvd3NlcjpbWy8ob3BlcmFcXHNtaW5pKVxcLyhbXFx3XFwuLV0rKS9pLC8ob3BlcmFcXHNbbW9iaWxldGFiXSspLit2ZXJzaW9uXFwvKFtcXHdcXC4tXSspL2ksLyhvcGVyYSkuK3ZlcnNpb25cXC8oW1xcd1xcLl0rKS9pLC8ob3BlcmEpW1xcL1xcc10rKFtcXHdcXC5dKykvaV0sW2MsZF0sWy8ob3Bpb3MpW1xcL1xcc10rKFtcXHdcXC5dKykvaV0sW1tjLFwiT3BlcmEgTWluaVwiXSxkXSxbL1xccyhvcHIpXFwvKFtcXHdcXC5dKykvaV0sW1tjLFwiT3BlcmFcIl0sZF0sWy8oa2luZGxlKVxcLyhbXFx3XFwuXSspL2ksLyhsdW5hc2NhcGV8bWF4dGhvbnxuZXRmcm9udHxqYXNtaW5lfGJsYXplcilbXFwvXFxzXT8oW1xcd1xcLl0rKSovaSwvKGF2YW50XFxzfGllbW9iaWxlfHNsaW18YmFpZHUpKD86YnJvd3Nlcik/W1xcL1xcc10/KFtcXHdcXC5dKikvaSwvKD86bXN8XFwoKShpZSlcXHMoW1xcd1xcLl0rKS9pLC8ocmVrb25xKVxcLyhbXFx3XFwuXSspKi9pLC8oY2hyb21pdW18ZmxvY2t8cm9ja21lbHR8bWlkb3JpfGVwaXBoYW55fHNpbGt8c2t5ZmlyZXxvdmlicm93c2VyfGJvbHR8aXJvbnx2aXZhbGRpfGlyaWRpdW18cGhhbnRvbWpzKVxcLyhbXFx3XFwuLV0rKS9pXSxbYyxkXSxbLyh0cmlkZW50KS4rcnZbOlxcc10oW1xcd1xcLl0rKS4rbGlrZVxcc2dlY2tvL2ldLFtbYyxcIklFXCJdLGRdLFsvKGVkZ2UpXFwvKChcXGQrKT9bXFx3XFwuXSspL2ldLFtjLGRdLFsvKHlhYnJvd3NlcilcXC8oW1xcd1xcLl0rKS9pXSxbW2MsXCJZYW5kZXhcIl0sZF0sWy8oY29tb2RvX2RyYWdvbilcXC8oW1xcd1xcLl0rKS9pXSxbW2MsL18vZyxcIiBcIl0sZF0sWy8obWljcm9tZXNzZW5nZXIpXFwvKFtcXHdcXC5dKykvaV0sW1tjLFwiV2VDaGF0XCJdLGRdLFsveGlhb21pXFwvbWl1aWJyb3dzZXJcXC8oW1xcd1xcLl0rKS9pXSxbZCxbYyxcIk1JVUkgQnJvd3NlclwiXV0sWy9cXHN3dlxcKS4rKGNocm9tZSlcXC8oW1xcd1xcLl0rKS9pXSxbW2MsLyguKykvLFwiJDEgV2ViVmlld1wiXSxkXSxbL2FuZHJvaWQuK3NhbXN1bmdicm93c2VyXFwvKFtcXHdcXC5dKykvaSwvYW5kcm9pZC4rdmVyc2lvblxcLyhbXFx3XFwuXSspXFxzKyg/Om1vYmlsZVxccz9zYWZhcml8c2FmYXJpKSovaV0sW2QsW2MsXCJBbmRyb2lkIEJyb3dzZXJcIl1dLFsvKGNocm9tZXxvbW5pd2VifGFyb3JhfFt0aXplbm9rYV17NX1cXHM/YnJvd3NlcilcXC92PyhbXFx3XFwuXSspL2ksLyhxcWJyb3dzZXIpW1xcL1xcc10/KFtcXHdcXC5dKykvaV0sW2MsZF0sWy8odWNcXHM/YnJvd3NlcilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pLC91Y3dlYi4rKHVjYnJvd3NlcilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pLC9qdWMuKyh1Y3dlYilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pXSxbW2MsXCJVQ0Jyb3dzZXJcIl0sZF0sWy8oZG9sZmluKVxcLyhbXFx3XFwuXSspL2ldLFtbYyxcIkRvbHBoaW5cIl0sZF0sWy8oKD86YW5kcm9pZC4rKWNybW98Y3Jpb3MpXFwvKFtcXHdcXC5dKykvaV0sW1tjLFwiQ2hyb21lXCJdLGRdLFsvO2ZiYXZcXC8oW1xcd1xcLl0rKTsvaV0sW2QsW2MsXCJGYWNlYm9va1wiXV0sWy9meGlvc1xcLyhbXFx3XFwuLV0rKS9pXSxbZCxbYyxcIkZpcmVmb3hcIl1dLFsvdmVyc2lvblxcLyhbXFx3XFwuXSspLis/bW9iaWxlXFwvXFx3K1xccyhzYWZhcmkpL2ldLFtkLFtjLFwiTW9iaWxlIFNhZmFyaVwiXV0sWy92ZXJzaW9uXFwvKFtcXHdcXC5dKykuKz8obW9iaWxlXFxzP3NhZmFyaXxzYWZhcmkpL2ldLFtkLGNdLFsvd2Via2l0Lis/KG1vYmlsZVxccz9zYWZhcml8c2FmYXJpKShcXC9bXFx3XFwuXSspL2ldLFtjLFtkLHguc3RyLFQuYnJvd3Nlci5vbGRzYWZhcmkudmVyc2lvbl1dLFsvKGtvbnF1ZXJvcilcXC8oW1xcd1xcLl0rKS9pLC8od2Via2l0fGtodG1sKVxcLyhbXFx3XFwuXSspL2ldLFtjLGRdLFsvKG5hdmlnYXRvcnxuZXRzY2FwZSlcXC8oW1xcd1xcLi1dKykvaV0sW1tjLFwiTmV0c2NhcGVcIl0sZF0sWy8oc3dpZnRmb3gpL2ksLyhpY2VkcmFnb258aWNld2Vhc2VsfGNhbWlub3xjaGltZXJhfGZlbm5lY3xtYWVtb1xcc2Jyb3dzZXJ8bWluaW1vfGNvbmtlcm9yKVtcXC9cXHNdPyhbXFx3XFwuXFwrXSspL2ksLyhmaXJlZm94fHNlYW1vbmtleXxrLW1lbGVvbnxpY2VjYXR8aWNlYXBlfGZpcmViaXJkfHBob2VuaXgpXFwvKFtcXHdcXC4tXSspL2ksLyhtb3ppbGxhKVxcLyhbXFx3XFwuXSspLitydlxcOi4rZ2Vja29cXC9cXGQrL2ksLyhwb2xhcmlzfGx5bnh8ZGlsbG98aWNhYnxkb3Jpc3xhbWF5YXx3M218bmV0c3VyZnxzbGVpcG5pcilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pLC8obGlua3MpXFxzXFwoKFtcXHdcXC5dKykvaSwvKGdvYnJvd3NlcilcXC8/KFtcXHdcXC5dKykqL2ksLyhpY2VcXHM/YnJvd3NlcilcXC92PyhbXFx3XFwuX10rKS9pLC8obW9zYWljKVtcXC9cXHNdKFtcXHdcXC5dKykvaV0sW2MsZF1dLGNwdTpbWy8oPzooYW1kfHgoPzooPzo4Nnw2NClbXy1dKT98d293fHdpbik2NClbO1xcKV0vaV0sW1t2LFwiYW1kNjRcIl1dLFsvKGlhMzIoPz07KSkvaV0sW1t2LFMubG93ZXJpemVdXSxbLygoPzppWzM0Nl18eCk4NilbO1xcKV0vaV0sW1t2LFwiaWEzMlwiXV0sWy93aW5kb3dzXFxzKGNlfG1vYmlsZSk7XFxzcHBjOy9pXSxbW3YsXCJhcm1cIl1dLFsvKCg/OnBwY3xwb3dlcnBjKSg/OjY0KT8pKD86XFxzbWFjfDt8XFwpKS9pXSxbW3YsL293ZXIvLFwiXCIsUy5sb3dlcml6ZV1dLFsvKHN1bjRcXHcpWztcXCldL2ldLFtbdixcInNwYXJjXCJdXSxbLygoPzphdnIzMnxpYTY0KD89OykpfDY4ayg/PVxcKSl8YXJtKD86NjR8KD89dlxcZCs7KSl8KD89YXRtZWxcXHMpYXZyfCg/OmlyaXh8bWlwc3xzcGFyYykoPzo2NCk/KD89Oyl8cGEtcmlzYykvaV0sW1t2LFMubG93ZXJpemVdXV0sZGV2aWNlOltbL1xcKChpcGFkfHBsYXlib29rKTtbXFx3XFxzXFwpOy1dKyhyaW18YXBwbGUpL2ldLFtsLHAsW2gseV1dLFsvYXBwbGVjb3JlbWVkaWFcXC9bXFx3XFwuXSsgXFwoKGlwYWQpL10sW2wsW3AsXCJBcHBsZVwiXSxbaCx5XV0sWy8oYXBwbGVcXHN7MCwxfXR2KS9pXSxbW2wsXCJBcHBsZSBUVlwiXSxbcCxcIkFwcGxlXCJdXSxbLyhhcmNob3MpXFxzKGdhbWVwYWQyPykvaSwvKGhwKS4rKHRvdWNocGFkKS9pLC8oaHApLisodGFibGV0KS9pLC8oa2luZGxlKVxcLyhbXFx3XFwuXSspL2ksL1xccyhub29rKVtcXHdcXHNdK2J1aWxkXFwvKFxcdyspL2ksLyhkZWxsKVxccyhzdHJlYVtrcHJcXHNcXGRdKltcXGRrb10pL2ldLFtwLGwsW2gseV1dLFsvKGtmW0Etel0rKVxcc2J1aWxkXFwvW1xcd1xcLl0rLipzaWxrXFwvL2ldLFtsLFtwLFwiQW1hem9uXCJdLFtoLHldXSxbLyhzZHxrZilbMDM0OWhpam9yc3R1d10rXFxzYnVpbGRcXC9bXFx3XFwuXSsuKnNpbGtcXC8vaV0sW1tsLHguc3RyLFQuZGV2aWNlLmFtYXpvbi5tb2RlbF0sW3AsXCJBbWF6b25cIl0sW2gsZ11dLFsvXFwoKGlwW2hvbmVkfFxcc1xcdypdKyk7LisoYXBwbGUpL2ldLFtsLHAsW2gsZ11dLFsvXFwoKGlwW2hvbmVkfFxcc1xcdypdKyk7L2ldLFtsLFtwLFwiQXBwbGVcIl0sW2gsZ11dLFsvKGJsYWNrYmVycnkpW1xccy1dPyhcXHcrKS9pLC8oYmxhY2tiZXJyeXxiZW5xfHBhbG0oPz1cXC0pfHNvbnllcmljc3NvbnxhY2VyfGFzdXN8ZGVsbHxodWF3ZWl8bWVpenV8bW90b3JvbGF8cG9seXRyb24pW1xcc18tXT8oW1xcdy1dKykqL2ksLyhocClcXHMoW1xcd1xcc10rXFx3KS9pLC8oYXN1cyktPyhcXHcrKS9pXSxbcCxsLFtoLGddXSxbL1xcKGJiMTA7XFxzKFxcdyspL2ldLFtsLFtwLFwiQmxhY2tCZXJyeVwiXSxbaCxnXV0sWy9hbmRyb2lkLisodHJhbnNmb1twcmltZVxcc117NCwxMH1cXHNcXHcrfGVlZXBjfHNsaWRlclxcc1xcdyt8bmV4dXMgN3xwYWRmb25lKS9pXSxbbCxbcCxcIkFzdXNcIl0sW2gseV1dLFsvKHNvbnkpXFxzKHRhYmxldFxcc1twc10pXFxzYnVpbGRcXC8vaSwvKHNvbnkpPyg/OnNncC4rKVxcc2J1aWxkXFwvL2ldLFtbcCxcIlNvbnlcIl0sW2wsXCJYcGVyaWEgVGFibGV0XCJdLFtoLHldXSxbLyg/OnNvbnkpPyg/Oig/Oig/OmN8ZClcXGR7NH0pfCg/OnNvWy1sXS4rKSlcXHNidWlsZFxcLy9pXSxbW3AsXCJTb255XCJdLFtsLFwiWHBlcmlhIFBob25lXCJdLFtoLGddXSxbL1xccyhvdXlhKVxccy9pLC8obmludGVuZG8pXFxzKFt3aWRzM3VdKykvaV0sW3AsbCxbaCxtXV0sWy9hbmRyb2lkLis7XFxzKHNoaWVsZClcXHNidWlsZC9pXSxbbCxbcCxcIk52aWRpYVwiXSxbaCxtXV0sWy8ocGxheXN0YXRpb25cXHNbMzRwb3J0YWJsZXZpXSspL2ldLFtsLFtwLFwiU29ueVwiXSxbaCxtXV0sWy8oc3ByaW50XFxzKFxcdyspKS9pXSxbW3AseC5zdHIsVC5kZXZpY2Uuc3ByaW50LnZlbmRvcl0sW2wseC5zdHIsVC5kZXZpY2Uuc3ByaW50Lm1vZGVsXSxbaCxnXV0sWy8obGVub3ZvKVxccz8oUyg/OjUwMDB8NjAwMCkrKD86Wy1dW1xcdytdKSkvaV0sW3AsbCxbaCx5XV0sWy8oaHRjKVs7X1xccy1dKyhbXFx3XFxzXSsoPz1cXCkpfFxcdyspKi9pLC8oenRlKS0oXFx3KykqL2ksLyhhbGNhdGVsfGdlZWtzcGhvbmV8aHVhd2VpfGxlbm92b3xuZXhpYW58cGFuYXNvbmljfCg/PTtcXHMpc29ueSlbX1xccy1dPyhbXFx3LV0rKSovaV0sW3AsW2wsL18vZyxcIiBcIl0sW2gsZ11dLFsvKG5leHVzXFxzOSkvaV0sW2wsW3AsXCJIVENcIl0sW2gseV1dLFsvKG5leHVzXFxzNnApL2ldLFtsLFtwLFwiSHVhd2VpXCJdLFtoLGddXSxbLyhtaWNyb3NvZnQpO1xccyhsdW1pYVtcXHNcXHddKykvaV0sW3AsbCxbaCxnXV0sWy9bXFxzXFwoO10oeGJveCg/Olxcc29uZSk/KVtcXHNcXCk7XS9pXSxbbCxbcCxcIk1pY3Jvc29mdFwiXSxbaCxtXV0sWy8oa2luXFwuW29uZXR3XXszfSkvaV0sW1tsLC9cXC4vZyxcIiBcIl0sW3AsXCJNaWNyb3NvZnRcIl0sW2gsZ11dLFsvXFxzKG1pbGVzdG9uZXxkcm9pZCg/OlsyLTR4XXxcXHMoPzpiaW9uaWN8eDJ8cHJvfHJhenIpKT8oOj9cXHM0Zyk/KVtcXHdcXHNdK2J1aWxkXFwvL2ksL21vdFtcXHMtXT8oXFx3KykqL2ksLyhYVFxcZHszLDR9KSBidWlsZFxcLy9pLC8obmV4dXNcXHM2KS9pXSxbbCxbcCxcIk1vdG9yb2xhXCJdLFtoLGddXSxbL2FuZHJvaWQuK1xccyhtejYwXFxkfHhvb21bXFxzMl17MCwyfSlcXHNidWlsZFxcLy9pXSxbbCxbcCxcIk1vdG9yb2xhXCJdLFtoLHldXSxbL2hiYnR2XFwvXFxkK1xcLlxcZCtcXC5cXGQrXFxzK1xcKFtcXHdcXHNdKjtcXHMqKFxcd1teO10qKTsoW147XSopL2ldLFtbcCxTLnRyaW1dLFtsLFMudHJpbV0sW2gsYl1dLFsvaGJidHYuK21hcGxlOyhcXGQrKS9pXSxbW2wsL14vLFwiU21hcnRUVlwiXSxbcCxcIlNhbXN1bmdcIl0sW2gsYl1dLFsvXFwoZHR2W1xcKTtdLisoYXF1b3MpL2ldLFtsLFtwLFwiU2hhcnBcIl0sW2gsYl1dLFsvYW5kcm9pZC4rKChzY2gtaVs4OV0wXFxkfHNody1tMzgwc3xndC1wXFxkezR9fGd0LW5cXGQrfHNnaC10OFs1Nl05fG5leHVzIDEwKSkvaSwvKChTTS1UXFx3KykpL2ldLFtbcCxcIlNhbXN1bmdcIl0sbCxbaCx5XV0sWy9zbWFydC10di4rKHNhbXN1bmcpL2ldLFtwLFtoLGJdLGxdLFsvKChzW2NncF1oLVxcdyt8Z3QtXFx3K3xnYWxheHlcXHNuZXh1c3xzbS1cXHdbXFx3XFxkXSspKS9pLC8oc2FtW3N1bmddKilbXFxzLV0qKFxcdystP1tcXHctXSopKi9pLC9zZWMtKChzZ2hcXHcrKSkvaV0sW1twLFwiU2Ftc3VuZ1wiXSxsLFtoLGddXSxbL3NpZS0oXFx3KykqL2ldLFtsLFtwLFwiU2llbWVuc1wiXSxbaCxnXV0sWy8obWFlbW98bm9raWEpLioobjkwMHxsdW1pYVxcc1xcZCspL2ksLyhub2tpYSlbXFxzXy1dPyhbXFx3LV0rKSovaV0sW1twLFwiTm9raWFcIl0sbCxbaCxnXV0sWy9hbmRyb2lkXFxzM1xcLltcXHNcXHc7LV17MTB9KGFcXGR7M30pL2ldLFtsLFtwLFwiQWNlclwiXSxbaCx5XV0sWy9hbmRyb2lkXFxzM1xcLltcXHNcXHc7LV17MTB9KGxnPyktKFswNmN2OV17Myw0fSkvaV0sW1twLFwiTEdcIl0sbCxbaCx5XV0sWy8obGcpIG5ldGNhc3RcXC50di9pXSxbcCxsLFtoLGJdXSxbLyhuZXh1c1xcc1s0NV0pL2ksL2xnW2U7XFxzXFwvLV0rKFxcdyspKi9pXSxbbCxbcCxcIkxHXCJdLFtoLGddXSxbL2FuZHJvaWQuKyhpZGVhdGFiW2EtejAtOVxcLVxcc10rKS9pXSxbbCxbcCxcIkxlbm92b1wiXSxbaCx5XV0sWy9saW51eDsuKygoam9sbGEpKTsvaV0sW3AsbCxbaCxnXV0sWy8oKHBlYmJsZSkpYXBwXFwvW1xcZFxcLl0rXFxzL2ldLFtwLGwsW2gsd11dLFsvYW5kcm9pZC4rO1xccyhnbGFzcylcXHNcXGQvaV0sW2wsW3AsXCJHb29nbGVcIl0sW2gsd11dLFsvYW5kcm9pZC4rKFxcdyspXFxzK2J1aWxkXFwvaG1cXDEvaSwvYW5kcm9pZC4rKGhtW1xcc1xcLV9dKm5vdGU/W1xcc19dKig/OlxcZFxcdyk/KVxccytidWlsZC9pLC9hbmRyb2lkLisobWlbXFxzXFwtX10qKD86b25lfG9uZVtcXHNfXXBsdXN8bm90ZSBsdGUpP1tcXHNfXSooPzpcXGRcXHcpPylcXHMrYnVpbGQvaV0sW1tsLC9fL2csXCIgXCJdLFtwLFwiWGlhb21pXCJdLFtoLGddXSxbL2FuZHJvaWQuK2EwMDAoMSlcXHMrYnVpbGQvaV0sW2wsW3AsXCJPbmVQbHVzXCJdLFtoLGddXSxbL1xccyh0YWJsZXQpWztcXC9dL2ksL1xccyhtb2JpbGUpKD86WztcXC9dfFxcc3NhZmFyaSkvaV0sW1toLFMubG93ZXJpemVdLHAsbF1dLGVuZ2luZTpbWy93aW5kb3dzLitcXHNlZGdlXFwvKFtcXHdcXC5dKykvaV0sW2QsW2MsXCJFZGdlSFRNTFwiXV0sWy8ocHJlc3RvKVxcLyhbXFx3XFwuXSspL2ksLyh3ZWJraXR8dHJpZGVudHxuZXRmcm9udHxuZXRzdXJmfGFtYXlhfGx5bnh8dzNtKVxcLyhbXFx3XFwuXSspL2ksLyhraHRtbHx0YXNtYW58bGlua3MpW1xcL1xcc11cXCg/KFtcXHdcXC5dKykvaSwvKGljYWIpW1xcL1xcc10oWzIzXVxcLltcXGRcXC5dKykvaV0sW2MsZF0sWy9ydlxcOihbXFx3XFwuXSspLiooZ2Vja28pL2ldLFtkLGNdXSxvczpbWy9taWNyb3NvZnRcXHMod2luZG93cylcXHModmlzdGF8eHApL2ldLFtjLGRdLFsvKHdpbmRvd3MpXFxzbnRcXHM2XFwuMjtcXHMoYXJtKS9pLC8od2luZG93c1xcc3Bob25lKD86XFxzb3MpKilbXFxzXFwvXT8oW1xcZFxcLlxcc10rXFx3KSovaSwvKHdpbmRvd3NcXHNtb2JpbGV8d2luZG93cylbXFxzXFwvXT8oW250Y2VcXGRcXC5cXHNdK1xcdykvaV0sW2MsW2QseC5zdHIsVC5vcy53aW5kb3dzLnZlcnNpb25dXSxbLyh3aW4oPz0zfDl8bil8d2luXFxzOXhcXHMpKFtudFxcZFxcLl0rKS9pXSxbW2MsXCJXaW5kb3dzXCJdLFtkLHguc3RyLFQub3Mud2luZG93cy52ZXJzaW9uXV0sWy9cXCgoYmIpKDEwKTsvaV0sW1tjLFwiQmxhY2tCZXJyeVwiXSxkXSxbLyhibGFja2JlcnJ5KVxcdypcXC8/KFtcXHdcXC5dKykqL2ksLyh0aXplbilbXFwvXFxzXShbXFx3XFwuXSspL2ksLyhhbmRyb2lkfHdlYm9zfHBhbG1cXHNvc3xxbnh8YmFkYXxyaW1cXHN0YWJsZXRcXHNvc3xtZWVnb3xjb250aWtpKVtcXC9cXHMtXT8oW1xcd1xcLl0rKSovaSwvbGludXg7Lisoc2FpbGZpc2gpOy9pXSxbYyxkXSxbLyhzeW1iaWFuXFxzP29zfHN5bWJvc3xzNjAoPz07KSlbXFwvXFxzLV0/KFtcXHdcXC5dKykqL2ldLFtbYyxcIlN5bWJpYW5cIl0sZF0sWy9cXCgoc2VyaWVzNDApOy9pXSxbY10sWy9tb3ppbGxhLitcXChtb2JpbGU7LitnZWNrby4rZmlyZWZveC9pXSxbW2MsXCJGaXJlZm94IE9TXCJdLGRdLFsvKG5pbnRlbmRvfHBsYXlzdGF0aW9uKVxccyhbd2lkczM0cG9ydGFibGV2dV0rKS9pLC8obWludClbXFwvXFxzXFwoXT8oXFx3KykqL2ksLyhtYWdlaWF8dmVjdG9ybGludXgpWztcXHNdL2ksLyhqb2xpfFtreGxuXT91YnVudHV8ZGViaWFufFtvcGVuXSpzdXNlfGdlbnRvb3woPz1cXHMpYXJjaHxzbGFja3dhcmV8ZmVkb3JhfG1hbmRyaXZhfGNlbnRvc3xwY2xpbnV4b3N8cmVkaGF0fHplbndhbGt8bGlucHVzKVtcXC9cXHMtXT8oPyFjaHJvbSkoW1xcd1xcLi1dKykqL2ksLyhodXJkfGxpbnV4KVxccz8oW1xcd1xcLl0rKSovaSwvKGdudSlcXHM/KFtcXHdcXC5dKykqL2ldLFtjLGRdLFsvKGNyb3MpXFxzW1xcd10rXFxzKFtcXHdcXC5dK1xcdykvaV0sW1tjLFwiQ2hyb21pdW0gT1NcIl0sZF0sWy8oc3Vub3MpXFxzPyhbXFx3XFwuXStcXGQpKi9pXSxbW2MsXCJTb2xhcmlzXCJdLGRdLFsvXFxzKFtmcmVudG9wYy1dezAsNH1ic2R8ZHJhZ29uZmx5KVxccz8oW1xcd1xcLl0rKSovaV0sW2MsZF0sWy8oaGFpa3UpXFxzKFxcdyspL2ldLFtjLGRdLFsvKGlwW2hvbmVhZF0rKSg/Oi4qb3NcXHMoW1xcd10rKSpcXHNsaWtlXFxzbWFjfDtcXHNvcGVyYSkvaV0sW1tjLFwiaU9TXCJdLFtkLC9fL2csXCIuXCJdXSxbLyhtYWNcXHNvc1xcc3gpXFxzPyhbXFx3XFxzXFwuXStcXHcpKi9pLC8obWFjaW50b3NofG1hYyg/PV9wb3dlcnBjKVxccykvaV0sW1tjLFwiTWFjIE9TXCJdLFtkLC9fL2csXCIuXCJdXSxbLygoPzpvcGVuKT9zb2xhcmlzKVtcXC9cXHMtXT8oW1xcd1xcLl0rKSovaSwvKGFpeClcXHMoKFxcZCkoPz1cXC58XFwpfFxccylbXFx3XFwuXSopKi9pLC8ocGxhblxcczl8bWluaXh8YmVvc3xvc1xcLzJ8YW1pZ2Fvc3xtb3JwaG9zfHJpc2NcXHNvc3xvcGVudm1zKS9pLC8odW5peClcXHM/KFtcXHdcXC5dKykqL2ldLFtjLGRdXX0sQz1mdW5jdGlvbih0LG4pe2lmKHRoaXMgaW5zdGFuY2VvZiBDKXt2YXIgaT10fHwoZSYmZS5uYXZpZ2F0b3ImJmUubmF2aWdhdG9yLnVzZXJBZ2VudD9lLm5hdmlnYXRvci51c2VyQWdlbnQ6cikscz1uP1MuZXh0ZW5kKE4sbik6TjtyZXR1cm4gdGhpcy5nZXRCcm93c2VyPWZ1bmN0aW9uKCl7dmFyIGU9eC5yZ3guYXBwbHkodGhpcyxzLmJyb3dzZXIpO3JldHVybiBlLm1ham9yPVMubWFqb3IoZS52ZXJzaW9uKSxlfSx0aGlzLmdldENQVT1mdW5jdGlvbigpe3JldHVybiB4LnJneC5hcHBseSh0aGlzLHMuY3B1KX0sdGhpcy5nZXREZXZpY2U9ZnVuY3Rpb24oKXtyZXR1cm4geC5yZ3guYXBwbHkodGhpcyxzLmRldmljZSl9LHRoaXMuZ2V0RW5naW5lPWZ1bmN0aW9uKCl7cmV0dXJuIHgucmd4LmFwcGx5KHRoaXMscy5lbmdpbmUpfSx0aGlzLmdldE9TPWZ1bmN0aW9uKCl7cmV0dXJuIHgucmd4LmFwcGx5KHRoaXMscy5vcyl9LHRoaXMuZ2V0UmVzdWx0PWZ1bmN0aW9uKCl7cmV0dXJue3VhOnRoaXMuZ2V0VUEoKSxicm93c2VyOnRoaXMuZ2V0QnJvd3NlcigpLGVuZ2luZTp0aGlzLmdldEVuZ2luZSgpLG9zOnRoaXMuZ2V0T1MoKSxkZXZpY2U6dGhpcy5nZXREZXZpY2UoKSxjcHU6dGhpcy5nZXRDUFUoKX19LHRoaXMuZ2V0VUE9ZnVuY3Rpb24oKXtyZXR1cm4gaX0sdGhpcy5zZXRVQT1mdW5jdGlvbihlKXtyZXR1cm4gaT1lLHRoaXN9LHRoaXN9cmV0dXJuKG5ldyBDKHQsbikpLmdldFJlc3VsdCgpfTtDLlZFUlNJT049bixDLkJST1dTRVI9e05BTUU6YyxNQUpPUjpmLFZFUlNJT046ZH0sQy5DUFU9e0FSQ0hJVEVDVFVSRTp2fSxDLkRFVklDRT17TU9ERUw6bCxWRU5ET1I6cCxUWVBFOmgsQ09OU09MRTptLE1PQklMRTpnLFNNQVJUVFY6YixUQUJMRVQ6eSxXRUFSQUJMRTp3LEVNQkVEREVEOkV9LEMuRU5HSU5FPXtOQU1FOmMsVkVSU0lPTjpkfSxDLk9TPXtOQU1FOmMsVkVSU0lPTjpkfSx0eXBlb2YgZXhwb3J0cyE9PW8/KHR5cGVvZiBtb2R1bGUhPT1vJiZtb2R1bGUuZXhwb3J0cyYmKGV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9QyksZXhwb3J0cy5VQVBhcnNlcj1DKTp0eXBlb2YgZGVmaW5lPT09cyYmZGVmaW5lLmFtZD9kZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gQ30pOmUuVUFQYXJzZXI9Qzt2YXIgaz1lLmpRdWVyeXx8ZS5aZXB0bztpZih0eXBlb2YgayE9PW8pe3ZhciBMPW5ldyBDO2sudWE9TC5nZXRSZXN1bHQoKSxrLnVhLmdldD1mdW5jdGlvbigpe3JldHVybiBMLmdldFVBKCl9LGsudWEuc2V0PWZ1bmN0aW9uKGUpe0wuc2V0VUEoZSk7dmFyIHQ9TC5nZXRSZXN1bHQoKTtmb3IodmFyIG4gaW4gdClrLnVhW25dPXRbbl19fX0pKHR5cGVvZiB3aW5kb3c9PVwib2JqZWN0XCI/d2luZG93OnRoaXMpOyIsIi8qISAoQykgV2ViUmVmbGVjdGlvbiBNaXQgU3R5bGUgTGljZW5zZSAqL1xudmFyIFVSTFNlYXJjaFBhcmFtcz1VUkxTZWFyY2hQYXJhbXN8fGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZShlKXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGUpLnJlcGxhY2UoaSx1KX1mdW5jdGlvbiB0KGUpe3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZS5yZXBsYWNlKHMsXCIgXCIpKX1mdW5jdGlvbiBuKGUpe3RoaXNbZl09T2JqZWN0LmNyZWF0ZShudWxsKTtpZighZSlyZXR1cm47ZS5jaGFyQXQoMCk9PT1cIj9cIiYmKGU9ZS5zbGljZSgxKSk7Zm9yKHZhciBuLHIsaT0oZXx8XCJcIikuc3BsaXQoXCImXCIpLHM9MCxvPWkubGVuZ3RoO3M8bztzKyspcj1pW3NdLG49ci5pbmRleE9mKFwiPVwiKSwtMTxuP3RoaXMuYXBwZW5kKHQoci5zbGljZSgwLG4pKSx0KHIuc2xpY2UobisxKSkpOnIubGVuZ3RoJiZ0aGlzLmFwcGVuZCh0KHIpLFwiXCIpfWZ1bmN0aW9uIGwoKXt0cnl7cmV0dXJuISFTeW1ib2wuaXRlcmF0b3J9Y2F0Y2goZSl7cmV0dXJuITF9fXZhciByPW4ucHJvdG90eXBlLGk9L1shJ1xcKFxcKX5dfCUyMHwlMDAvZyxzPS9cXCsvZyxvPXtcIiFcIjpcIiUyMVwiLFwiJ1wiOlwiJTI3XCIsXCIoXCI6XCIlMjhcIixcIilcIjpcIiUyOVwiLFwiflwiOlwiJTdFXCIsXCIlMjBcIjpcIitcIixcIiUwMFwiOlwiXFwwXCJ9LHU9ZnVuY3Rpb24oZSl7cmV0dXJuIG9bZV19LGE9bCgpLGY9XCJfX1VSTFNlYXJjaFBhcmFtc19fOlwiK01hdGgucmFuZG9tKCk7ci5hcHBlbmQ9ZnVuY3Rpb24odCxuKXt2YXIgcj10aGlzW2ZdO3QgaW4gcj9yW3RdLnB1c2goXCJcIituKTpyW3RdPVtcIlwiK25dfSxyLmRlbGV0ZT1mdW5jdGlvbih0KXtkZWxldGUgdGhpc1tmXVt0XX0sci5nZXQ9ZnVuY3Rpb24odCl7dmFyIG49dGhpc1tmXTtyZXR1cm4gdCBpbiBuP25bdF1bMF06bnVsbH0sci5nZXRBbGw9ZnVuY3Rpb24odCl7dmFyIG49dGhpc1tmXTtyZXR1cm4gdCBpbiBuP25bdF0uc2xpY2UoMCk6W119LHIuaGFzPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluIHRoaXNbZl19LHIuc2V0PWZ1bmN0aW9uKHQsbil7dGhpc1tmXVt0XT1bXCJcIituXX0sci5mb3JFYWNoPWZ1bmN0aW9uKHQsbil7dmFyIHI9dGhpc1tmXTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JbZV0uZm9yRWFjaChmdW5jdGlvbihyKXt0LmNhbGwobixyLGUsdGhpcyl9LHRoaXMpfSx0aGlzKX0sci5rZXlzPWZ1bmN0aW9uKCl7dmFyIHQ9W107dGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGUsbil7dC5wdXNoKG4pfSk7dmFyIG49e25leHQ6ZnVuY3Rpb24oKXt2YXIgZT10LnNoaWZ0KCk7cmV0dXJue2RvbmU6ZT09PXVuZGVmaW5lZCx2YWx1ZTplfX19O3JldHVybiBhJiYobltTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIG59KSxufSxyLnZhbHVlcz1mdW5jdGlvbigpe3ZhciB0PVtdO3RoaXMuZm9yRWFjaChmdW5jdGlvbihlKXt0LnB1c2goZSl9KTt2YXIgbj17bmV4dDpmdW5jdGlvbigpe3ZhciBlPXQuc2hpZnQoKTtyZXR1cm57ZG9uZTplPT09dW5kZWZpbmVkLHZhbHVlOmV9fX07cmV0dXJuIGEmJihuW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gbn0pLG59LHIuZW50cmllcz1mdW5jdGlvbigpe3ZhciB0PVtdO3RoaXMuZm9yRWFjaChmdW5jdGlvbihlLG4pe3QucHVzaChbbixlXSl9KTt2YXIgbj17bmV4dDpmdW5jdGlvbigpe3ZhciBlPXQuc2hpZnQoKTtyZXR1cm57ZG9uZTplPT09dW5kZWZpbmVkLHZhbHVlOmV9fX07cmV0dXJuIGEmJihuW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gbn0pLG59LGEmJihyW1N5bWJvbC5pdGVyYXRvcl09ci5lbnRyaWVzKSxyLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnt9fSxyLnRvU3RyaW5nPWZ1bmN0aW9uIHkoKXt2YXIgdD10aGlzW2ZdLG49W10scixpLHMsbztmb3IoaSBpbiB0KXtzPWUoaSk7Zm9yKHI9MCxvPXRbaV07cjxvLmxlbmd0aDtyKyspbi5wdXNoKHMrXCI9XCIrZShvW3JdKSl9cmV0dXJuIG4uam9pbihcIiZcIil9O3ZhciBjPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxoPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IscD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQsbil7ci5hcHBlbmQuY2FsbCh0aGlzLHQsbiksdD10aGlzLnRvU3RyaW5nKCksZS5zZXQuY2FsbCh0aGlzLl91c3AsdD9cIj9cIit0OlwiXCIpfWZ1bmN0aW9uIG4odCl7ci5kZWxldGUuY2FsbCh0aGlzLHQpLHQ9dGhpcy50b1N0cmluZygpLGUuc2V0LmNhbGwodGhpcy5fdXNwLHQ/XCI/XCIrdDpcIlwiKX1mdW5jdGlvbiBpKHQsbil7ci5zZXQuY2FsbCh0aGlzLHQsbiksdD10aGlzLnRvU3RyaW5nKCksZS5zZXQuY2FsbCh0aGlzLl91c3AsdD9cIj9cIit0OlwiXCIpfXJldHVybiBmdW5jdGlvbihlLHIpe3JldHVybiBlLmFwcGVuZD10LGUuZGVsZXRlPW4sZS5zZXQ9aSxjKGUsXCJfdXNwXCIse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpyfSl9fSxkPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LG4pe3JldHVybiBjKHQsXCJfc2VhcmNoUGFyYW1zXCIse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTplKG4sdCl9KSxufX0sdj1mdW5jdGlvbihlKXt2YXIgdD1lLmFwcGVuZDtlLmFwcGVuZD1yLmFwcGVuZCxuLmNhbGwoZSxlLl91c3Auc2VhcmNoLnNsaWNlKDEpKSxlLmFwcGVuZD10fSxtPWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIidzZWFyY2hQYXJhbXMnIGFjY2Vzc2VkIG9uIGFuIG9iamVjdCB0aGF0IGRvZXMgbm90IGltcGxlbWVudCBpbnRlcmZhY2UgXCIrdC5uYW1lKX0sZz1mdW5jdGlvbihlKXt2YXIgdD1lLnByb3RvdHlwZSxyPWgodCxcInNlYXJjaFBhcmFtc1wiKSxpPWgodCxcImhyZWZcIikscz1oKHQsXCJzZWFyY2hcIiksbzshciYmcyYmcy5zZXQmJihvPWQocChzKSksT2JqZWN0LmRlZmluZVByb3BlcnRpZXModCx7aHJlZjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9zZWFyY2hQYXJhbXM7aS5zZXQuY2FsbCh0aGlzLGUpLHQmJnYodCl9fSxzZWFyY2g6e2dldDpmdW5jdGlvbigpe3JldHVybiBzLmdldC5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fc2VhcmNoUGFyYW1zO3Muc2V0LmNhbGwodGhpcyxlKSx0JiZ2KHQpfX0sc2VhcmNoUGFyYW1zOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbSh0aGlzLGUpLHRoaXMuX3NlYXJjaFBhcmFtc3x8byh0aGlzLG5ldyBuKHRoaXMuc2VhcmNoLnNsaWNlKDEpKSl9LHNldDpmdW5jdGlvbih0KXttKHRoaXMsZSksbyh0aGlzLHQpfX19KSl9O3JldHVybiBnKEhUTUxBbmNob3JFbGVtZW50KSwvXmZ1bmN0aW9ufG9iamVjdCQvLnRlc3QodHlwZW9mIFVSTCkmJlVSTC5wcm90b3R5cGUmJmcoVVJMKSxufSgpOyIsIi8qIVxuICogVnVlLmpzIHYxLjAuMjZcbiAqIChjKSAyMDE2IEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbihnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbC5WdWUgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIHNldChvYmosIGtleSwgdmFsKSB7XG4gICAgaWYgKGhhc093bihvYmosIGtleSkpIHtcbiAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob2JqLl9pc1Z1ZSkge1xuICAgICAgc2V0KG9iai5fZGF0YSwga2V5LCB2YWwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgb2IgPSBvYmouX19vYl9fO1xuICAgIGlmICghb2IpIHtcbiAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvYi5jb252ZXJ0KGtleSwgdmFsKTtcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgaWYgKG9iLnZtcykge1xuICAgICAgdmFyIGkgPSBvYi52bXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2YXIgdm0gPSBvYi52bXNbaV07XG4gICAgICAgIHZtLl9wcm94eShrZXkpO1xuICAgICAgICB2bS5fZGlnZXN0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGRlbChvYmosIGtleSkge1xuICAgIGlmICghaGFzT3duKG9iaiwga2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWxldGUgb2JqW2tleV07XG4gICAgdmFyIG9iID0gb2JqLl9fb2JfXztcbiAgICBpZiAoIW9iKSB7XG4gICAgICBpZiAob2JqLl9pc1Z1ZSkge1xuICAgICAgICBkZWxldGUgb2JqLl9kYXRhW2tleV07XG4gICAgICAgIG9iai5fZGlnZXN0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICBpZiAob2Iudm1zKSB7XG4gICAgICB2YXIgaSA9IG9iLnZtcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHZhciB2bSA9IG9iLnZtc1tpXTtcbiAgICAgICAgdm0uX3VucHJveHkoa2V5KTtcbiAgICAgICAgdm0uX2RpZ2VzdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIHRoZSBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGhhc093bihvYmosIGtleSkge1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBleHByZXNzaW9uIGlzIGEgbGl0ZXJhbCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV4cFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cblxuICB2YXIgbGl0ZXJhbFZhbHVlUkUgPSAvXlxccz8odHJ1ZXxmYWxzZXwtP1tcXGRcXC5dK3wnW14nXSonfFwiW15cIl0qXCIpXFxzPyQvO1xuXG4gIGZ1bmN0aW9uIGlzTGl0ZXJhbChleHApIHtcbiAgICByZXR1cm4gbGl0ZXJhbFZhbHVlUkUudGVzdChleHApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGlzUmVzZXJ2ZWQoc3RyKSB7XG4gICAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gICAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHdWFyZCB0ZXh0IG91dHB1dCwgbWFrZSBzdXJlIHVuZGVmaW5lZCBvdXRwdXRzXG4gICAqIGVtcHR5IHN0cmluZ1xuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG5cbiAgZnVuY3Rpb24gX3RvU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgYW5kIGNvbnZlcnQgcG9zc2libGUgbnVtZXJpYyBzdHJpbmdzIHRvIG51bWJlcnNcbiAgICogYmVmb3JlIHNldHRpbmcgYmFjayB0byBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHJldHVybiB7KnxOdW1iZXJ9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnNlZCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICByZXR1cm4gaXNOYU4ocGFyc2VkKSA/IHZhbHVlIDogcGFyc2VkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHN0cmluZyBib29sZWFuIGxpdGVyYWxzIGludG8gcmVhbCBib29sZWFucy5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHsqfEJvb2xlYW59XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHRvQm9vbGVhbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJ3RydWUnID8gdHJ1ZSA6IHZhbHVlID09PSAnZmFsc2UnID8gZmFsc2UgOiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdHJpcCBxdW90ZXMgZnJvbSBhIHN0cmluZ1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAqIEByZXR1cm4ge1N0cmluZyB8IGZhbHNlfVxuICAgKi9cblxuICBmdW5jdGlvbiBzdHJpcFF1b3RlcyhzdHIpIHtcbiAgICB2YXIgYSA9IHN0ci5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBiID0gc3RyLmNoYXJDb2RlQXQoc3RyLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBhID09PSBiICYmIChhID09PSAweDIyIHx8IGEgPT09IDB4MjcpID8gc3RyLnNsaWNlKDEsIC0xKSA6IHN0cjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxtaXRlZCBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cblxuICB2YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcblxuICBmdW5jdGlvbiBjYW1lbGl6ZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgdG9VcHBlcik7XG4gIH1cblxuICBmdW5jdGlvbiB0b1VwcGVyKF8sIGMpIHtcbiAgICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cblxuICB2YXIgaHlwaGVuYXRlUkUgPSAvKFthLXpcXGRdKShbQS1aXSkvZztcblxuICBmdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGh5cGhlbi91bmRlcnNjb3JlL3NsYXNoIGRlbGltaXRlcmVkIG5hbWVzIGludG9cbiAgICogY2FtZWxpemVkIGNsYXNzTmFtZXMuXG4gICAqXG4gICAqIGUuZy4gbXktY29tcG9uZW50ID0+IE15Q29tcG9uZW50XG4gICAqICAgICAgc29tZV9lbHNlICAgID0+IFNvbWVFbHNlXG4gICAqICAgICAgc29tZS9jb21wICAgID0+IFNvbWVDb21wXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cblxuICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX1xcL10pKFxcdykvZztcblxuICBmdW5jdGlvbiBjbGFzc2lmeShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoY2xhc3NpZnlSRSwgdG9VcHBlcik7XG4gIH1cblxuICAvKipcbiAgICogU2ltcGxlIGJpbmQsIGZhc3RlciB0aGFuIG5hdGl2ZVxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKiBAcGFyYW0ge09iamVjdH0gY3R4XG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgKi9cblxuICBmdW5jdGlvbiBiaW5kKGZuLCBjdHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYSkge1xuICAgICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGwgPyBsID4gMSA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKSA6IGZuLmNhbGwoY3R4LCBhKSA6IGZuLmNhbGwoY3R4KTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LWxpa2V9IGxpc3RcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtzdGFydF0gLSBzdGFydCBpbmRleFxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG5cbiAgZnVuY3Rpb24gdG9BcnJheShsaXN0LCBzdGFydCkge1xuICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdG9cbiAgICogQHBhcmFtIHtPYmplY3R9IGZyb21cbiAgICovXG5cbiAgZnVuY3Rpb24gZXh0ZW5kKHRvLCBmcm9tKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcm9tKTtcbiAgICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRvW2tleXNbaV1dID0gZnJvbVtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHRvO1xuICB9XG5cbiAgLyoqXG4gICAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICAgKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gICAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBvYmpcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG5cbiAgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gICAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gb2JqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG4gIHZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4gIHZhciBPQkpFQ1RfU1RSSU5HID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbiAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSBPQkpFQ1RfU1RSSU5HO1xuICB9XG5cbiAgLyoqXG4gICAqIEFycmF5IHR5cGUgY2hlY2suXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gb2JqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG4gIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAvKipcbiAgICogRGVmaW5lIGEgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgKiBAcGFyYW0geyp9IHZhbFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtlbnVtZXJhYmxlXVxuICAgKi9cblxuICBmdW5jdGlvbiBkZWYob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbCxcbiAgICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVib3VuY2UgYSBmdW5jdGlvbiBzbyBpdCBvbmx5IGdldHMgY2FsbGVkIGFmdGVyIHRoZVxuICAgKiBpbnB1dCBzdG9wcyBhcnJpdmluZyBhZnRlciB0aGUgZ2l2ZW4gd2FpdCBwZXJpb2QuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHdhaXRcbiAgICogQHJldHVybiB7RnVuY3Rpb259IC0gdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgKi9cblxuICBmdW5jdGlvbiBfZGVib3VuY2UoZnVuYywgd2FpdCkge1xuICAgIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICAgIHZhciBsYXN0ID0gRGF0ZS5ub3coKSAtIHRpbWVzdGFtcDtcbiAgICAgIGlmIChsYXN0IDwgd2FpdCAmJiBsYXN0ID49IDApIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIE1hbnVhbCBpbmRleE9mIGJlY2F1c2UgaXQncyBzbGlnaHRseSBmYXN0ZXIgdGhhblxuICAgKiBuYXRpdmUuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyclxuICAgKiBAcGFyYW0geyp9IG9ialxuICAgKi9cblxuICBmdW5jdGlvbiBpbmRleE9mKGFyciwgb2JqKSB7XG4gICAgdmFyIGkgPSBhcnIubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChhcnJbaV0gPT09IG9iaikgcmV0dXJuIGk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIGEgY2FuY2VsbGFibGUgdmVyc2lvbiBvZiBhbiBhc3luYyBjYWxsYmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNhbmNlbGxhYmxlKGZuKSB7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24gY2IoKSB7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBjYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAgICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICAgKlxuICAgKiBAcGFyYW0geyp9IGFcbiAgICogQHBhcmFtIHsqfSBiXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGxvb3NlRXF1YWwoYSwgYikge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuICAgIHJldHVybiBhID09IGIgfHwgKGlzT2JqZWN0KGEpICYmIGlzT2JqZWN0KGIpID8gSlNPTi5zdHJpbmdpZnkoYSkgPT09IEpTT04uc3RyaW5naWZ5KGIpIDogZmFsc2UpO1xuICAgIC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG4gIH1cblxuICB2YXIgaGFzUHJvdG8gPSAoJ19fcHJvdG9fXycgaW4ge30pO1xuXG4gIC8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbiAgdmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3aW5kb3cpICE9PSAnW29iamVjdCBPYmplY3RdJztcblxuICAvLyBkZXRlY3QgZGV2dG9vbHNcbiAgdmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4gIC8vIFVBIHNuaWZmaW5nIGZvciB3b3JraW5nIGFyb3VuZCBicm93c2VyLXNwZWNpZmljIHF1aXJrc1xuICB2YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGlzSUUgPSBVQSAmJiBVQS5pbmRleE9mKCd0cmlkZW50JykgPiAwO1xuICB2YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbiAgdmFyIGlzQW5kcm9pZCA9IFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDA7XG4gIHZhciBpc0lvcyA9IFVBICYmIC8oaXBob25lfGlwYWR8aXBvZHxpb3MpL2kudGVzdChVQSk7XG4gIHZhciBpb3NWZXJzaW9uTWF0Y2ggPSBpc0lvcyAmJiBVQS5tYXRjaCgvb3MgKFtcXGRfXSspLyk7XG4gIHZhciBpb3NWZXJzaW9uID0gaW9zVmVyc2lvbk1hdGNoICYmIGlvc1ZlcnNpb25NYXRjaFsxXS5zcGxpdCgnXycpO1xuXG4gIC8vIGRldGVjdGluZyBpT1MgVUlXZWJWaWV3IGJ5IGluZGV4ZWREQlxuICB2YXIgaGFzTXV0YXRpb25PYnNlcnZlckJ1ZyA9IGlvc1ZlcnNpb24gJiYgTnVtYmVyKGlvc1ZlcnNpb25bMF0pID49IDkgJiYgTnVtYmVyKGlvc1ZlcnNpb25bMV0pID49IDMgJiYgIXdpbmRvdy5pbmRleGVkREI7XG5cbiAgdmFyIHRyYW5zaXRpb25Qcm9wID0gdW5kZWZpbmVkO1xuICB2YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gdW5kZWZpbmVkO1xuICB2YXIgYW5pbWF0aW9uUHJvcCA9IHVuZGVmaW5lZDtcbiAgdmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gdW5kZWZpbmVkO1xuXG4gIC8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbiAgaWYgKGluQnJvd3NlciAmJiAhaXNJRTkpIHtcbiAgICB2YXIgaXNXZWJraXRUcmFucyA9IHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJiB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGlzV2Via2l0QW5pbSA9IHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkO1xuICAgIHRyYW5zaXRpb25Qcm9wID0gaXNXZWJraXRUcmFucyA/ICdXZWJraXRUcmFuc2l0aW9uJyA6ICd0cmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSBpc1dlYmtpdFRyYW5zID8gJ3dlYmtpdFRyYW5zaXRpb25FbmQnIDogJ3RyYW5zaXRpb25lbmQnO1xuICAgIGFuaW1hdGlvblByb3AgPSBpc1dlYmtpdEFuaW0gPyAnV2Via2l0QW5pbWF0aW9uJyA6ICdhbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gaXNXZWJraXRBbmltID8gJ3dlYmtpdEFuaW1hdGlvbkVuZCcgOiAnYW5pbWF0aW9uZW5kJztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZlciBhIHRhc2sgdG8gZXhlY3V0ZSBpdCBhc3luY2hyb25vdXNseS4gSWRlYWxseSB0aGlzXG4gICAqIHNob3VsZCBiZSBleGVjdXRlZCBhcyBhIG1pY3JvdGFzaywgc28gd2UgbGV2ZXJhZ2VcbiAgICogTXV0YXRpb25PYnNlcnZlciBpZiBpdCdzIGF2YWlsYWJsZSwgYW5kIGZhbGxiYWNrIHRvXG4gICAqIHNldFRpbWVvdXQoMCkuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjdHhcbiAgICovXG5cbiAgdmFyIG5leHRUaWNrID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYWxsYmFja3MgPSBbXTtcbiAgICB2YXIgcGVuZGluZyA9IGZhbHNlO1xuICAgIHZhciB0aW1lckZ1bmM7XG5cbiAgICBmdW5jdGlvbiBuZXh0VGlja0hhbmRsZXIoKSB7XG4gICAgICBwZW5kaW5nID0gZmFsc2U7XG4gICAgICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICAgICAgY2FsbGJhY2tzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb3BpZXNbaV0oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmICFoYXNNdXRhdGlvbk9ic2VydmVyQnVnKSB7XG4gICAgICB2YXIgY291bnRlciA9IDE7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihuZXh0VGlja0hhbmRsZXIpO1xuICAgICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY291bnRlcik7XG4gICAgICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGltZXJGdW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICAgICAgdGV4dE5vZGUuZGF0YSA9IGNvdW50ZXI7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB3ZWJwYWNrIGF0dGVtcHRzIHRvIGluamVjdCBhIHNoaW0gZm9yIHNldEltbWVkaWF0ZVxuICAgICAgLy8gaWYgaXQgaXMgdXNlZCBhcyBhIGdsb2JhbCwgc28gd2UgaGF2ZSB0byB3b3JrIGFyb3VuZCB0aGF0IHRvXG4gICAgICAvLyBhdm9pZCBidW5kbGluZyB1bm5lY2Vzc2FyeSBjb2RlLlxuICAgICAgdmFyIGNvbnRleHQgPSBpbkJyb3dzZXIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuICAgICAgdGltZXJGdW5jID0gY29udGV4dC5zZXRJbW1lZGlhdGUgfHwgc2V0VGltZW91dDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGNiLCBjdHgpIHtcbiAgICAgIHZhciBmdW5jID0gY3R4ID8gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgIH0gOiBjYjtcbiAgICAgIGNhbGxiYWNrcy5wdXNoKGZ1bmMpO1xuICAgICAgaWYgKHBlbmRpbmcpIHJldHVybjtcbiAgICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgICAgdGltZXJGdW5jKG5leHRUaWNrSGFuZGxlciwgMCk7XG4gICAgfTtcbiAgfSkoKTtcblxuICB2YXIgX1NldCA9IHVuZGVmaW5lZDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBTZXQudG9TdHJpbmcoKS5tYXRjaCgvbmF0aXZlIGNvZGUvKSkge1xuICAgIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICAgIF9TZXQgPSBTZXQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICAgIF9TZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuICAgIF9TZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIF9TZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IDE7XG4gICAgfTtcbiAgICBfU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBDYWNoZShsaW1pdCkge1xuICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgdGhpcy5saW1pdCA9IGxpbWl0O1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9rZXltYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgdmFyIHAgPSBDYWNoZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIFB1dCA8dmFsdWU+IGludG8gdGhlIGNhY2hlIGFzc29jaWF0ZWQgd2l0aCA8a2V5Pi5cbiAgICogUmV0dXJucyB0aGUgZW50cnkgd2hpY2ggd2FzIHJlbW92ZWQgdG8gbWFrZSByb29tIGZvclxuICAgKiB0aGUgbmV3IGVudHJ5LiBPdGhlcndpc2UgdW5kZWZpbmVkIGlzIHJldHVybmVkLlxuICAgKiAoaS5lLiBpZiB0aGVyZSB3YXMgZW5vdWdoIHJvb20gYWxyZWFkeSkuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtFbnRyeXx1bmRlZmluZWR9XG4gICAqL1xuXG4gIHAucHV0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHZhciByZW1vdmVkO1xuXG4gICAgdmFyIGVudHJ5ID0gdGhpcy5nZXQoa2V5LCB0cnVlKTtcbiAgICBpZiAoIWVudHJ5KSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSB0aGlzLmxpbWl0KSB7XG4gICAgICAgIHJlbW92ZWQgPSB0aGlzLnNoaWZ0KCk7XG4gICAgICB9XG4gICAgICBlbnRyeSA9IHtcbiAgICAgICAga2V5OiBrZXlcbiAgICAgIH07XG4gICAgICB0aGlzLl9rZXltYXBba2V5XSA9IGVudHJ5O1xuICAgICAgaWYgKHRoaXMudGFpbCkge1xuICAgICAgICB0aGlzLnRhaWwubmV3ZXIgPSBlbnRyeTtcbiAgICAgICAgZW50cnkub2xkZXIgPSB0aGlzLnRhaWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICAgIH1cbiAgICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICAgdGhpcy5zaXplKys7XG4gICAgfVxuICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG5cbiAgICByZXR1cm4gcmVtb3ZlZDtcbiAgfTtcblxuICAvKipcbiAgICogUHVyZ2UgdGhlIGxlYXN0IHJlY2VudGx5IHVzZWQgKG9sZGVzdCkgZW50cnkgZnJvbSB0aGVcbiAgICogY2FjaGUuIFJldHVybnMgdGhlIHJlbW92ZWQgZW50cnkgb3IgdW5kZWZpbmVkIGlmIHRoZVxuICAgKiBjYWNoZSB3YXMgZW1wdHkuXG4gICAqL1xuXG4gIHAuc2hpZnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmhlYWQ7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV3ZXI7XG4gICAgICB0aGlzLmhlYWQub2xkZXIgPSB1bmRlZmluZWQ7XG4gICAgICBlbnRyeS5uZXdlciA9IGVudHJ5Lm9sZGVyID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fa2V5bWFwW2VudHJ5LmtleV0gPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnNpemUtLTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJ5O1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgYW5kIHJlZ2lzdGVyIHJlY2VudCB1c2Ugb2YgPGtleT4uIFJldHVybnMgdGhlIHZhbHVlXG4gICAqIGFzc29jaWF0ZWQgd2l0aCA8a2V5PiBvciB1bmRlZmluZWQgaWYgbm90IGluIGNhY2hlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmV0dXJuRW50cnlcbiAgICogQHJldHVybiB7RW50cnl8Kn1cbiAgICovXG5cbiAgcC5nZXQgPSBmdW5jdGlvbihrZXksIHJldHVybkVudHJ5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5fa2V5bWFwW2tleV07XG4gICAgaWYgKGVudHJ5ID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICBpZiAoZW50cnkgPT09IHRoaXMudGFpbCkge1xuICAgICAgcmV0dXJuIHJldHVybkVudHJ5ID8gZW50cnkgOiBlbnRyeS52YWx1ZTtcbiAgICB9XG4gICAgLy8gSEVBRC0tLS0tLS0tLS0tLS0tVEFJTFxuICAgIC8vICAgPC5vbGRlciAgIC5uZXdlcj5cbiAgICAvLyAgPC0tLSBhZGQgZGlyZWN0aW9uIC0tXG4gICAgLy8gICBBICBCICBDICA8RD4gIEVcbiAgICBpZiAoZW50cnkubmV3ZXIpIHtcbiAgICAgIGlmIChlbnRyeSA9PT0gdGhpcy5oZWFkKSB7XG4gICAgICAgIHRoaXMuaGVhZCA9IGVudHJ5Lm5ld2VyO1xuICAgICAgfVxuICAgICAgZW50cnkubmV3ZXIub2xkZXIgPSBlbnRyeS5vbGRlcjsgLy8gQyA8LS0gRS5cbiAgICB9XG4gICAgaWYgKGVudHJ5Lm9sZGVyKSB7XG4gICAgICBlbnRyeS5vbGRlci5uZXdlciA9IGVudHJ5Lm5ld2VyOyAvLyBDLiAtLT4gRVxuICAgIH1cbiAgICBlbnRyeS5uZXdlciA9IHVuZGVmaW5lZDsgLy8gRCAtLXhcbiAgICBlbnRyeS5vbGRlciA9IHRoaXMudGFpbDsgLy8gRC4gLS0+IEVcbiAgICBpZiAodGhpcy50YWlsKSB7XG4gICAgICB0aGlzLnRhaWwubmV3ZXIgPSBlbnRyeTsgLy8gRS4gPC0tIERcbiAgICB9XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgcmV0dXJuIHJldHVybkVudHJ5ID8gZW50cnkgOiBlbnRyeS52YWx1ZTtcbiAgfTtcblxuICB2YXIgY2FjaGUkMSA9IG5ldyBDYWNoZSgxMDAwKTtcbiAgdmFyIGZpbHRlclRva2VuUkUgPSAvW15cXHMnXCJdK3wnW14nXSonfFwiW15cIl0qXCIvZztcbiAgdmFyIHJlc2VydmVkQXJnUkUgPSAvXmluJHxeLT9cXGQrLztcblxuICAvKipcbiAgICogUGFyc2VyIHN0YXRlXG4gICAqL1xuXG4gIHZhciBzdHI7XG4gIHZhciBkaXI7XG4gIHZhciBjO1xuICB2YXIgcHJldjtcbiAgdmFyIGk7XG4gIHZhciBsO1xuICB2YXIgbGFzdEZpbHRlckluZGV4O1xuICB2YXIgaW5TaW5nbGU7XG4gIHZhciBpbkRvdWJsZTtcbiAgdmFyIGN1cmx5O1xuICB2YXIgc3F1YXJlO1xuICB2YXIgcGFyZW47XG4gIC8qKlxuICAgKiBQdXNoIGEgZmlsdGVyIHRvIHRoZSBjdXJyZW50IGRpcmVjdGl2ZSBvYmplY3RcbiAgICovXG5cbiAgZnVuY3Rpb24gcHVzaEZpbHRlcigpIHtcbiAgICB2YXIgZXhwID0gc3RyLnNsaWNlKGxhc3RGaWx0ZXJJbmRleCwgaSkudHJpbSgpO1xuICAgIHZhciBmaWx0ZXI7XG4gICAgaWYgKGV4cCkge1xuICAgICAgZmlsdGVyID0ge307XG4gICAgICB2YXIgdG9rZW5zID0gZXhwLm1hdGNoKGZpbHRlclRva2VuUkUpO1xuICAgICAgZmlsdGVyLm5hbWUgPSB0b2tlbnNbMF07XG4gICAgICBpZiAodG9rZW5zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZmlsdGVyLmFyZ3MgPSB0b2tlbnMuc2xpY2UoMSkubWFwKHByb2Nlc3NGaWx0ZXJBcmcpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmlsdGVyKSB7XG4gICAgICAoZGlyLmZpbHRlcnMgPSBkaXIuZmlsdGVycyB8fCBbXSkucHVzaChmaWx0ZXIpO1xuICAgIH1cbiAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhcmd1bWVudCBpcyBkeW5hbWljIGFuZCBzdHJpcCBxdW90ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhcmdcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuICBmdW5jdGlvbiBwcm9jZXNzRmlsdGVyQXJnKGFyZykge1xuICAgIGlmIChyZXNlcnZlZEFyZ1JFLnRlc3QoYXJnKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHRvTnVtYmVyKGFyZyksXG4gICAgICAgIGR5bmFtaWM6IGZhbHNlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RyaXBwZWQgPSBzdHJpcFF1b3RlcyhhcmcpO1xuICAgICAgdmFyIGR5bmFtaWMgPSBzdHJpcHBlZCA9PT0gYXJnO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGR5bmFtaWMgPyBhcmcgOiBzdHJpcHBlZCxcbiAgICAgICAgZHluYW1pYzogZHluYW1pY1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgYSBkaXJlY3RpdmUgdmFsdWUgYW5kIGV4dHJhY3QgdGhlIGV4cHJlc3Npb25cbiAgICogYW5kIGl0cyBmaWx0ZXJzIGludG8gYSBkZXNjcmlwdG9yLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiBcImEgKyAxIHwgdXBwZXJjYXNlXCIgd2lsbCB5aWVsZDpcbiAgICoge1xuICAgKiAgIGV4cHJlc3Npb246ICdhICsgMScsXG4gICAqICAgZmlsdGVyczogW1xuICAgKiAgICAgeyBuYW1lOiAndXBwZXJjYXNlJywgYXJnczogbnVsbCB9XG4gICAqICAgXVxuICAgKiB9XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG5cbiAgZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmUocykge1xuICAgIHZhciBoaXQgPSBjYWNoZSQxLmdldChzKTtcbiAgICBpZiAoaGl0KSB7XG4gICAgICByZXR1cm4gaGl0O1xuICAgIH1cblxuICAgIC8vIHJlc2V0IHBhcnNlciBzdGF0ZVxuICAgIHN0ciA9IHM7XG4gICAgaW5TaW5nbGUgPSBpbkRvdWJsZSA9IGZhbHNlO1xuICAgIGN1cmx5ID0gc3F1YXJlID0gcGFyZW4gPSAwO1xuICAgIGxhc3RGaWx0ZXJJbmRleCA9IDA7XG4gICAgZGlyID0ge307XG5cbiAgICBmb3IgKGkgPSAwLCBsID0gc3RyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcHJldiA9IGM7XG4gICAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgICAgLy8gY2hlY2sgc2luZ2xlIHF1b3RlXG4gICAgICAgIGlmIChjID09PSAweDI3ICYmIHByZXYgIT09IDB4NUMpIGluU2luZ2xlID0gIWluU2luZ2xlO1xuICAgICAgfSBlbHNlIGlmIChpbkRvdWJsZSkge1xuICAgICAgICAvLyBjaGVjayBkb3VibGUgcXVvdGVcbiAgICAgICAgaWYgKGMgPT09IDB4MjIgJiYgcHJldiAhPT0gMHg1QykgaW5Eb3VibGUgPSAhaW5Eb3VibGU7XG4gICAgICB9IGVsc2UgaWYgKGMgPT09IDB4N0MgJiYgLy8gcGlwZVxuICAgICAgICBzdHIuY2hhckNvZGVBdChpICsgMSkgIT09IDB4N0MgJiYgc3RyLmNoYXJDb2RlQXQoaSAtIDEpICE9PSAweDdDKSB7XG4gICAgICAgIGlmIChkaXIuZXhwcmVzc2lvbiA9PSBudWxsKSB7XG4gICAgICAgICAgLy8gZmlyc3QgZmlsdGVyLCBlbmQgb2YgZXhwcmVzc2lvblxuICAgICAgICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICAgICAgICAgIGRpci5leHByZXNzaW9uID0gc3RyLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBhbHJlYWR5IGhhcyBmaWx0ZXJcbiAgICAgICAgICBwdXNoRmlsdGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgIGNhc2UgMHgyMjpcbiAgICAgICAgICAgIGluRG91YmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrOyAvLyBcIlxuICAgICAgICAgIGNhc2UgMHgyNzpcbiAgICAgICAgICAgIGluU2luZ2xlID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrOyAvLyAnXG4gICAgICAgICAgY2FzZSAweDI4OlxuICAgICAgICAgICAgcGFyZW4rKztcbiAgICAgICAgICAgIGJyZWFrOyAvLyAoXG4gICAgICAgICAgY2FzZSAweDI5OlxuICAgICAgICAgICAgcGFyZW4tLTtcbiAgICAgICAgICAgIGJyZWFrOyAvLyApXG4gICAgICAgICAgY2FzZSAweDVCOlxuICAgICAgICAgICAgc3F1YXJlKys7XG4gICAgICAgICAgICBicmVhazsgLy8gW1xuICAgICAgICAgIGNhc2UgMHg1RDpcbiAgICAgICAgICAgIHNxdWFyZS0tO1xuICAgICAgICAgICAgYnJlYWs7IC8vIF1cbiAgICAgICAgICBjYXNlIDB4N0I6XG4gICAgICAgICAgICBjdXJseSsrO1xuICAgICAgICAgICAgYnJlYWs7IC8vIHtcbiAgICAgICAgICBjYXNlIDB4N0Q6XG4gICAgICAgICAgICBjdXJseS0tO1xuICAgICAgICAgICAgYnJlYWs7IC8vIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXIuZXhwcmVzc2lvbiA9PSBudWxsKSB7XG4gICAgICBkaXIuZXhwcmVzc2lvbiA9IHN0ci5zbGljZSgwLCBpKS50cmltKCk7XG4gICAgfSBlbHNlIGlmIChsYXN0RmlsdGVySW5kZXggIT09IDApIHtcbiAgICAgIHB1c2hGaWx0ZXIoKTtcbiAgICB9XG5cbiAgICBjYWNoZSQxLnB1dChzLCBkaXIpO1xuICAgIHJldHVybiBkaXI7XG4gIH1cblxuICB2YXIgZGlyZWN0aXZlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgcGFyc2VEaXJlY3RpdmU6IHBhcnNlRGlyZWN0aXZlXG4gIH0pO1xuXG4gIHZhciByZWdleEVzY2FwZVJFID0gL1stLiorP14ke30oKXxbXFxdXFwvXFxcXF0vZztcbiAgdmFyIGNhY2hlID0gdW5kZWZpbmVkO1xuICB2YXIgdGFnUkUgPSB1bmRlZmluZWQ7XG4gIHZhciBodG1sUkUgPSB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBFc2NhcGUgYSBzdHJpbmcgc28gaXQgY2FuIGJlIHVzZWQgaW4gYSBSZWdFeHBcbiAgICogY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICovXG5cbiAgZnVuY3Rpb24gZXNjYXBlUmVnZXgoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBpbGVSZWdleCgpIHtcbiAgICB2YXIgb3BlbiA9IGVzY2FwZVJlZ2V4KGNvbmZpZy5kZWxpbWl0ZXJzWzBdKTtcbiAgICB2YXIgY2xvc2UgPSBlc2NhcGVSZWdleChjb25maWcuZGVsaW1pdGVyc1sxXSk7XG4gICAgdmFyIHVuc2FmZU9wZW4gPSBlc2NhcGVSZWdleChjb25maWcudW5zYWZlRGVsaW1pdGVyc1swXSk7XG4gICAgdmFyIHVuc2FmZUNsb3NlID0gZXNjYXBlUmVnZXgoY29uZmlnLnVuc2FmZURlbGltaXRlcnNbMV0pO1xuICAgIHRhZ1JFID0gbmV3IFJlZ0V4cCh1bnNhZmVPcGVuICsgJygoPzoufFxcXFxuKSs/KScgKyB1bnNhZmVDbG9zZSArICd8JyArIG9wZW4gKyAnKCg/Oi58XFxcXG4pKz8pJyArIGNsb3NlLCAnZycpO1xuICAgIGh0bWxSRSA9IG5ldyBSZWdFeHAoJ14nICsgdW5zYWZlT3BlbiArICcoKD86LnxcXFxcbikrPyknICsgdW5zYWZlQ2xvc2UgKyAnJCcpO1xuICAgIC8vIHJlc2V0IGNhY2hlXG4gICAgY2FjaGUgPSBuZXcgQ2FjaGUoMTAwMCk7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgYSB0ZW1wbGF0ZSB0ZXh0IHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIHRva2Vucy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHRcbiAgICogQHJldHVybiB7QXJyYXk8T2JqZWN0PiB8IG51bGx9XG4gICAqICAgICAgICAgICAgICAgLSB7U3RyaW5nfSB0eXBlXG4gICAqICAgICAgICAgICAgICAgLSB7U3RyaW5nfSB2YWx1ZVxuICAgKiAgICAgICAgICAgICAgIC0ge0Jvb2xlYW59IFtodG1sXVxuICAgKiAgICAgICAgICAgICAgIC0ge0Jvb2xlYW59IFtvbmVUaW1lXVxuICAgKi9cblxuICBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkge1xuICAgIGlmICghY2FjaGUpIHtcbiAgICAgIGNvbXBpbGVSZWdleCgpO1xuICAgIH1cbiAgICB2YXIgaGl0ID0gY2FjaGUuZ2V0KHRleHQpO1xuICAgIGlmIChoaXQpIHtcbiAgICAgIHJldHVybiBoaXQ7XG4gICAgfVxuICAgIGlmICghdGFnUkUudGVzdCh0ZXh0KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciB0b2tlbnMgPSBbXTtcbiAgICB2YXIgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbWF0Y2gsIGluZGV4LCBodG1sLCB2YWx1ZSwgZmlyc3QsIG9uZVRpbWU7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cbiAgICB3aGlsZSAobWF0Y2ggPSB0YWdSRS5leGVjKHRleHQpKSB7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG4gICAgICBpbmRleCA9IG1hdGNoLmluZGV4O1xuICAgICAgLy8gcHVzaCB0ZXh0IHRva2VuXG4gICAgICBpZiAoaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIHZhbHVlOiB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gdGFnIHRva2VuXG4gICAgICBodG1sID0gaHRtbFJFLnRlc3QobWF0Y2hbMF0pO1xuICAgICAgdmFsdWUgPSBodG1sID8gbWF0Y2hbMV0gOiBtYXRjaFsyXTtcbiAgICAgIGZpcnN0ID0gdmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgICAgIG9uZVRpbWUgPSBmaXJzdCA9PT0gNDI7IC8vICpcbiAgICAgIHZhbHVlID0gb25lVGltZSA/IHZhbHVlLnNsaWNlKDEpIDogdmFsdWU7XG4gICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgIHRhZzogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlLnRyaW0oKSxcbiAgICAgICAgaHRtbDogaHRtbCxcbiAgICAgICAgb25lVGltZTogb25lVGltZVxuICAgICAgfSk7XG4gICAgICBsYXN0SW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgIHZhbHVlOiB0ZXh0LnNsaWNlKGxhc3RJbmRleClcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjYWNoZS5wdXQodGV4dCwgdG9rZW5zKTtcbiAgICByZXR1cm4gdG9rZW5zO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdCBhIGxpc3Qgb2YgdG9rZW5zIGludG8gYW4gZXhwcmVzc2lvbi5cbiAgICogZS5nLiB0b2tlbnMgcGFyc2VkIGZyb20gJ2Ege3tifX0gYycgY2FuIGJlIHNlcmlhbGl6ZWRcbiAgICogaW50byBvbmUgc2luZ2xlIGV4cHJlc3Npb24gYXMgJ1wiYSBcIiArIGIgKyBcIiBjXCInLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSB0b2tlbnNcbiAgICogQHBhcmFtIHtWdWV9IFt2bV1cbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cblxuICBmdW5jdGlvbiB0b2tlbnNUb0V4cCh0b2tlbnMsIHZtKSB7XG4gICAgaWYgKHRva2Vucy5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gdG9rZW5zLm1hcChmdW5jdGlvbih0b2tlbikge1xuICAgICAgICByZXR1cm4gZm9ybWF0VG9rZW4odG9rZW4sIHZtKTtcbiAgICAgIH0pLmpvaW4oJysnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZvcm1hdFRva2VuKHRva2Vuc1swXSwgdm0sIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgYSBzaW5nbGUgdG9rZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0b2tlblxuICAgKiBAcGFyYW0ge1Z1ZX0gW3ZtXVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtzaW5nbGVdXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG5cbiAgZnVuY3Rpb24gZm9ybWF0VG9rZW4odG9rZW4sIHZtLCBzaW5nbGUpIHtcbiAgICByZXR1cm4gdG9rZW4udGFnID8gdG9rZW4ub25lVGltZSAmJiB2bSA/ICdcIicgKyB2bS4kZXZhbCh0b2tlbi52YWx1ZSkgKyAnXCInIDogaW5saW5lRmlsdGVycyh0b2tlbi52YWx1ZSwgc2luZ2xlKSA6ICdcIicgKyB0b2tlbi52YWx1ZSArICdcIic7XG4gIH1cblxuICAvKipcbiAgICogRm9yIGFuIGF0dHJpYnV0ZSB3aXRoIG11bHRpcGxlIGludGVycG9sYXRpb24gdGFncyxcbiAgICogZS5nLiBhdHRyPVwic29tZS17e3RoaW5nIHwgZmlsdGVyfX1cIiwgaW4gb3JkZXIgdG8gY29tYmluZVxuICAgKiB0aGUgd2hvbGUgdGhpbmcgaW50byBhIHNpbmdsZSB3YXRjaGFibGUgZXhwcmVzc2lvbiwgd2VcbiAgICogaGF2ZSB0byBpbmxpbmUgdGhvc2UgZmlsdGVycy4gVGhpcyBmdW5jdGlvbiBkb2VzIGV4YWN0bHlcbiAgICogdGhhdC4gVGhpcyBpcyBhIGJpdCBoYWNreSBidXQgaXQgYXZvaWRzIGhlYXZ5IGNoYW5nZXNcbiAgICogdG8gZGlyZWN0aXZlIHBhcnNlciBhbmQgd2F0Y2hlciBtZWNoYW5pc20uXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBleHBcbiAgICogQHBhcmFtIHtCb29sZWFufSBzaW5nbGVcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cblxuICB2YXIgZmlsdGVyUkUgPSAvW158XVxcfFtefF0vO1xuXG4gIGZ1bmN0aW9uIGlubGluZUZpbHRlcnMoZXhwLCBzaW5nbGUpIHtcbiAgICBpZiAoIWZpbHRlclJFLnRlc3QoZXhwKSkge1xuICAgICAgcmV0dXJuIHNpbmdsZSA/IGV4cCA6ICcoJyArIGV4cCArICcpJztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRpciA9IHBhcnNlRGlyZWN0aXZlKGV4cCk7XG4gICAgICBpZiAoIWRpci5maWx0ZXJzKSB7XG4gICAgICAgIHJldHVybiAnKCcgKyBleHAgKyAnKSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ3RoaXMuX2FwcGx5RmlsdGVycygnICsgZGlyLmV4cHJlc3Npb24gKyAvLyB2YWx1ZVxuICAgICAgICAgICcsbnVsbCwnICsgLy8gb2xkVmFsdWUgKG51bGwgZm9yIHJlYWQpXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoZGlyLmZpbHRlcnMpICsgLy8gZmlsdGVyIGRlc2NyaXB0b3JzXG4gICAgICAgICAgJyxmYWxzZSknOyAvLyB3cml0ZT9cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgdGV4dCA9IE9iamVjdC5mcmVlemUoe1xuICAgIGNvbXBpbGVSZWdleDogY29tcGlsZVJlZ2V4LFxuICAgIHBhcnNlVGV4dDogcGFyc2VUZXh0LFxuICAgIHRva2Vuc1RvRXhwOiB0b2tlbnNUb0V4cFxuICB9KTtcblxuICB2YXIgZGVsaW1pdGVycyA9IFsne3snLCAnfX0nXTtcbiAgdmFyIHVuc2FmZURlbGltaXRlcnMgPSBbJ3t7eycsICd9fX0nXTtcblxuICB2YXIgY29uZmlnID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoe1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBwcmludCBkZWJ1ZyBtZXNzYWdlcy5cbiAgICAgKiBBbHNvIGVuYWJsZXMgc3RhY2sgdHJhY2UgZm9yIHdhcm5pbmdzLlxuICAgICAqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICovXG5cbiAgICBkZWJ1ZzogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgICAqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICovXG5cbiAgICBzaWxlbnQ6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byB1c2UgYXN5bmMgcmVuZGVyaW5nLlxuICAgICAqL1xuXG4gICAgYXN5bmM6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHdhcm4gYWdhaW5zdCBlcnJvcnMgY2F1Z2h0IHdoZW4gZXZhbHVhdGluZ1xuICAgICAqIGV4cHJlc3Npb25zLlxuICAgICAqL1xuXG4gICAgd2FybkV4cHJlc3Npb25FcnJvcnM6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIGFsbG93IGRldnRvb2xzIGluc3BlY3Rpb24uXG4gICAgICogRGlzYWJsZWQgYnkgZGVmYXVsdCBpbiBwcm9kdWN0aW9uIGJ1aWxkcy5cbiAgICAgKi9cblxuICAgIGRldnRvb2xzOiAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicsXG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBmbGFnIHRvIGluZGljYXRlIHRoZSBkZWxpbWl0ZXJzIGhhdmUgYmVlblxuICAgICAqIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKi9cblxuICAgIF9kZWxpbWl0ZXJzQ2hhbmdlZDogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgYXNzZXQgdHlwZXMgdGhhdCBhIGNvbXBvbmVudCBjYW4gb3duLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuXG4gICAgX2Fzc2V0VHlwZXM6IFsnY29tcG9uZW50JywgJ2RpcmVjdGl2ZScsICdlbGVtZW50RGlyZWN0aXZlJywgJ2ZpbHRlcicsICd0cmFuc2l0aW9uJywgJ3BhcnRpYWwnXSxcblxuICAgIC8qKlxuICAgICAqIHByb3AgYmluZGluZyBtb2Rlc1xuICAgICAqL1xuXG4gICAgX3Byb3BCaW5kaW5nTW9kZXM6IHtcbiAgICAgIE9ORV9XQVk6IDAsXG4gICAgICBUV09fV0FZOiAxLFxuICAgICAgT05FX1RJTUU6IDJcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWF4IGNpcmN1bGFyIHVwZGF0ZXMgYWxsb3dlZCBpbiBhIGJhdGNoZXIgZmx1c2ggY3ljbGUuXG4gICAgICovXG5cbiAgICBfbWF4VXBkYXRlQ291bnQ6IDEwMFxuXG4gIH0sIHtcbiAgICBkZWxpbWl0ZXJzOiB7XG4gICAgICAvKipcbiAgICAgICAqIEludGVycG9sYXRpb24gZGVsaW1pdGVycy4gQ2hhbmdpbmcgdGhlc2Ugd291bGQgdHJpZ2dlclxuICAgICAgICogdGhlIHRleHQgcGFyc2VyIHRvIHJlLWNvbXBpbGUgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge0FycmF5PFN0cmluZz59XG4gICAgICAgKi9cblxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBkZWxpbWl0ZXJzO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgICBkZWxpbWl0ZXJzID0gdmFsO1xuICAgICAgICBjb21waWxlUmVnZXgoKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICB1bnNhZmVEZWxpbWl0ZXJzOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHVuc2FmZURlbGltaXRlcnM7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICAgIHVuc2FmZURlbGltaXRlcnMgPSB2YWw7XG4gICAgICAgIGNvbXBpbGVSZWdleCgpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIHZhciB3YXJuID0gdW5kZWZpbmVkO1xuICB2YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IHVuZGVmaW5lZDtcblxuICBpZiAoJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgICAgIHdhcm4gPSBmdW5jdGlvbihtc2csIHZtKSB7XG4gICAgICAgIGlmIChoYXNDb25zb2xlICYmICFjb25maWcuc2lsZW50KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignW1Z1ZSB3YXJuXTogJyArIG1zZyArICh2bSA/IGZvcm1hdENvbXBvbmVudE5hbWUodm0pIDogJycpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uKHZtKSB7XG4gICAgICAgIHZhciBuYW1lID0gdm0uX2lzVnVlID8gdm0uJG9wdGlvbnMubmFtZSA6IHZtLm5hbWU7XG4gICAgICAgIHJldHVybiBuYW1lID8gJyAoZm91bmQgaW4gY29tcG9uZW50OiA8JyArIGh5cGhlbmF0ZShuYW1lKSArICc+KScgOiAnJztcbiAgICAgIH07XG4gICAgfSkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmQgd2l0aCB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7VnVlfSB2bVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFwcGVuZFdpdGhUcmFuc2l0aW9uKGVsLCB0YXJnZXQsIHZtLCBjYikge1xuICAgIGFwcGx5VHJhbnNpdGlvbihlbCwgMSwgZnVuY3Rpb24oKSB7XG4gICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIH0sIHZtLCBjYik7XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0QmVmb3JlIHdpdGggdHJhbnNpdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldFxuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXVxuICAgKi9cblxuICBmdW5jdGlvbiBiZWZvcmVXaXRoVHJhbnNpdGlvbihlbCwgdGFyZ2V0LCB2bSwgY2IpIHtcbiAgICBhcHBseVRyYW5zaXRpb24oZWwsIDEsIGZ1bmN0aW9uKCkge1xuICAgICAgYmVmb3JlKGVsLCB0YXJnZXQpO1xuICAgIH0sIHZtLCBjYik7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHdpdGggdHJhbnNpdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXVxuICAgKi9cblxuICBmdW5jdGlvbiByZW1vdmVXaXRoVHJhbnNpdGlvbihlbCwgdm0sIGNiKSB7XG4gICAgYXBwbHlUcmFuc2l0aW9uKGVsLCAtMSwgZnVuY3Rpb24oKSB7XG4gICAgICByZW1vdmUoZWwpO1xuICAgIH0sIHZtLCBjYik7XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgdHJhbnNpdGlvbnMgd2l0aCBhbiBvcGVyYXRpb24gY2FsbGJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRpcmVjdGlvblxuICAgKiAgICAgICAgICAgICAgICAgIDE6IGVudGVyXG4gICAqICAgICAgICAgICAgICAgICAtMTogbGVhdmVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3AgLSB0aGUgYWN0dWFsIERPTSBvcGVyYXRpb25cbiAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYl1cbiAgICovXG5cbiAgZnVuY3Rpb24gYXBwbHlUcmFuc2l0aW9uKGVsLCBkaXJlY3Rpb24sIG9wLCB2bSwgY2IpIHtcbiAgICB2YXIgdHJhbnNpdGlvbiA9IGVsLl9fdl90cmFucztcbiAgICBpZiAoIXRyYW5zaXRpb24gfHxcbiAgICAgIC8vIHNraXAgaWYgdGhlcmUgYXJlIG5vIGpzIGhvb2tzIGFuZCBDU1MgdHJhbnNpdGlvbiBpc1xuICAgICAgLy8gbm90IHN1cHBvcnRlZFxuICAgICAgIXRyYW5zaXRpb24uaG9va3MgJiYgIXRyYW5zaXRpb25FbmRFdmVudCB8fFxuICAgICAgLy8gc2tpcCB0cmFuc2l0aW9ucyBmb3IgaW5pdGlhbCBjb21waWxlXG4gICAgICAhdm0uX2lzQ29tcGlsZWQgfHxcbiAgICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBtYW5pcHVsYXRlZCBieSBhIHBhcmVudCBkaXJlY3RpdmVcbiAgICAgIC8vIGR1cmluZyB0aGUgcGFyZW50J3MgY29tcGlsYXRpb24gcGhhc2UsIHNraXAgdGhlXG4gICAgICAvLyBhbmltYXRpb24uXG4gICAgICB2bS4kcGFyZW50ICYmICF2bS4kcGFyZW50Ll9pc0NvbXBpbGVkKSB7XG4gICAgICBvcCgpO1xuICAgICAgaWYgKGNiKSBjYigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgYWN0aW9uID0gZGlyZWN0aW9uID4gMCA/ICdlbnRlcicgOiAnbGVhdmUnO1xuICAgIHRyYW5zaXRpb25bYWN0aW9uXShvcCwgY2IpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb24gPSBPYmplY3QuZnJlZXplKHtcbiAgICBhcHBlbmRXaXRoVHJhbnNpdGlvbjogYXBwZW5kV2l0aFRyYW5zaXRpb24sXG4gICAgYmVmb3JlV2l0aFRyYW5zaXRpb246IGJlZm9yZVdpdGhUcmFuc2l0aW9uLFxuICAgIHJlbW92ZVdpdGhUcmFuc2l0aW9uOiByZW1vdmVXaXRoVHJhbnNpdGlvbixcbiAgICBhcHBseVRyYW5zaXRpb246IGFwcGx5VHJhbnNpdGlvblxuICB9KTtcblxuICAvKipcbiAgICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfEVsZW1lbnR9IGVsXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHF1ZXJ5KGVsKSB7XG4gICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IGVsO1xuICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgIGlmICghZWwpIHtcbiAgICAgICAgJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBzZWxlY3Rvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIG5vZGUgaXMgaW4gdGhlIGRvY3VtZW50LlxuICAgKiBOb3RlOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMgc2hvdWxkIHdvcmsgaGVyZVxuICAgKiBidXQgYWx3YXlzIHJldHVybnMgZmFsc2UgZm9yIGNvbW1lbnQgbm9kZXMgaW4gcGhhbnRvbWpzLFxuICAgKiBtYWtpbmcgdW5pdCB0ZXN0cyBkaWZmaWN1bHQuIFRoaXMgaXMgZml4ZWQgYnkgZG9pbmcgdGhlXG4gICAqIGNvbnRhaW5zKCkgY2hlY2sgb24gdGhlIG5vZGUncyBwYXJlbnROb2RlIGluc3RlYWQgb2ZcbiAgICogdGhlIG5vZGUgaXRzZWxmLlxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG5cbiAgZnVuY3Rpb24gaW5Eb2Mobm9kZSkge1xuICAgIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgcmV0dXJuIGRvYyA9PT0gbm9kZSB8fCBkb2MgPT09IHBhcmVudCB8fCAhIShwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlID09PSAxICYmIGRvYy5jb250YWlucyhwYXJlbnQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW5kIHJlbW92ZSBhbiBhdHRyaWJ1dGUgZnJvbSBhIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gX2F0dHJcbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0QXR0cihub2RlLCBfYXR0cikge1xuICAgIHZhciB2YWwgPSBub2RlLmdldEF0dHJpYnV0ZShfYXR0cik7XG4gICAgaWYgKHZhbCAhPT0gbnVsbCkge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoX2F0dHIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBhdHRyaWJ1dGUgd2l0aCBjb2xvbiBvciB2LWJpbmQ6IHByZWZpeC5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm4ge1N0cmluZ3xudWxsfVxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRCaW5kQXR0cihub2RlLCBuYW1lKSB7XG4gICAgdmFyIHZhbCA9IGdldEF0dHIobm9kZSwgJzonICsgbmFtZSk7XG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgdmFsID0gZ2V0QXR0cihub2RlLCAndi1iaW5kOicgKyBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgcHJlc2VuY2Ugb2YgYSBiaW5kIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGhhc0JpbmRBdHRyKG5vZGUsIG5hbWUpIHtcbiAgICByZXR1cm4gbm9kZS5oYXNBdHRyaWJ1dGUobmFtZSkgfHwgbm9kZS5oYXNBdHRyaWJ1dGUoJzonICsgbmFtZSkgfHwgbm9kZS5oYXNBdHRyaWJ1dGUoJ3YtYmluZDonICsgbmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0IGVsIGJlZm9yZSB0YXJnZXRcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldFxuICAgKi9cblxuICBmdW5jdGlvbiBiZWZvcmUoZWwsIHRhcmdldCkge1xuICAgIHRhcmdldC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbCwgdGFyZ2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnQgZWwgYWZ0ZXIgdGFyZ2V0XG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXRcbiAgICovXG5cbiAgZnVuY3Rpb24gYWZ0ZXIoZWwsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQubmV4dFNpYmxpbmcpIHtcbiAgICAgIGJlZm9yZShlbCwgdGFyZ2V0Lm5leHRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgZWwgZnJvbSBET01cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKi9cblxuICBmdW5jdGlvbiByZW1vdmUoZWwpIHtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwZW5kIGVsIHRvIHRhcmdldFxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHByZXBlbmQoZWwsIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQuZmlyc3RDaGlsZCkge1xuICAgICAgYmVmb3JlKGVsLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChlbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2UgdGFyZ2V0IHdpdGggZWxcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXRcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKi9cblxuICBmdW5jdGlvbiByZXBsYWNlKHRhcmdldCwgZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChlbCwgdGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIGV2ZW50IGxpc3RlbmVyIHNob3J0aGFuZC5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAgICogQHBhcmFtIHtCb29sZWFufSBbdXNlQ2FwdHVyZV1cbiAgICovXG5cbiAgZnVuY3Rpb24gb24oZWwsIGV2ZW50LCBjYiwgdXNlQ2FwdHVyZSkge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNiLCB1c2VDYXB0dXJlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXIgc2hvcnRoYW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYlxuICAgKi9cblxuICBmdW5jdGlvbiBvZmYoZWwsIGV2ZW50LCBjYikge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGNiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgSUU5IGNvbXBhdDogd2hlbiBib3RoIGNsYXNzIGFuZCA6Y2xhc3MgYXJlIHByZXNlbnRcbiAgICogZ2V0QXR0cmlidXRlKCdjbGFzcycpIHJldHVybnMgd3JvbmcgdmFsdWUuLi5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldENsYXNzKGVsKSB7XG4gICAgdmFyIGNsYXNzbmFtZSA9IGVsLmNsYXNzTmFtZTtcbiAgICBpZiAodHlwZW9mIGNsYXNzbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGNsYXNzbmFtZSA9IGNsYXNzbmFtZS5iYXNlVmFsIHx8ICcnO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NuYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIElFOSwgc2V0QXR0cmlidXRlKCdjbGFzcycpIHdpbGwgcmVzdWx0IGluIGVtcHR5IGNsYXNzXG4gICAqIGlmIHRoZSBlbGVtZW50IGFsc28gaGFzIHRoZSA6Y2xhc3MgYXR0cmlidXRlOyBIb3dldmVyIGluXG4gICAqIFBoYW50b21KUywgc2V0dGluZyBgY2xhc3NOYW1lYCBkb2VzIG5vdCB3b3JrIG9uIFNWRyBlbGVtZW50cy4uLlxuICAgKiBTbyB3ZSBoYXZlIHRvIGRvIGEgY29uZGl0aW9uYWwgY2hlY2sgaGVyZS5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2xzXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHNldENsYXNzKGVsLCBjbHMpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNJRTkgJiYgIS9zdmckLy50ZXN0KGVsLm5hbWVzcGFjZVVSSSkpIHtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IGNscztcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIElFICYgU1ZHXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNsc1xuICAgKi9cblxuICBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xzKSB7XG4gICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY3VyID0gJyAnICsgZ2V0Q2xhc3MoZWwpICsgJyAnO1xuICAgICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICAgIHNldENsYXNzKGVsLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBJRSAmIFNWR1xuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjbHNcbiAgICovXG5cbiAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNscykge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGN1ciA9ICcgJyArIGdldENsYXNzKGVsKSArICcgJztcbiAgICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICAgIH1cbiAgICAgIHNldENsYXNzKGVsLCBjdXIudHJpbSgpKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc05hbWUpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXh0cmFjdCByYXcgY29udGVudCBpbnNpZGUgYW4gZWxlbWVudCBpbnRvIGEgdGVtcG9yYXJ5XG4gICAqIGNvbnRhaW5lciBkaXZcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFzRnJhZ21lbnRcbiAgICogQHJldHVybiB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fVxuICAgKi9cblxuICBmdW5jdGlvbiBleHRyYWN0Q29udGVudChlbCwgYXNGcmFnbWVudCkge1xuICAgIHZhciBjaGlsZDtcbiAgICB2YXIgcmF3Q29udGVudDtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNUZW1wbGF0ZShlbCkgJiYgaXNGcmFnbWVudChlbC5jb250ZW50KSkge1xuICAgICAgZWwgPSBlbC5jb250ZW50O1xuICAgIH1cbiAgICBpZiAoZWwuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICB0cmltTm9kZShlbCk7XG4gICAgICByYXdDb250ZW50ID0gYXNGcmFnbWVudCA/IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cbiAgICAgIHdoaWxlIChjaGlsZCA9IGVsLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuICAgICAgICByYXdDb250ZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhd0NvbnRlbnQ7XG4gIH1cblxuICAvKipcbiAgICogVHJpbSBwb3NzaWJsZSBlbXB0eSBoZWFkL3RhaWwgdGV4dCBhbmQgY29tbWVudFxuICAgKiBub2RlcyBpbnNpZGUgYSBwYXJlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKi9cblxuICBmdW5jdGlvbiB0cmltTm9kZShub2RlKSB7XG4gICAgdmFyIGNoaWxkO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlcXVlbmNlcyAqL1xuICAgIHdoaWxlICgoY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQsIGlzVHJpbW1hYmxlKGNoaWxkKSkpIHtcbiAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgIH1cbiAgICB3aGlsZSAoKGNoaWxkID0gbm9kZS5sYXN0Q2hpbGQsIGlzVHJpbW1hYmxlKGNoaWxkKSkpIHtcbiAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlcXVlbmNlcyAqL1xuICB9XG5cbiAgZnVuY3Rpb24gaXNUcmltbWFibGUobm9kZSkge1xuICAgIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAzICYmICFub2RlLmRhdGEudHJpbSgpIHx8IG5vZGUubm9kZVR5cGUgPT09IDgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGVsZW1lbnQgaXMgYSB0ZW1wbGF0ZSB0YWcuXG4gICAqIE5vdGUgaWYgdGhlIHRlbXBsYXRlIGFwcGVhcnMgaW5zaWRlIGFuIFNWRyBpdHMgdGFnTmFtZVxuICAgKiB3aWxsIGJlIGluIGxvd2VyY2FzZS5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKi9cblxuICBmdW5jdGlvbiBpc1RlbXBsYXRlKGVsKSB7XG4gICAgcmV0dXJuIGVsLnRhZ05hbWUgJiYgZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGVtcGxhdGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBcImFuY2hvclwiIGZvciBwZXJmb3JtaW5nIGRvbSBpbnNlcnRpb24vcmVtb3ZhbHMuXG4gICAqIFRoaXMgaXMgdXNlZCBpbiBhIG51bWJlciBvZiBzY2VuYXJpb3M6XG4gICAqIC0gZnJhZ21lbnQgaW5zdGFuY2VcbiAgICogLSB2LWh0bWxcbiAgICogLSB2LWlmXG4gICAqIC0gdi1mb3JcbiAgICogLSBjb21wb25lbnRcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRcbiAgICogQHBhcmFtIHtCb29sZWFufSBwZXJzaXN0IC0gSUUgdHJhc2hlcyBlbXB0eSB0ZXh0Tm9kZXMgb25cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVOb2RlKHRydWUpLCBzbyBpbiBjZXJ0YWluXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2VzIHRoZSBhbmNob3IgbmVlZHMgdG8gYmVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uLWVtcHR5IHRvIGJlIHBlcnNpc3RlZCBpblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZXMuXG4gICAqIEByZXR1cm4ge0NvbW1lbnR8VGV4dH1cbiAgICovXG5cbiAgZnVuY3Rpb24gY3JlYXRlQW5jaG9yKGNvbnRlbnQsIHBlcnNpc3QpIHtcbiAgICB2YXIgYW5jaG9yID0gY29uZmlnLmRlYnVnID8gZG9jdW1lbnQuY3JlYXRlQ29tbWVudChjb250ZW50KSA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHBlcnNpc3QgPyAnICcgOiAnJyk7XG4gICAgYW5jaG9yLl9fdl9hbmNob3IgPSB0cnVlO1xuICAgIHJldHVybiBhbmNob3I7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIGNvbXBvbmVudCByZWYgYXR0cmlidXRlIHRoYXQgc3RhcnRzIHdpdGggJC5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gICAqIEByZXR1cm4ge1N0cmluZ3x1bmRlZmluZWR9XG4gICAqL1xuXG4gIHZhciByZWZSRSA9IC9edi1yZWY6LztcblxuICBmdW5jdGlvbiBmaW5kUmVmKG5vZGUpIHtcbiAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgIHZhciBhdHRycyA9IG5vZGUuYXR0cmlidXRlcztcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBuYW1lID0gYXR0cnNbaV0ubmFtZTtcbiAgICAgICAgaWYgKHJlZlJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2FtZWxpemUobmFtZS5yZXBsYWNlKHJlZlJFLCAnJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hcCBhIGZ1bmN0aW9uIHRvIGEgcmFuZ2Ugb2Ygbm9kZXMgLlxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtOb2RlfSBlbmRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BcbiAgICovXG5cbiAgZnVuY3Rpb24gbWFwTm9kZVJhbmdlKG5vZGUsIGVuZCwgb3ApIHtcbiAgICB2YXIgbmV4dDtcbiAgICB3aGlsZSAobm9kZSAhPT0gZW5kKSB7XG4gICAgICBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgIG9wKG5vZGUpO1xuICAgICAgbm9kZSA9IG5leHQ7XG4gICAgfVxuICAgIG9wKGVuZCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgcmFuZ2Ugb2Ygbm9kZXMgd2l0aCB0cmFuc2l0aW9uLCBzdG9yZVxuICAgKiB0aGUgbm9kZXMgaW4gYSBmcmFnbWVudCB3aXRoIGNvcnJlY3Qgb3JkZXJpbmcsXG4gICAqIGFuZCBjYWxsIGNhbGxiYWNrIHdoZW4gZG9uZS5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBzdGFydFxuICAgKiBAcGFyYW0ge05vZGV9IGVuZFxuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHBhcmFtIHtEb2N1bWVudEZyYWdtZW50fSBmcmFnXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGVSYW5nZShzdGFydCwgZW5kLCB2bSwgZnJhZywgY2IpIHtcbiAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgIHZhciByZW1vdmVkID0gMDtcbiAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICBtYXBOb2RlUmFuZ2Uoc3RhcnQsIGVuZCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUgPT09IGVuZCkgZG9uZSA9IHRydWU7XG4gICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgcmVtb3ZlV2l0aFRyYW5zaXRpb24obm9kZSwgdm0sIG9uUmVtb3ZlZCk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBvblJlbW92ZWQoKSB7XG4gICAgICByZW1vdmVkKys7XG4gICAgICBpZiAoZG9uZSAmJiByZW1vdmVkID49IG5vZGVzLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChub2Rlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgY2IgJiYgY2IoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBub2RlIGlzIGEgRG9jdW1lbnRGcmFnbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGlzRnJhZ21lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IDExO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvdXRlckhUTUwgb2YgZWxlbWVudHMsIHRha2luZyBjYXJlXG4gICAqIG9mIFNWRyBlbGVtZW50cyBpbiBJRSBhcyB3ZWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MKGVsKSB7XG4gICAgaWYgKGVsLm91dGVySFRNTCkge1xuICAgICAgcmV0dXJuIGVsLm91dGVySFRNTDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICByZXR1cm4gY29udGFpbmVyLmlubmVySFRNTDtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uVGFnUkUgPSAvXihkaXZ8cHxzcGFufGltZ3xhfGJ8aXxicnx1bHxvbHxsaXxoMXxoMnxoM3xoNHxoNXxoNnxjb2RlfHByZXx0YWJsZXx0aHx0ZHx0cnxmb3JtfGxhYmVsfGlucHV0fHNlbGVjdHxvcHRpb258bmF2fGFydGljbGV8c2VjdGlvbnxoZWFkZXJ8Zm9vdGVyKSQvaTtcbiAgdmFyIHJlc2VydmVkVGFnUkUgPSAvXihzbG90fHBhcnRpYWx8Y29tcG9uZW50KSQvaTtcblxuICB2YXIgaXNVbmtub3duRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVW5rbm93bkVsZW1lbnQgPSBmdW5jdGlvbihlbCwgdGFnKSB7XG4gICAgICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcbiAgICAgICAgcmV0dXJuIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8IGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSkgJiZcbiAgICAgICAgICAvLyBDaHJvbWUgcmV0dXJucyB1bmtub3duIGZvciBzZXZlcmFsIEhUTUw1IGVsZW1lbnRzLlxuICAgICAgICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01NDA1MjZcbiAgICAgICAgICAvLyBGaXJlZm94IHJldHVybnMgdW5rbm93biBmb3Igc29tZSBcIkludGVyYWN0aXZlIGVsZW1lbnRzLlwiXG4gICAgICAgICAgIS9eKGRhdGF8dGltZXxydGN8cmJ8ZGV0YWlsc3xkaWFsb2d8c3VtbWFyeSkkLy50ZXN0KHRhZylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGVsZW1lbnQgaXMgYSBjb21wb25lbnQsIGlmIHllcyByZXR1cm4gaXRzXG4gICAqIGNvbXBvbmVudCBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtPYmplY3R8dW5kZWZpbmVkfVxuICAgKi9cblxuICBmdW5jdGlvbiBjaGVja0NvbXBvbmVudEF0dHIoZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGFnID0gZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBoYXNBdHRycyA9IGVsLmhhc0F0dHJpYnV0ZXMoKTtcbiAgICBpZiAoIWNvbW1vblRhZ1JFLnRlc3QodGFnKSAmJiAhcmVzZXJ2ZWRUYWdSRS50ZXN0KHRhZykpIHtcbiAgICAgIGlmIChyZXNvbHZlQXNzZXQob3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IHRhZ1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGlzID0gaGFzQXR0cnMgJiYgZ2V0SXNCaW5kaW5nKGVsLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGlzO1xuICAgICAgICB9IGVsc2UgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBleHBlY3RlZFRhZyA9IG9wdGlvbnMuX2NvbXBvbmVudE5hbWVNYXAgJiYgb3B0aW9ucy5fY29tcG9uZW50TmFtZU1hcFt0YWddO1xuICAgICAgICAgIGlmIChleHBlY3RlZFRhZykge1xuICAgICAgICAgICAgd2FybignVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtICcgKyAnZGlkIHlvdSBtZWFuIDwnICsgZXhwZWN0ZWRUYWcgKyAnPj8gJyArICdIVE1MIGlzIGNhc2UtaW5zZW5zaXRpdmUsIHJlbWVtYmVyIHRvIHVzZSBrZWJhYi1jYXNlIGluIHRlbXBsYXRlcy4nKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzVW5rbm93bkVsZW1lbnQoZWwsIHRhZykpIHtcbiAgICAgICAgICAgIHdhcm4oJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgKyAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaGFzQXR0cnMpIHtcbiAgICAgIHJldHVybiBnZXRJc0JpbmRpbmcoZWwsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgXCJpc1wiIGJpbmRpbmcgZnJvbSBhbiBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEByZXR1cm4ge09iamVjdHx1bmRlZmluZWR9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldElzQmluZGluZyhlbCwgb3B0aW9ucykge1xuICAgIC8vIGR5bmFtaWMgc3ludGF4XG4gICAgdmFyIGV4cCA9IGVsLmdldEF0dHJpYnV0ZSgnaXMnKTtcbiAgICBpZiAoZXhwICE9IG51bGwpIHtcbiAgICAgIGlmIChyZXNvbHZlQXNzZXQob3B0aW9ucywgJ2NvbXBvbmVudHMnLCBleHApKSB7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnaXMnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogZXhwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cCA9IGdldEJpbmRBdHRyKGVsLCAnaXMnKTtcbiAgICAgIGlmIChleHAgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiBleHAsXG4gICAgICAgICAgZHluYW1pYzogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gICAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gICAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICAgKlxuICAgKiBBbGwgc3RyYXRlZ3kgZnVuY3Rpb25zIGZvbGxvdyB0aGUgc2FtZSBzaWduYXR1cmU6XG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gcGFyZW50VmFsXG4gICAqIEBwYXJhbSB7Kn0gY2hpbGRWYWxcbiAgICogQHBhcmFtIHtWdWV9IFt2bV1cbiAgICovXG5cbiAgdmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8qKlxuICAgKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAgICovXG5cbiAgZnVuY3Rpb24gbWVyZ2VEYXRhKHRvLCBmcm9tKSB7XG4gICAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG4gICAgZm9yIChrZXkgaW4gZnJvbSkge1xuICAgICAgdG9WYWwgPSB0b1trZXldO1xuICAgICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodG9WYWwpICYmIGlzT2JqZWN0KGZyb21WYWwpKSB7XG4gICAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0bztcbiAgfVxuXG4gIC8qKlxuICAgKiBEYXRhXG4gICAqL1xuXG4gIHN0cmF0cy5kYXRhID0gZnVuY3Rpb24ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gcGFyZW50VmFsO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgd2FybignVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICsgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArICdkZWZpbml0aW9ucy4nLCB2bSk7XG4gICAgICAgIHJldHVybiBwYXJlbnRWYWw7XG4gICAgICB9XG4gICAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgICByZXR1cm4gY2hpbGRWYWw7XG4gICAgICB9XG4gICAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4oKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoY2hpbGRWYWwuY2FsbCh0aGlzKSwgcGFyZW50VmFsLmNhbGwodGhpcykpO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHBhcmVudFZhbCB8fCBjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuKCkge1xuICAgICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh2bSkgOiBjaGlsZFZhbDtcbiAgICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHZtKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRWxcbiAgICovXG5cbiAgc3RyYXRzLmVsID0gZnVuY3Rpb24ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pIHtcbiAgICBpZiAoIXZtICYmIGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ1RoZSBcImVsXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgKyAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICsgJ2RlZmluaXRpb25zLicsIHZtKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJldCA9IGNoaWxkVmFsIHx8IHBhcmVudFZhbDtcbiAgICAvLyBpbnZva2UgdGhlIGVsZW1lbnQgZmFjdG9yeSBpZiB0aGlzIGlzIGluc3RhbmNlIG1lcmdlXG4gICAgcmV0dXJuIHZtICYmIHR5cGVvZiByZXQgPT09ICdmdW5jdGlvbicgPyByZXQuY2FsbCh2bSkgOiByZXQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhvb2tzIGFuZCBwYXJhbSBhdHRyaWJ1dGVzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICAgKi9cblxuICBzdHJhdHMuaW5pdCA9IHN0cmF0cy5jcmVhdGVkID0gc3RyYXRzLnJlYWR5ID0gc3RyYXRzLmF0dGFjaGVkID0gc3RyYXRzLmRldGFjaGVkID0gc3RyYXRzLmJlZm9yZUNvbXBpbGUgPSBzdHJhdHMuY29tcGlsZWQgPSBzdHJhdHMuYmVmb3JlRGVzdHJveSA9IHN0cmF0cy5kZXN0cm95ZWQgPSBzdHJhdHMuYWN0aXZhdGUgPSBmdW5jdGlvbihwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gICAgcmV0dXJuIGNoaWxkVmFsID8gcGFyZW50VmFsID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbCkgOiBpc0FycmF5KGNoaWxkVmFsKSA/IGNoaWxkVmFsIDogW2NoaWxkVmFsXSA6IHBhcmVudFZhbDtcbiAgfTtcblxuICAvKipcbiAgICogQXNzZXRzXG4gICAqXG4gICAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAgICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICAgKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAgICovXG5cbiAgZnVuY3Rpb24gbWVyZ2VBc3NldHMocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgICByZXR1cm4gY2hpbGRWYWwgPyBleHRlbmQocmVzLCBndWFyZEFycmF5QXNzZXRzKGNoaWxkVmFsKSkgOiByZXM7XG4gIH1cblxuICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlKSB7XG4gICAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBFdmVudHMgJiBXYXRjaGVycy5cbiAgICpcbiAgICogRXZlbnRzICYgd2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICAgKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAgICovXG5cbiAgc3RyYXRzLndhdGNoID0gc3RyYXRzLmV2ZW50cyA9IGZ1bmN0aW9uKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgICBpZiAoIWNoaWxkVmFsKSByZXR1cm4gcGFyZW50VmFsO1xuICAgIGlmICghcGFyZW50VmFsKSByZXR1cm4gY2hpbGRWYWw7XG4gICAgdmFyIHJldCA9IHt9O1xuICAgIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gICAgZm9yICh2YXIga2V5IGluIGNoaWxkVmFsKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcmV0W2tleV07XG4gICAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXldO1xuICAgICAgaWYgKHBhcmVudCAmJiAhaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgICAgfVxuICAgICAgcmV0W2tleV0gPSBwYXJlbnQgPyBwYXJlbnQuY29uY2F0KGNoaWxkKSA6IFtjaGlsZF07XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gICAqL1xuXG4gIHN0cmF0cy5wcm9wcyA9IHN0cmF0cy5tZXRob2RzID0gc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24ocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgIGlmICghY2hpbGRWYWwpIHJldHVybiBwYXJlbnRWYWw7XG4gICAgaWYgKCFwYXJlbnRWYWwpIHJldHVybiBjaGlsZFZhbDtcbiAgICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICAgIGV4dGVuZChyZXQsIGNoaWxkVmFsKTtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICAgKi9cblxuICB2YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gZGVmYXVsdFN0cmF0KHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZCA/IHBhcmVudFZhbCA6IGNoaWxkVmFsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBNYWtlIHN1cmUgY29tcG9uZW50IG9wdGlvbnMgZ2V0IGNvbnZlcnRlZCB0byBhY3R1YWxcbiAgICogY29uc3RydWN0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKi9cblxuICBmdW5jdGlvbiBndWFyZENvbXBvbmVudHMob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICAgIHZhciBjb21wb25lbnRzID0gb3B0aW9ucy5jb21wb25lbnRzID0gZ3VhcmRBcnJheUFzc2V0cyhvcHRpb25zLmNvbXBvbmVudHMpO1xuICAgICAgdmFyIGlkcyA9IE9iamVjdC5rZXlzKGNvbXBvbmVudHMpO1xuICAgICAgdmFyIGRlZjtcbiAgICAgIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG1hcCA9IG9wdGlvbnMuX2NvbXBvbmVudE5hbWVNYXAgPSB7fTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaWRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0gaWRzW2ldO1xuICAgICAgICBpZiAoY29tbW9uVGFnUkUudGVzdChrZXkpIHx8IHJlc2VydmVkVGFnUkUudGVzdChrZXkpKSB7XG4gICAgICAgICAgJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArICdpZDogJyArIGtleSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVjb3JkIGEgYWxsIGxvd2VyY2FzZSA8LT4ga2ViYWItY2FzZSBtYXBwaW5nIGZvclxuICAgICAgICAvLyBwb3NzaWJsZSBjdXN0b20gZWxlbWVudCBjYXNlIGVycm9yIHdhcm5pbmdcbiAgICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIG1hcFtrZXkucmVwbGFjZSgvLS9nLCAnJykudG9Mb3dlckNhc2UoKV0gPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBkZWYgPSBjb21wb25lbnRzW2tleV07XG4gICAgICAgIGlmIChpc1BsYWluT2JqZWN0KGRlZikpIHtcbiAgICAgICAgICBjb21wb25lbnRzW2tleV0gPSBWdWUuZXh0ZW5kKGRlZik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gICAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGd1YXJkUHJvcHMob3B0aW9ucykge1xuICAgIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gICAgdmFyIGksIHZhbDtcbiAgICBpZiAoaXNBcnJheShwcm9wcykpIHtcbiAgICAgIG9wdGlvbnMucHJvcHMgPSB7fTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBvcHRpb25zLnByb3BzW3ZhbF0gPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbC5uYW1lKSB7XG4gICAgICAgICAgb3B0aW9ucy5wcm9wc1t2YWwubmFtZV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmFsID0gcHJvcHNba2V5c1tpXV07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcHJvcHNba2V5c1tpXV0gPSB7XG4gICAgICAgICAgICB0eXBlOiB2YWxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEd1YXJkIGFuIEFycmF5LWZvcm1hdCBhc3NldHMgb3B0aW9uIGFuZCBjb252ZXJ0ZWQgaXRcbiAgICogaW50byB0aGUga2V5LXZhbHVlIE9iamVjdCBmb3JtYXQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBhc3NldHNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cblxuICBmdW5jdGlvbiBndWFyZEFycmF5QXNzZXRzKGFzc2V0cykge1xuICAgIGlmIChpc0FycmF5KGFzc2V0cykpIHtcbiAgICAgIHZhciByZXMgPSB7fTtcbiAgICAgIHZhciBpID0gYXNzZXRzLmxlbmd0aDtcbiAgICAgIHZhciBhc3NldDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgYXNzZXQgPSBhc3NldHNbaV07XG4gICAgICAgIHZhciBpZCA9IHR5cGVvZiBhc3NldCA9PT0gJ2Z1bmN0aW9uJyA/IGFzc2V0Lm9wdGlvbnMgJiYgYXNzZXQub3B0aW9ucy5uYW1lIHx8IGFzc2V0LmlkIDogYXNzZXQubmFtZSB8fCBhc3NldC5pZDtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdBcnJheS1zeW50YXggYXNzZXRzIG11c3QgcHJvdmlkZSBhIFwibmFtZVwiIG9yIFwiaWRcIiBmaWVsZC4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNbaWRdID0gYXNzZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIHJldHVybiBhc3NldHM7XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICAgKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjaGlsZFxuICAgKiBAcGFyYW0ge1Z1ZX0gW3ZtXSAtIGlmIHZtIGlzIHByZXNlbnQsIGluZGljYXRlcyB0aGlzIGlzXG4gICAqICAgICAgICAgICAgICAgICAgICAgYW4gaW5zdGFudGlhdGlvbiBtZXJnZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQsIHZtKSB7XG4gICAgZ3VhcmRDb21wb25lbnRzKGNoaWxkKTtcbiAgICBndWFyZFByb3BzKGNoaWxkKTtcbiAgICBpZiAoJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY2hpbGQucHJvcHNEYXRhICYmICF2bSkge1xuICAgICAgICB3YXJuKCdwcm9wc0RhdGEgY2FuIG9ubHkgYmUgdXNlZCBhcyBhbiBpbnN0YW50aWF0aW9uIG9wdGlvbi4nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICB2YXIga2V5O1xuICAgIGlmIChjaGlsZFsnZXh0ZW5kcyddKSB7XG4gICAgICBwYXJlbnQgPSB0eXBlb2YgY2hpbGRbJ2V4dGVuZHMnXSA9PT0gJ2Z1bmN0aW9uJyA/IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkWydleHRlbmRzJ10ub3B0aW9ucywgdm0pIDogbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGRbJ2V4dGVuZHMnXSwgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIG1peGluID0gY2hpbGQubWl4aW5zW2ldO1xuICAgICAgICB2YXIgbWl4aW5PcHRpb25zID0gbWl4aW4ucHJvdG90eXBlIGluc3RhbmNlb2YgVnVlID8gbWl4aW4ub3B0aW9ucyA6IG1peGluO1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBtaXhpbk9wdGlvbnMsIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICAgIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmdlRmllbGQoa2V5KSB7XG4gICAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmUgYW4gYXNzZXQuXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICAgKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdhcm5NaXNzaW5nXG4gICAqIEByZXR1cm4ge09iamVjdHxGdW5jdGlvbn1cbiAgICovXG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUFzc2V0KG9wdGlvbnMsIHR5cGUsIGlkLCB3YXJuTWlzc2luZykge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAgIHZhciBjYW1lbGl6ZWRJZDtcbiAgICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fFxuICAgICAgLy8gY2FtZWxDYXNlIElEXG4gICAgICBhc3NldHNbY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCldIHx8XG4gICAgICAvLyBQYXNjYWwgQ2FzZSBJRFxuICAgICAgYXNzZXRzW2NhbWVsaXplZElkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY2FtZWxpemVkSWQuc2xpY2UoMSldO1xuICAgIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgICAgd2FybignRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIHZhciB1aWQkMSA9IDA7XG5cbiAgLyoqXG4gICAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICAgKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGZ1bmN0aW9uIERlcCgpIHtcbiAgICB0aGlzLmlkID0gdWlkJDErKztcbiAgICB0aGlzLnN1YnMgPSBbXTtcbiAgfVxuXG4gIC8vIHRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbiAgLy8gdGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvbmx5IG9uZVxuICAvLyB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZCBhdCBhbnkgdGltZS5cbiAgRGVwLnRhcmdldCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEFkZCBhIGRpcmVjdGl2ZSBzdWJzY3JpYmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0RpcmVjdGl2ZX0gc3ViXG4gICAqL1xuXG4gIERlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24oc3ViKSB7XG4gICAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIGEgZGlyZWN0aXZlIHN1YnNjcmliZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7RGlyZWN0aXZlfSBzdWJcbiAgICovXG5cbiAgRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbihzdWIpIHtcbiAgICB0aGlzLnN1YnMuJHJlbW92ZShzdWIpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgc2VsZiBhcyBhIGRlcGVuZGVuY3kgdG8gdGhlIHRhcmdldCB3YXRjaGVyLlxuICAgKi9cblxuICBEZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBOb3RpZnkgYWxsIHN1YnNjcmliZXJzIG9mIGEgbmV3IHZhbHVlLlxuICAgKi9cblxuICBEZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIHN0YWJsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgICB2YXIgc3VicyA9IHRvQXJyYXkodGhpcy5zdWJzKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbiAgdmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90bylcblxuICAvKipcbiAgICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gICAqL1xuXG4gIDtcbiAgWydwdXNoJywgJ3BvcCcsICdzaGlmdCcsICd1bnNoaWZ0JywgJ3NwbGljZScsICdzb3J0JywgJ3JldmVyc2UnXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICAgIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IoKSB7XG4gICAgICAvLyBhdm9pZCBsZWFraW5nIGFyZ3VtZW50czpcbiAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2Nsb3N1cmUtd2l0aC1hcmd1bWVudHNcbiAgICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGkpO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgICBjYXNlICdwdXNoJzpcbiAgICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaW5zZXJ0ZWQpIG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7XG4gICAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICB9KTtcblxuICAvKipcbiAgICogU3dhcCB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXggd2l0aCBhIG5ldyB2YWx1ZVxuICAgKiBhbmQgZW1pdHMgY29ycmVzcG9uZGluZyBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAqIEBwYXJhbSB7Kn0gdmFsXG4gICAqIEByZXR1cm4geyp9IC0gcmVwbGFjZWQgZWxlbWVudFxuICAgKi9cblxuICBkZWYoYXJyYXlQcm90bywgJyRzZXQnLCBmdW5jdGlvbiAkc2V0KGluZGV4LCB2YWwpIHtcbiAgICBpZiAoaW5kZXggPj0gdGhpcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubGVuZ3RoID0gTnVtYmVyKGluZGV4KSArIDE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMSwgdmFsKVswXTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byByZW1vdmUgdGhlIGVsZW1lbnQgYXQgZ2l2ZW4gaW5kZXggb3IgdGFyZ2V0IGVsZW1lbnQgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGl0ZW1cbiAgICovXG5cbiAgZGVmKGFycmF5UHJvdG8sICckcmVtb3ZlJywgZnVuY3Rpb24gJHJlbW92ZShpdGVtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF0aGlzLmxlbmd0aCkgcmV0dXJuO1xuICAgIHZhciBpbmRleCA9IGluZGV4T2YodGhpcywgaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgd2hlbiBhIHJlYWN0aXZlIHByb3BlcnR5IGlzIHNldCwgdGhlIG5ldyB2YWx1ZSBpc1xuICAgKiBhbHNvIGNvbnZlcnRlZCB0byBiZWNvbWUgcmVhY3RpdmUuIEhvd2V2ZXIgaW4gY2VydGFpbiBjYXNlcywgZS5nLlxuICAgKiB2LWZvciBzY29wZSBhbGlhcyBhbmQgcHJvcHMsIHdlIGRvbid0IHdhbnQgdG8gZm9yY2UgY29udmVyc2lvblxuICAgKiBiZWNhdXNlIHRoZSB2YWx1ZSBtYXkgYmUgYSBuZXN0ZWQgdmFsdWUgdW5kZXIgYSBmcm96ZW4gZGF0YSBzdHJ1Y3R1cmUuXG4gICAqXG4gICAqIFNvIHdoZW5ldmVyIHdlIHdhbnQgdG8gc2V0IGEgcmVhY3RpdmUgcHJvcGVydHkgd2l0aG91dCBmb3JjaW5nXG4gICAqIGNvbnZlcnNpb24gb24gdGhlIG5ldyB2YWx1ZSwgd2Ugd3JhcCB0aGF0IGNhbGwgaW5zaWRlIHRoaXMgZnVuY3Rpb24uXG4gICAqL1xuXG4gIHZhciBzaG91bGRDb252ZXJ0ID0gdHJ1ZTtcblxuICBmdW5jdGlvbiB3aXRob3V0Q29udmVyc2lvbihmbikge1xuICAgIHNob3VsZENvbnZlcnQgPSBmYWxzZTtcbiAgICBmbigpO1xuICAgIHNob3VsZENvbnZlcnQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmVyIGNsYXNzIHRoYXQgYXJlIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAgICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGFyZ2V0XG4gICAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gICAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaGVzIHVwZGF0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSB2YWx1ZVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG5cbiAgZnVuY3Rpb24gT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gICAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YXIgYXVnbWVudCA9IGhhc1Byb3RvID8gcHJvdG9BdWdtZW50IDogY29weUF1Z21lbnQ7XG4gICAgICBhdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gSW5zdGFuY2UgbWV0aG9kc1xuXG4gIC8qKlxuICAgKiBXYWxrIHRocm91Z2ggZWFjaCBwcm9wZXJ0eSBhbmQgY29udmVydCB0aGVtIGludG9cbiAgICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gICAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gICAqL1xuXG4gIE9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMuY29udmVydChrZXlzW2ldLCBvYmpba2V5c1tpXV0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXG4gICAqL1xuXG4gIE9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbihpdGVtcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYSBwcm9wZXJ0eSBpbnRvIGdldHRlci9zZXR0ZXIgc28gd2UgY2FuIGVtaXRcbiAgICogdGhlIGV2ZW50cyB3aGVuIHRoZSBwcm9wZXJ0eSBpcyBhY2Nlc3NlZC9jaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Kn0gdmFsXG4gICAqL1xuXG4gIE9ic2VydmVyLnByb3RvdHlwZS5jb252ZXJ0ID0gZnVuY3Rpb24oa2V5LCB2YWwpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSh0aGlzLnZhbHVlLCBrZXksIHZhbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBvd25lciB2bSwgc28gdGhhdCB3aGVuICRzZXQvJGRlbGV0ZSBtdXRhdGlvbnNcbiAgICogaGFwcGVuIHdlIGNhbiBub3RpZnkgb3duZXIgdm1zIHRvIHByb3h5IHRoZSBrZXlzIGFuZFxuICAgKiBkaWdlc3QgdGhlIHdhdGNoZXJzLiBUaGlzIGlzIG9ubHkgY2FsbGVkIHdoZW4gdGhlIG9iamVjdFxuICAgKiBpcyBvYnNlcnZlZCBhcyBhbiBpbnN0YW5jZSdzIHJvb3QgJGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7VnVlfSB2bVxuICAgKi9cblxuICBPYnNlcnZlci5wcm90b3R5cGUuYWRkVm0gPSBmdW5jdGlvbih2bSkge1xuICAgICh0aGlzLnZtcyB8fCAodGhpcy52bXMgPSBbXSkpLnB1c2godm0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gb3duZXIgdm0uIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhlIG9iamVjdCBpc1xuICAgKiBzd2FwcGVkIG91dCBhcyBhbiBpbnN0YW5jZSdzICRkYXRhIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAqL1xuXG4gIE9ic2VydmVyLnByb3RvdHlwZS5yZW1vdmVWbSA9IGZ1bmN0aW9uKHZtKSB7XG4gICAgdGhpcy52bXMuJHJlbW92ZSh2bSk7XG4gIH07XG5cbiAgLy8gaGVscGVyc1xuXG4gIC8qKlxuICAgKiBBdWdtZW50IGFuIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gICAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSB0YXJnZXRcbiAgICogQHBhcmFtIHtPYmplY3R9IHNyY1xuICAgKi9cblxuICBmdW5jdGlvbiBwcm90b0F1Z21lbnQodGFyZ2V0LCBzcmMpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICAgIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xuICB9XG5cbiAgLyoqXG4gICAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICAgKiBoaWRkZW4gcHJvcGVydGllcy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IHRhcmdldFxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG9cbiAgICovXG5cbiAgZnVuY3Rpb24gY29weUF1Z21lbnQodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAgICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAgICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtWdWV9IFt2bV1cbiAgICogQHJldHVybiB7T2JzZXJ2ZXJ8dW5kZWZpbmVkfVxuICAgKiBAc3RhdGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9ic2VydmUodmFsdWUsIHZtKSB7XG4gICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBvYjtcbiAgICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICAgIH0gZWxzZSBpZiAoc2hvdWxkQ29udmVydCAmJiAoaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmICF2YWx1ZS5faXNWdWUpIHtcbiAgICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKG9iICYmIHZtKSB7XG4gICAgICBvYi5hZGRWbSh2bSk7XG4gICAgfVxuICAgIHJldHVybiBvYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgKiBAcGFyYW0geyp9IHZhbFxuICAgKi9cblxuICBmdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZShvYmosIGtleSwgdmFsKSB7XG4gICAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICAgIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICAgIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gICAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuXG4gICAgdmFyIGNoaWxkT2IgPSBvYnNlcnZlKHZhbCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlcigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGUsIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgIGUgPSB2YWx1ZVtpXTtcbiAgICAgICAgICAgICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyKG5ld1ZhbCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZE9iID0gb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgICBkZXAubm90aWZ5KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuXG5cbiAgdmFyIHV0aWwgPSBPYmplY3QuZnJlZXplKHtcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUsXG4gICAgc2V0OiBzZXQsXG4gICAgZGVsOiBkZWwsXG4gICAgaGFzT3duOiBoYXNPd24sXG4gICAgaXNMaXRlcmFsOiBpc0xpdGVyYWwsXG4gICAgaXNSZXNlcnZlZDogaXNSZXNlcnZlZCxcbiAgICBfdG9TdHJpbmc6IF90b1N0cmluZyxcbiAgICB0b051bWJlcjogdG9OdW1iZXIsXG4gICAgdG9Cb29sZWFuOiB0b0Jvb2xlYW4sXG4gICAgc3RyaXBRdW90ZXM6IHN0cmlwUXVvdGVzLFxuICAgIGNhbWVsaXplOiBjYW1lbGl6ZSxcbiAgICBoeXBoZW5hdGU6IGh5cGhlbmF0ZSxcbiAgICBjbGFzc2lmeTogY2xhc3NpZnksXG4gICAgYmluZDogYmluZCxcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICAgIGRlZjogZGVmLFxuICAgIGRlYm91bmNlOiBfZGVib3VuY2UsXG4gICAgaW5kZXhPZjogaW5kZXhPZixcbiAgICBjYW5jZWxsYWJsZTogY2FuY2VsbGFibGUsXG4gICAgbG9vc2VFcXVhbDogbG9vc2VFcXVhbCxcbiAgICBpc0FycmF5OiBpc0FycmF5LFxuICAgIGhhc1Byb3RvOiBoYXNQcm90byxcbiAgICBpbkJyb3dzZXI6IGluQnJvd3NlcixcbiAgICBkZXZ0b29sczogZGV2dG9vbHMsXG4gICAgaXNJRTogaXNJRSxcbiAgICBpc0lFOTogaXNJRTksXG4gICAgaXNBbmRyb2lkOiBpc0FuZHJvaWQsXG4gICAgaXNJb3M6IGlzSW9zLFxuICAgIGlvc1ZlcnNpb25NYXRjaDogaW9zVmVyc2lvbk1hdGNoLFxuICAgIGlvc1ZlcnNpb246IGlvc1ZlcnNpb24sXG4gICAgaGFzTXV0YXRpb25PYnNlcnZlckJ1ZzogaGFzTXV0YXRpb25PYnNlcnZlckJ1ZyxcbiAgICBnZXQgdHJhbnNpdGlvblByb3AoKSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvblByb3A7XG4gICAgfSxcbiAgICBnZXQgdHJhbnNpdGlvbkVuZEV2ZW50KCkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25FbmRFdmVudDtcbiAgICB9LFxuICAgIGdldCBhbmltYXRpb25Qcm9wKCkge1xuICAgICAgcmV0dXJuIGFuaW1hdGlvblByb3A7XG4gICAgfSxcbiAgICBnZXQgYW5pbWF0aW9uRW5kRXZlbnQoKSB7XG4gICAgICByZXR1cm4gYW5pbWF0aW9uRW5kRXZlbnQ7XG4gICAgfSxcbiAgICBuZXh0VGljazogbmV4dFRpY2ssXG4gICAgZ2V0IF9TZXQoKSB7XG4gICAgICByZXR1cm4gX1NldDtcbiAgICB9LFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBpbkRvYzogaW5Eb2MsXG4gICAgZ2V0QXR0cjogZ2V0QXR0cixcbiAgICBnZXRCaW5kQXR0cjogZ2V0QmluZEF0dHIsXG4gICAgaGFzQmluZEF0dHI6IGhhc0JpbmRBdHRyLFxuICAgIGJlZm9yZTogYmVmb3JlLFxuICAgIGFmdGVyOiBhZnRlcixcbiAgICByZW1vdmU6IHJlbW92ZSxcbiAgICBwcmVwZW5kOiBwcmVwZW5kLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgb246IG9uLFxuICAgIG9mZjogb2ZmLFxuICAgIHNldENsYXNzOiBzZXRDbGFzcyxcbiAgICBhZGRDbGFzczogYWRkQ2xhc3MsXG4gICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxuICAgIGV4dHJhY3RDb250ZW50OiBleHRyYWN0Q29udGVudCxcbiAgICB0cmltTm9kZTogdHJpbU5vZGUsXG4gICAgaXNUZW1wbGF0ZTogaXNUZW1wbGF0ZSxcbiAgICBjcmVhdGVBbmNob3I6IGNyZWF0ZUFuY2hvcixcbiAgICBmaW5kUmVmOiBmaW5kUmVmLFxuICAgIG1hcE5vZGVSYW5nZTogbWFwTm9kZVJhbmdlLFxuICAgIHJlbW92ZU5vZGVSYW5nZTogcmVtb3ZlTm9kZVJhbmdlLFxuICAgIGlzRnJhZ21lbnQ6IGlzRnJhZ21lbnQsXG4gICAgZ2V0T3V0ZXJIVE1MOiBnZXRPdXRlckhUTUwsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgcmVzb2x2ZUFzc2V0OiByZXNvbHZlQXNzZXQsXG4gICAgY2hlY2tDb21wb25lbnRBdHRyOiBjaGVja0NvbXBvbmVudEF0dHIsXG4gICAgY29tbW9uVGFnUkU6IGNvbW1vblRhZ1JFLFxuICAgIHJlc2VydmVkVGFnUkU6IHJlc2VydmVkVGFnUkUsXG4gICAgZ2V0IHdhcm4oKSB7XG4gICAgICByZXR1cm4gd2FybjtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciB1aWQgPSAwO1xuXG4gIGZ1bmN0aW9uIGluaXRNaXhpbihWdWUpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbWFpbiBpbml0IHNlcXVlbmNlLiBUaGlzIGlzIGNhbGxlZCBmb3IgZXZlcnlcbiAgICAgKiBpbnN0YW5jZSwgaW5jbHVkaW5nIG9uZXMgdGhhdCBhcmUgY3JlYXRlZCBmcm9tIGV4dGVuZGVkXG4gICAgICogY29uc3RydWN0b3JzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGlzIG9wdGlvbnMgb2JqZWN0IHNob3VsZCBiZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJlc3VsdCBvZiBtZXJnaW5nIGNsYXNzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zIGFuZCB0aGUgb3B0aW9ucyBwYXNzZWRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgdGhpcy4kZWwgPSBudWxsO1xuICAgICAgdGhpcy4kcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gICAgICB0aGlzLiRyb290ID0gdGhpcy4kcGFyZW50ID8gdGhpcy4kcGFyZW50LiRyb290IDogdGhpcztcbiAgICAgIHRoaXMuJGNoaWxkcmVuID0gW107XG4gICAgICB0aGlzLiRyZWZzID0ge307IC8vIGNoaWxkIHZtIHJlZmVyZW5jZXNcbiAgICAgIHRoaXMuJGVscyA9IHt9OyAvLyBlbGVtZW50IHJlZmVyZW5jZXNcbiAgICAgIHRoaXMuX3dhdGNoZXJzID0gW107IC8vIGFsbCB3YXRjaGVycyBhcyBhbiBhcnJheVxuICAgICAgdGhpcy5fZGlyZWN0aXZlcyA9IFtdOyAvLyBhbGwgZGlyZWN0aXZlc1xuXG4gICAgICAvLyBhIHVpZFxuICAgICAgdGhpcy5fdWlkID0gdWlkKys7XG5cbiAgICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgICB0aGlzLl9pc1Z1ZSA9IHRydWU7XG5cbiAgICAgIC8vIGV2ZW50cyBib29ra2VlcGluZ1xuICAgICAgdGhpcy5fZXZlbnRzID0ge307IC8vIHJlZ2lzdGVyZWQgY2FsbGJhY2tzXG4gICAgICB0aGlzLl9ldmVudHNDb3VudCA9IHt9OyAvLyBmb3IgJGJyb2FkY2FzdCBvcHRpbWl6YXRpb25cblxuICAgICAgLy8gZnJhZ21lbnQgaW5zdGFuY2UgcHJvcGVydGllc1xuICAgICAgdGhpcy5faXNGcmFnbWVudCA9IGZhbHNlO1xuICAgICAgdGhpcy5fZnJhZ21lbnQgPSAvLyBAdHlwZSB7RG9jdW1lbnRGcmFnbWVudH1cbiAgICAgICAgdGhpcy5fZnJhZ21lbnRTdGFydCA9IC8vIEB0eXBlIHtUZXh0fENvbW1lbnR9XG4gICAgICAgIHRoaXMuX2ZyYWdtZW50RW5kID0gbnVsbDsgLy8gQHR5cGUge1RleHR8Q29tbWVudH1cblxuICAgICAgLy8gbGlmZWN5Y2xlIHN0YXRlXG4gICAgICB0aGlzLl9pc0NvbXBpbGVkID0gdGhpcy5faXNEZXN0cm95ZWQgPSB0aGlzLl9pc1JlYWR5ID0gdGhpcy5faXNBdHRhY2hlZCA9IHRoaXMuX2lzQmVpbmdEZXN0cm95ZWQgPSB0aGlzLl92Rm9yUmVtb3ZpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3VubGlua0ZuID0gbnVsbDtcblxuICAgICAgLy8gY29udGV4dDpcbiAgICAgIC8vIGlmIHRoaXMgaXMgYSB0cmFuc2NsdWRlZCBjb21wb25lbnQsIGNvbnRleHRcbiAgICAgIC8vIHdpbGwgYmUgdGhlIGNvbW1vbiBwYXJlbnQgdm0gb2YgdGhpcyBpbnN0YW5jZVxuICAgICAgLy8gYW5kIGl0cyBob3N0LlxuICAgICAgdGhpcy5fY29udGV4dCA9IG9wdGlvbnMuX2NvbnRleHQgfHwgdGhpcy4kcGFyZW50O1xuXG4gICAgICAvLyBzY29wZTpcbiAgICAgIC8vIGlmIHRoaXMgaXMgaW5zaWRlIGFuIGlubGluZSB2LWZvciwgdGhlIHNjb3BlXG4gICAgICAvLyB3aWxsIGJlIHRoZSBpbnRlcm1lZGlhdGUgc2NvcGUgY3JlYXRlZCBmb3IgdGhpc1xuICAgICAgLy8gcmVwZWF0IGZyYWdtZW50LiB0aGlzIGlzIHVzZWQgZm9yIGxpbmtpbmcgcHJvcHNcbiAgICAgIC8vIGFuZCBjb250YWluZXIgZGlyZWN0aXZlcy5cbiAgICAgIHRoaXMuX3Njb3BlID0gb3B0aW9ucy5fc2NvcGU7XG5cbiAgICAgIC8vIGZyYWdtZW50OlxuICAgICAgLy8gaWYgdGhpcyBpbnN0YW5jZSBpcyBjb21waWxlZCBpbnNpZGUgYSBGcmFnbWVudCwgaXRcbiAgICAgIC8vIG5lZWRzIHRvIHJlaWdzdGVyIGl0c2VsZiBhcyBhIGNoaWxkIG9mIHRoYXQgZnJhZ21lbnRcbiAgICAgIC8vIGZvciBhdHRhY2gvZGV0YWNoIHRvIHdvcmsgcHJvcGVybHkuXG4gICAgICB0aGlzLl9mcmFnID0gb3B0aW9ucy5fZnJhZztcbiAgICAgIGlmICh0aGlzLl9mcmFnKSB7XG4gICAgICAgIHRoaXMuX2ZyYWcuY2hpbGRyZW4ucHVzaCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgLy8gcHVzaCBzZWxmIGludG8gcGFyZW50IC8gdHJhbnNjbHVzaW9uIGhvc3RcbiAgICAgIGlmICh0aGlzLiRwYXJlbnQpIHtcbiAgICAgICAgdGhpcy4kcGFyZW50LiRjaGlsZHJlbi5wdXNoKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICAvLyBtZXJnZSBvcHRpb25zLlxuICAgICAgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5jb25zdHJ1Y3Rvci5vcHRpb25zLCBvcHRpb25zLCB0aGlzKTtcblxuICAgICAgLy8gc2V0IHJlZlxuICAgICAgdGhpcy5fdXBkYXRlUmVmKCk7XG5cbiAgICAgIC8vIGluaXRpYWxpemUgZGF0YSBhcyBlbXB0eSBvYmplY3QuXG4gICAgICAvLyBpdCB3aWxsIGJlIGZpbGxlZCB1cCBpbiBfaW5pdERhdGEoKS5cbiAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgLy8gY2FsbCBpbml0IGhvb2tcbiAgICAgIHRoaXMuX2NhbGxIb29rKCdpbml0Jyk7XG5cbiAgICAgIC8vIGluaXRpYWxpemUgZGF0YSBvYnNlcnZhdGlvbiBhbmQgc2NvcGUgaW5oZXJpdGFuY2UuXG4gICAgICB0aGlzLl9pbml0U3RhdGUoKTtcblxuICAgICAgLy8gc2V0dXAgZXZlbnQgc3lzdGVtIGFuZCBvcHRpb24gZXZlbnRzLlxuICAgICAgdGhpcy5faW5pdEV2ZW50cygpO1xuXG4gICAgICAvLyBjYWxsIGNyZWF0ZWQgaG9va1xuICAgICAgdGhpcy5fY2FsbEhvb2soJ2NyZWF0ZWQnKTtcblxuICAgICAgLy8gaWYgYGVsYCBvcHRpb24gaXMgcGFzc2VkLCBzdGFydCBjb21waWxhdGlvbi5cbiAgICAgIGlmIChvcHRpb25zLmVsKSB7XG4gICAgICAgIHRoaXMuJG1vdW50KG9wdGlvbnMuZWwpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgcGF0aENhY2hlID0gbmV3IENhY2hlKDEwMDApO1xuXG4gIC8vIGFjdGlvbnNcbiAgdmFyIEFQUEVORCA9IDA7XG4gIHZhciBQVVNIID0gMTtcbiAgdmFyIElOQ19TVUJfUEFUSF9ERVBUSCA9IDI7XG4gIHZhciBQVVNIX1NVQl9QQVRIID0gMztcblxuICAvLyBzdGF0ZXNcbiAgdmFyIEJFRk9SRV9QQVRIID0gMDtcbiAgdmFyIElOX1BBVEggPSAxO1xuICB2YXIgQkVGT1JFX0lERU5UID0gMjtcbiAgdmFyIElOX0lERU5UID0gMztcbiAgdmFyIElOX1NVQl9QQVRIID0gNDtcbiAgdmFyIElOX1NJTkdMRV9RVU9URSA9IDU7XG4gIHZhciBJTl9ET1VCTEVfUVVPVEUgPSA2O1xuICB2YXIgQUZURVJfUEFUSCA9IDc7XG4gIHZhciBFUlJPUiA9IDg7XG5cbiAgdmFyIHBhdGhTdGF0ZU1hY2hpbmUgPSBbXTtcblxuICBwYXRoU3RhdGVNYWNoaW5lW0JFRk9SRV9QQVRIXSA9IHtcbiAgICAnd3MnOiBbQkVGT1JFX1BBVEhdLFxuICAgICdpZGVudCc6IFtJTl9JREVOVCwgQVBQRU5EXSxcbiAgICAnWyc6IFtJTl9TVUJfUEFUSF0sXG4gICAgJ2VvZic6IFtBRlRFUl9QQVRIXVxuICB9O1xuXG4gIHBhdGhTdGF0ZU1hY2hpbmVbSU5fUEFUSF0gPSB7XG4gICAgJ3dzJzogW0lOX1BBVEhdLFxuICAgICcuJzogW0JFRk9SRV9JREVOVF0sXG4gICAgJ1snOiBbSU5fU1VCX1BBVEhdLFxuICAgICdlb2YnOiBbQUZURVJfUEFUSF1cbiAgfTtcblxuICBwYXRoU3RhdGVNYWNoaW5lW0JFRk9SRV9JREVOVF0gPSB7XG4gICAgJ3dzJzogW0JFRk9SRV9JREVOVF0sXG4gICAgJ2lkZW50JzogW0lOX0lERU5ULCBBUFBFTkRdXG4gIH07XG5cbiAgcGF0aFN0YXRlTWFjaGluZVtJTl9JREVOVF0gPSB7XG4gICAgJ2lkZW50JzogW0lOX0lERU5ULCBBUFBFTkRdLFxuICAgICcwJzogW0lOX0lERU5ULCBBUFBFTkRdLFxuICAgICdudW1iZXInOiBbSU5fSURFTlQsIEFQUEVORF0sXG4gICAgJ3dzJzogW0lOX1BBVEgsIFBVU0hdLFxuICAgICcuJzogW0JFRk9SRV9JREVOVCwgUFVTSF0sXG4gICAgJ1snOiBbSU5fU1VCX1BBVEgsIFBVU0hdLFxuICAgICdlb2YnOiBbQUZURVJfUEFUSCwgUFVTSF1cbiAgfTtcblxuICBwYXRoU3RhdGVNYWNoaW5lW0lOX1NVQl9QQVRIXSA9IHtcbiAgICBcIidcIjogW0lOX1NJTkdMRV9RVU9URSwgQVBQRU5EXSxcbiAgICAnXCInOiBbSU5fRE9VQkxFX1FVT1RFLCBBUFBFTkRdLFxuICAgICdbJzogW0lOX1NVQl9QQVRILCBJTkNfU1VCX1BBVEhfREVQVEhdLFxuICAgICddJzogW0lOX1BBVEgsIFBVU0hfU1VCX1BBVEhdLFxuICAgICdlb2YnOiBFUlJPUixcbiAgICAnZWxzZSc6IFtJTl9TVUJfUEFUSCwgQVBQRU5EXVxuICB9O1xuXG4gIHBhdGhTdGF0ZU1hY2hpbmVbSU5fU0lOR0xFX1FVT1RFXSA9IHtcbiAgICBcIidcIjogW0lOX1NVQl9QQVRILCBBUFBFTkRdLFxuICAgICdlb2YnOiBFUlJPUixcbiAgICAnZWxzZSc6IFtJTl9TSU5HTEVfUVVPVEUsIEFQUEVORF1cbiAgfTtcblxuICBwYXRoU3RhdGVNYWNoaW5lW0lOX0RPVUJMRV9RVU9URV0gPSB7XG4gICAgJ1wiJzogW0lOX1NVQl9QQVRILCBBUFBFTkRdLFxuICAgICdlb2YnOiBFUlJPUixcbiAgICAnZWxzZSc6IFtJTl9ET1VCTEVfUVVPVEUsIEFQUEVORF1cbiAgfTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGEgY2hhcmFjdGVyIGluIGEga2V5cGF0aC5cbiAgICpcbiAgICogQHBhcmFtIHtDaGFyfSBjaFxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IHR5cGVcbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0UGF0aENoYXJUeXBlKGNoKSB7XG4gICAgaWYgKGNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnZW9mJztcbiAgICB9XG5cbiAgICB2YXIgY29kZSA9IGNoLmNoYXJDb2RlQXQoMCk7XG5cbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgIGNhc2UgMHg1QjogLy8gW1xuICAgICAgY2FzZSAweDVEOiAvLyBdXG4gICAgICBjYXNlIDB4MkU6IC8vIC5cbiAgICAgIGNhc2UgMHgyMjogLy8gXCJcbiAgICAgIGNhc2UgMHgyNzogLy8gJ1xuICAgICAgY2FzZSAweDMwOlxuICAgICAgICAvLyAwXG4gICAgICAgIHJldHVybiBjaDtcblxuICAgICAgY2FzZSAweDVGOiAvLyBfXG4gICAgICBjYXNlIDB4MjQ6XG4gICAgICAgIC8vICRcbiAgICAgICAgcmV0dXJuICdpZGVudCc7XG5cbiAgICAgIGNhc2UgMHgyMDogLy8gU3BhY2VcbiAgICAgIGNhc2UgMHgwOTogLy8gVGFiXG4gICAgICBjYXNlIDB4MEE6IC8vIE5ld2xpbmVcbiAgICAgIGNhc2UgMHgwRDogLy8gUmV0dXJuXG4gICAgICBjYXNlIDB4QTA6IC8vIE5vLWJyZWFrIHNwYWNlXG4gICAgICBjYXNlIDB4RkVGRjogLy8gQnl0ZSBPcmRlciBNYXJrXG4gICAgICBjYXNlIDB4MjAyODogLy8gTGluZSBTZXBhcmF0b3JcbiAgICAgIGNhc2UgMHgyMDI5OlxuICAgICAgICAvLyBQYXJhZ3JhcGggU2VwYXJhdG9yXG4gICAgICAgIHJldHVybiAnd3MnO1xuICAgIH1cblxuICAgIC8vIGEteiwgQS1aXG4gICAgaWYgKGNvZGUgPj0gMHg2MSAmJiBjb2RlIDw9IDB4N0EgfHwgY29kZSA+PSAweDQxICYmIGNvZGUgPD0gMHg1QSkge1xuICAgICAgcmV0dXJuICdpZGVudCc7XG4gICAgfVxuXG4gICAgLy8gMS05XG4gICAgaWYgKGNvZGUgPj0gMHgzMSAmJiBjb2RlIDw9IDB4MzkpIHtcbiAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICB9XG5cbiAgICByZXR1cm4gJ2Vsc2UnO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdCBhIHN1YlBhdGgsIHJldHVybiBpdHMgcGxhaW4gZm9ybSBpZiBpdCBpc1xuICAgKiBhIGxpdGVyYWwgc3RyaW5nIG9yIG51bWJlci4gT3RoZXJ3aXNlIHByZXBlbmQgdGhlXG4gICAqIGR5bmFtaWMgaW5kaWNhdG9yICgqKS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cblxuICBmdW5jdGlvbiBmb3JtYXRTdWJQYXRoKHBhdGgpIHtcbiAgICB2YXIgdHJpbW1lZCA9IHBhdGgudHJpbSgpO1xuICAgIC8vIGludmFsaWQgbGVhZGluZyAwXG4gICAgaWYgKHBhdGguY2hhckF0KDApID09PSAnMCcgJiYgaXNOYU4ocGF0aCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzTGl0ZXJhbCh0cmltbWVkKSA/IHN0cmlwUXVvdGVzKHRyaW1tZWQpIDogJyonICsgdHJpbW1lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBhIHN0cmluZyBwYXRoIGludG8gYW4gYXJyYXkgb2Ygc2VnbWVudHNcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAgICogQHJldHVybiB7QXJyYXl8dW5kZWZpbmVkfVxuICAgKi9cblxuICBmdW5jdGlvbiBwYXJzZShwYXRoKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICB2YXIgaW5kZXggPSAtMTtcbiAgICB2YXIgbW9kZSA9IEJFRk9SRV9QQVRIO1xuICAgIHZhciBzdWJQYXRoRGVwdGggPSAwO1xuICAgIHZhciBjLCBuZXdDaGFyLCBrZXksIHR5cGUsIHRyYW5zaXRpb24sIGFjdGlvbiwgdHlwZU1hcDtcblxuICAgIHZhciBhY3Rpb25zID0gW107XG5cbiAgICBhY3Rpb25zW1BVU0hdID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIGtleSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgYWN0aW9uc1tBUFBFTkRdID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5ID0gbmV3Q2hhcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleSArPSBuZXdDaGFyO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBhY3Rpb25zW0lOQ19TVUJfUEFUSF9ERVBUSF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIGFjdGlvbnNbQVBQRU5EXSgpO1xuICAgICAgc3ViUGF0aERlcHRoKys7XG4gICAgfTtcblxuICAgIGFjdGlvbnNbUFVTSF9TVUJfUEFUSF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzdWJQYXRoRGVwdGggPiAwKSB7XG4gICAgICAgIHN1YlBhdGhEZXB0aC0tO1xuICAgICAgICBtb2RlID0gSU5fU1VCX1BBVEg7XG4gICAgICAgIGFjdGlvbnNbQVBQRU5EXSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3ViUGF0aERlcHRoID0gMDtcbiAgICAgICAga2V5ID0gZm9ybWF0U3ViUGF0aChrZXkpO1xuICAgICAgICBpZiAoa2V5ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY3Rpb25zW1BVU0hdKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWF5YmVVbmVzY2FwZVF1b3RlKCkge1xuICAgICAgdmFyIG5leHRDaGFyID0gcGF0aFtpbmRleCArIDFdO1xuICAgICAgaWYgKG1vZGUgPT09IElOX1NJTkdMRV9RVU9URSAmJiBuZXh0Q2hhciA9PT0gXCInXCIgfHwgbW9kZSA9PT0gSU5fRE9VQkxFX1FVT1RFICYmIG5leHRDaGFyID09PSAnXCInKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIG5ld0NoYXIgPSAnXFxcXCcgKyBuZXh0Q2hhcjtcbiAgICAgICAgYWN0aW9uc1tBUFBFTkRdKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHdoaWxlIChtb2RlICE9IG51bGwpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgICBjID0gcGF0aFtpbmRleF07XG5cbiAgICAgIGlmIChjID09PSAnXFxcXCcgJiYgbWF5YmVVbmVzY2FwZVF1b3RlKCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSBnZXRQYXRoQ2hhclR5cGUoYyk7XG4gICAgICB0eXBlTWFwID0gcGF0aFN0YXRlTWFjaGluZVttb2RlXTtcbiAgICAgIHRyYW5zaXRpb24gPSB0eXBlTWFwW3R5cGVdIHx8IHR5cGVNYXBbJ2Vsc2UnXSB8fCBFUlJPUjtcblxuICAgICAgaWYgKHRyYW5zaXRpb24gPT09IEVSUk9SKSB7XG4gICAgICAgIHJldHVybjsgLy8gcGFyc2UgZXJyb3JcbiAgICAgIH1cblxuICAgICAgbW9kZSA9IHRyYW5zaXRpb25bMF07XG4gICAgICBhY3Rpb24gPSBhY3Rpb25zW3RyYW5zaXRpb25bMV1dO1xuICAgICAgaWYgKGFjdGlvbikge1xuICAgICAgICBuZXdDaGFyID0gdHJhbnNpdGlvblsyXTtcbiAgICAgICAgbmV3Q2hhciA9IG5ld0NoYXIgPT09IHVuZGVmaW5lZCA/IGMgOiBuZXdDaGFyO1xuICAgICAgICBpZiAoYWN0aW9uKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlID09PSBBRlRFUl9QQVRIKSB7XG4gICAgICAgIGtleXMucmF3ID0gcGF0aDtcbiAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dGVybmFsIHBhcnNlIHRoYXQgY2hlY2sgZm9yIGEgY2FjaGUgaGl0IGZpcnN0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gICAqIEByZXR1cm4ge0FycmF5fHVuZGVmaW5lZH1cbiAgICovXG5cbiAgZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgICB2YXIgaGl0ID0gcGF0aENhY2hlLmdldChwYXRoKTtcbiAgICBpZiAoIWhpdCkge1xuICAgICAgaGl0ID0gcGFyc2UocGF0aCk7XG4gICAgICBpZiAoaGl0KSB7XG4gICAgICAgIHBhdGhDYWNoZS5wdXQocGF0aCwgaGl0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhpdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZnJvbSBhbiBvYmplY3QgZnJvbSBhIHBhdGggc3RyaW5nXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgpIHtcbiAgICByZXR1cm4gcGFyc2VFeHByZXNzaW9uKHBhdGgpLmdldChvYmopO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhcm4gYWdhaW5zdCBzZXR0aW5nIG5vbi1leGlzdGVudCByb290IHBhdGggb24gYSB2bS5cbiAgICovXG5cbiAgdmFyIHdhcm5Ob25FeGlzdGVudDtcbiAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm5Ob25FeGlzdGVudCA9IGZ1bmN0aW9uKHBhdGgsIHZtKSB7XG4gICAgICB3YXJuKCdZb3UgYXJlIHNldHRpbmcgYSBub24tZXhpc3RlbnQgcGF0aCBcIicgKyBwYXRoLnJhdyArICdcIiAnICsgJ29uIGEgdm0gaW5zdGFuY2UuIENvbnNpZGVyIHByZS1pbml0aWFsaXppbmcgdGhlIHByb3BlcnR5ICcgKyAnd2l0aCB0aGUgXCJkYXRhXCIgb3B0aW9uIGZvciBtb3JlIHJlbGlhYmxlIHJlYWN0aXZpdHkgJyArICdhbmQgYmV0dGVyIHBlcmZvcm1hbmNlLicsIHZtKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvbiBhbiBvYmplY3QgZnJvbSBhIHBhdGhcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgKiBAcGFyYW0ge1N0cmluZyB8IEFycmF5fSBwYXRoXG4gICAqIEBwYXJhbSB7Kn0gdmFsXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHNldFBhdGgob2JqLCBwYXRoLCB2YWwpIHtcbiAgICB2YXIgb3JpZ2luYWwgPSBvYmo7XG4gICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgcGF0aCA9IHBhcnNlKHBhdGgpO1xuICAgIH1cbiAgICBpZiAoIXBhdGggfHwgIWlzT2JqZWN0KG9iaikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGxhc3QsIGtleTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBhdGgubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsYXN0ID0gb2JqO1xuICAgICAga2V5ID0gcGF0aFtpXTtcbiAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnKicpIHtcbiAgICAgICAga2V5ID0gcGFyc2VFeHByZXNzaW9uKGtleS5zbGljZSgxKSkuZ2V0LmNhbGwob3JpZ2luYWwsIG9yaWdpbmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChpIDwgbCAtIDEpIHtcbiAgICAgICAgb2JqID0gb2JqW2tleV07XG4gICAgICAgIGlmICghaXNPYmplY3Qob2JqKSkge1xuICAgICAgICAgIG9iaiA9IHt9O1xuICAgICAgICAgIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgbGFzdC5faXNWdWUpIHtcbiAgICAgICAgICAgIHdhcm5Ob25FeGlzdGVudChwYXRoLCBsYXN0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0KGxhc3QsIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICAgIG9iai4kc2V0KGtleSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiBvYmouX2lzVnVlKSB7XG4gICAgICAgICAgICB3YXJuTm9uRXhpc3RlbnQocGF0aCwgb2JqKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0KG9iaiwga2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHBhdGggPSBPYmplY3QuZnJlZXplKHtcbiAgICBwYXJzZVBhdGg6IHBhcnNlUGF0aCxcbiAgICBnZXRQYXRoOiBnZXRQYXRoLFxuICAgIHNldFBhdGg6IHNldFBhdGhcbiAgfSk7XG5cbiAgdmFyIGV4cHJlc3Npb25DYWNoZSA9IG5ldyBDYWNoZSgxMDAwKTtcblxuICB2YXIgYWxsb3dlZEtleXdvcmRzID0gJ01hdGgsRGF0ZSx0aGlzLHRydWUsZmFsc2UsbnVsbCx1bmRlZmluZWQsSW5maW5pdHksTmFOLCcgKyAnaXNOYU4saXNGaW5pdGUsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksJyArICdlbmNvZGVVUklDb21wb25lbnQscGFyc2VJbnQscGFyc2VGbG9hdCc7XG4gIHZhciBhbGxvd2VkS2V5d29yZHNSRSA9IG5ldyBSZWdFeHAoJ14oJyArIGFsbG93ZWRLZXl3b3Jkcy5yZXBsYWNlKC8sL2csICdcXFxcYnwnKSArICdcXFxcYiknKTtcblxuICAvLyBrZXl3b3JkcyB0aGF0IGRvbid0IG1ha2Ugc2Vuc2UgaW5zaWRlIGV4cHJlc3Npb25zXG4gIHZhciBpbXByb3BlcktleXdvcmRzID0gJ2JyZWFrLGNhc2UsY2xhc3MsY2F0Y2gsY29uc3QsY29udGludWUsZGVidWdnZXIsZGVmYXVsdCwnICsgJ2RlbGV0ZSxkbyxlbHNlLGV4cG9ydCxleHRlbmRzLGZpbmFsbHksZm9yLGZ1bmN0aW9uLGlmLCcgKyAnaW1wb3J0LGluLGluc3RhbmNlb2YsbGV0LHJldHVybixzdXBlcixzd2l0Y2gsdGhyb3csdHJ5LCcgKyAndmFyLHdoaWxlLHdpdGgseWllbGQsZW51bSxhd2FpdCxpbXBsZW1lbnRzLHBhY2thZ2UsJyArICdwcm90ZWN0ZWQsc3RhdGljLGludGVyZmFjZSxwcml2YXRlLHB1YmxpYyc7XG4gIHZhciBpbXByb3BlcktleXdvcmRzUkUgPSBuZXcgUmVnRXhwKCdeKCcgKyBpbXByb3BlcktleXdvcmRzLnJlcGxhY2UoLywvZywgJ1xcXFxifCcpICsgJ1xcXFxiKScpO1xuXG4gIHZhciB3c1JFID0gL1xccy9nO1xuICB2YXIgbmV3bGluZVJFID0gL1xcbi9nO1xuICB2YXIgc2F2ZVJFID0gL1tcXHssXVxccypbXFx3XFwkX10rXFxzKjp8KCcoPzpbXidcXFxcXXxcXFxcLikqJ3xcIig/OlteXCJcXFxcXXxcXFxcLikqXCJ8YCg/OlteYFxcXFxdfFxcXFwuKSpcXCRcXHt8XFx9KD86W15gXFxcXF18XFxcXC4pKmB8YCg/OlteYFxcXFxdfFxcXFwuKSpgKXxuZXcgfHR5cGVvZiB8dm9pZCAvZztcbiAgdmFyIHJlc3RvcmVSRSA9IC9cIihcXGQrKVwiL2c7XG4gIHZhciBwYXRoVGVzdFJFID0gL15bQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWycuKj8nXFxdfFxcW1wiLio/XCJcXF18XFxbXFxkK1xcXXxcXFtbQS1aYS16XyRdW1xcdyRdKlxcXSkqJC87XG4gIHZhciBpZGVudFJFID0gL1teXFx3JFxcLl0oPzpbQS1aYS16XyRdW1xcdyRdKikvZztcbiAgdmFyIGxpdGVyYWxWYWx1ZVJFJDEgPSAvXig/OnRydWV8ZmFsc2V8bnVsbHx1bmRlZmluZWR8SW5maW5pdHl8TmFOKSQvO1xuXG4gIGZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4gIC8qKlxuICAgKiBTYXZlIC8gUmV3cml0ZSAvIFJlc3RvcmVcbiAgICpcbiAgICogV2hlbiByZXdyaXRpbmcgcGF0aHMgZm91bmQgaW4gYW4gZXhwcmVzc2lvbiwgaXQgaXNcbiAgICogcG9zc2libGUgZm9yIHRoZSBzYW1lIGxldHRlciBzZXF1ZW5jZXMgdG8gYmUgZm91bmQgaW5cbiAgICogc3RyaW5ncyBhbmQgT2JqZWN0IGxpdGVyYWwgcHJvcGVydHkga2V5cy4gVGhlcmVmb3JlIHdlXG4gICAqIHJlbW92ZSBhbmQgc3RvcmUgdGhlc2UgcGFydHMgaW4gYSB0ZW1wb3JhcnkgYXJyYXksIGFuZFxuICAgKiByZXN0b3JlIHRoZW0gYWZ0ZXIgdGhlIHBhdGggcmV3cml0ZS5cbiAgICovXG5cbiAgdmFyIHNhdmVkID0gW107XG5cbiAgLyoqXG4gICAqIFNhdmUgcmVwbGFjZXJcbiAgICpcbiAgICogVGhlIHNhdmUgcmVnZXggY2FuIG1hdGNoIHR3byBwb3NzaWJsZSBjYXNlczpcbiAgICogMS4gQW4gb3BlbmluZyBvYmplY3QgbGl0ZXJhbFxuICAgKiAyLiBBIHN0cmluZ1xuICAgKiBJZiBtYXRjaGVkIGFzIGEgcGxhaW4gc3RyaW5nLCB3ZSBuZWVkIHRvIGVzY2FwZSBpdHNcbiAgICogbmV3bGluZXMsIHNpbmNlIHRoZSBzdHJpbmcgbmVlZHMgdG8gYmUgcHJlc2VydmVkIHdoZW5cbiAgICogZ2VuZXJhdGluZyB0aGUgZnVuY3Rpb24gYm9keS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAgKiBAcGFyYW0ge1N0cmluZ30gaXNTdHJpbmcgLSBzdHIgaWYgbWF0Y2hlZCBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtTdHJpbmd9IC0gcGxhY2Vob2xkZXIgd2l0aCBpbmRleFxuICAgKi9cblxuICBmdW5jdGlvbiBzYXZlKHN0ciwgaXNTdHJpbmcpIHtcbiAgICB2YXIgaSA9IHNhdmVkLmxlbmd0aDtcbiAgICBzYXZlZFtpXSA9IGlzU3RyaW5nID8gc3RyLnJlcGxhY2UobmV3bGluZVJFLCAnXFxcXG4nKSA6IHN0cjtcbiAgICByZXR1cm4gJ1wiJyArIGkgKyAnXCInO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdGggcmV3cml0ZSByZXBsYWNlclxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcmF3XG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG5cbiAgZnVuY3Rpb24gcmV3cml0ZShyYXcpIHtcbiAgICB2YXIgYyA9IHJhdy5jaGFyQXQoMCk7XG4gICAgdmFyIHBhdGggPSByYXcuc2xpY2UoMSk7XG4gICAgaWYgKGFsbG93ZWRLZXl3b3Jkc1JFLnRlc3QocGF0aCkpIHtcbiAgICAgIHJldHVybiByYXc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGggPSBwYXRoLmluZGV4T2YoJ1wiJykgPiAtMSA/IHBhdGgucmVwbGFjZShyZXN0b3JlUkUsIHJlc3RvcmUpIDogcGF0aDtcbiAgICAgIHJldHVybiBjICsgJ3Njb3BlLicgKyBwYXRoO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0b3JlIHJlcGxhY2VyXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGkgLSBtYXRjaGVkIHNhdmUgaW5kZXhcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cblxuICBmdW5jdGlvbiByZXN0b3JlKHN0ciwgaSkge1xuICAgIHJldHVybiBzYXZlZFtpXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXdyaXRlIGFuIGV4cHJlc3Npb24sIHByZWZpeGluZyBhbGwgcGF0aCBhY2Nlc3NvcnMgd2l0aFxuICAgKiBgc2NvcGUuYCBhbmQgZ2VuZXJhdGUgZ2V0dGVyL3NldHRlciBmdW5jdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBleHBcbiAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGVHZXR0ZXIoZXhwKSB7XG4gICAgaWYgKGltcHJvcGVyS2V5d29yZHNSRS50ZXN0KGV4cCkpIHtcbiAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdBdm9pZCB1c2luZyByZXNlcnZlZCBrZXl3b3JkcyBpbiBleHByZXNzaW9uOiAnICsgZXhwKTtcbiAgICB9XG4gICAgLy8gcmVzZXQgc3RhdGVcbiAgICBzYXZlZC5sZW5ndGggPSAwO1xuICAgIC8vIHNhdmUgc3RyaW5ncyBhbmQgb2JqZWN0IGxpdGVyYWwga2V5c1xuICAgIHZhciBib2R5ID0gZXhwLnJlcGxhY2Uoc2F2ZVJFLCBzYXZlKS5yZXBsYWNlKHdzUkUsICcnKTtcbiAgICAvLyByZXdyaXRlIGFsbCBwYXRoc1xuICAgIC8vIHBhZCAxIHNwYWNlIGhlcmUgYmVjYXVzZSB0aGUgcmVnZXggbWF0Y2hlcyAxIGV4dHJhIGNoYXJcbiAgICBib2R5ID0gKCcgJyArIGJvZHkpLnJlcGxhY2UoaWRlbnRSRSwgcmV3cml0ZSkucmVwbGFjZShyZXN0b3JlUkUsIHJlc3RvcmUpO1xuICAgIHJldHVybiBtYWtlR2V0dGVyRm4oYm9keSk7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGQgYSBnZXR0ZXIgZnVuY3Rpb24uIFJlcXVpcmVzIGV2YWwuXG4gICAqXG4gICAqIFdlIGlzb2xhdGUgdGhlIHRyeS9jYXRjaCBzbyBpdCBkb2Vzbid0IGFmZmVjdCB0aGVcbiAgICogb3B0aW1pemF0aW9uIG9mIHRoZSBwYXJzZSBmdW5jdGlvbiB3aGVuIGl0IGlzIG5vdCBjYWxsZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBib2R5XG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufHVuZGVmaW5lZH1cbiAgICovXG5cbiAgZnVuY3Rpb24gbWFrZUdldHRlckZuKGJvZHkpIHtcbiAgICB0cnkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tbmV3LWZ1bmMgKi9cbiAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oJ3Njb3BlJywgJ3JldHVybiAnICsgYm9keSArICc7Jyk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLW5ldy1mdW5jICovXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGUudG9TdHJpbmcoKS5tYXRjaCgvdW5zYWZlLWV2YWx8Q1NQLykpIHtcbiAgICAgICAgICB3YXJuKCdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBkZWZhdWx0IGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiBlbnZpcm9ubWVudCAnICsgJ3dpdGggQ29udGVudCBTZWN1cml0eSBQb2xpY3kgdGhhdCBwcm9oaWJpdHMgdW5zYWZlLWV2YWwuICcgKyAnVXNlIHRoZSBDU1AtY29tcGxpYW50IGJ1aWxkIGluc3RlYWQ6ICcgKyAnaHR0cDovL3Z1ZWpzLm9yZy9ndWlkZS9pbnN0YWxsYXRpb24uaHRtbCNDU1AtY29tcGxpYW50LWJ1aWxkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybignSW52YWxpZCBleHByZXNzaW9uLiAnICsgJ0dlbmVyYXRlZCBmdW5jdGlvbiBib2R5OiAnICsgYm9keSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBub29wO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb21waWxlIGEgc2V0dGVyIGZ1bmN0aW9uIGZvciB0aGUgZXhwcmVzc2lvbi5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV4cFxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbnx1bmRlZmluZWR9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGVTZXR0ZXIoZXhwKSB7XG4gICAgdmFyIHBhdGggPSBwYXJzZVBhdGgoZXhwKTtcbiAgICBpZiAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCB2YWwpIHtcbiAgICAgICAgc2V0UGF0aChzY29wZSwgcGF0aCwgdmFsKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdJbnZhbGlkIHNldHRlciBleHByZXNzaW9uOiAnICsgZXhwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgYW4gZXhwcmVzc2lvbiBpbnRvIHJlLXdyaXR0ZW4gZ2V0dGVyL3NldHRlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBleHBcbiAgICogQHBhcmFtIHtCb29sZWFufSBuZWVkU2V0XG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgKi9cblxuICBmdW5jdGlvbiBwYXJzZUV4cHJlc3Npb24oZXhwLCBuZWVkU2V0KSB7XG4gICAgZXhwID0gZXhwLnRyaW0oKTtcbiAgICAvLyB0cnkgY2FjaGVcbiAgICB2YXIgaGl0ID0gZXhwcmVzc2lvbkNhY2hlLmdldChleHApO1xuICAgIGlmIChoaXQpIHtcbiAgICAgIGlmIChuZWVkU2V0ICYmICFoaXQuc2V0KSB7XG4gICAgICAgIGhpdC5zZXQgPSBjb21waWxlU2V0dGVyKGhpdC5leHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhpdDtcbiAgICB9XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgIGV4cDogZXhwXG4gICAgfTtcbiAgICByZXMuZ2V0ID0gaXNTaW1wbGVQYXRoKGV4cCkgJiYgZXhwLmluZGV4T2YoJ1snKSA8IDBcbiAgICAgIC8vIG9wdGltaXplZCBzdXBlciBzaW1wbGUgZ2V0dGVyXG4gICAgICA/IG1ha2VHZXR0ZXJGbignc2NvcGUuJyArIGV4cClcbiAgICAgIC8vIGR5bmFtaWMgZ2V0dGVyXG4gICAgICA6IGNvbXBpbGVHZXR0ZXIoZXhwKTtcbiAgICBpZiAobmVlZFNldCkge1xuICAgICAgcmVzLnNldCA9IGNvbXBpbGVTZXR0ZXIoZXhwKTtcbiAgICB9XG4gICAgZXhwcmVzc2lvbkNhY2hlLnB1dChleHAsIHJlcyk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBleHByZXNzaW9uIGlzIGEgc2ltcGxlIHBhdGguXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBleHBcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG5cbiAgZnVuY3Rpb24gaXNTaW1wbGVQYXRoKGV4cCkge1xuICAgIHJldHVybiBwYXRoVGVzdFJFLnRlc3QoZXhwKSAmJlxuICAgICAgLy8gZG9uJ3QgdHJlYXQgbGl0ZXJhbCB2YWx1ZXMgYXMgcGF0aHNcbiAgICAgICFsaXRlcmFsVmFsdWVSRSQxLnRlc3QoZXhwKSAmJlxuICAgICAgLy8gTWF0aCBjb25zdGFudHMgZS5nLiBNYXRoLlBJLCBNYXRoLkUgZXRjLlxuICAgICAgZXhwLnNsaWNlKDAsIDUpICE9PSAnTWF0aC4nO1xuICB9XG5cbiAgdmFyIGV4cHJlc3Npb24gPSBPYmplY3QuZnJlZXplKHtcbiAgICBwYXJzZUV4cHJlc3Npb246IHBhcnNlRXhwcmVzc2lvbixcbiAgICBpc1NpbXBsZVBhdGg6IGlzU2ltcGxlUGF0aFxuICB9KTtcblxuICAvLyB3ZSBoYXZlIHR3byBzZXBhcmF0ZSBxdWV1ZXM6IG9uZSBmb3IgZGlyZWN0aXZlIHVwZGF0ZXNcbiAgLy8gYW5kIG9uZSBmb3IgdXNlciB3YXRjaGVyIHJlZ2lzdGVyZWQgdmlhICR3YXRjaCgpLlxuICAvLyB3ZSB3YW50IHRvIGd1YXJhbnRlZSBkaXJlY3RpdmUgdXBkYXRlcyB0byBiZSBjYWxsZWRcbiAgLy8gYmVmb3JlIHVzZXIgd2F0Y2hlcnMgc28gdGhhdCB3aGVuIHVzZXIgd2F0Y2hlcnMgYXJlXG4gIC8vIHRyaWdnZXJlZCwgdGhlIERPTSB3b3VsZCBoYXZlIGFscmVhZHkgYmVlbiBpbiB1cGRhdGVkXG4gIC8vIHN0YXRlLlxuXG4gIHZhciBxdWV1ZSA9IFtdO1xuICB2YXIgdXNlclF1ZXVlID0gW107XG4gIHZhciBoYXMgPSB7fTtcbiAgdmFyIGNpcmN1bGFyID0ge307XG4gIHZhciB3YWl0aW5nID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBiYXRjaGVyJ3Mgc3RhdGUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlc2V0QmF0Y2hlclN0YXRlKCkge1xuICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgdXNlclF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgaGFzID0ge307XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgICB3YWl0aW5nID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGZsdXNoQmF0Y2hlclF1ZXVlKCkge1xuICAgIHZhciBfYWdhaW4gPSB0cnVlO1xuXG4gICAgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7XG4gICAgICBfYWdhaW4gPSBmYWxzZTtcblxuICAgICAgcnVuQmF0Y2hlclF1ZXVlKHF1ZXVlKTtcbiAgICAgIHJ1bkJhdGNoZXJRdWV1ZSh1c2VyUXVldWUpO1xuICAgICAgLy8gdXNlciB3YXRjaGVycyB0cmlnZ2VyZWQgbW9yZSB3YXRjaGVycyxcbiAgICAgIC8vIGtlZXAgZmx1c2hpbmcgdW50aWwgaXQgZGVwbGV0ZXNcbiAgICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgX2FnYWluID0gdHJ1ZTtcbiAgICAgICAgY29udGludWUgX2Z1bmN0aW9uO1xuICAgICAgfVxuICAgICAgLy8gZGV2IHRvb2wgaG9va1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gICAgICB9XG4gICAgICByZXNldEJhdGNoZXJTdGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSdW4gdGhlIHdhdGNoZXJzIGluIGEgc2luZ2xlIHF1ZXVlLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBxdWV1ZVxuICAgKi9cblxuICBmdW5jdGlvbiBydW5CYXRjaGVyUXVldWUocXVldWUpIHtcbiAgICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgICAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgICAgIGhhc1tpZF0gPSBudWxsO1xuICAgICAgd2F0Y2hlci5ydW4oKTtcbiAgICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICAgIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgICBpZiAoY2lyY3VsYXJbaWRdID4gY29uZmlnLl9tYXhVcGRhdGVDb3VudCkge1xuICAgICAgICAgIHdhcm4oJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCBmb3Igd2F0Y2hlciAnICsgJ3dpdGggZXhwcmVzc2lvbiBcIicgKyB3YXRjaGVyLmV4cHJlc3Npb24gKyAnXCInLCB3YXRjaGVyLnZtKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gICAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICAgKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAgICpcbiAgICogQHBhcmFtIHtXYXRjaGVyfSB3YXRjaGVyXG4gICAqICAgcHJvcGVydGllczpcbiAgICogICAtIHtOdW1iZXJ9IGlkXG4gICAqICAgLSB7RnVuY3Rpb259IHJ1blxuICAgKi9cblxuICBmdW5jdGlvbiBwdXNoV2F0Y2hlcih3YXRjaGVyKSB7XG4gICAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgICAvLyBwdXNoIHdhdGNoZXIgaW50byBhcHByb3ByaWF0ZSBxdWV1ZVxuICAgICAgdmFyIHEgPSB3YXRjaGVyLnVzZXIgPyB1c2VyUXVldWUgOiBxdWV1ZTtcbiAgICAgIGhhc1tpZF0gPSBxLmxlbmd0aDtcbiAgICAgIHEucHVzaCh3YXRjaGVyKTtcbiAgICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICAgIHdhaXRpbmcgPSB0cnVlO1xuICAgICAgICBuZXh0VGljayhmbHVzaEJhdGNoZXJRdWV1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHVpZCQyID0gMDtcblxuICAvKipcbiAgICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gICAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gICAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICAgKlxuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IGV4cE9yRm5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgICAgICAgICAgIC0ge0FycmF5fSBmaWx0ZXJzXG4gICAqICAgICAgICAgICAgICAgICAtIHtCb29sZWFufSB0d29XYXlcbiAgICogICAgICAgICAgICAgICAgIC0ge0Jvb2xlYW59IGRlZXBcbiAgICogICAgICAgICAgICAgICAgIC0ge0Jvb2xlYW59IHVzZXJcbiAgICogICAgICAgICAgICAgICAgIC0ge0Jvb2xlYW59IHN5bmNcbiAgICogICAgICAgICAgICAgICAgIC0ge0Jvb2xlYW59IGxhenlcbiAgICogICAgICAgICAgICAgICAgIC0ge0Z1bmN0aW9ufSBbcHJlUHJvY2Vzc11cbiAgICogICAgICAgICAgICAgICAgIC0ge0Z1bmN0aW9ufSBbcG9zdFByb2Nlc3NdXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgZnVuY3Rpb24gV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpIHtcbiAgICAvLyBtaXggaW4gb3B0aW9uc1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBleHRlbmQodGhpcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHZhciBpc0ZuID0gdHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbic7XG4gICAgdGhpcy52bSA9IHZtO1xuICAgIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cE9yRm47XG4gICAgdGhpcy5jYiA9IGNiO1xuICAgIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gICAgdGhpcy5kZXBzID0gW107XG4gICAgdGhpcy5uZXdEZXBzID0gW107XG4gICAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICAgIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgICB0aGlzLnByZXZFcnJvciA9IG51bGw7IC8vIGZvciBhc3luYyBlcnJvciBzdGFja3NcbiAgICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXIvc2V0dGVyXG4gICAgaWYgKGlzRm4pIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgICAgIHRoaXMuc2V0dGVyID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmVzID0gcGFyc2VFeHByZXNzaW9uKGV4cE9yRm4sIHRoaXMudHdvV2F5KTtcbiAgICAgIHRoaXMuZ2V0dGVyID0gcmVzLmdldDtcbiAgICAgIHRoaXMuc2V0dGVyID0gcmVzLnNldDtcbiAgICB9XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eSA/IHVuZGVmaW5lZCA6IHRoaXMuZ2V0KCk7XG4gICAgLy8gc3RhdGUgZm9yIGF2b2lkaW5nIGZhbHNlIHRyaWdnZXJzIGZvciBkZWVwIGFuZCBBcnJheVxuICAgIC8vIHdhdGNoZXJzIGR1cmluZyB2bS5fZGlnZXN0KClcbiAgICB0aGlzLnF1ZXVlZCA9IHRoaXMuc2hhbGxvdyA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAgICovXG5cbiAgV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5iZWZvcmVHZXQoKTtcbiAgICB2YXIgc2NvcGUgPSB0aGlzLnNjb3BlIHx8IHRoaXMudm07XG4gICAgdmFyIHZhbHVlO1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwoc2NvcGUsIHNjb3BlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy53YXJuRXhwcmVzc2lvbkVycm9ycykge1xuICAgICAgICB3YXJuKCdFcnJvciB3aGVuIGV2YWx1YXRpbmcgZXhwcmVzc2lvbiAnICsgJ1wiJyArIHRoaXMuZXhwcmVzc2lvbiArICdcIjogJyArIGUudG9TdHJpbmcoKSwgdGhpcy52bSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJlUHJvY2Vzcykge1xuICAgICAgdmFsdWUgPSB0aGlzLnByZVByb2Nlc3ModmFsdWUpO1xuICAgIH1cbiAgICBpZiAodGhpcy5maWx0ZXJzKSB7XG4gICAgICB2YWx1ZSA9IHNjb3BlLl9hcHBseUZpbHRlcnModmFsdWUsIG51bGwsIHRoaXMuZmlsdGVycywgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wb3N0UHJvY2Vzcykge1xuICAgICAgdmFsdWUgPSB0aGlzLnBvc3RQcm9jZXNzKHZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5hZnRlckdldCgpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIHdpdGggdGhlIHNldHRlci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cblxuICBXYXRjaGVyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBzY29wZSA9IHRoaXMuc2NvcGUgfHwgdGhpcy52bTtcbiAgICBpZiAodGhpcy5maWx0ZXJzKSB7XG4gICAgICB2YWx1ZSA9IHNjb3BlLl9hcHBseUZpbHRlcnModmFsdWUsIHRoaXMudmFsdWUsIHRoaXMuZmlsdGVycywgdHJ1ZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICB0aGlzLnNldHRlci5jYWxsKHNjb3BlLCBzY29wZSwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLndhcm5FeHByZXNzaW9uRXJyb3JzKSB7XG4gICAgICAgIHdhcm4oJ0Vycm9yIHdoZW4gZXZhbHVhdGluZyBzZXR0ZXIgJyArICdcIicgKyB0aGlzLmV4cHJlc3Npb24gKyAnXCI6ICcgKyBlLnRvU3RyaW5nKCksIHRoaXMudm0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB0d28td2F5IHN5bmMgZm9yIHYtZm9yIGFsaWFzXG4gICAgdmFyIGZvckNvbnRleHQgPSBzY29wZS4kZm9yQ29udGV4dDtcbiAgICBpZiAoZm9yQ29udGV4dCAmJiBmb3JDb250ZXh0LmFsaWFzID09PSB0aGlzLmV4cHJlc3Npb24pIHtcbiAgICAgIGlmIChmb3JDb250ZXh0LmZpbHRlcnMpIHtcbiAgICAgICAgJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ0l0IHNlZW1zIHlvdSBhcmUgdXNpbmcgdHdvLXdheSBiaW5kaW5nIG9uICcgKyAnYSB2LWZvciBhbGlhcyAoJyArIHRoaXMuZXhwcmVzc2lvbiArICcpLCBhbmQgdGhlICcgKyAndi1mb3IgaGFzIGZpbHRlcnMuIFRoaXMgd2lsbCBub3Qgd29yayBwcm9wZXJseS4gJyArICdFaXRoZXIgcmVtb3ZlIHRoZSBmaWx0ZXJzIG9yIHVzZSBhbiBhcnJheSBvZiAnICsgJ29iamVjdHMgYW5kIGJpbmQgdG8gb2JqZWN0IHByb3BlcnRpZXMgaW5zdGVhZC4nLCB0aGlzLnZtKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yQ29udGV4dC5fd2l0aExvY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzY29wZS4ka2V5KSB7XG4gICAgICAgICAgLy8gb3JpZ2luYWwgaXMgYW4gb2JqZWN0XG4gICAgICAgICAgZm9yQ29udGV4dC5yYXdWYWx1ZVtzY29wZS4ka2V5XSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvckNvbnRleHQucmF3VmFsdWUuJHNldChzY29wZS4kaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBQcmVwYXJlIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uXG4gICAqL1xuXG4gIFdhdGNoZXIucHJvdG90eXBlLmJlZm9yZUdldCA9IGZ1bmN0aW9uKCkge1xuICAgIERlcC50YXJnZXQgPSB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RlcH0gZGVwXG4gICAqL1xuXG4gIFdhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uKGRlcCkge1xuICAgIHZhciBpZCA9IGRlcC5pZDtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICAgKi9cblxuICBXYXRjaGVyLnByb3RvdHlwZS5hZnRlckdldCA9IGZ1bmN0aW9uKCkge1xuICAgIERlcC50YXJnZXQgPSBudWxsO1xuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gICAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICAgIHRtcCA9IHRoaXMuZGVwcztcbiAgICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gICAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICAgIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAgICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufSBzaGFsbG93XG4gICAqL1xuXG4gIFdhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKHNoYWxsb3cpIHtcbiAgICBpZiAodGhpcy5sYXp5KSB7XG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3luYyB8fCAhY29uZmlnLmFzeW5jKSB7XG4gICAgICB0aGlzLnJ1bigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBxdWV1ZWQsIG9ubHkgb3ZlcndyaXRlIHNoYWxsb3cgd2l0aCBub24tc2hhbGxvdyxcbiAgICAgIC8vIGJ1dCBub3QgdGhlIG90aGVyIHdheSBhcm91bmQuXG4gICAgICB0aGlzLnNoYWxsb3cgPSB0aGlzLnF1ZXVlZCA/IHNoYWxsb3cgPyB0aGlzLnNoYWxsb3cgOiBmYWxzZSA6ICEhc2hhbGxvdztcbiAgICAgIHRoaXMucXVldWVkID0gdHJ1ZTtcbiAgICAgIC8vIHJlY29yZCBiZWZvcmUtcHVzaCBlcnJvciBzdGFjayBpbiBkZWJ1ZyBtb2RlXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLmRlYnVnKSB7XG4gICAgICAgIHRoaXMucHJldkVycm9yID0gbmV3IEVycm9yKCdbdnVlXSBhc3luYyBzdGFjayB0cmFjZScpO1xuICAgICAgfVxuICAgICAgcHVzaFdhdGNoZXIodGhpcyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBCYXRjaGVyIGpvYiBpbnRlcmZhY2UuXG4gICAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBiYXRjaGVyLlxuICAgKi9cblxuICBXYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgICBpZiAodmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgICAgLy8gaGF2ZSBtdXRhdGVkOyBidXQgb25seSBkbyBzbyBpZiB0aGlzIGlzIGFcbiAgICAgICAgLy8gbm9uLXNoYWxsb3cgdXBkYXRlIChjYXVzZWQgYnkgYSB2bSBkaWdlc3QpLlxuICAgICAgICAoaXNPYmplY3QodmFsdWUpIHx8IHRoaXMuZGVlcCkgJiYgIXRoaXMuc2hhbGxvdykge1xuICAgICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgLy8gaW4gZGVidWcgKyBhc3luYyBtb2RlLCB3aGVuIGEgd2F0Y2hlciBjYWxsYmFja3NcbiAgICAgICAgLy8gdGhyb3dzLCB3ZSBhbHNvIHRocm93IHRoZSBzYXZlZCBiZWZvcmUtcHVzaCBlcnJvclxuICAgICAgICAvLyBzbyB0aGUgZnVsbCBjcm9zcy10aWNrIHN0YWNrIHRyYWNlIGlzIGF2YWlsYWJsZS5cbiAgICAgICAgdmFyIHByZXZFcnJvciA9IHRoaXMucHJldkVycm9yO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcuZGVidWcgJiYgcHJldkVycm9yKSB7XG4gICAgICAgICAgdGhpcy5wcmV2RXJyb3IgPSBudWxsO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdGhyb3cgcHJldkVycm9yO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5xdWV1ZWQgPSB0aGlzLnNoYWxsb3cgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAgICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICAgKi9cblxuICBXYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGF2b2lkIG92ZXJ3cml0aW5nIGFub3RoZXIgd2F0Y2hlciB0aGF0IGlzIGJlaW5nXG4gICAgLy8gY29sbGVjdGVkLlxuICAgIHZhciBjdXJyZW50ID0gRGVwLnRhcmdldDtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgRGVwLnRhcmdldCA9IGN1cnJlbnQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICAgKi9cblxuICBXYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLmRlcGVuZCgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJjcmliZXIgbGlzdC5cbiAgICovXG5cbiAgV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQgb3IgaXMgcGVyZm9ybWluZyBhIHYtZm9yXG4gICAgICAvLyByZS1yZW5kZXIgKHRoZSB3YXRjaGVyIGxpc3QgaXMgdGhlbiBmaWx0ZXJlZCBieSB2LWZvcikuXG4gICAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXRoaXMudm0uX3ZGb3JSZW1vdmluZykge1xuICAgICAgICB0aGlzLnZtLl93YXRjaGVycy4kcmVtb3ZlKHRoaXMpO1xuICAgICAgfVxuICAgICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMudm0gPSB0aGlzLmNiID0gdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZWNydXNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICAgKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICAgKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbFxuICAgKi9cblxuICB2YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4gIGZ1bmN0aW9uIHRyYXZlcnNlKHZhbCwgc2Vlbikge1xuICAgIHZhciBpID0gdW5kZWZpbmVkLFxuICAgICAga2V5cyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoIXNlZW4pIHtcbiAgICAgIHNlZW4gPSBzZWVuT2JqZWN0cztcbiAgICAgIHNlZW4uY2xlYXIoKTtcbiAgICB9XG4gICAgdmFyIGlzQSA9IGlzQXJyYXkodmFsKTtcbiAgICB2YXIgaXNPID0gaXNPYmplY3QodmFsKTtcbiAgICBpZiAoKGlzQSB8fCBpc08pICYmIE9iamVjdC5pc0V4dGVuc2libGUodmFsKSkge1xuICAgICAgaWYgKHZhbC5fX29iX18pIHtcbiAgICAgICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2Vlbi5hZGQoZGVwSWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNBKSB7XG4gICAgICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB0cmF2ZXJzZSh2YWxbaV0sIHNlZW4pO1xuICAgICAgfSBlbHNlIGlmIChpc08pIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkgdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgdGV4dCQxID0ge1xuXG4gICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgIHRoaXMuYXR0ciA9IHRoaXMuZWwubm9kZVR5cGUgPT09IDMgPyAnZGF0YScgOiAndGV4dENvbnRlbnQnO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgdGhpcy5lbFt0aGlzLmF0dHJdID0gX3RvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHRlbXBsYXRlQ2FjaGUgPSBuZXcgQ2FjaGUoMTAwMCk7XG4gIHZhciBpZFNlbGVjdG9yQ2FjaGUgPSBuZXcgQ2FjaGUoMTAwMCk7XG5cbiAgdmFyIG1hcCA9IHtcbiAgICBlZmF1bHQ6IFswLCAnJywgJyddLFxuICAgIGxlZ2VuZDogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICAgdHI6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuICAgIGNvbDogWzIsICc8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J11cbiAgfTtcblxuICBtYXAudGQgPSBtYXAudGggPSBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXTtcblxuICBtYXAub3B0aW9uID0gbWFwLm9wdGdyb3VwID0gWzEsICc8c2VsZWN0IG11bHRpcGxlPVwibXVsdGlwbGVcIj4nLCAnPC9zZWxlY3Q+J107XG5cbiAgbWFwLnRoZWFkID0gbWFwLnRib2R5ID0gbWFwLmNvbGdyb3VwID0gbWFwLmNhcHRpb24gPSBtYXAudGZvb3QgPSBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXTtcblxuICBtYXAuZyA9IG1hcC5kZWZzID0gbWFwLnN5bWJvbCA9IG1hcC51c2UgPSBtYXAuaW1hZ2UgPSBtYXAudGV4dCA9IG1hcC5jaXJjbGUgPSBtYXAuZWxsaXBzZSA9IG1hcC5saW5lID0gbWFwLnBhdGggPSBtYXAucG9seWdvbiA9IG1hcC5wb2x5bGluZSA9IG1hcC5yZWN0ID0gWzEsICc8c3ZnICcgKyAneG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiICcgKyAneG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgJyArICd4bWxuczpldj1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEveG1sLWV2ZW50c1wiJyArICd2ZXJzaW9uPVwiMS4xXCI+JywgJzwvc3ZnPiddO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIG5vZGUgaXMgYSBzdXBwb3J0ZWQgdGVtcGxhdGUgbm9kZSB3aXRoIGFcbiAgICogRG9jdW1lbnRGcmFnbWVudCBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG5cbiAgZnVuY3Rpb24gaXNSZWFsVGVtcGxhdGUobm9kZSkge1xuICAgIHJldHVybiBpc1RlbXBsYXRlKG5vZGUpICYmIGlzRnJhZ21lbnQobm9kZS5jb250ZW50KTtcbiAgfVxuXG4gIHZhciB0YWdSRSQxID0gLzwoW1xcdzotXSspLztcbiAgdmFyIGVudGl0eVJFID0gLyYjP1xcdys/Oy87XG4gIHZhciBjb21tZW50UkUgPSAvPCEtLS87XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYSBzdHJpbmcgdGVtcGxhdGUgdG8gYSBEb2N1bWVudEZyYWdtZW50LlxuICAgKiBEZXRlcm1pbmVzIGNvcnJlY3Qgd3JhcHBpbmcgYnkgdGFnIHR5cGVzLiBXcmFwcGluZ1xuICAgKiBzdHJhdGVneSBmb3VuZCBpbiBqUXVlcnkgJiBjb21wb25lbnQvZG9taWZ5LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdGVtcGxhdGVTdHJpbmdcbiAgICogQHBhcmFtIHtCb29sZWFufSByYXdcbiAgICogQHJldHVybiB7RG9jdW1lbnRGcmFnbWVudH1cbiAgICovXG5cbiAgZnVuY3Rpb24gc3RyaW5nVG9GcmFnbWVudCh0ZW1wbGF0ZVN0cmluZywgcmF3KSB7XG4gICAgLy8gdHJ5IGEgY2FjaGUgaGl0IGZpcnN0XG4gICAgdmFyIGNhY2hlS2V5ID0gcmF3ID8gdGVtcGxhdGVTdHJpbmcgOiB0ZW1wbGF0ZVN0cmluZy50cmltKCk7XG4gICAgdmFyIGhpdCA9IHRlbXBsYXRlQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAoaGl0KSB7XG4gICAgICByZXR1cm4gaGl0O1xuICAgIH1cblxuICAgIHZhciBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIHZhciB0YWdNYXRjaCA9IHRlbXBsYXRlU3RyaW5nLm1hdGNoKHRhZ1JFJDEpO1xuICAgIHZhciBlbnRpdHlNYXRjaCA9IGVudGl0eVJFLnRlc3QodGVtcGxhdGVTdHJpbmcpO1xuICAgIHZhciBjb21tZW50TWF0Y2ggPSBjb21tZW50UkUudGVzdCh0ZW1wbGF0ZVN0cmluZyk7XG5cbiAgICBpZiAoIXRhZ01hdGNoICYmICFlbnRpdHlNYXRjaCAmJiAhY29tbWVudE1hdGNoKSB7XG4gICAgICAvLyB0ZXh0IG9ubHksIHJldHVybiBhIHNpbmdsZSB0ZXh0IG5vZGUuXG4gICAgICBmcmFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRlbXBsYXRlU3RyaW5nKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0YWcgPSB0YWdNYXRjaCAmJiB0YWdNYXRjaFsxXTtcbiAgICAgIHZhciB3cmFwID0gbWFwW3RhZ10gfHwgbWFwLmVmYXVsdDtcbiAgICAgIHZhciBkZXB0aCA9IHdyYXBbMF07XG4gICAgICB2YXIgcHJlZml4ID0gd3JhcFsxXTtcbiAgICAgIHZhciBzdWZmaXggPSB3cmFwWzJdO1xuICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgbm9kZS5pbm5lckhUTUwgPSBwcmVmaXggKyB0ZW1wbGF0ZVN0cmluZyArIHN1ZmZpeDtcbiAgICAgIHdoaWxlIChkZXB0aC0tKSB7XG4gICAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cbiAgICAgIHdoaWxlIChjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG4gICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXJhdykge1xuICAgICAgdHJpbU5vZGUoZnJhZyk7XG4gICAgfVxuICAgIHRlbXBsYXRlQ2FjaGUucHV0KGNhY2hlS2V5LCBmcmFnKTtcbiAgICByZXR1cm4gZnJhZztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgdGVtcGxhdGUgbm9kZSB0byBhIERvY3VtZW50RnJhZ21lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKiBAcmV0dXJuIHtEb2N1bWVudEZyYWdtZW50fVxuICAgKi9cblxuICBmdW5jdGlvbiBub2RlVG9GcmFnbWVudChub2RlKSB7XG4gICAgLy8gaWYgaXRzIGEgdGVtcGxhdGUgdGFnIGFuZCB0aGUgYnJvd3NlciBzdXBwb3J0cyBpdCxcbiAgICAvLyBpdHMgY29udGVudCBpcyBhbHJlYWR5IGEgZG9jdW1lbnQgZnJhZ21lbnQuIEhvd2V2ZXIsIGlPUyBTYWZhcmkgaGFzXG4gICAgLy8gYnVnIHdoZW4gdXNpbmcgZGlyZWN0bHkgY2xvbmVkIHRlbXBsYXRlIGNvbnRlbnQgd2l0aCB0b3VjaFxuICAgIC8vIGV2ZW50cyBhbmQgY2FuIGNhdXNlIGNyYXNoZXMgd2hlbiB0aGUgbm9kZXMgYXJlIHJlbW92ZWQgZnJvbSBET00sIHNvIHdlXG4gICAgLy8gaGF2ZSB0byB0cmVhdCB0ZW1wbGF0ZSBlbGVtZW50cyBhcyBzdHJpbmcgdGVtcGxhdGVzLiAoIzI4MDUpXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzUmVhbFRlbXBsYXRlKG5vZGUpKSB7XG4gICAgICByZXR1cm4gc3RyaW5nVG9GcmFnbWVudChub2RlLmlubmVySFRNTCk7XG4gICAgfVxuICAgIC8vIHNjcmlwdCB0ZW1wbGF0ZVxuICAgIGlmIChub2RlLnRhZ05hbWUgPT09ICdTQ1JJUFQnKSB7XG4gICAgICByZXR1cm4gc3RyaW5nVG9GcmFnbWVudChub2RlLnRleHRDb250ZW50KTtcbiAgICB9XG4gICAgLy8gbm9ybWFsIG5vZGUsIGNsb25lIGl0IHRvIGF2b2lkIG11dGF0aW5nIHRoZSBvcmlnaW5hbFxuICAgIHZhciBjbG9uZWROb2RlID0gY2xvbmVOb2RlKG5vZGUpO1xuICAgIHZhciBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIHZhciBjaGlsZDtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuICAgIHdoaWxlIChjaGlsZCA9IGNsb25lZE5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuICAgICAgZnJhZy5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgfVxuICAgIHRyaW1Ob2RlKGZyYWcpO1xuICAgIHJldHVybiBmcmFnO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgdGhlIHByZXNlbmNlIG9mIHRoZSBTYWZhcmkgdGVtcGxhdGUgY2xvbmluZyBidWdcbiAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd3VnLmNnaT9pZD0xMzc3NTVcbiAgdmFyIGhhc0Jyb2tlblRlbXBsYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGluQnJvd3Nlcikge1xuICAgICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGEuaW5uZXJIVE1MID0gJzx0ZW1wbGF0ZT4xPC90ZW1wbGF0ZT4nO1xuICAgICAgcmV0dXJuICFhLmNsb25lTm9kZSh0cnVlKS5maXJzdENoaWxkLmlubmVySFRNTDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSkoKTtcblxuICAvLyBUZXN0IGZvciBJRTEwLzExIHRleHRhcmVhIHBsYWNlaG9sZGVyIGNsb25lIGJ1Z1xuICB2YXIgaGFzVGV4dGFyZWFDbG9uZUJ1ZyA9IChmdW5jdGlvbigpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChpbkJyb3dzZXIpIHtcbiAgICAgIHZhciB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgIHQucGxhY2Vob2xkZXIgPSAndCc7XG4gICAgICByZXR1cm4gdC5jbG9uZU5vZGUodHJ1ZSkudmFsdWUgPT09ICd0JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSkoKTtcblxuICAvKipcbiAgICogMS4gRGVhbCB3aXRoIFNhZmFyaSBjbG9uaW5nIG5lc3RlZCA8dGVtcGxhdGU+IGJ1ZyBieVxuICAgKiAgICBtYW51YWxseSBjbG9uaW5nIGFsbCB0ZW1wbGF0ZSBpbnN0YW5jZXMuXG4gICAqIDIuIERlYWwgd2l0aCBJRTEwLzExIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1ZyBieSBzZXR0aW5nXG4gICAqICAgIHRoZSBjb3JyZWN0IHZhbHVlIGFmdGVyIGNsb25pbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fSBub2RlXG4gICAqIEByZXR1cm4ge0VsZW1lbnR8RG9jdW1lbnRGcmFnbWVudH1cbiAgICovXG5cbiAgZnVuY3Rpb24gY2xvbmVOb2RlKG5vZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIW5vZGUucXVlcnlTZWxlY3RvckFsbCkge1xuICAgICAgcmV0dXJuIG5vZGUuY2xvbmVOb2RlKCk7XG4gICAgfVxuICAgIHZhciByZXMgPSBub2RlLmNsb25lTm9kZSh0cnVlKTtcbiAgICB2YXIgaSwgb3JpZ2luYWwsIGNsb25lZDtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaGFzQnJva2VuVGVtcGxhdGUpIHtcbiAgICAgIHZhciB0ZW1wQ2xvbmUgPSByZXM7XG4gICAgICBpZiAoaXNSZWFsVGVtcGxhdGUobm9kZSkpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUuY29udGVudDtcbiAgICAgICAgdGVtcENsb25lID0gcmVzLmNvbnRlbnQ7XG4gICAgICB9XG4gICAgICBvcmlnaW5hbCA9IG5vZGUucXVlcnlTZWxlY3RvckFsbCgndGVtcGxhdGUnKTtcbiAgICAgIGlmIChvcmlnaW5hbC5sZW5ndGgpIHtcbiAgICAgICAgY2xvbmVkID0gdGVtcENsb25lLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RlbXBsYXRlJyk7XG4gICAgICAgIGkgPSBjbG9uZWQubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgY2xvbmVkW2ldLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGNsb25lTm9kZShvcmlnaW5hbFtpXSksIGNsb25lZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGhhc1RleHRhcmVhQ2xvbmVCdWcpIHtcbiAgICAgIGlmIChub2RlLnRhZ05hbWUgPT09ICdURVhUQVJFQScpIHtcbiAgICAgICAgcmVzLnZhbHVlID0gbm9kZS52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yaWdpbmFsID0gbm9kZS5xdWVyeVNlbGVjdG9yQWxsKCd0ZXh0YXJlYScpO1xuICAgICAgICBpZiAob3JpZ2luYWwubGVuZ3RoKSB7XG4gICAgICAgICAgY2xvbmVkID0gcmVzLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RleHRhcmVhJyk7XG4gICAgICAgICAgaSA9IGNsb25lZC5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgY2xvbmVkW2ldLnZhbHVlID0gb3JpZ2luYWxbaV0udmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyB0aGUgdGVtcGxhdGUgb3B0aW9uIGFuZCBub3JtYWxpemVzIGl0IGludG8gYVxuICAgKiBhIERvY3VtZW50RnJhZ21lbnQgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIHBhcnRpYWwgb3IgYVxuICAgKiBpbnN0YW5jZSB0ZW1wbGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB0ZW1wbGF0ZVxuICAgKiAgICAgICAgUG9zc2libGUgdmFsdWVzIGluY2x1ZGU6XG4gICAqICAgICAgICAtIERvY3VtZW50RnJhZ21lbnQgb2JqZWN0XG4gICAqICAgICAgICAtIE5vZGUgb2JqZWN0IG9mIHR5cGUgVGVtcGxhdGVcbiAgICogICAgICAgIC0gaWQgc2VsZWN0b3I6ICcjc29tZS10ZW1wbGF0ZS1pZCdcbiAgICogICAgICAgIC0gdGVtcGxhdGUgc3RyaW5nOiAnPGRpdj48c3Bhbj57e21zZ319PC9zcGFuPjwvZGl2PidcbiAgICogQHBhcmFtIHtCb29sZWFufSBzaG91bGRDbG9uZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJhd1xuICAgKiAgICAgICAgaW5saW5lIEhUTUwgaW50ZXJwb2xhdGlvbi4gRG8gbm90IGNoZWNrIGZvciBpZFxuICAgKiAgICAgICAgc2VsZWN0b3IgYW5kIGtlZXAgd2hpdGVzcGFjZSBpbiB0aGUgc3RyaW5nLlxuICAgKiBAcmV0dXJuIHtEb2N1bWVudEZyYWdtZW50fHVuZGVmaW5lZH1cbiAgICovXG5cbiAgZnVuY3Rpb24gcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgc2hvdWxkQ2xvbmUsIHJhdykge1xuICAgIHZhciBub2RlLCBmcmFnO1xuXG4gICAgLy8gaWYgdGhlIHRlbXBsYXRlIGlzIGFscmVhZHkgYSBkb2N1bWVudCBmcmFnbWVudCxcbiAgICAvLyBkbyBub3RoaW5nXG4gICAgaWYgKGlzRnJhZ21lbnQodGVtcGxhdGUpKSB7XG4gICAgICB0cmltTm9kZSh0ZW1wbGF0ZSk7XG4gICAgICByZXR1cm4gc2hvdWxkQ2xvbmUgPyBjbG9uZU5vZGUodGVtcGxhdGUpIDogdGVtcGxhdGU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGlkIHNlbGVjdG9yXG4gICAgICBpZiAoIXJhdyAmJiB0ZW1wbGF0ZS5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAvLyBpZCBzZWxlY3RvciBjYW4gYmUgY2FjaGVkIHRvb1xuICAgICAgICBmcmFnID0gaWRTZWxlY3RvckNhY2hlLmdldCh0ZW1wbGF0ZSk7XG4gICAgICAgIGlmICghZnJhZykge1xuICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0ZW1wbGF0ZS5zbGljZSgxKSk7XG4gICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIGZyYWcgPSBub2RlVG9GcmFnbWVudChub2RlKTtcbiAgICAgICAgICAgIC8vIHNhdmUgc2VsZWN0b3IgdG8gY2FjaGVcbiAgICAgICAgICAgIGlkU2VsZWN0b3JDYWNoZS5wdXQodGVtcGxhdGUsIGZyYWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm9ybWFsIHN0cmluZyB0ZW1wbGF0ZVxuICAgICAgICBmcmFnID0gc3RyaW5nVG9GcmFnbWVudCh0ZW1wbGF0ZSwgcmF3KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRlbXBsYXRlLm5vZGVUeXBlKSB7XG4gICAgICAvLyBhIGRpcmVjdCBub2RlXG4gICAgICBmcmFnID0gbm9kZVRvRnJhZ21lbnQodGVtcGxhdGUpO1xuICAgIH1cblxuICAgIHJldHVybiBmcmFnICYmIHNob3VsZENsb25lID8gY2xvbmVOb2RlKGZyYWcpIDogZnJhZztcbiAgfVxuXG4gIHZhciB0ZW1wbGF0ZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIGNsb25lTm9kZTogY2xvbmVOb2RlLFxuICAgIHBhcnNlVGVtcGxhdGU6IHBhcnNlVGVtcGxhdGVcbiAgfSk7XG5cbiAgdmFyIGh0bWwgPSB7XG5cbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgLy8gYSBjb21tZW50IG5vZGUgbWVhbnMgdGhpcyBpcyBhIGJpbmRpbmcgZm9yXG4gICAgICAvLyB7e3sgaW5saW5lIHVuZXNjYXBlZCBodG1sIH19fVxuICAgICAgaWYgKHRoaXMuZWwubm9kZVR5cGUgPT09IDgpIHtcbiAgICAgICAgLy8gaG9sZCBub2Rlc1xuICAgICAgICB0aGlzLm5vZGVzID0gW107XG4gICAgICAgIC8vIHJlcGxhY2UgdGhlIHBsYWNlaG9sZGVyIHdpdGggcHJvcGVyIGFuY2hvclxuICAgICAgICB0aGlzLmFuY2hvciA9IGNyZWF0ZUFuY2hvcigndi1odG1sJyk7XG4gICAgICAgIHJlcGxhY2UodGhpcy5lbCwgdGhpcy5hbmNob3IpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBfdG9TdHJpbmcodmFsdWUpO1xuICAgICAgaWYgKHRoaXMubm9kZXMpIHtcbiAgICAgICAgdGhpcy5zd2FwKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN3YXA6IGZ1bmN0aW9uIHN3YXAodmFsdWUpIHtcbiAgICAgIC8vIHJlbW92ZSBvbGQgbm9kZXNcbiAgICAgIHZhciBpID0gdGhpcy5ub2Rlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHJlbW92ZSh0aGlzLm5vZGVzW2ldKTtcbiAgICAgIH1cbiAgICAgIC8vIGNvbnZlcnQgbmV3IHZhbHVlIHRvIGEgZnJhZ21lbnRcbiAgICAgIC8vIGRvIG5vdCBhdHRlbXB0IHRvIHJldHJpZXZlIGZyb20gaWQgc2VsZWN0b3JcbiAgICAgIHZhciBmcmFnID0gcGFyc2VUZW1wbGF0ZSh2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAvLyBzYXZlIGEgcmVmZXJlbmNlIHRvIHRoZXNlIG5vZGVzIHNvIHdlIGNhbiByZW1vdmUgbGF0ZXJcbiAgICAgIHRoaXMubm9kZXMgPSB0b0FycmF5KGZyYWcuY2hpbGROb2Rlcyk7XG4gICAgICBiZWZvcmUoZnJhZywgdGhpcy5hbmNob3IpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQWJzdHJhY3Rpb24gZm9yIGEgcGFydGlhbGx5LWNvbXBpbGVkIGZyYWdtZW50LlxuICAgKiBDYW4gb3B0aW9uYWxseSBjb21waWxlIGNvbnRlbnQgd2l0aCBhIGNoaWxkIHNjb3BlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaW5rZXJcbiAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAqIEBwYXJhbSB7RG9jdW1lbnRGcmFnbWVudH0gZnJhZ1xuICAgKiBAcGFyYW0ge1Z1ZX0gW2hvc3RdXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbc2NvcGVdXG4gICAqIEBwYXJhbSB7RnJhZ21lbnR9IFtwYXJlbnRGcmFnXVxuICAgKi9cbiAgZnVuY3Rpb24gRnJhZ21lbnQobGlua2VyLCB2bSwgZnJhZywgaG9zdCwgc2NvcGUsIHBhcmVudEZyYWcpIHtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdGhpcy5jaGlsZEZyYWdzID0gW107XG4gICAgdGhpcy52bSA9IHZtO1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICB0aGlzLmluc2VydGVkID0gZmFsc2U7XG4gICAgdGhpcy5wYXJlbnRGcmFnID0gcGFyZW50RnJhZztcbiAgICBpZiAocGFyZW50RnJhZykge1xuICAgICAgcGFyZW50RnJhZy5jaGlsZEZyYWdzLnB1c2godGhpcyk7XG4gICAgfVxuICAgIHRoaXMudW5saW5rID0gbGlua2VyKHZtLCBmcmFnLCBob3N0LCBzY29wZSwgdGhpcyk7XG4gICAgdmFyIHNpbmdsZSA9IHRoaXMuc2luZ2xlID0gZnJhZy5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgLy8gZG8gbm90IGdvIHNpbmdsZSBtb2RlIGlmIHRoZSBvbmx5IG5vZGUgaXMgYW4gYW5jaG9yXG4gICAgICAhZnJhZy5jaGlsZE5vZGVzWzBdLl9fdl9hbmNob3I7XG4gICAgaWYgKHNpbmdsZSkge1xuICAgICAgdGhpcy5ub2RlID0gZnJhZy5jaGlsZE5vZGVzWzBdO1xuICAgICAgdGhpcy5iZWZvcmUgPSBzaW5nbGVCZWZvcmU7XG4gICAgICB0aGlzLnJlbW92ZSA9IHNpbmdsZVJlbW92ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ub2RlID0gY3JlYXRlQW5jaG9yKCdmcmFnbWVudC1zdGFydCcpO1xuICAgICAgdGhpcy5lbmQgPSBjcmVhdGVBbmNob3IoJ2ZyYWdtZW50LWVuZCcpO1xuICAgICAgdGhpcy5mcmFnID0gZnJhZztcbiAgICAgIHByZXBlbmQodGhpcy5ub2RlLCBmcmFnKTtcbiAgICAgIGZyYWcuYXBwZW5kQ2hpbGQodGhpcy5lbmQpO1xuICAgICAgdGhpcy5iZWZvcmUgPSBtdWx0aUJlZm9yZTtcbiAgICAgIHRoaXMucmVtb3ZlID0gbXVsdGlSZW1vdmU7XG4gICAgfVxuICAgIHRoaXMubm9kZS5fX3ZfZnJhZyA9IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCBhdHRhY2gvZGV0YWNoIGZvciBhbGwgY29tcG9uZW50cyBjb250YWluZWQgd2l0aGluXG4gICAqIHRoaXMgZnJhZ21lbnQuIEFsc28gZG8gc28gcmVjdXJzaXZlbHkgZm9yIGFsbCBjaGlsZFxuICAgKiBmcmFnbWVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhvb2tcbiAgICovXG5cbiAgRnJhZ21lbnQucHJvdG90eXBlLmNhbGxIb29rID0gZnVuY3Rpb24oaG9vaykge1xuICAgIHZhciBpLCBsO1xuICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmNoaWxkRnJhZ3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0aGlzLmNoaWxkRnJhZ3NbaV0uY2FsbEhvb2soaG9vayk7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaG9vayh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEluc2VydCBmcmFnbWVudCBiZWZvcmUgdGFyZ2V0LCBzaW5nbGUgbm9kZSB2ZXJzaW9uXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gd2l0aFRyYW5zaXRpb25cbiAgICovXG5cbiAgZnVuY3Rpb24gc2luZ2xlQmVmb3JlKHRhcmdldCwgd2l0aFRyYW5zaXRpb24pIHtcbiAgICB0aGlzLmluc2VydGVkID0gdHJ1ZTtcbiAgICB2YXIgbWV0aG9kID0gd2l0aFRyYW5zaXRpb24gIT09IGZhbHNlID8gYmVmb3JlV2l0aFRyYW5zaXRpb24gOiBiZWZvcmU7XG4gICAgbWV0aG9kKHRoaXMubm9kZSwgdGFyZ2V0LCB0aGlzLnZtKTtcbiAgICBpZiAoaW5Eb2ModGhpcy5ub2RlKSkge1xuICAgICAgdGhpcy5jYWxsSG9vayhhdHRhY2gpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgZnJhZ21lbnQsIHNpbmdsZSBub2RlIHZlcnNpb25cbiAgICovXG5cbiAgZnVuY3Rpb24gc2luZ2xlUmVtb3ZlKCkge1xuICAgIHRoaXMuaW5zZXJ0ZWQgPSBmYWxzZTtcbiAgICB2YXIgc2hvdWxkQ2FsbFJlbW92ZSA9IGluRG9jKHRoaXMubm9kZSk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuYmVmb3JlUmVtb3ZlKCk7XG4gICAgcmVtb3ZlV2l0aFRyYW5zaXRpb24odGhpcy5ub2RlLCB0aGlzLnZtLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzaG91bGRDYWxsUmVtb3ZlKSB7XG4gICAgICAgIHNlbGYuY2FsbEhvb2soZGV0YWNoKTtcbiAgICAgIH1cbiAgICAgIHNlbGYuZGVzdHJveSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydCBmcmFnbWVudCBiZWZvcmUgdGFyZ2V0LCBtdWx0aS1ub2RlcyB2ZXJzaW9uXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gd2l0aFRyYW5zaXRpb25cbiAgICovXG5cbiAgZnVuY3Rpb24gbXVsdGlCZWZvcmUodGFyZ2V0LCB3aXRoVHJhbnNpdGlvbikge1xuICAgIHRoaXMuaW5zZXJ0ZWQgPSB0cnVlO1xuICAgIHZhciB2bSA9IHRoaXMudm07XG4gICAgdmFyIG1ldGhvZCA9IHdpdGhUcmFuc2l0aW9uICE9PSBmYWxzZSA/IGJlZm9yZVdpdGhUcmFuc2l0aW9uIDogYmVmb3JlO1xuICAgIG1hcE5vZGVSYW5nZSh0aGlzLm5vZGUsIHRoaXMuZW5kLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBtZXRob2Qobm9kZSwgdGFyZ2V0LCB2bSk7XG4gICAgfSk7XG4gICAgaWYgKGluRG9jKHRoaXMubm9kZSkpIHtcbiAgICAgIHRoaXMuY2FsbEhvb2soYXR0YWNoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGZyYWdtZW50LCBtdWx0aS1ub2RlcyB2ZXJzaW9uXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG11bHRpUmVtb3ZlKCkge1xuICAgIHRoaXMuaW5zZXJ0ZWQgPSBmYWxzZTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHNob3VsZENhbGxSZW1vdmUgPSBpbkRvYyh0aGlzLm5vZGUpO1xuICAgIHRoaXMuYmVmb3JlUmVtb3ZlKCk7XG4gICAgcmVtb3ZlTm9kZVJhbmdlKHRoaXMubm9kZSwgdGhpcy5lbmQsIHRoaXMudm0sIHRoaXMuZnJhZywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2hvdWxkQ2FsbFJlbW92ZSkge1xuICAgICAgICBzZWxmLmNhbGxIb29rKGRldGFjaCk7XG4gICAgICB9XG4gICAgICBzZWxmLmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlIHRoZSBmcmFnbWVudCBmb3IgcmVtb3ZhbC5cbiAgICovXG5cbiAgRnJhZ21lbnQucHJvdG90eXBlLmJlZm9yZVJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBsO1xuICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmNoaWxkRnJhZ3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAvLyBjYWxsIHRoZSBzYW1lIG1ldGhvZCByZWN1cnNpdmVseSBvbiBjaGlsZFxuICAgICAgLy8gZnJhZ21lbnRzLCBkZXB0aC1maXJzdFxuICAgICAgdGhpcy5jaGlsZEZyYWdzW2ldLmJlZm9yZVJlbW92ZShmYWxzZSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgLy8gQ2FsbCBkZXN0cm95IGZvciBhbGwgY29udGFpbmVkIGluc3RhbmNlcyxcbiAgICAgIC8vIHdpdGggcmVtb3ZlOmZhbHNlIGFuZCBkZWZlcjp0cnVlLlxuICAgICAgLy8gRGVmZXIgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgbmVlZCB0b1xuICAgICAgLy8ga2VlcCB0aGUgY2hpbGRyZW4gdG8gY2FsbCBkZXRhY2ggaG9va3NcbiAgICAgIC8vIG9uIHRoZW0uXG4gICAgICB0aGlzLmNoaWxkcmVuW2ldLiRkZXN0cm95KGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gICAgdmFyIGRpcnMgPSB0aGlzLnVubGluay5kaXJzO1xuICAgIGZvciAoaSA9IDAsIGwgPSBkaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgLy8gZGlzYWJsZSB0aGUgd2F0Y2hlcnMgb24gYWxsIHRoZSBkaXJlY3RpdmVzXG4gICAgICAvLyBzbyB0aGF0IHRoZSByZW5kZXJlZCBjb250ZW50IHN0YXlzIHRoZSBzYW1lXG4gICAgICAvLyBkdXJpbmcgcmVtb3ZhbC5cbiAgICAgIGRpcnNbaV0uX3dhdGNoZXIgJiYgZGlyc1tpXS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGVzdHJveSB0aGUgZnJhZ21lbnQuXG4gICAqL1xuXG4gIEZyYWdtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMucGFyZW50RnJhZykge1xuICAgICAgdGhpcy5wYXJlbnRGcmFnLmNoaWxkRnJhZ3MuJHJlbW92ZSh0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5ub2RlLl9fdl9mcmFnID0gbnVsbDtcbiAgICB0aGlzLnVubGluaygpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxsIGF0dGFjaCBob29rIGZvciBhIFZ1ZSBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtWdWV9IGNoaWxkXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGF0dGFjaChjaGlsZCkge1xuICAgIGlmICghY2hpbGQuX2lzQXR0YWNoZWQgJiYgaW5Eb2MoY2hpbGQuJGVsKSkge1xuICAgICAgY2hpbGQuX2NhbGxIb29rKCdhdHRhY2hlZCcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIGRldGFjaCBob29rIGZvciBhIFZ1ZSBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtWdWV9IGNoaWxkXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGRldGFjaChjaGlsZCkge1xuICAgIGlmIChjaGlsZC5faXNBdHRhY2hlZCAmJiAhaW5Eb2MoY2hpbGQuJGVsKSkge1xuICAgICAgY2hpbGQuX2NhbGxIb29rKCdkZXRhY2hlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaW5rZXJDYWNoZSA9IG5ldyBDYWNoZSg1MDAwKTtcblxuICAvKipcbiAgICogQSBmYWN0b3J5IHRoYXQgY2FuIGJlIHVzZWQgdG8gY3JlYXRlIGluc3RhbmNlcyBvZiBhXG4gICAqIGZyYWdtZW50LiBDYWNoZXMgdGhlIGNvbXBpbGVkIGxpbmtlciBpZiBwb3NzaWJsZS5cbiAgICpcbiAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGVsXG4gICAqL1xuICBmdW5jdGlvbiBGcmFnbWVudEZhY3Rvcnkodm0sIGVsKSB7XG4gICAgdGhpcy52bSA9IHZtO1xuICAgIHZhciB0ZW1wbGF0ZTtcbiAgICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgZWwgPT09ICdzdHJpbmcnO1xuICAgIGlmIChpc1N0cmluZyB8fCBpc1RlbXBsYXRlKGVsKSAmJiAhZWwuaGFzQXR0cmlidXRlKCd2LWlmJykpIHtcbiAgICAgIHRlbXBsYXRlID0gcGFyc2VUZW1wbGF0ZShlbCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgdGVtcGxhdGUuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIH1cbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgLy8gbGlua2VyIGNhbiBiZSBjYWNoZWQsIGJ1dCBvbmx5IGZvciBjb21wb25lbnRzXG4gICAgdmFyIGxpbmtlcjtcbiAgICB2YXIgY2lkID0gdm0uY29uc3RydWN0b3IuY2lkO1xuICAgIGlmIChjaWQgPiAwKSB7XG4gICAgICB2YXIgY2FjaGVJZCA9IGNpZCArIChpc1N0cmluZyA/IGVsIDogZ2V0T3V0ZXJIVE1MKGVsKSk7XG4gICAgICBsaW5rZXIgPSBsaW5rZXJDYWNoZS5nZXQoY2FjaGVJZCk7XG4gICAgICBpZiAoIWxpbmtlcikge1xuICAgICAgICBsaW5rZXIgPSBjb21waWxlKHRlbXBsYXRlLCB2bS4kb3B0aW9ucywgdHJ1ZSk7XG4gICAgICAgIGxpbmtlckNhY2hlLnB1dChjYWNoZUlkLCBsaW5rZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsaW5rZXIgPSBjb21waWxlKHRlbXBsYXRlLCB2bS4kb3B0aW9ucywgdHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMubGlua2VyID0gbGlua2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGZyYWdtZW50IGluc3RhbmNlIHdpdGggZ2l2ZW4gaG9zdCBhbmQgc2NvcGUuXG4gICAqXG4gICAqIEBwYXJhbSB7VnVlfSBob3N0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZVxuICAgKiBAcGFyYW0ge0ZyYWdtZW50fSBwYXJlbnRGcmFnXG4gICAqL1xuXG4gIEZyYWdtZW50RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24oaG9zdCwgc2NvcGUsIHBhcmVudEZyYWcpIHtcbiAgICB2YXIgZnJhZyA9IGNsb25lTm9kZSh0aGlzLnRlbXBsYXRlKTtcbiAgICByZXR1cm4gbmV3IEZyYWdtZW50KHRoaXMubGlua2VyLCB0aGlzLnZtLCBmcmFnLCBob3N0LCBzY29wZSwgcGFyZW50RnJhZyk7XG4gIH07XG5cbiAgdmFyIE9OID0gNzAwO1xuICB2YXIgTU9ERUwgPSA4MDA7XG4gIHZhciBCSU5EID0gODUwO1xuICB2YXIgVFJBTlNJVElPTiA9IDExMDA7XG4gIHZhciBFTCA9IDE1MDA7XG4gIHZhciBDT01QT05FTlQgPSAxNTAwO1xuICB2YXIgUEFSVElBTCA9IDE3NTA7XG4gIHZhciBJRiA9IDIxMDA7XG4gIHZhciBGT1IgPSAyMjAwO1xuICB2YXIgU0xPVCA9IDIzMDA7XG5cbiAgdmFyIHVpZCQzID0gMDtcblxuICB2YXIgdkZvciA9IHtcblxuICAgIHByaW9yaXR5OiBGT1IsXG4gICAgdGVybWluYWw6IHRydWUsXG5cbiAgICBwYXJhbXM6IFsndHJhY2stYnknLCAnc3RhZ2dlcicsICdlbnRlci1zdGFnZ2VyJywgJ2xlYXZlLXN0YWdnZXInXSxcblxuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICAvLyBzdXBwb3J0IFwiaXRlbSBpbi9vZiBpdGVtc1wiIHN5bnRheFxuICAgICAgdmFyIGluTWF0Y2ggPSB0aGlzLmV4cHJlc3Npb24ubWF0Y2goLyguKikgKD86aW58b2YpICguKikvKTtcbiAgICAgIGlmIChpbk1hdGNoKSB7XG4gICAgICAgIHZhciBpdE1hdGNoID0gaW5NYXRjaFsxXS5tYXRjaCgvXFwoKC4qKSwoLiopXFwpLyk7XG4gICAgICAgIGlmIChpdE1hdGNoKSB7XG4gICAgICAgICAgdGhpcy5pdGVyYXRvciA9IGl0TWF0Y2hbMV0udHJpbSgpO1xuICAgICAgICAgIHRoaXMuYWxpYXMgPSBpdE1hdGNoWzJdLnRyaW0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFsaWFzID0gaW5NYXRjaFsxXS50cmltKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5leHByZXNzaW9uID0gaW5NYXRjaFsyXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmFsaWFzKSB7XG4gICAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdJbnZhbGlkIHYtZm9yIGV4cHJlc3Npb24gXCInICsgdGhpcy5kZXNjcmlwdG9yLnJhdyArICdcIjogJyArICdhbGlhcyBpcyByZXF1aXJlZC4nLCB0aGlzLnZtKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyB1aWQgYXMgYSBjYWNoZSBpZGVudGlmaWVyXG4gICAgICB0aGlzLmlkID0gJ19fdi1mb3JfXycgKyArK3VpZCQzO1xuXG4gICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIGFuIG9wdGlvbiBsaXN0LFxuICAgICAgLy8gc28gdGhhdCB3ZSBrbm93IGlmIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSA8c2VsZWN0PidzXG4gICAgICAvLyB2LW1vZGVsIHdoZW4gdGhlIG9wdGlvbiBsaXN0IGhhcyBjaGFuZ2VkLlxuICAgICAgLy8gYmVjYXVzZSB2LW1vZGVsIGhhcyBhIGxvd2VyIHByaW9yaXR5IHRoYW4gdi1mb3IsXG4gICAgICAvLyB0aGUgdi1tb2RlbCBpcyBub3QgYm91bmQgaGVyZSB5ZXQsIHNvIHdlIGhhdmUgdG9cbiAgICAgIC8vIHJldHJpdmUgaXQgaW4gdGhlIGFjdHVhbCB1cGRhdGVNb2RlbCgpIGZ1bmN0aW9uLlxuICAgICAgdmFyIHRhZyA9IHRoaXMuZWwudGFnTmFtZTtcbiAgICAgIHRoaXMuaXNPcHRpb24gPSAodGFnID09PSAnT1BUSU9OJyB8fCB0YWcgPT09ICdPUFRHUk9VUCcpICYmIHRoaXMuZWwucGFyZW50Tm9kZS50YWdOYW1lID09PSAnU0VMRUNUJztcblxuICAgICAgLy8gc2V0dXAgYW5jaG9yIG5vZGVzXG4gICAgICB0aGlzLnN0YXJ0ID0gY3JlYXRlQW5jaG9yKCd2LWZvci1zdGFydCcpO1xuICAgICAgdGhpcy5lbmQgPSBjcmVhdGVBbmNob3IoJ3YtZm9yLWVuZCcpO1xuICAgICAgcmVwbGFjZSh0aGlzLmVsLCB0aGlzLmVuZCk7XG4gICAgICBiZWZvcmUodGhpcy5zdGFydCwgdGhpcy5lbmQpO1xuXG4gICAgICAvLyBjYWNoZVxuICAgICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgIC8vIGZyYWdtZW50IGZhY3RvcnlcbiAgICAgIHRoaXMuZmFjdG9yeSA9IG5ldyBGcmFnbWVudEZhY3RvcnkodGhpcy52bSwgdGhpcy5lbCk7XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGRhdGEpIHtcbiAgICAgIHRoaXMuZGlmZihkYXRhKTtcbiAgICAgIHRoaXMudXBkYXRlUmVmKCk7XG4gICAgICB0aGlzLnVwZGF0ZU1vZGVsKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERpZmYsIGJhc2VkIG9uIG5ldyBkYXRhIGFuZCBvbGQgZGF0YSwgZGV0ZXJtaW5lIHRoZVxuICAgICAqIG1pbmltdW0gYW1vdW50IG9mIERPTSBtYW5pcHVsYXRpb25zIG5lZWRlZCB0byBtYWtlIHRoZVxuICAgICAqIERPTSByZWZsZWN0IHRoZSBuZXcgZGF0YSBBcnJheS5cbiAgICAgKlxuICAgICAqIFRoZSBhbGdvcml0aG0gZGlmZnMgdGhlIG5ldyBkYXRhIEFycmF5IGJ5IHN0b3JpbmcgYVxuICAgICAqIGhpZGRlbiByZWZlcmVuY2UgdG8gYW4gb3duZXIgdm0gaW5zdGFuY2Ugb24gcHJldmlvdXNseVxuICAgICAqIHNlZW4gZGF0YS4gVGhpcyBhbGxvd3MgdXMgdG8gYWNoaWV2ZSBPKG4pIHdoaWNoIGlzXG4gICAgICogYmV0dGVyIHRoYW4gYSBsZXZlbnNodGVpbiBkaXN0YW5jZSBiYXNlZCBhbGdvcml0aG0sXG4gICAgICogd2hpY2ggaXMgTyhtICogbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhXG4gICAgICovXG5cbiAgICBkaWZmOiBmdW5jdGlvbiBkaWZmKGRhdGEpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHRoZSBBcnJheSB3YXMgY29udmVydGVkIGZyb20gYW4gT2JqZWN0XG4gICAgICB2YXIgaXRlbSA9IGRhdGFbMF07XG4gICAgICB2YXIgY29udmVydGVkRnJvbU9iamVjdCA9IHRoaXMuZnJvbU9iamVjdCA9IGlzT2JqZWN0KGl0ZW0pICYmIGhhc093bihpdGVtLCAnJGtleScpICYmIGhhc093bihpdGVtLCAnJHZhbHVlJyk7XG5cbiAgICAgIHZhciB0cmFja0J5S2V5ID0gdGhpcy5wYXJhbXMudHJhY2tCeTtcbiAgICAgIHZhciBvbGRGcmFncyA9IHRoaXMuZnJhZ3M7XG4gICAgICB2YXIgZnJhZ3MgPSB0aGlzLmZyYWdzID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICAgIHZhciBhbGlhcyA9IHRoaXMuYWxpYXM7XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLml0ZXJhdG9yO1xuICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zdGFydDtcbiAgICAgIHZhciBlbmQgPSB0aGlzLmVuZDtcbiAgICAgIHZhciBpbkRvY3VtZW50ID0gaW5Eb2Moc3RhcnQpO1xuICAgICAgdmFyIGluaXQgPSAhb2xkRnJhZ3M7XG4gICAgICB2YXIgaSwgbCwgZnJhZywga2V5LCB2YWx1ZSwgcHJpbWl0aXZlO1xuXG4gICAgICAvLyBGaXJzdCBwYXNzLCBnbyB0aHJvdWdoIHRoZSBuZXcgQXJyYXkgYW5kIGZpbGwgdXBcbiAgICAgIC8vIHRoZSBuZXcgZnJhZ3MgYXJyYXkuIElmIGEgcGllY2Ugb2YgZGF0YSBoYXMgYSBjYWNoZWRcbiAgICAgIC8vIGluc3RhbmNlIGZvciBpdCwgd2UgcmV1c2UgaXQuIE90aGVyd2lzZSBidWlsZCBhIG5ld1xuICAgICAgLy8gaW5zdGFuY2UuXG4gICAgICBmb3IgKGkgPSAwLCBsID0gZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaXRlbSA9IGRhdGFbaV07XG4gICAgICAgIGtleSA9IGNvbnZlcnRlZEZyb21PYmplY3QgPyBpdGVtLiRrZXkgOiBudWxsO1xuICAgICAgICB2YWx1ZSA9IGNvbnZlcnRlZEZyb21PYmplY3QgPyBpdGVtLiR2YWx1ZSA6IGl0ZW07XG4gICAgICAgIHByaW1pdGl2ZSA9ICFpc09iamVjdCh2YWx1ZSk7XG4gICAgICAgIGZyYWcgPSAhaW5pdCAmJiB0aGlzLmdldENhY2hlZEZyYWcodmFsdWUsIGksIGtleSk7XG4gICAgICAgIGlmIChmcmFnKSB7XG4gICAgICAgICAgLy8gcmV1c2FibGUgZnJhZ21lbnRcbiAgICAgICAgICBmcmFnLnJldXNlZCA9IHRydWU7XG4gICAgICAgICAgLy8gdXBkYXRlICRpbmRleFxuICAgICAgICAgIGZyYWcuc2NvcGUuJGluZGV4ID0gaTtcbiAgICAgICAgICAvLyB1cGRhdGUgJGtleVxuICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGZyYWcuc2NvcGUuJGtleSA9IGtleTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gdXBkYXRlIGl0ZXJhdG9yXG4gICAgICAgICAgaWYgKGl0ZXJhdG9yKSB7XG4gICAgICAgICAgICBmcmFnLnNjb3BlW2l0ZXJhdG9yXSA9IGtleSAhPT0gbnVsbCA/IGtleSA6IGk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHVwZGF0ZSBkYXRhIGZvciB0cmFjay1ieSwgb2JqZWN0IHJlcGVhdCAmXG4gICAgICAgICAgLy8gcHJpbWl0aXZlIHZhbHVlcy5cbiAgICAgICAgICBpZiAodHJhY2tCeUtleSB8fCBjb252ZXJ0ZWRGcm9tT2JqZWN0IHx8IHByaW1pdGl2ZSkge1xuICAgICAgICAgICAgd2l0aG91dENvbnZlcnNpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGZyYWcuc2NvcGVbYWxpYXNdID0gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbmV3IGlzbnRhbmNlXG4gICAgICAgICAgZnJhZyA9IHRoaXMuY3JlYXRlKHZhbHVlLCBhbGlhcywgaSwga2V5KTtcbiAgICAgICAgICBmcmFnLmZyZXNoID0gIWluaXQ7XG4gICAgICAgIH1cbiAgICAgICAgZnJhZ3NbaV0gPSBmcmFnO1xuICAgICAgICBpZiAoaW5pdCkge1xuICAgICAgICAgIGZyYWcuYmVmb3JlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gd2UncmUgZG9uZSBmb3IgdGhlIGluaXRpYWwgcmVuZGVyLlxuICAgICAgaWYgKGluaXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWNvbmQgcGFzcywgZ28gdGhyb3VnaCB0aGUgb2xkIGZyYWdtZW50cyBhbmRcbiAgICAgIC8vIGRlc3Ryb3kgdGhvc2Ugd2hvIGFyZSBub3QgcmV1c2VkIChhbmQgcmVtb3ZlIHRoZW1cbiAgICAgIC8vIGZyb20gY2FjaGUpXG4gICAgICB2YXIgcmVtb3ZhbEluZGV4ID0gMDtcbiAgICAgIHZhciB0b3RhbFJlbW92ZWQgPSBvbGRGcmFncy5sZW5ndGggLSBmcmFncy5sZW5ndGg7XG4gICAgICAvLyB3aGVuIHJlbW92aW5nIGEgbGFyZ2UgbnVtYmVyIG9mIGZyYWdtZW50cywgd2F0Y2hlciByZW1vdmFsXG4gICAgICAvLyB0dXJucyBvdXQgdG8gYmUgYSBwZXJmIGJvdHRsZW5lY2ssIHNvIHdlIGJhdGNoIHRoZSB3YXRjaGVyXG4gICAgICAvLyByZW1vdmFscyBpbnRvIGEgc2luZ2xlIGZpbHRlciBjYWxsIVxuICAgICAgdGhpcy52bS5fdkZvclJlbW92aW5nID0gdHJ1ZTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBvbGRGcmFncy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgZnJhZyA9IG9sZEZyYWdzW2ldO1xuICAgICAgICBpZiAoIWZyYWcucmV1c2VkKSB7XG4gICAgICAgICAgdGhpcy5kZWxldGVDYWNoZWRGcmFnKGZyYWcpO1xuICAgICAgICAgIHRoaXMucmVtb3ZlKGZyYWcsIHJlbW92YWxJbmRleCsrLCB0b3RhbFJlbW92ZWQsIGluRG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnZtLl92Rm9yUmVtb3ZpbmcgPSBmYWxzZTtcbiAgICAgIGlmIChyZW1vdmFsSW5kZXgpIHtcbiAgICAgICAgdGhpcy52bS5fd2F0Y2hlcnMgPSB0aGlzLnZtLl93YXRjaGVycy5maWx0ZXIoZnVuY3Rpb24odykge1xuICAgICAgICAgIHJldHVybiB3LmFjdGl2ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmFsIHBhc3MsIG1vdmUvaW5zZXJ0IG5ldyBmcmFnbWVudHMgaW50byB0aGVcbiAgICAgIC8vIHJpZ2h0IHBsYWNlLlxuICAgICAgdmFyIHRhcmdldFByZXYsIHByZXZFbCwgY3VycmVudFByZXY7XG4gICAgICB2YXIgaW5zZXJ0aW9uSW5kZXggPSAwO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGZyYWdzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBmcmFnID0gZnJhZ3NbaV07XG4gICAgICAgIC8vIHRoaXMgaXMgdGhlIGZyYWcgdGhhdCB3ZSBzaG91bGQgYmUgYWZ0ZXJcbiAgICAgICAgdGFyZ2V0UHJldiA9IGZyYWdzW2kgLSAxXTtcbiAgICAgICAgcHJldkVsID0gdGFyZ2V0UHJldiA/IHRhcmdldFByZXYuc3RhZ2dlckNiID8gdGFyZ2V0UHJldi5zdGFnZ2VyQW5jaG9yIDogdGFyZ2V0UHJldi5lbmQgfHwgdGFyZ2V0UHJldi5ub2RlIDogc3RhcnQ7XG4gICAgICAgIGlmIChmcmFnLnJldXNlZCAmJiAhZnJhZy5zdGFnZ2VyQ2IpIHtcbiAgICAgICAgICBjdXJyZW50UHJldiA9IGZpbmRQcmV2RnJhZyhmcmFnLCBzdGFydCwgdGhpcy5pZCk7XG4gICAgICAgICAgaWYgKGN1cnJlbnRQcmV2ICE9PSB0YXJnZXRQcmV2ICYmICghY3VycmVudFByZXYgfHxcbiAgICAgICAgICAgICAgLy8gb3B0aW1pemF0aW9uIGZvciBtb3ZpbmcgYSBzaW5nbGUgaXRlbS5cbiAgICAgICAgICAgICAgLy8gdGhhbmtzIHRvIHN1Z2dlc3Rpb25zIGJ5IEBsaXZvcmFzIGluICMxODA3XG4gICAgICAgICAgICAgIGZpbmRQcmV2RnJhZyhjdXJyZW50UHJldiwgc3RhcnQsIHRoaXMuaWQpICE9PSB0YXJnZXRQcmV2KSkge1xuICAgICAgICAgICAgdGhpcy5tb3ZlKGZyYWcsIHByZXZFbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG5ldyBpbnN0YW5jZSwgb3Igc3RpbGwgaW4gc3RhZ2dlci5cbiAgICAgICAgICAvLyBpbnNlcnQgd2l0aCB1cGRhdGVkIHN0YWdnZXIgaW5kZXguXG4gICAgICAgICAgdGhpcy5pbnNlcnQoZnJhZywgaW5zZXJ0aW9uSW5kZXgrKywgcHJldkVsLCBpbkRvY3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBmcmFnLnJldXNlZCA9IGZyYWcuZnJlc2ggPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGZyYWdtZW50IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhbGlhc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBba2V5XVxuICAgICAqIEByZXR1cm4ge0ZyYWdtZW50fVxuICAgICAqL1xuXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUodmFsdWUsIGFsaWFzLCBpbmRleCwga2V5KSB7XG4gICAgICB2YXIgaG9zdCA9IHRoaXMuX2hvc3Q7XG4gICAgICAvLyBjcmVhdGUgaXRlcmF0aW9uIHNjb3BlXG4gICAgICB2YXIgcGFyZW50U2NvcGUgPSB0aGlzLl9zY29wZSB8fCB0aGlzLnZtO1xuICAgICAgdmFyIHNjb3BlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRTY29wZSk7XG4gICAgICAvLyByZWYgaG9sZGVyIGZvciB0aGUgc2NvcGVcbiAgICAgIHNjb3BlLiRyZWZzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRTY29wZS4kcmVmcyk7XG4gICAgICBzY29wZS4kZWxzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRTY29wZS4kZWxzKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSBwb2ludCAkcGFyZW50IHRvIHBhcmVudCBzY29wZVxuICAgICAgc2NvcGUuJHBhcmVudCA9IHBhcmVudFNjb3BlO1xuICAgICAgLy8gZm9yIHR3by13YXkgYmluZGluZyBvbiBhbGlhc1xuICAgICAgc2NvcGUuJGZvckNvbnRleHQgPSB0aGlzO1xuICAgICAgLy8gZGVmaW5lIHNjb3BlIHByb3BlcnRpZXNcbiAgICAgIC8vIGltcG9ydGFudDogZGVmaW5lIHRoZSBzY29wZSBhbGlhcyB3aXRob3V0IGZvcmNlZCBjb252ZXJzaW9uXG4gICAgICAvLyBzbyB0aGF0IGZyb3plbiBkYXRhIHN0cnVjdHVyZXMgcmVtYWluIG5vbi1yZWFjdGl2ZS5cbiAgICAgIHdpdGhvdXRDb252ZXJzaW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZShzY29wZSwgYWxpYXMsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgZGVmaW5lUmVhY3RpdmUoc2NvcGUsICckaW5kZXgnLCBpbmRleCk7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHNjb3BlLCAnJGtleScsIGtleSk7XG4gICAgICB9IGVsc2UgaWYgKHNjb3BlLiRrZXkpIHtcbiAgICAgICAgLy8gYXZvaWQgYWNjaWRlbnRhbCBmYWxsYmFja1xuICAgICAgICBkZWYoc2NvcGUsICcka2V5JywgbnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pdGVyYXRvcikge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZShzY29wZSwgdGhpcy5pdGVyYXRvciwga2V5ICE9PSBudWxsID8ga2V5IDogaW5kZXgpO1xuICAgICAgfVxuICAgICAgdmFyIGZyYWcgPSB0aGlzLmZhY3RvcnkuY3JlYXRlKGhvc3QsIHNjb3BlLCB0aGlzLl9mcmFnKTtcbiAgICAgIGZyYWcuZm9ySWQgPSB0aGlzLmlkO1xuICAgICAgdGhpcy5jYWNoZUZyYWcodmFsdWUsIGZyYWcsIGluZGV4LCBrZXkpO1xuICAgICAgcmV0dXJuIGZyYWc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgdi1yZWYgb24gb3duZXIgdm0uXG4gICAgICovXG5cbiAgICB1cGRhdGVSZWY6IGZ1bmN0aW9uIHVwZGF0ZVJlZigpIHtcbiAgICAgIHZhciByZWYgPSB0aGlzLmRlc2NyaXB0b3IucmVmO1xuICAgICAgaWYgKCFyZWYpIHJldHVybjtcbiAgICAgIHZhciBoYXNoID0gKHRoaXMuX3Njb3BlIHx8IHRoaXMudm0pLiRyZWZzO1xuICAgICAgdmFyIHJlZnM7XG4gICAgICBpZiAoIXRoaXMuZnJvbU9iamVjdCkge1xuICAgICAgICByZWZzID0gdGhpcy5mcmFncy5tYXAoZmluZFZtRnJvbUZyYWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVmcyA9IHt9O1xuICAgICAgICB0aGlzLmZyYWdzLmZvckVhY2goZnVuY3Rpb24oZnJhZykge1xuICAgICAgICAgIHJlZnNbZnJhZy5zY29wZS4ka2V5XSA9IGZpbmRWbUZyb21GcmFnKGZyYWcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGhhc2hbcmVmXSA9IHJlZnM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZvciBvcHRpb24gbGlzdHMsIHVwZGF0ZSB0aGUgY29udGFpbmluZyB2LW1vZGVsIG9uXG4gICAgICogcGFyZW50IDxzZWxlY3Q+LlxuICAgICAqL1xuXG4gICAgdXBkYXRlTW9kZWw6IGZ1bmN0aW9uIHVwZGF0ZU1vZGVsKCkge1xuICAgICAgaWYgKHRoaXMuaXNPcHRpb24pIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuc3RhcnQucGFyZW50Tm9kZTtcbiAgICAgICAgdmFyIG1vZGVsID0gcGFyZW50ICYmIHBhcmVudC5fX3ZfbW9kZWw7XG4gICAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICAgIG1vZGVsLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGEgZnJhZ21lbnQuIEhhbmRsZXMgc3RhZ2dlcmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnJhZ21lbnR9IGZyYWdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXhcbiAgICAgKiBAcGFyYW0ge05vZGV9IHByZXZFbFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5Eb2N1bWVudFxuICAgICAqL1xuXG4gICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQoZnJhZywgaW5kZXgsIHByZXZFbCwgaW5Eb2N1bWVudCkge1xuICAgICAgaWYgKGZyYWcuc3RhZ2dlckNiKSB7XG4gICAgICAgIGZyYWcuc3RhZ2dlckNiLmNhbmNlbCgpO1xuICAgICAgICBmcmFnLnN0YWdnZXJDYiA9IG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgc3RhZ2dlckFtb3VudCA9IHRoaXMuZ2V0U3RhZ2dlcihmcmFnLCBpbmRleCwgbnVsbCwgJ2VudGVyJyk7XG4gICAgICBpZiAoaW5Eb2N1bWVudCAmJiBzdGFnZ2VyQW1vdW50KSB7XG4gICAgICAgIC8vIGNyZWF0ZSBhbiBhbmNob3IgYW5kIGluc2VydCBpdCBzeW5jaHJvbm91c2x5LFxuICAgICAgICAvLyBzbyB0aGF0IHdlIGNhbiByZXNvbHZlIHRoZSBjb3JyZWN0IG9yZGVyIHdpdGhvdXRcbiAgICAgICAgLy8gd29ycnlpbmcgYWJvdXQgc29tZSBlbGVtZW50cyBub3QgaW5zZXJ0ZWQgeWV0XG4gICAgICAgIHZhciBhbmNob3IgPSBmcmFnLnN0YWdnZXJBbmNob3I7XG4gICAgICAgIGlmICghYW5jaG9yKSB7XG4gICAgICAgICAgYW5jaG9yID0gZnJhZy5zdGFnZ2VyQW5jaG9yID0gY3JlYXRlQW5jaG9yKCdzdGFnZ2VyLWFuY2hvcicpO1xuICAgICAgICAgIGFuY2hvci5fX3ZfZnJhZyA9IGZyYWc7XG4gICAgICAgIH1cbiAgICAgICAgYWZ0ZXIoYW5jaG9yLCBwcmV2RWwpO1xuICAgICAgICB2YXIgb3AgPSBmcmFnLnN0YWdnZXJDYiA9IGNhbmNlbGxhYmxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZyYWcuc3RhZ2dlckNiID0gbnVsbDtcbiAgICAgICAgICBmcmFnLmJlZm9yZShhbmNob3IpO1xuICAgICAgICAgIHJlbW92ZShhbmNob3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0VGltZW91dChvcCwgc3RhZ2dlckFtb3VudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gcHJldkVsLm5leHRTaWJsaW5nO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAvLyByZXNldCBlbmQgYW5jaG9yIHBvc2l0aW9uIGluIGNhc2UgdGhlIHBvc2l0aW9uIHdhcyBtZXNzZWQgdXBcbiAgICAgICAgICAvLyBieSBhbiBleHRlcm5hbCBkcmFnLW4tZHJvcCBsaWJyYXJ5LlxuICAgICAgICAgIGFmdGVyKHRoaXMuZW5kLCBwcmV2RWwpO1xuICAgICAgICAgIHRhcmdldCA9IHRoaXMuZW5kO1xuICAgICAgICB9XG4gICAgICAgIGZyYWcuYmVmb3JlKHRhcmdldCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGZyYWdtZW50LiBIYW5kbGVzIHN0YWdnZXJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0ZyYWdtZW50fSBmcmFnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRvdGFsXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpbkRvY3VtZW50XG4gICAgICovXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShmcmFnLCBpbmRleCwgdG90YWwsIGluRG9jdW1lbnQpIHtcbiAgICAgIGlmIChmcmFnLnN0YWdnZXJDYikge1xuICAgICAgICBmcmFnLnN0YWdnZXJDYi5jYW5jZWwoKTtcbiAgICAgICAgZnJhZy5zdGFnZ2VyQ2IgPSBudWxsO1xuICAgICAgICAvLyBpdCdzIG5vdCBwb3NzaWJsZSBmb3IgdGhlIHNhbWUgZnJhZyB0byBiZSByZW1vdmVkXG4gICAgICAgIC8vIHR3aWNlLCBzbyBpZiB3ZSBoYXZlIGEgcGVuZGluZyBzdGFnZ2VyIGNhbGxiYWNrLFxuICAgICAgICAvLyBpdCBtZWFucyB0aGlzIGZyYWcgaXMgcXVldWVkIGZvciBlbnRlciBidXQgcmVtb3ZlZFxuICAgICAgICAvLyBiZWZvcmUgaXRzIHRyYW5zaXRpb24gc3RhcnRlZC4gU2luY2UgaXQgaXMgYWxyZWFkeVxuICAgICAgICAvLyBkZXN0cm95ZWQsIHdlIGNhbiBqdXN0IGxlYXZlIGl0IGluIGRldGFjaGVkIHN0YXRlLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc3RhZ2dlckFtb3VudCA9IHRoaXMuZ2V0U3RhZ2dlcihmcmFnLCBpbmRleCwgdG90YWwsICdsZWF2ZScpO1xuICAgICAgaWYgKGluRG9jdW1lbnQgJiYgc3RhZ2dlckFtb3VudCkge1xuICAgICAgICB2YXIgb3AgPSBmcmFnLnN0YWdnZXJDYiA9IGNhbmNlbGxhYmxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZyYWcuc3RhZ2dlckNiID0gbnVsbDtcbiAgICAgICAgICBmcmFnLnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0VGltZW91dChvcCwgc3RhZ2dlckFtb3VudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcmFnLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlIGEgZnJhZ21lbnQgdG8gYSBuZXcgcG9zaXRpb24uXG4gICAgICogRm9yY2Ugbm8gdHJhbnNpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnJhZ21lbnR9IGZyYWdcbiAgICAgKiBAcGFyYW0ge05vZGV9IHByZXZFbFxuICAgICAqL1xuXG4gICAgbW92ZTogZnVuY3Rpb24gbW92ZShmcmFnLCBwcmV2RWwpIHtcbiAgICAgIC8vIGZpeCBhIGNvbW1vbiBpc3N1ZSB3aXRoIFNvcnRhYmxlOlxuICAgICAgLy8gaWYgcHJldkVsIGRvZXNuJ3QgaGF2ZSBuZXh0U2libGluZywgdGhpcyBtZWFucyBpdCdzXG4gICAgICAvLyBiZWVuIGRyYWdnZWQgYWZ0ZXIgdGhlIGVuZCBhbmNob3IuIEp1c3QgcmUtcG9zaXRpb25cbiAgICAgIC8vIHRoZSBlbmQgYW5jaG9yIHRvIHRoZSBlbmQgb2YgdGhlIGNvbnRhaW5lci5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFwcmV2RWwubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgdGhpcy5lbmQucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVuZCk7XG4gICAgICB9XG4gICAgICBmcmFnLmJlZm9yZShwcmV2RWwubmV4dFNpYmxpbmcsIGZhbHNlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FjaGUgYSBmcmFnbWVudCB1c2luZyB0cmFjay1ieSBvciB0aGUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0ZyYWdtZW50fSBmcmFnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtrZXldXG4gICAgICovXG5cbiAgICBjYWNoZUZyYWc6IGZ1bmN0aW9uIGNhY2hlRnJhZyh2YWx1ZSwgZnJhZywgaW5kZXgsIGtleSkge1xuICAgICAgdmFyIHRyYWNrQnlLZXkgPSB0aGlzLnBhcmFtcy50cmFja0J5O1xuICAgICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcbiAgICAgIHZhciBwcmltaXRpdmUgPSAhaXNPYmplY3QodmFsdWUpO1xuICAgICAgdmFyIGlkO1xuICAgICAgaWYgKGtleSB8fCB0cmFja0J5S2V5IHx8IHByaW1pdGl2ZSkge1xuICAgICAgICBpZCA9IGdldFRyYWNrQnlLZXkoaW5kZXgsIGtleSwgdmFsdWUsIHRyYWNrQnlLZXkpO1xuICAgICAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgICAgIGNhY2hlW2lkXSA9IGZyYWc7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhY2tCeUtleSAhPT0gJyRpbmRleCcpIHtcbiAgICAgICAgICAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy53YXJuRHVwbGljYXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWQgPSB0aGlzLmlkO1xuICAgICAgICBpZiAoaGFzT3duKHZhbHVlLCBpZCkpIHtcbiAgICAgICAgICBpZiAodmFsdWVbaWRdID09PSBudWxsKSB7XG4gICAgICAgICAgICB2YWx1ZVtpZF0gPSBmcmFnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy53YXJuRHVwbGljYXRlKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgICBkZWYodmFsdWUsIGlkLCBmcmFnKTtcbiAgICAgICAgfSBlbHNlIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKCdGcm96ZW4gdi1mb3Igb2JqZWN0cyBjYW5ub3QgYmUgYXV0b21hdGljYWxseSB0cmFja2VkLCBtYWtlIHN1cmUgdG8gJyArICdwcm92aWRlIGEgdHJhY2stYnkga2V5LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmcmFnLnJhdyA9IHZhbHVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBjYWNoZWQgZnJhZ21lbnQgZnJvbSB0aGUgdmFsdWUvaW5kZXgva2V5XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEByZXR1cm4ge0ZyYWdtZW50fVxuICAgICAqL1xuXG4gICAgZ2V0Q2FjaGVkRnJhZzogZnVuY3Rpb24gZ2V0Q2FjaGVkRnJhZyh2YWx1ZSwgaW5kZXgsIGtleSkge1xuICAgICAgdmFyIHRyYWNrQnlLZXkgPSB0aGlzLnBhcmFtcy50cmFja0J5O1xuICAgICAgdmFyIHByaW1pdGl2ZSA9ICFpc09iamVjdCh2YWx1ZSk7XG4gICAgICB2YXIgZnJhZztcbiAgICAgIGlmIChrZXkgfHwgdHJhY2tCeUtleSB8fCBwcmltaXRpdmUpIHtcbiAgICAgICAgdmFyIGlkID0gZ2V0VHJhY2tCeUtleShpbmRleCwga2V5LCB2YWx1ZSwgdHJhY2tCeUtleSk7XG4gICAgICAgIGZyYWcgPSB0aGlzLmNhY2hlW2lkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyYWcgPSB2YWx1ZVt0aGlzLmlkXTtcbiAgICAgIH1cbiAgICAgIGlmIChmcmFnICYmIChmcmFnLnJldXNlZCB8fCBmcmFnLmZyZXNoKSkge1xuICAgICAgICAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy53YXJuRHVwbGljYXRlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcmFnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBmcmFnbWVudCBmcm9tIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGcmFnbWVudH0gZnJhZ1xuICAgICAqL1xuXG4gICAgZGVsZXRlQ2FjaGVkRnJhZzogZnVuY3Rpb24gZGVsZXRlQ2FjaGVkRnJhZyhmcmFnKSB7XG4gICAgICB2YXIgdmFsdWUgPSBmcmFnLnJhdztcbiAgICAgIHZhciB0cmFja0J5S2V5ID0gdGhpcy5wYXJhbXMudHJhY2tCeTtcbiAgICAgIHZhciBzY29wZSA9IGZyYWcuc2NvcGU7XG4gICAgICB2YXIgaW5kZXggPSBzY29wZS4kaW5kZXg7XG4gICAgICAvLyBmaXggIzk0ODogYXZvaWQgYWNjaWRlbnRhbGx5IGZhbGwgdGhyb3VnaCB0b1xuICAgICAgLy8gYSBwYXJlbnQgcmVwZWF0ZXIgd2hpY2ggaGFwcGVucyB0byBoYXZlICRrZXkuXG4gICAgICB2YXIga2V5ID0gaGFzT3duKHNjb3BlLCAnJGtleScpICYmIHNjb3BlLiRrZXk7XG4gICAgICB2YXIgcHJpbWl0aXZlID0gIWlzT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmICh0cmFja0J5S2V5IHx8IGtleSB8fCBwcmltaXRpdmUpIHtcbiAgICAgICAgdmFyIGlkID0gZ2V0VHJhY2tCeUtleShpbmRleCwga2V5LCB2YWx1ZSwgdHJhY2tCeUtleSk7XG4gICAgICAgIHRoaXMuY2FjaGVbaWRdID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlW3RoaXMuaWRdID0gbnVsbDtcbiAgICAgICAgZnJhZy5yYXcgPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHN0YWdnZXIgYW1vdW50IGZvciBhbiBpbnNlcnRpb24vcmVtb3ZhbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnJhZ21lbnR9IGZyYWdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdG90YWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqL1xuXG4gICAgZ2V0U3RhZ2dlcjogZnVuY3Rpb24gZ2V0U3RhZ2dlcihmcmFnLCBpbmRleCwgdG90YWwsIHR5cGUpIHtcbiAgICAgIHR5cGUgPSB0eXBlICsgJ1N0YWdnZXInO1xuICAgICAgdmFyIHRyYW5zID0gZnJhZy5ub2RlLl9fdl90cmFucztcbiAgICAgIHZhciBob29rcyA9IHRyYW5zICYmIHRyYW5zLmhvb2tzO1xuICAgICAgdmFyIGhvb2sgPSBob29rcyAmJiAoaG9va3NbdHlwZV0gfHwgaG9va3Muc3RhZ2dlcik7XG4gICAgICByZXR1cm4gaG9vayA/IGhvb2suY2FsbChmcmFnLCBpbmRleCwgdG90YWwpIDogaW5kZXggKiBwYXJzZUludCh0aGlzLnBhcmFtc1t0eXBlXSB8fCB0aGlzLnBhcmFtcy5zdGFnZ2VyLCAxMCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByZS1wcm9jZXNzIHRoZSB2YWx1ZSBiZWZvcmUgcGlwaW5nIGl0IHRocm91Z2ggdGhlXG4gICAgICogZmlsdGVycy4gVGhpcyBpcyBwYXNzZWQgdG8gYW5kIGNhbGxlZCBieSB0aGUgd2F0Y2hlci5cbiAgICAgKi9cblxuICAgIF9wcmVQcm9jZXNzOiBmdW5jdGlvbiBfcHJlUHJvY2Vzcyh2YWx1ZSkge1xuICAgICAgLy8gcmVnYXJkbGVzcyBvZiB0eXBlLCBzdG9yZSB0aGUgdW4tZmlsdGVyZWQgcmF3IHZhbHVlLlxuICAgICAgdGhpcy5yYXdWYWx1ZSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQb3N0LXByb2Nlc3MgdGhlIHZhbHVlIGFmdGVyIGl0IGhhcyBiZWVuIHBpcGVkIHRocm91Z2hcbiAgICAgKiB0aGUgZmlsdGVycy4gVGhpcyBpcyBwYXNzZWQgdG8gYW5kIGNhbGxlZCBieSB0aGUgd2F0Y2hlci5cbiAgICAgKlxuICAgICAqIEl0IGlzIG5lY2Vzc2FyeSBmb3IgdGhpcyB0byBiZSBjYWxsZWQgZHVyaW5nIHRoZVxuICAgICAqIHdhdGNoZXIncyBkZXBlbmRlbmN5IGNvbGxlY3Rpb24gcGhhc2UgYmVjYXVzZSB3ZSB3YW50XG4gICAgICogdGhlIHYtZm9yIHRvIHVwZGF0ZSB3aGVuIHRoZSBzb3VyY2UgT2JqZWN0IGlzIG11dGF0ZWQuXG4gICAgICovXG5cbiAgICBfcG9zdFByb2Nlc3M6IGZ1bmN0aW9uIF9wb3N0UHJvY2Vzcyh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gY29udmVydCBwbGFpbiBvYmplY3QgdG8gYXJyYXkuXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICAgICAgICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzID0gbmV3IEFycmF5KGkpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICByZXNbaV0gPSB7XG4gICAgICAgICAgICAka2V5OiBrZXksXG4gICAgICAgICAgICAkdmFsdWU6IHZhbHVlW2tleV1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSByYW5nZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlIHx8IFtdO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIGlmICh0aGlzLmRlc2NyaXB0b3IucmVmKSB7XG4gICAgICAgICh0aGlzLl9zY29wZSB8fCB0aGlzLnZtKS4kcmVmc1t0aGlzLmRlc2NyaXB0b3IucmVmXSA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5mcmFncykge1xuICAgICAgICB2YXIgaSA9IHRoaXMuZnJhZ3MubGVuZ3RoO1xuICAgICAgICB2YXIgZnJhZztcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIGZyYWcgPSB0aGlzLmZyYWdzW2ldO1xuICAgICAgICAgIHRoaXMuZGVsZXRlQ2FjaGVkRnJhZyhmcmFnKTtcbiAgICAgICAgICBmcmFnLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSGVscGVyIHRvIGZpbmQgdGhlIHByZXZpb3VzIGVsZW1lbnQgdGhhdCBpcyBhIGZyYWdtZW50XG4gICAqIGFuY2hvci4gVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBhIGRlc3Ryb3llZCBmcmFnJ3NcbiAgICogZWxlbWVudCBjb3VsZCBzdGlsbCBiZSBsaW5nZXJpbmcgaW4gdGhlIERPTSBiZWZvcmUgaXRzXG4gICAqIGxlYXZpbmcgdHJhbnNpdGlvbiBmaW5pc2hlcywgYnV0IGl0cyBpbnNlcnRlZCBmbGFnXG4gICAqIHNob3VsZCBoYXZlIGJlZW4gc2V0IHRvIGZhbHNlIHNvIHdlIGNhbiBza2lwIHRoZW0uXG4gICAqXG4gICAqIElmIHRoaXMgaXMgYSBibG9jayByZXBlYXQsIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIG9ubHlcbiAgICogcmV0dXJuIGZyYWcgdGhhdCBpcyBib3VuZCB0byB0aGlzIHYtZm9yLiAoc2VlICM5MjkpXG4gICAqXG4gICAqIEBwYXJhbSB7RnJhZ21lbnR9IGZyYWdcbiAgICogQHBhcmFtIHtDb21tZW50fFRleHR9IGFuY2hvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICogQHJldHVybiB7RnJhZ21lbnR9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGZpbmRQcmV2RnJhZyhmcmFnLCBhbmNob3IsIGlkKSB7XG4gICAgdmFyIGVsID0gZnJhZy5ub2RlLnByZXZpb3VzU2libGluZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWVsKSByZXR1cm47XG4gICAgZnJhZyA9IGVsLl9fdl9mcmFnO1xuICAgIHdoaWxlICgoIWZyYWcgfHwgZnJhZy5mb3JJZCAhPT0gaWQgfHwgIWZyYWcuaW5zZXJ0ZWQpICYmIGVsICE9PSBhbmNob3IpIHtcbiAgICAgIGVsID0gZWwucHJldmlvdXNTaWJsaW5nO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWVsKSByZXR1cm47XG4gICAgICBmcmFnID0gZWwuX192X2ZyYWc7XG4gICAgfVxuICAgIHJldHVybiBmcmFnO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSB2bSBmcm9tIGEgZnJhZ21lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RnJhZ21lbnR9IGZyYWdcbiAgICogQHJldHVybiB7VnVlfHVuZGVmaW5lZH1cbiAgICovXG5cbiAgZnVuY3Rpb24gZmluZFZtRnJvbUZyYWcoZnJhZykge1xuICAgIHZhciBub2RlID0gZnJhZy5ub2RlO1xuICAgIC8vIGhhbmRsZSBtdWx0aS1ub2RlIGZyYWdcbiAgICBpZiAoZnJhZy5lbmQpIHtcbiAgICAgIHdoaWxlICghbm9kZS5fX3Z1ZV9fICYmIG5vZGUgIT09IGZyYWcuZW5kICYmIG5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlLl9fdnVlX187XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgcmFuZ2UgYXJyYXkgZnJvbSBnaXZlbiBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBuXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuICBmdW5jdGlvbiByYW5nZShuKSB7XG4gICAgdmFyIGkgPSAtMTtcbiAgICB2YXIgcmV0ID0gbmV3IEFycmF5KE1hdGguZmxvb3IobikpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICByZXRbaV0gPSBpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdHJhY2sgYnkga2V5IGZvciBhbiBpdGVtLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXhcbiAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbdHJhY2tCeUtleV1cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0VHJhY2tCeUtleShpbmRleCwga2V5LCB2YWx1ZSwgdHJhY2tCeUtleSkge1xuICAgIHJldHVybiB0cmFja0J5S2V5ID8gdHJhY2tCeUtleSA9PT0gJyRpbmRleCcgPyBpbmRleCA6IHRyYWNrQnlLZXkuY2hhckF0KDApLm1hdGNoKC9cXHcvKSA/IGdldFBhdGgodmFsdWUsIHRyYWNrQnlLZXkpIDogdmFsdWVbdHJhY2tCeUtleV0gOiBrZXkgfHwgdmFsdWU7XG4gIH1cblxuICBpZiAoJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdkZvci53YXJuRHVwbGljYXRlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHdhcm4oJ0R1cGxpY2F0ZSB2YWx1ZSBmb3VuZCBpbiB2LWZvcj1cIicgKyB0aGlzLmRlc2NyaXB0b3IucmF3ICsgJ1wiOiAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJy4gVXNlIHRyYWNrLWJ5PVwiJGluZGV4XCIgaWYgJyArICd5b3UgYXJlIGV4cGVjdGluZyBkdXBsaWNhdGUgdmFsdWVzLicsIHRoaXMudm0pO1xuICAgIH07XG4gIH1cblxuICB2YXIgdklmID0ge1xuXG4gICAgcHJpb3JpdHk6IElGLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuXG4gICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgIHZhciBlbCA9IHRoaXMuZWw7XG4gICAgICBpZiAoIWVsLl9fdnVlX18pIHtcbiAgICAgICAgLy8gY2hlY2sgZWxzZSBibG9ja1xuICAgICAgICB2YXIgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgaWYgKG5leHQgJiYgZ2V0QXR0cihuZXh0LCAndi1lbHNlJykgIT09IG51bGwpIHtcbiAgICAgICAgICByZW1vdmUobmV4dCk7XG4gICAgICAgICAgdGhpcy5lbHNlRWwgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIC8vIGNoZWNrIG1haW4gYmxvY2tcbiAgICAgICAgdGhpcy5hbmNob3IgPSBjcmVhdGVBbmNob3IoJ3YtaWYnKTtcbiAgICAgICAgcmVwbGFjZShlbCwgdGhpcy5hbmNob3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ3YtaWY9XCInICsgdGhpcy5leHByZXNzaW9uICsgJ1wiIGNhbm5vdCBiZSAnICsgJ3VzZWQgb24gYW4gaW5zdGFuY2Ugcm9vdCBlbGVtZW50LicsIHRoaXMudm0pO1xuICAgICAgICB0aGlzLmludmFsaWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuaW52YWxpZCkgcmV0dXJuO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5mcmFnKSB7XG4gICAgICAgICAgdGhpcy5pbnNlcnQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQoKSB7XG4gICAgICBpZiAodGhpcy5lbHNlRnJhZykge1xuICAgICAgICB0aGlzLmVsc2VGcmFnLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLmVsc2VGcmFnID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIGxhenkgaW5pdCBmYWN0b3J5XG4gICAgICBpZiAoIXRoaXMuZmFjdG9yeSkge1xuICAgICAgICB0aGlzLmZhY3RvcnkgPSBuZXcgRnJhZ21lbnRGYWN0b3J5KHRoaXMudm0sIHRoaXMuZWwpO1xuICAgICAgfVxuICAgICAgdGhpcy5mcmFnID0gdGhpcy5mYWN0b3J5LmNyZWF0ZSh0aGlzLl9ob3N0LCB0aGlzLl9zY29wZSwgdGhpcy5fZnJhZyk7XG4gICAgICB0aGlzLmZyYWcuYmVmb3JlKHRoaXMuYW5jaG9yKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICBpZiAodGhpcy5mcmFnKSB7XG4gICAgICAgIHRoaXMuZnJhZy5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5mcmFnID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmVsc2VFbCAmJiAhdGhpcy5lbHNlRnJhZykge1xuICAgICAgICBpZiAoIXRoaXMuZWxzZUZhY3RvcnkpIHtcbiAgICAgICAgICB0aGlzLmVsc2VGYWN0b3J5ID0gbmV3IEZyYWdtZW50RmFjdG9yeSh0aGlzLmVsc2VFbC5fY29udGV4dCB8fCB0aGlzLnZtLCB0aGlzLmVsc2VFbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbHNlRnJhZyA9IHRoaXMuZWxzZUZhY3RvcnkuY3JlYXRlKHRoaXMuX2hvc3QsIHRoaXMuX3Njb3BlLCB0aGlzLl9mcmFnKTtcbiAgICAgICAgdGhpcy5lbHNlRnJhZy5iZWZvcmUodGhpcy5hbmNob3IpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIGlmICh0aGlzLmZyYWcpIHtcbiAgICAgICAgdGhpcy5mcmFnLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmVsc2VGcmFnKSB7XG4gICAgICAgIHRoaXMuZWxzZUZyYWcuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgc2hvdyA9IHtcblxuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICAvLyBjaGVjayBlbHNlIGJsb2NrXG4gICAgICB2YXIgbmV4dCA9IHRoaXMuZWwubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgaWYgKG5leHQgJiYgZ2V0QXR0cihuZXh0LCAndi1lbHNlJykgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5lbHNlRWwgPSBuZXh0O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgdGhpcy5hcHBseSh0aGlzLmVsLCB2YWx1ZSk7XG4gICAgICBpZiAodGhpcy5lbHNlRWwpIHtcbiAgICAgICAgdGhpcy5hcHBseSh0aGlzLmVsc2VFbCwgIXZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KGVsLCB2YWx1ZSkge1xuICAgICAgaWYgKGluRG9jKGVsKSkge1xuICAgICAgICBhcHBseVRyYW5zaXRpb24oZWwsIHZhbHVlID8gMSA6IC0xLCB0b2dnbGUsIHRoaXMudm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9nZ2xlKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gJycgOiAnbm9uZSc7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciB0ZXh0JDIgPSB7XG5cbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICAgIHZhciBpc1JhbmdlID0gZWwudHlwZSA9PT0gJ3JhbmdlJztcbiAgICAgIHZhciBsYXp5ID0gdGhpcy5wYXJhbXMubGF6eTtcbiAgICAgIHZhciBudW1iZXIgPSB0aGlzLnBhcmFtcy5udW1iZXI7XG4gICAgICB2YXIgZGVib3VuY2UgPSB0aGlzLnBhcmFtcy5kZWJvdW5jZTtcblxuICAgICAgLy8gaGFuZGxlIGNvbXBvc2l0aW9uIGV2ZW50cy5cbiAgICAgIC8vICAgaHR0cDovL2Jsb2cuZXZhbnlvdS5tZS8yMDE0LzAxLzAzL2NvbXBvc2l0aW9uLWV2ZW50L1xuICAgICAgLy8gc2tpcCB0aGlzIGZvciBBbmRyb2lkIGJlY2F1c2UgaXQgaGFuZGxlcyBjb21wb3NpdGlvblxuICAgICAgLy8gZXZlbnRzIHF1aXRlIGRpZmZlcmVudGx5LiBBbmRyb2lkIGRvZXNuJ3QgdHJpZ2dlclxuICAgICAgLy8gY29tcG9zaXRpb24gZXZlbnRzIGZvciBsYW5ndWFnZSBpbnB1dCBtZXRob2RzIGUuZy5cbiAgICAgIC8vIENoaW5lc2UsIGJ1dCBpbnN0ZWFkIHRyaWdnZXJzIHRoZW0gZm9yIHNwZWxsaW5nXG4gICAgICAvLyBzdWdnZXN0aW9ucy4uLiAoc2VlIERpc2N1c3Npb24vIzE2MilcbiAgICAgIHZhciBjb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgIGlmICghaXNBbmRyb2lkICYmICFpc1JhbmdlKSB7XG4gICAgICAgIHRoaXMub24oJ2NvbXBvc2l0aW9uc3RhcnQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjb21wb3NpbmcgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbignY29tcG9zaXRpb25lbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgICAgICAvLyBpbiBJRTExIHRoZSBcImNvbXBvc2l0aW9uZW5kXCIgZXZlbnQgZmlyZXMgQUZURVJcbiAgICAgICAgICAvLyB0aGUgXCJpbnB1dFwiIGV2ZW50LCBzbyB0aGUgaW5wdXQgaGFuZGxlciBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gYXQgdGhlIGVuZC4uLiBoYXZlIHRvIGNhbGwgaXQgaGVyZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vICMxMzI3OiBpbiBsYXp5IG1vZGUgdGhpcyBpcyB1bmVjZXNzYXJ5LlxuICAgICAgICAgIGlmICghbGF6eSkge1xuICAgICAgICAgICAgc2VsZi5saXN0ZW5lcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHByZXZlbnQgbWVzc2luZyB3aXRoIHRoZSBpbnB1dCB3aGVuIHVzZXIgaXMgdHlwaW5nLFxuICAgICAgLy8gYW5kIGZvcmNlIHVwZGF0ZSBvbiBibHVyLlxuICAgICAgdGhpcy5mb2N1c2VkID0gZmFsc2U7XG4gICAgICBpZiAoIWlzUmFuZ2UgJiYgIWxhenkpIHtcbiAgICAgICAgdGhpcy5vbignZm9jdXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmZvY3VzZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbignYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuZm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICAgIC8vIGRvIG5vdCBzeW5jIHZhbHVlIGFmdGVyIGZyYWdtZW50IHJlbW92YWwgKCMyMDE3KVxuICAgICAgICAgIGlmICghc2VsZi5fZnJhZyB8fCBzZWxmLl9mcmFnLmluc2VydGVkKSB7XG4gICAgICAgICAgICBzZWxmLnJhd0xpc3RlbmVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gTm93IGF0dGFjaCB0aGUgbWFpbiBsaXN0ZW5lclxuICAgICAgdGhpcy5saXN0ZW5lciA9IHRoaXMucmF3TGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNvbXBvc2luZyB8fCAhc2VsZi5fYm91bmQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbCA9IG51bWJlciB8fCBpc1JhbmdlID8gdG9OdW1iZXIoZWwudmFsdWUpIDogZWwudmFsdWU7XG4gICAgICAgIHNlbGYuc2V0KHZhbCk7XG4gICAgICAgIC8vIGZvcmNlIHVwZGF0ZSBvbiBuZXh0IHRpY2sgdG8gYXZvaWQgbG9jayAmIHNhbWUgdmFsdWVcbiAgICAgICAgLy8gYWxzbyBvbmx5IHVwZGF0ZSB3aGVuIHVzZXIgaXMgbm90IHR5cGluZ1xuICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoc2VsZi5fYm91bmQgJiYgIXNlbGYuZm9jdXNlZCkge1xuICAgICAgICAgICAgc2VsZi51cGRhdGUoc2VsZi5fd2F0Y2hlci52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIC8vIGFwcGx5IGRlYm91bmNlXG4gICAgICBpZiAoZGVib3VuY2UpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lciA9IF9kZWJvdW5jZSh0aGlzLmxpc3RlbmVyLCBkZWJvdW5jZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN1cHBvcnQgalF1ZXJ5IGV2ZW50cywgc2luY2UgalF1ZXJ5LnRyaWdnZXIoKSBkb2Vzbid0XG4gICAgICAvLyB0cmlnZ2VyIG5hdGl2ZSBldmVudHMgaW4gc29tZSBjYXNlcyBhbmQgc29tZSBwbHVnaW5zXG4gICAgICAvLyByZWx5IG9uICQudHJpZ2dlcigpXG4gICAgICAvL1xuICAgICAgLy8gV2Ugd2FudCB0byBtYWtlIHN1cmUgaWYgYSBsaXN0ZW5lciBpcyBhdHRhY2hlZCB1c2luZ1xuICAgICAgLy8galF1ZXJ5LCBpdCBpcyBhbHNvIHJlbW92ZWQgd2l0aCBqUXVlcnksIHRoYXQncyB3aHlcbiAgICAgIC8vIHdlIGRvIHRoZSBjaGVjayBmb3IgZWFjaCBkaXJlY3RpdmUgaW5zdGFuY2UgYW5kXG4gICAgICAvLyBzdG9yZSB0aGF0IGNoZWNrIHJlc3VsdCBvbiBpdHNlbGYuIFRoaXMgYWxzbyBhbGxvd3NcbiAgICAgIC8vIGVhc2llciB0ZXN0IGNvdmVyYWdlIGNvbnRyb2wgYnkgdW5zZXR0aW5nIHRoZSBnbG9iYWxcbiAgICAgIC8vIGpRdWVyeSB2YXJpYWJsZSBpbiB0ZXN0cy5cbiAgICAgIHRoaXMuaGFzalF1ZXJ5ID0gdHlwZW9mIGpRdWVyeSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICh0aGlzLmhhc2pRdWVyeSkge1xuICAgICAgICB2YXIgbWV0aG9kID0galF1ZXJ5LmZuLm9uID8gJ29uJyA6ICdiaW5kJztcbiAgICAgICAgalF1ZXJ5KGVsKVttZXRob2RdKCdjaGFuZ2UnLCB0aGlzLnJhd0xpc3RlbmVyKTtcbiAgICAgICAgaWYgKCFsYXp5KSB7XG4gICAgICAgICAgalF1ZXJ5KGVsKVttZXRob2RdKCdpbnB1dCcsIHRoaXMubGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uKCdjaGFuZ2UnLCB0aGlzLnJhd0xpc3RlbmVyKTtcbiAgICAgICAgaWYgKCFsYXp5KSB7XG4gICAgICAgICAgdGhpcy5vbignaW5wdXQnLCB0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJRTkgZG9lc24ndCBmaXJlIGlucHV0IGV2ZW50IG9uIGJhY2tzcGFjZS9kZWwvY3V0XG4gICAgICBpZiAoIWxhenkgJiYgaXNJRTkpIHtcbiAgICAgICAgdGhpcy5vbignY3V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbmV4dFRpY2soc2VsZi5saXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSA0NiB8fCBlLmtleUNvZGUgPT09IDgpIHtcbiAgICAgICAgICAgIHNlbGYubGlzdGVuZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXQgaW5pdGlhbCB2YWx1ZSBpZiBwcmVzZW50XG4gICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKCd2YWx1ZScpIHx8IGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgZWwudmFsdWUudHJpbSgpKSB7XG4gICAgICAgIHRoaXMuYWZ0ZXJCaW5kID0gdGhpcy5saXN0ZW5lcjtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUodmFsdWUpIHtcbiAgICAgIC8vICMzMDI5IG9ubHkgdXBkYXRlIHdoZW4gdGhlIHZhbHVlIGNoYW5nZXMuIFRoaXMgcHJldmVudFxuICAgICAgLy8gYnJvd3NlcnMgZnJvbSBvdmVyd3JpdGluZyB2YWx1ZXMgbGlrZSBzZWxlY3Rpb25TdGFydFxuICAgICAgdmFsdWUgPSBfdG9TdHJpbmcodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLmVsLnZhbHVlKSB0aGlzLmVsLnZhbHVlID0gdmFsdWU7XG4gICAgfSxcblxuICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICAgIGlmICh0aGlzLmhhc2pRdWVyeSkge1xuICAgICAgICB2YXIgbWV0aG9kID0galF1ZXJ5LmZuLm9mZiA/ICdvZmYnIDogJ3VuYmluZCc7XG4gICAgICAgIGpRdWVyeShlbClbbWV0aG9kXSgnY2hhbmdlJywgdGhpcy5saXN0ZW5lcik7XG4gICAgICAgIGpRdWVyeShlbClbbWV0aG9kXSgnaW5wdXQnLCB0aGlzLmxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHJhZGlvID0ge1xuXG4gICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBlbCA9IHRoaXMuZWw7XG5cbiAgICAgIHRoaXMuZ2V0VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gdmFsdWUgb3ZlcndyaXRlIHZpYSB2LWJpbmQ6dmFsdWVcbiAgICAgICAgaWYgKGVsLmhhc093blByb3BlcnR5KCdfdmFsdWUnKSkge1xuICAgICAgICAgIHJldHVybiBlbC5fdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbCA9IGVsLnZhbHVlO1xuICAgICAgICBpZiAoc2VsZi5wYXJhbXMubnVtYmVyKSB7XG4gICAgICAgICAgdmFsID0gdG9OdW1iZXIodmFsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5saXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLnNldChzZWxmLmdldFZhbHVlKCkpO1xuICAgICAgfTtcbiAgICAgIHRoaXMub24oJ2NoYW5nZScsIHRoaXMubGlzdGVuZXIpO1xuXG4gICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKCdjaGVja2VkJykpIHtcbiAgICAgICAgdGhpcy5hZnRlckJpbmQgPSB0aGlzLmxpc3RlbmVyO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgdGhpcy5lbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgdGhpcy5nZXRWYWx1ZSgpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNlbGVjdCA9IHtcblxuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuXG4gICAgICAvLyBtZXRob2QgdG8gZm9yY2UgdXBkYXRlIERPTSB1c2luZyBsYXRlc3QgdmFsdWUuXG4gICAgICB0aGlzLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzZWxmLl93YXRjaGVyKSB7XG4gICAgICAgICAgc2VsZi51cGRhdGUoc2VsZi5fd2F0Y2hlci5nZXQoKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgYSBtdWx0aXBsZSBzZWxlY3RcbiAgICAgIHZhciBtdWx0aXBsZSA9IHRoaXMubXVsdGlwbGUgPSBlbC5oYXNBdHRyaWJ1dGUoJ211bHRpcGxlJyk7XG5cbiAgICAgIC8vIGF0dGFjaCBsaXN0ZW5lclxuICAgICAgdGhpcy5saXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShlbCwgbXVsdGlwbGUpO1xuICAgICAgICB2YWx1ZSA9IHNlbGYucGFyYW1zLm51bWJlciA/IGlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKHRvTnVtYmVyKSA6IHRvTnVtYmVyKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICBzZWxmLnNldCh2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgdGhpcy5vbignY2hhbmdlJywgdGhpcy5saXN0ZW5lcik7XG5cbiAgICAgIC8vIGlmIGhhcyBpbml0aWFsIHZhbHVlLCBzZXQgYWZ0ZXJCaW5kXG4gICAgICB2YXIgaW5pdFZhbHVlID0gZ2V0VmFsdWUoZWwsIG11bHRpcGxlLCB0cnVlKTtcbiAgICAgIGlmIChtdWx0aXBsZSAmJiBpbml0VmFsdWUubGVuZ3RoIHx8ICFtdWx0aXBsZSAmJiBpbml0VmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5hZnRlckJpbmQgPSB0aGlzLmxpc3RlbmVyO1xuICAgICAgfVxuXG4gICAgICAvLyBBbGwgbWFqb3IgYnJvd3NlcnMgZXhjZXB0IEZpcmVmb3ggcmVzZXRzXG4gICAgICAvLyBzZWxlY3RlZEluZGV4IHdpdGggdmFsdWUgLTEgdG8gMCB3aGVuIHRoZSBlbGVtZW50XG4gICAgICAvLyBpcyBhcHBlbmRlZCB0byBhIG5ldyBwYXJlbnQsIHRoZXJlZm9yZSB3ZSBoYXZlIHRvXG4gICAgICAvLyBmb3JjZSBhIERPTSB1cGRhdGUgd2hlbmV2ZXIgdGhhdCBoYXBwZW5zLi4uXG4gICAgICB0aGlzLnZtLiRvbignaG9vazphdHRhY2hlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBuZXh0VGljayhfdGhpcy5mb3JjZVVwZGF0ZSk7XG4gICAgICB9KTtcbiAgICAgIGlmICghaW5Eb2MoZWwpKSB7XG4gICAgICAgIG5leHRUaWNrKHRoaXMuZm9yY2VVcGRhdGUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgIHZhciBtdWx0aSA9IHRoaXMubXVsdGlwbGUgJiYgaXNBcnJheSh2YWx1ZSk7XG4gICAgICB2YXIgb3B0aW9ucyA9IGVsLm9wdGlvbnM7XG4gICAgICB2YXIgaSA9IG9wdGlvbnMubGVuZ3RoO1xuICAgICAgdmFyIG9wLCB2YWw7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIG9wID0gb3B0aW9uc1tpXTtcbiAgICAgICAgdmFsID0gb3AuaGFzT3duUHJvcGVydHkoJ192YWx1ZScpID8gb3AuX3ZhbHVlIDogb3AudmFsdWU7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuICAgICAgICBvcC5zZWxlY3RlZCA9IG11bHRpID8gaW5kZXhPZiQxKHZhbHVlLCB2YWwpID4gLTEgOiBsb29zZUVxdWFsKHZhbHVlLCB2YWwpO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aGlzLnZtLiRvZmYoJ2hvb2s6YXR0YWNoZWQnLCB0aGlzLmZvcmNlVXBkYXRlKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBzZWxlY3QgdmFsdWVcbiAgICpcbiAgICogQHBhcmFtIHtTZWxlY3RFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG11bHRpXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5pdFxuICAgKiBAcmV0dXJuIHtBcnJheXwqfVxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRWYWx1ZShlbCwgbXVsdGksIGluaXQpIHtcbiAgICB2YXIgcmVzID0gbXVsdGkgPyBbXSA6IG51bGw7XG4gICAgdmFyIG9wLCB2YWwsIHNlbGVjdGVkO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIG9wID0gZWwub3B0aW9uc1tpXTtcbiAgICAgIHNlbGVjdGVkID0gaW5pdCA/IG9wLmhhc0F0dHJpYnV0ZSgnc2VsZWN0ZWQnKSA6IG9wLnNlbGVjdGVkO1xuICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgIHZhbCA9IG9wLmhhc093blByb3BlcnR5KCdfdmFsdWUnKSA/IG9wLl92YWx1ZSA6IG9wLnZhbHVlO1xuICAgICAgICBpZiAobXVsdGkpIHtcbiAgICAgICAgICByZXMucHVzaCh2YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBOYXRpdmUgQXJyYXkuaW5kZXhPZiB1c2VzIHN0cmljdCBlcXVhbCwgYnV0IGluIHRoaXNcbiAgICogY2FzZSB3ZSBuZWVkIHRvIG1hdGNoIHN0cmluZy9udW1iZXJzIHdpdGggY3VzdG9tIGVxdWFsLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJcbiAgICogQHBhcmFtIHsqfSB2YWxcbiAgICovXG5cbiAgZnVuY3Rpb24gaW5kZXhPZiQxKGFyciwgdmFsKSB7XG4gICAgdmFyIGkgPSBhcnIubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgdmFyIGNoZWNrYm94ID0ge1xuXG4gICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBlbCA9IHRoaXMuZWw7XG5cbiAgICAgIHRoaXMuZ2V0VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGVsLmhhc093blByb3BlcnR5KCdfdmFsdWUnKSA/IGVsLl92YWx1ZSA6IHNlbGYucGFyYW1zLm51bWJlciA/IHRvTnVtYmVyKGVsLnZhbHVlKSA6IGVsLnZhbHVlO1xuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gZ2V0Qm9vbGVhblZhbHVlKCkge1xuICAgICAgICB2YXIgdmFsID0gZWwuY2hlY2tlZDtcbiAgICAgICAgaWYgKHZhbCAmJiBlbC5oYXNPd25Qcm9wZXJ0eSgnX3RydWVWYWx1ZScpKSB7XG4gICAgICAgICAgcmV0dXJuIGVsLl90cnVlVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2YWwgJiYgZWwuaGFzT3duUHJvcGVydHkoJ19mYWxzZVZhbHVlJykpIHtcbiAgICAgICAgICByZXR1cm4gZWwuX2ZhbHNlVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5saXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbW9kZWwgPSBzZWxmLl93YXRjaGVyLnZhbHVlO1xuICAgICAgICBpZiAoaXNBcnJheShtb2RlbCkpIHtcbiAgICAgICAgICB2YXIgdmFsID0gc2VsZi5nZXRWYWx1ZSgpO1xuICAgICAgICAgIGlmIChlbC5jaGVja2VkKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXhPZihtb2RlbCwgdmFsKSA8IDApIHtcbiAgICAgICAgICAgICAgbW9kZWwucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2RlbC4kcmVtb3ZlKHZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuc2V0KGdldEJvb2xlYW5WYWx1ZSgpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5vbignY2hhbmdlJywgdGhpcy5saXN0ZW5lcik7XG4gICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKCdjaGVja2VkJykpIHtcbiAgICAgICAgdGhpcy5hZnRlckJpbmQgPSB0aGlzLmxpc3RlbmVyO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBlbC5jaGVja2VkID0gaW5kZXhPZih2YWx1ZSwgdGhpcy5nZXRWYWx1ZSgpKSA+IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVsLmhhc093blByb3BlcnR5KCdfdHJ1ZVZhbHVlJykpIHtcbiAgICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgZWwuX3RydWVWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWwuY2hlY2tlZCA9ICEhdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZXJzID0ge1xuICAgIHRleHQ6IHRleHQkMixcbiAgICByYWRpbzogcmFkaW8sXG4gICAgc2VsZWN0OiBzZWxlY3QsXG4gICAgY2hlY2tib3g6IGNoZWNrYm94XG4gIH07XG5cbiAgdmFyIG1vZGVsID0ge1xuXG4gICAgcHJpb3JpdHk6IE1PREVMLFxuICAgIHR3b1dheTogdHJ1ZSxcbiAgICBoYW5kbGVyczogaGFuZGxlcnMsXG4gICAgcGFyYW1zOiBbJ2xhenknLCAnbnVtYmVyJywgJ2RlYm91bmNlJ10sXG5cbiAgICAvKipcbiAgICAgKiBQb3NzaWJsZSBlbGVtZW50czpcbiAgICAgKiAgIDxzZWxlY3Q+XG4gICAgICogICA8dGV4dGFyZWE+XG4gICAgICogICA8aW5wdXQgdHlwZT1cIipcIj5cbiAgICAgKiAgICAgLSB0ZXh0XG4gICAgICogICAgIC0gY2hlY2tib3hcbiAgICAgKiAgICAgLSByYWRpb1xuICAgICAqICAgICAtIG51bWJlclxuICAgICAqL1xuXG4gICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgIC8vIGZyaWVuZGx5IHdhcm5pbmcuLi5cbiAgICAgIHRoaXMuY2hlY2tGaWx0ZXJzKCk7XG4gICAgICBpZiAodGhpcy5oYXNSZWFkICYmICF0aGlzLmhhc1dyaXRlKSB7XG4gICAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIGEgcmVhZC1vbmx5IGZpbHRlciB3aXRoICcgKyAndi1tb2RlbD1cIicgKyB0aGlzLmRlc2NyaXB0b3IucmF3ICsgJ1wiLiAnICsgJ1lvdSBtaWdodCB3YW50IHRvIHVzZSBhIHR3by13YXkgZmlsdGVyIHRvIGVuc3VyZSBjb3JyZWN0IGJlaGF2aW9yLicsIHRoaXMudm0pO1xuICAgICAgfVxuICAgICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICAgIHZhciB0YWcgPSBlbC50YWdOYW1lO1xuICAgICAgdmFyIGhhbmRsZXI7XG4gICAgICBpZiAodGFnID09PSAnSU5QVVQnKSB7XG4gICAgICAgIGhhbmRsZXIgPSBoYW5kbGVyc1tlbC50eXBlXSB8fCBoYW5kbGVycy50ZXh0O1xuICAgICAgfSBlbHNlIGlmICh0YWcgPT09ICdTRUxFQ1QnKSB7XG4gICAgICAgIGhhbmRsZXIgPSBoYW5kbGVycy5zZWxlY3Q7XG4gICAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ1RFWFRBUkVBJykge1xuICAgICAgICBoYW5kbGVyID0gaGFuZGxlcnMudGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCd2LW1vZGVsIGRvZXMgbm90IHN1cHBvcnQgZWxlbWVudCB0eXBlOiAnICsgdGFnLCB0aGlzLnZtKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWwuX192X21vZGVsID0gdGhpcztcbiAgICAgIGhhbmRsZXIuYmluZC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy51cGRhdGUgPSBoYW5kbGVyLnVwZGF0ZTtcbiAgICAgIHRoaXMuX3VuYmluZCA9IGhhbmRsZXIudW5iaW5kO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayByZWFkL3dyaXRlIGZpbHRlciBzdGF0cy5cbiAgICAgKi9cblxuICAgIGNoZWNrRmlsdGVyczogZnVuY3Rpb24gY2hlY2tGaWx0ZXJzKCkge1xuICAgICAgdmFyIGZpbHRlcnMgPSB0aGlzLmZpbHRlcnM7XG4gICAgICBpZiAoIWZpbHRlcnMpIHJldHVybjtcbiAgICAgIHZhciBpID0gZmlsdGVycy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHZhciBmaWx0ZXIgPSByZXNvbHZlQXNzZXQodGhpcy52bS4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBmaWx0ZXJzW2ldLm5hbWUpO1xuICAgICAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJyB8fCBmaWx0ZXIucmVhZCkge1xuICAgICAgICAgIHRoaXMuaGFzUmVhZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbHRlci53cml0ZSkge1xuICAgICAgICAgIHRoaXMuaGFzV3JpdGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgdGhpcy5lbC5fX3ZfbW9kZWwgPSBudWxsO1xuICAgICAgdGhpcy5fdW5iaW5kICYmIHRoaXMuX3VuYmluZCgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBrZXlDb2RlIGFsaWFzZXNcbiAgdmFyIGtleUNvZGVzID0ge1xuICAgIGVzYzogMjcsXG4gICAgdGFiOiA5LFxuICAgIGVudGVyOiAxMyxcbiAgICBzcGFjZTogMzIsXG4gICAgJ2RlbGV0ZSc6IFs4LCA0Nl0sXG4gICAgdXA6IDM4LFxuICAgIGxlZnQ6IDM3LFxuICAgIHJpZ2h0OiAzOSxcbiAgICBkb3duOiA0MFxuICB9O1xuXG4gIGZ1bmN0aW9uIGtleUZpbHRlcihoYW5kbGVyLCBrZXlzKSB7XG4gICAgdmFyIGNvZGVzID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgY2hhckNvZGUgPSBrZXkuY2hhckNvZGVBdCgwKTtcbiAgICAgIGlmIChjaGFyQ29kZSA+IDQ3ICYmIGNoYXJDb2RlIDwgNTgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGtleSwgMTApO1xuICAgICAgfVxuICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY2hhckNvZGUgPSBrZXkudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApO1xuICAgICAgICBpZiAoY2hhckNvZGUgPiA2NCAmJiBjaGFyQ29kZSA8IDkxKSB7XG4gICAgICAgICAgcmV0dXJuIGNoYXJDb2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ga2V5Q29kZXNba2V5XTtcbiAgICB9KTtcbiAgICBjb2RlcyA9IFtdLmNvbmNhdC5hcHBseShbXSwgY29kZXMpO1xuICAgIHJldHVybiBmdW5jdGlvbiBrZXlIYW5kbGVyKGUpIHtcbiAgICAgIGlmIChjb2Rlcy5pbmRleE9mKGUua2V5Q29kZSkgPiAtMSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlci5jYWxsKHRoaXMsIGUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wRmlsdGVyKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gc3RvcEhhbmRsZXIoZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybiBoYW5kbGVyLmNhbGwodGhpcywgZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXZlbnRGaWx0ZXIoaGFuZGxlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50SGFuZGxlcihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gaGFuZGxlci5jYWxsKHRoaXMsIGUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxmRmlsdGVyKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gc2VsZkhhbmRsZXIoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIuY2FsbCh0aGlzLCBlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIG9uJDEgPSB7XG5cbiAgICBwcmlvcml0eTogT04sXG4gICAgYWNjZXB0U3RhdGVtZW50OiB0cnVlLFxuICAgIGtleUNvZGVzOiBrZXlDb2RlcyxcblxuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICAvLyBkZWFsIHdpdGggaWZyYW1lc1xuICAgICAgaWYgKHRoaXMuZWwudGFnTmFtZSA9PT0gJ0lGUkFNRScgJiYgdGhpcy5hcmcgIT09ICdsb2FkJykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuaWZyYW1lQmluZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG9uKHNlbGYuZWwuY29udGVudFdpbmRvdywgc2VsZi5hcmcsIHNlbGYuaGFuZGxlciwgc2VsZi5tb2RpZmllcnMuY2FwdHVyZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub24oJ2xvYWQnLCB0aGlzLmlmcmFtZUJpbmQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShoYW5kbGVyKSB7XG4gICAgICAvLyBzdHViIGEgbm9vcCBmb3Igdi1vbiB3aXRoIG5vIHZhbHVlLFxuICAgICAgLy8gZS5nLiBAbW91c2Vkb3duLnByZXZlbnRcbiAgICAgIGlmICghdGhpcy5kZXNjcmlwdG9yLnJhdykge1xuICAgICAgICBoYW5kbGVyID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCd2LW9uOicgKyB0aGlzLmFyZyArICc9XCInICsgdGhpcy5leHByZXNzaW9uICsgJ1wiIGV4cGVjdHMgYSBmdW5jdGlvbiB2YWx1ZSwgJyArICdnb3QgJyArIGhhbmRsZXIsIHRoaXMudm0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGx5IG1vZGlmaWVyc1xuICAgICAgaWYgKHRoaXMubW9kaWZpZXJzLnN0b3ApIHtcbiAgICAgICAgaGFuZGxlciA9IHN0b3BGaWx0ZXIoaGFuZGxlcik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tb2RpZmllcnMucHJldmVudCkge1xuICAgICAgICBoYW5kbGVyID0gcHJldmVudEZpbHRlcihoYW5kbGVyKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1vZGlmaWVycy5zZWxmKSB7XG4gICAgICAgIGhhbmRsZXIgPSBzZWxmRmlsdGVyKGhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgLy8ga2V5IGZpbHRlclxuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLm1vZGlmaWVycykuZmlsdGVyKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ICE9PSAnc3RvcCcgJiYga2V5ICE9PSAncHJldmVudCcgJiYga2V5ICE9PSAnc2VsZicgJiYga2V5ICE9PSAnY2FwdHVyZSc7XG4gICAgICB9KTtcbiAgICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgICBoYW5kbGVyID0ga2V5RmlsdGVyKGhhbmRsZXIsIGtleXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xuXG4gICAgICBpZiAodGhpcy5pZnJhbWVCaW5kKSB7XG4gICAgICAgIHRoaXMuaWZyYW1lQmluZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb24odGhpcy5lbCwgdGhpcy5hcmcsIHRoaXMuaGFuZGxlciwgdGhpcy5tb2RpZmllcnMuY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHZhciBlbCA9IHRoaXMuaWZyYW1lQmluZCA/IHRoaXMuZWwuY29udGVudFdpbmRvdyA6IHRoaXMuZWw7XG4gICAgICBpZiAodGhpcy5oYW5kbGVyKSB7XG4gICAgICAgIG9mZihlbCwgdGhpcy5hcmcsIHRoaXMuaGFuZGxlcik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJy1tcy0nXTtcbiAgdmFyIGNhbWVsUHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcbiAgdmFyIGltcG9ydGFudFJFID0gLyFpbXBvcnRhbnQ7PyQvO1xuICB2YXIgcHJvcENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICB2YXIgdGVzdEVsID0gbnVsbDtcblxuICB2YXIgc3R5bGUgPSB7XG5cbiAgICBkZWVwOiB0cnVlLFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuZWwuc3R5bGUuY3NzVGV4dCA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0aGlzLmhhbmRsZU9iamVjdCh2YWx1ZS5yZWR1Y2UoZXh0ZW5kLCB7fSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oYW5kbGVPYmplY3QodmFsdWUgfHwge30pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBoYW5kbGVPYmplY3Q6IGZ1bmN0aW9uIGhhbmRsZU9iamVjdCh2YWx1ZSkge1xuICAgICAgLy8gY2FjaGUgb2JqZWN0IHN0eWxlcyBzbyB0aGF0IG9ubHkgY2hhbmdlZCBwcm9wc1xuICAgICAgLy8gYXJlIGFjdHVhbGx5IHVwZGF0ZWQuXG4gICAgICB2YXIgY2FjaGUgPSB0aGlzLmNhY2hlIHx8ICh0aGlzLmNhY2hlID0ge30pO1xuICAgICAgdmFyIG5hbWUsIHZhbDtcbiAgICAgIGZvciAobmFtZSBpbiBjYWNoZSkge1xuICAgICAgICBpZiAoIShuYW1lIGluIHZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuaGFuZGxlU2luZ2xlKG5hbWUsIG51bGwpO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChuYW1lIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbCA9IHZhbHVlW25hbWVdO1xuICAgICAgICBpZiAodmFsICE9PSBjYWNoZVtuYW1lXSkge1xuICAgICAgICAgIGNhY2hlW25hbWVdID0gdmFsO1xuICAgICAgICAgIHRoaXMuaGFuZGxlU2luZ2xlKG5hbWUsIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFuZGxlU2luZ2xlOiBmdW5jdGlvbiBoYW5kbGVTaW5nbGUocHJvcCwgdmFsdWUpIHtcbiAgICAgIHByb3AgPSBub3JtYWxpemUocHJvcCk7XG4gICAgICBpZiAoIXByb3ApIHJldHVybjsgLy8gdW5zdXBwb3J0ZWQgcHJvcFxuICAgICAgLy8gY2FzdCBwb3NzaWJsZSBudW1iZXJzL2Jvb2xlYW5zIGludG8gc3RyaW5nc1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHZhbHVlICs9ICcnO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBpc0ltcG9ydGFudCA9IGltcG9ydGFudFJFLnRlc3QodmFsdWUpID8gJ2ltcG9ydGFudCcgOiAnJztcbiAgICAgICAgaWYgKGlzSW1wb3J0YW50KSB7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybignSXRcXCdzIHByb2JhYmx5IGEgYmFkIGlkZWEgdG8gdXNlICFpbXBvcnRhbnQgd2l0aCBpbmxpbmUgcnVsZXMuICcgKyAnVGhpcyBmZWF0dXJlIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIG9mIFZ1ZS4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKGltcG9ydGFudFJFLCAnJykudHJpbSgpO1xuICAgICAgICAgIHRoaXMuZWwuc3R5bGUuc2V0UHJvcGVydHkocHJvcC5rZWJhYiwgdmFsdWUsIGlzSW1wb3J0YW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVsLnN0eWxlW3Byb3AuY2FtZWxdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWwuc3R5bGVbcHJvcC5jYW1lbF0gPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgfTtcblxuICAvKipcbiAgICogTm9ybWFsaXplIGEgQ1NTIHByb3BlcnR5IG5hbWUuXG4gICAqIC0gY2FjaGUgcmVzdWx0XG4gICAqIC0gYXV0byBwcmVmaXhcbiAgICogLSBjYW1lbENhc2UgLT4gZGFzaC1jYXNlXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplKHByb3ApIHtcbiAgICBpZiAocHJvcENhY2hlW3Byb3BdKSB7XG4gICAgICByZXR1cm4gcHJvcENhY2hlW3Byb3BdO1xuICAgIH1cbiAgICB2YXIgcmVzID0gcHJlZml4KHByb3ApO1xuICAgIHByb3BDYWNoZVtwcm9wXSA9IHByb3BDYWNoZVtyZXNdID0gcmVzO1xuICAgIHJldHVybiByZXM7XG4gIH1cblxuICAvKipcbiAgICogQXV0byBkZXRlY3QgdGhlIGFwcHJvcHJpYXRlIHByZWZpeCBmb3IgYSBDU1MgcHJvcGVydHkuXG4gICAqIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC81MjM2OTJcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cblxuICBmdW5jdGlvbiBwcmVmaXgocHJvcCkge1xuICAgIHByb3AgPSBoeXBoZW5hdGUocHJvcCk7XG4gICAgdmFyIGNhbWVsID0gY2FtZWxpemUocHJvcCk7XG4gICAgdmFyIHVwcGVyID0gY2FtZWwuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBjYW1lbC5zbGljZSgxKTtcbiAgICBpZiAoIXRlc3RFbCkge1xuICAgICAgdGVzdEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgfVxuICAgIHZhciBpID0gcHJlZml4ZXMubGVuZ3RoO1xuICAgIHZhciBwcmVmaXhlZDtcbiAgICBpZiAoY2FtZWwgIT09ICdmaWx0ZXInICYmIGNhbWVsIGluIHRlc3RFbC5zdHlsZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2ViYWI6IHByb3AsXG4gICAgICAgIGNhbWVsOiBjYW1lbFxuICAgICAgfTtcbiAgICB9XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHJlZml4ZWQgPSBjYW1lbFByZWZpeGVzW2ldICsgdXBwZXI7XG4gICAgICBpZiAocHJlZml4ZWQgaW4gdGVzdEVsLnN0eWxlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2ViYWI6IHByZWZpeGVzW2ldICsgcHJvcCxcbiAgICAgICAgICBjYW1lbDogcHJlZml4ZWRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyB4bGlua1xuICB2YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcbiAgdmFyIHhsaW5rUkUgPSAvXnhsaW5rOi87XG5cbiAgLy8gY2hlY2sgZm9yIGF0dHJpYnV0ZXMgdGhhdCBwcm9oaWJpdCBpbnRlcnBvbGF0aW9uc1xuICB2YXIgZGlzYWxsb3dlZEludGVycEF0dHJSRSA9IC9edi18Xjp8XkB8Xig/OmlzfHRyYW5zaXRpb258dHJhbnNpdGlvbi1tb2RlfGRlYm91bmNlfHRyYWNrLWJ5fHN0YWdnZXJ8ZW50ZXItc3RhZ2dlcnxsZWF2ZS1zdGFnZ2VyKSQvO1xuICAvLyB0aGVzZSBhdHRyaWJ1dGVzIHNob3VsZCBhbHNvIHNldCB0aGVpciBjb3JyZXNwb25kaW5nIHByb3BlcnRpZXNcbiAgLy8gYmVjYXVzZSB0aGV5IG9ubHkgYWZmZWN0IHRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZSBlbGVtZW50XG4gIHZhciBhdHRyV2l0aFByb3BzUkUgPSAvXig/OnZhbHVlfGNoZWNrZWR8c2VsZWN0ZWR8bXV0ZWQpJC87XG4gIC8vIHRoZXNlIGF0dHJpYnV0ZXMgZXhwZWN0IGVudW1yYXRlZCB2YWx1ZXMgb2YgXCJ0cnVlXCIgb3IgXCJmYWxzZVwiXG4gIC8vIGJ1dCBhcmUgbm90IGJvb2xlYW4gYXR0cmlidXRlc1xuICB2YXIgZW51bWVyYXRlZEF0dHJSRSA9IC9eKD86ZHJhZ2dhYmxlfGNvbnRlbnRlZGl0YWJsZXxzcGVsbGNoZWNrKSQvO1xuXG4gIC8vIHRoZXNlIGF0dHJpYnV0ZXMgc2hvdWxkIHNldCBhIGhpZGRlbiBwcm9wZXJ0eSBmb3JcbiAgLy8gYmluZGluZyB2LW1vZGVsIHRvIG9iamVjdCB2YWx1ZXNcbiAgdmFyIG1vZGVsUHJvcHMgPSB7XG4gICAgdmFsdWU6ICdfdmFsdWUnLFxuICAgICd0cnVlLXZhbHVlJzogJ190cnVlVmFsdWUnLFxuICAgICdmYWxzZS12YWx1ZSc6ICdfZmFsc2VWYWx1ZSdcbiAgfTtcblxuICB2YXIgYmluZCQxID0ge1xuXG4gICAgcHJpb3JpdHk6IEJJTkQsXG5cbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgdmFyIGF0dHIgPSB0aGlzLmFyZztcbiAgICAgIHZhciB0YWcgPSB0aGlzLmVsLnRhZ05hbWU7XG4gICAgICAvLyBzaG91bGQgYmUgZGVlcCB3YXRjaCBvbiBvYmplY3QgbW9kZVxuICAgICAgaWYgKCFhdHRyKSB7XG4gICAgICAgIHRoaXMuZGVlcCA9IHRydWU7XG4gICAgICB9XG4gICAgICAvLyBoYW5kbGUgaW50ZXJwb2xhdGlvbiBiaW5kaW5nc1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSB0aGlzLmRlc2NyaXB0b3I7XG4gICAgICB2YXIgdG9rZW5zID0gZGVzY3JpcHRvci5pbnRlcnA7XG4gICAgICBpZiAodG9rZW5zKSB7XG4gICAgICAgIC8vIGhhbmRsZSBpbnRlcnBvbGF0aW9ucyB3aXRoIG9uZS10aW1lIHRva2Vuc1xuICAgICAgICBpZiAoZGVzY3JpcHRvci5oYXNPbmVUaW1lKSB7XG4gICAgICAgICAgdGhpcy5leHByZXNzaW9uID0gdG9rZW5zVG9FeHAodG9rZW5zLCB0aGlzLl9zY29wZSB8fCB0aGlzLnZtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9ubHkgYWxsb3cgYmluZGluZyBvbiBuYXRpdmUgYXR0cmlidXRlc1xuICAgICAgICBpZiAoZGlzYWxsb3dlZEludGVycEF0dHJSRS50ZXN0KGF0dHIpIHx8IGF0dHIgPT09ICduYW1lJyAmJiAodGFnID09PSAnUEFSVElBTCcgfHwgdGFnID09PSAnU0xPVCcpKSB7XG4gICAgICAgICAgJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oYXR0ciArICc9XCInICsgZGVzY3JpcHRvci5yYXcgKyAnXCI6ICcgKyAnYXR0cmlidXRlIGludGVycG9sYXRpb24gaXMgbm90IGFsbG93ZWQgaW4gVnVlLmpzICcgKyAnZGlyZWN0aXZlcyBhbmQgc3BlY2lhbCBhdHRyaWJ1dGVzLicsIHRoaXMudm0pO1xuICAgICAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICAgIHRoaXMuaW52YWxpZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciByYXcgPSBhdHRyICsgJz1cIicgKyBkZXNjcmlwdG9yLnJhdyArICdcIjogJztcbiAgICAgICAgICAvLyB3YXJuIHNyY1xuICAgICAgICAgIGlmIChhdHRyID09PSAnc3JjJykge1xuICAgICAgICAgICAgd2FybihyYXcgKyAnaW50ZXJwb2xhdGlvbiBpbiBcInNyY1wiIGF0dHJpYnV0ZSB3aWxsIGNhdXNlICcgKyAnYSA0MDQgcmVxdWVzdC4gVXNlIHYtYmluZDpzcmMgaW5zdGVhZC4nLCB0aGlzLnZtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB3YXJuIHN0eWxlXG4gICAgICAgICAgaWYgKGF0dHIgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIHdhcm4ocmF3ICsgJ2ludGVycG9sYXRpb24gaW4gXCJzdHlsZVwiIGF0dHJpYnV0ZSB3aWxsIGNhdXNlICcgKyAndGhlIGF0dHJpYnV0ZSB0byBiZSBkaXNjYXJkZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIuICcgKyAnVXNlIHYtYmluZDpzdHlsZSBpbnN0ZWFkLicsIHRoaXMudm0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuaW52YWxpZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYXR0ciA9IHRoaXMuYXJnO1xuICAgICAgaWYgKHRoaXMuYXJnKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlU2luZ2xlKGF0dHIsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGFuZGxlT2JqZWN0KHZhbHVlIHx8IHt9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gc2hhcmUgb2JqZWN0IGhhbmRsZXIgd2l0aCB2LWJpbmQ6Y2xhc3NcbiAgICBoYW5kbGVPYmplY3Q6IHN0eWxlLmhhbmRsZU9iamVjdCxcblxuICAgIGhhbmRsZVNpbmdsZTogZnVuY3Rpb24gaGFuZGxlU2luZ2xlKGF0dHIsIHZhbHVlKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgdmFyIGludGVycCA9IHRoaXMuZGVzY3JpcHRvci5pbnRlcnA7XG4gICAgICBpZiAodGhpcy5tb2RpZmllcnMuY2FtZWwpIHtcbiAgICAgICAgYXR0ciA9IGNhbWVsaXplKGF0dHIpO1xuICAgICAgfVxuICAgICAgaWYgKCFpbnRlcnAgJiYgYXR0cldpdGhQcm9wc1JFLnRlc3QoYXR0cikgJiYgYXR0ciBpbiBlbCkge1xuICAgICAgICB2YXIgYXR0clZhbHVlID0gYXR0ciA9PT0gJ3ZhbHVlJyA/IHZhbHVlID09IG51bGwgLy8gSUU5IHdpbGwgc2V0IGlucHV0LnZhbHVlIHRvIFwibnVsbFwiIGZvciBudWxsLi4uXG4gICAgICAgICAgPyAnJyA6IHZhbHVlIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKGVsW2F0dHJdICE9PSBhdHRyVmFsdWUpIHtcbiAgICAgICAgICBlbFthdHRyXSA9IGF0dHJWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gc2V0IG1vZGVsIHByb3BzXG4gICAgICB2YXIgbW9kZWxQcm9wID0gbW9kZWxQcm9wc1thdHRyXTtcbiAgICAgIGlmICghaW50ZXJwICYmIG1vZGVsUHJvcCkge1xuICAgICAgICBlbFttb2RlbFByb3BdID0gdmFsdWU7XG4gICAgICAgIC8vIHVwZGF0ZSB2LW1vZGVsIGlmIHByZXNlbnRcbiAgICAgICAgdmFyIG1vZGVsID0gZWwuX192X21vZGVsO1xuICAgICAgICBpZiAobW9kZWwpIHtcbiAgICAgICAgICBtb2RlbC5saXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBkbyBub3Qgc2V0IHZhbHVlIGF0dHJpYnV0ZSBmb3IgdGV4dGFyZWFcbiAgICAgIGlmIChhdHRyID09PSAndmFsdWUnICYmIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScpIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyB1cGRhdGUgYXR0cmlidXRlXG4gICAgICBpZiAoZW51bWVyYXRlZEF0dHJSRS50ZXN0KGF0dHIpKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgICBpZiAoYXR0ciA9PT0gJ2NsYXNzJykge1xuICAgICAgICAgIC8vIGhhbmRsZSBlZGdlIGNhc2UgIzE5NjA6XG4gICAgICAgICAgLy8gY2xhc3MgaW50ZXJwb2xhdGlvbiBzaG91bGQgbm90IG92ZXJ3cml0ZSBWdWUgdHJhbnNpdGlvbiBjbGFzc1xuICAgICAgICAgIGlmIChlbC5fX3ZfdHJhbnMpIHtcbiAgICAgICAgICAgIHZhbHVlICs9ICcgJyArIGVsLl9fdl90cmFucy5pZCArICctdHJhbnNpdGlvbic7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldENsYXNzKGVsLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoeGxpbmtSRS50ZXN0KGF0dHIpKSB7XG4gICAgICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywgYXR0ciwgdmFsdWUgPT09IHRydWUgPyAnJyA6IHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUgPT09IHRydWUgPyAnJyA6IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgZWwgPSB7XG5cbiAgICBwcmlvcml0eTogRUwsXG5cbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIXRoaXMuYXJnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpZCA9IHRoaXMuaWQgPSBjYW1lbGl6ZSh0aGlzLmFyZyk7XG4gICAgICB2YXIgcmVmcyA9ICh0aGlzLl9zY29wZSB8fCB0aGlzLnZtKS4kZWxzO1xuICAgICAgaWYgKGhhc093bihyZWZzLCBpZCkpIHtcbiAgICAgICAgcmVmc1tpZF0gPSB0aGlzLmVsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUocmVmcywgaWQsIHRoaXMuZWwpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIHZhciByZWZzID0gKHRoaXMuX3Njb3BlIHx8IHRoaXMudm0pLiRlbHM7XG4gICAgICBpZiAocmVmc1t0aGlzLmlkXSA9PT0gdGhpcy5lbCkge1xuICAgICAgICByZWZzW3RoaXMuaWRdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHJlZiA9IHtcbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ3YtcmVmOicgKyB0aGlzLmFyZyArICcgbXVzdCBiZSB1c2VkIG9uIGEgY2hpbGQgJyArICdjb21wb25lbnQuIEZvdW5kIG9uIDwnICsgdGhpcy5lbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgKyAnPi4nLCB0aGlzLnZtKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNsb2FrID0ge1xuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgdGhpcy52bS4kb25jZSgncHJlLWhvb2s6Y29tcGlsZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCd2LWNsb2FrJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gbXVzdCBleHBvcnQgcGxhaW4gb2JqZWN0XG4gIHZhciBkaXJlY3RpdmVzID0ge1xuICAgIHRleHQ6IHRleHQkMSxcbiAgICBodG1sOiBodG1sLFxuICAgICdmb3InOiB2Rm9yLFxuICAgICdpZic6IHZJZixcbiAgICBzaG93OiBzaG93LFxuICAgIG1vZGVsOiBtb2RlbCxcbiAgICBvbjogb24kMSxcbiAgICBiaW5kOiBiaW5kJDEsXG4gICAgZWw6IGVsLFxuICAgIHJlZjogcmVmLFxuICAgIGNsb2FrOiBjbG9ha1xuICB9O1xuXG4gIHZhciB2Q2xhc3MgPSB7XG5cbiAgICBkZWVwOiB0cnVlLFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5zZXRDbGFzcyh2YWx1ZS50cmltKCkuc3BsaXQoL1xccysvKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldENsYXNzKG5vcm1hbGl6ZSQxKHZhbHVlKSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNldENsYXNzOiBmdW5jdGlvbiBzZXRDbGFzcyh2YWx1ZSkge1xuICAgICAgdGhpcy5jbGVhbnVwKHZhbHVlKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciB2YWwgPSB2YWx1ZVtpXTtcbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgIGFwcGx5KHRoaXMuZWwsIHZhbCwgYWRkQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnByZXZLZXlzID0gdmFsdWU7XG4gICAgfSxcblxuICAgIGNsZWFudXA6IGZ1bmN0aW9uIGNsZWFudXAodmFsdWUpIHtcbiAgICAgIHZhciBwcmV2S2V5cyA9IHRoaXMucHJldktleXM7XG4gICAgICBpZiAoIXByZXZLZXlzKSByZXR1cm47XG4gICAgICB2YXIgaSA9IHByZXZLZXlzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByZXZLZXlzW2ldO1xuICAgICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLmluZGV4T2Yoa2V5KSA8IDApIHtcbiAgICAgICAgICBhcHBseSh0aGlzLmVsLCBrZXksIHJlbW92ZUNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogTm9ybWFsaXplIG9iamVjdHMgYW5kIGFycmF5cyAocG90ZW50aWFsbHkgY29udGFpbmluZyBvYmplY3RzKVxuICAgKiBpbnRvIGFycmF5IG9mIHN0cmluZ3MuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5PFN0cmluZ3xPYmplY3Q+fSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtBcnJheTxTdHJpbmc+fVxuICAgKi9cblxuICBmdW5jdGlvbiBub3JtYWxpemUkMSh2YWx1ZSkge1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBfa2V5ID0gdmFsdWVbaV07XG4gICAgICAgIGlmIChfa2V5KSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBfa2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVzLnB1c2goX2tleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gX2tleSkge1xuICAgICAgICAgICAgICBpZiAoX2tleVtrXSkgcmVzLnB1c2goayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWVba2V5XSkgcmVzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgb3IgcmVtb3ZlIGEgY2xhc3MvY2xhc3NlcyBvbiBhbiBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUgY2xhc3MgbmFtZS4gVGhpcyBtYXkgb3IgbWF5IG5vdFxuICAgKiAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW4gYSBzcGFjZSBjaGFyYWN0ZXIsIGluIHN1Y2ggYVxuICAgKiAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2UnbGwgZGVhbCB3aXRoIG11bHRpcGxlIGNsYXNzXG4gICAqICAgICAgICAgICAgICAgICAgICAgbmFtZXMgYXQgb25jZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICovXG5cbiAgZnVuY3Rpb24gYXBwbHkoZWwsIGtleSwgZm4pIHtcbiAgICBrZXkgPSBrZXkudHJpbSgpO1xuICAgIGlmIChrZXkuaW5kZXhPZignICcpID09PSAtMSkge1xuICAgICAgZm4oZWwsIGtleSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFRoZSBrZXkgY29udGFpbnMgb25lIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVycy5cbiAgICAvLyBTaW5jZSBhIGNsYXNzIG5hbWUgZG9lc24ndCBhY2NlcHQgc3VjaCBjaGFyYWN0ZXJzLCB3ZVxuICAgIC8vIHRyZWF0IGl0IGFzIG11bHRpcGxlIGNsYXNzZXMuXG4gICAgdmFyIGtleXMgPSBrZXkuc3BsaXQoL1xccysvKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbihlbCwga2V5c1tpXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbXBvbmVudCA9IHtcblxuICAgIHByaW9yaXR5OiBDT01QT05FTlQsXG5cbiAgICBwYXJhbXM6IFsna2VlcC1hbGl2ZScsICd0cmFuc2l0aW9uLW1vZGUnLCAnaW5saW5lLXRlbXBsYXRlJ10sXG5cbiAgICAvKipcbiAgICAgKiBTZXR1cC4gVHdvIHBvc3NpYmxlIHVzYWdlczpcbiAgICAgKlxuICAgICAqIC0gc3RhdGljOlxuICAgICAqICAgPGNvbXA+IG9yIDxkaXYgdi1jb21wb25lbnQ9XCJjb21wXCI+XG4gICAgICpcbiAgICAgKiAtIGR5bmFtaWM6XG4gICAgICogICA8Y29tcG9uZW50IDppcz1cInZpZXdcIj5cbiAgICAgKi9cblxuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICBpZiAoIXRoaXMuZWwuX192dWVfXykge1xuICAgICAgICAvLyBrZWVwLWFsaXZlIGNhY2hlXG4gICAgICAgIHRoaXMua2VlcEFsaXZlID0gdGhpcy5wYXJhbXMua2VlcEFsaXZlO1xuICAgICAgICBpZiAodGhpcy5rZWVwQWxpdmUpIHtcbiAgICAgICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlXG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5pbmxpbmVUZW1wbGF0ZSkge1xuICAgICAgICAgIC8vIGV4dHJhY3QgaW5saW5lIHRlbXBsYXRlIGFzIGEgRG9jdW1lbnRGcmFnbWVudFxuICAgICAgICAgIHRoaXMuaW5saW5lVGVtcGxhdGUgPSBleHRyYWN0Q29udGVudCh0aGlzLmVsLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb21wb25lbnQgcmVzb2x1dGlvbiByZWxhdGVkIHN0YXRlXG4gICAgICAgIHRoaXMucGVuZGluZ0NvbXBvbmVudENiID0gdGhpcy5Db21wb25lbnQgPSBudWxsO1xuICAgICAgICAvLyB0cmFuc2l0aW9uIHJlbGF0ZWQgc3RhdGVcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVtb3ZhbHMgPSAwO1xuICAgICAgICB0aGlzLnBlbmRpbmdSZW1vdmFsQ2IgPSBudWxsO1xuICAgICAgICAvLyBjcmVhdGUgYSByZWYgYW5jaG9yXG4gICAgICAgIHRoaXMuYW5jaG9yID0gY3JlYXRlQW5jaG9yKCd2LWNvbXBvbmVudCcpO1xuICAgICAgICByZXBsYWNlKHRoaXMuZWwsIHRoaXMuYW5jaG9yKTtcbiAgICAgICAgLy8gcmVtb3ZlIGlzIGF0dHJpYnV0ZS5cbiAgICAgICAgLy8gdGhpcyBpcyByZW1vdmVkIGR1cmluZyBjb21waWxhdGlvbiwgYnV0IGJlY2F1c2UgY29tcGlsYXRpb24gaXNcbiAgICAgICAgLy8gY2FjaGVkLCB3aGVuIHRoZSBjb21wb25lbnQgaXMgdXNlZCBlbHNld2hlcmUgdGhpcyBhdHRyaWJ1dGVcbiAgICAgICAgLy8gd2lsbCByZW1haW4gYXQgbGluayB0aW1lLlxuICAgICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZSgnaXMnKTtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoJzppcycpO1xuICAgICAgICAvLyByZW1vdmUgcmVmLCBzYW1lIGFzIGFib3ZlXG4gICAgICAgIGlmICh0aGlzLmRlc2NyaXB0b3IucmVmKSB7XG4gICAgICAgICAgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoJ3YtcmVmOicgKyBoeXBoZW5hdGUodGhpcy5kZXNjcmlwdG9yLnJlZikpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHN0YXRpYywgYnVpbGQgcmlnaHQgbm93LlxuICAgICAgICBpZiAodGhpcy5saXRlcmFsKSB7XG4gICAgICAgICAgdGhpcy5zZXRDb21wb25lbnQodGhpcy5leHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ2Nhbm5vdCBtb3VudCBjb21wb25lbnQgXCInICsgdGhpcy5leHByZXNzaW9uICsgJ1wiICcgKyAnb24gYWxyZWFkeSBtb3VudGVkIGVsZW1lbnQ6ICcgKyB0aGlzLmVsKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHVibGljIHVwZGF0ZSwgY2FsbGVkIGJ5IHRoZSB3YXRjaGVyIGluIHRoZSBkeW5hbWljXG4gICAgICogbGl0ZXJhbCBzY2VuYXJpbywgZS5nLiA8Y29tcG9uZW50IDppcz1cInZpZXdcIj5cbiAgICAgKi9cblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMubGl0ZXJhbCkge1xuICAgICAgICB0aGlzLnNldENvbXBvbmVudCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN3aXRjaCBkeW5hbWljIGNvbXBvbmVudHMuIE1heSByZXNvbHZlIHRoZSBjb21wb25lbnRcbiAgICAgKiBhc3luY2hyb25vdXNseSwgYW5kIHBlcmZvcm0gdHJhbnNpdGlvbiBiYXNlZCBvblxuICAgICAqIHNwZWNpZmllZCB0cmFuc2l0aW9uIG1vZGUuIEFjY2VwdHMgYSBmZXcgYWRkaXRpb25hbFxuICAgICAqIGFyZ3VtZW50cyBzcGVjaWZpY2FsbHkgZm9yIHZ1ZS1yb3V0ZXIuXG4gICAgICpcbiAgICAgKiBUaGUgY2FsbGJhY2sgaXMgY2FsbGVkIHdoZW4gdGhlIGZ1bGwgdHJhbnNpdGlvbiBpc1xuICAgICAqIGZpbmlzaGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXVxuICAgICAqL1xuXG4gICAgc2V0Q29tcG9uZW50OiBmdW5jdGlvbiBzZXRDb21wb25lbnQodmFsdWUsIGNiKSB7XG4gICAgICB0aGlzLmludmFsaWRhdGVQZW5kaW5nKCk7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIC8vIGp1c3QgcmVtb3ZlIGN1cnJlbnRcbiAgICAgICAgdGhpcy51bmJ1aWxkKHRydWUpO1xuICAgICAgICB0aGlzLnJlbW92ZSh0aGlzLmNoaWxkVk0sIGNiKTtcbiAgICAgICAgdGhpcy5jaGlsZFZNID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5yZXNvbHZlQ29tcG9uZW50KHZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLm1vdW50Q29tcG9uZW50KGNiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgdGhlIGNvbXBvbmVudCBjb25zdHJ1Y3RvciB0byB1c2Ugd2hlbiBjcmVhdGluZ1xuICAgICAqIHRoZSBjaGlsZCB2bS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gICAgICovXG5cbiAgICByZXNvbHZlQ29tcG9uZW50OiBmdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50KHZhbHVlLCBjYikge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5wZW5kaW5nQ29tcG9uZW50Q2IgPSBjYW5jZWxsYWJsZShmdW5jdGlvbihDb21wb25lbnQpIHtcbiAgICAgICAgc2VsZi5Db21wb25lbnROYW1lID0gQ29tcG9uZW50Lm9wdGlvbnMubmFtZSB8fCAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogbnVsbCk7XG4gICAgICAgIHNlbGYuQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICAgICAgICBjYigpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnZtLl9yZXNvbHZlQ29tcG9uZW50KHZhbHVlLCB0aGlzLnBlbmRpbmdDb21wb25lbnRDYik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSB1c2luZyB0aGUgY3VycmVudCBjb25zdHJ1Y3RvciBhbmRcbiAgICAgKiByZXBsYWNlIHRoZSBleGlzdGluZyBpbnN0YW5jZS4gVGhpcyBtZXRob2QgZG9lc24ndCBjYXJlXG4gICAgICogd2hldGhlciB0aGUgbmV3IGNvbXBvbmVudCBhbmQgdGhlIG9sZCBvbmUgYXJlIGFjdHVhbGx5XG4gICAgICogdGhlIHNhbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdXG4gICAgICovXG5cbiAgICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gbW91bnRDb21wb25lbnQoY2IpIHtcbiAgICAgIC8vIGFjdHVhbCBtb3VudFxuICAgICAgdGhpcy51bmJ1aWxkKHRydWUpO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGFjdGl2YXRlSG9va3MgPSB0aGlzLkNvbXBvbmVudC5vcHRpb25zLmFjdGl2YXRlO1xuICAgICAgdmFyIGNhY2hlZCA9IHRoaXMuZ2V0Q2FjaGVkKCk7XG4gICAgICB2YXIgbmV3Q29tcG9uZW50ID0gdGhpcy5idWlsZCgpO1xuICAgICAgaWYgKGFjdGl2YXRlSG9va3MgJiYgIWNhY2hlZCkge1xuICAgICAgICB0aGlzLndhaXRpbmdGb3IgPSBuZXdDb21wb25lbnQ7XG4gICAgICAgIGNhbGxBY3RpdmF0ZUhvb2tzKGFjdGl2YXRlSG9va3MsIG5ld0NvbXBvbmVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHNlbGYud2FpdGluZ0ZvciAhPT0gbmV3Q29tcG9uZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYud2FpdGluZ0ZvciA9IG51bGw7XG4gICAgICAgICAgc2VsZi50cmFuc2l0aW9uKG5ld0NvbXBvbmVudCwgY2IpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHVwZGF0ZSByZWYgZm9yIGtlcHQtYWxpdmUgY29tcG9uZW50XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICBuZXdDb21wb25lbnQuX3VwZGF0ZVJlZigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhbnNpdGlvbihuZXdDb21wb25lbnQsIGNiKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgY29tcG9uZW50IGNoYW5nZXMgb3IgdW5iaW5kcyBiZWZvcmUgYW4gYXN5bmNcbiAgICAgKiBjb25zdHJ1Y3RvciBpcyByZXNvbHZlZCwgd2UgbmVlZCB0byBpbnZhbGlkYXRlIGl0c1xuICAgICAqIHBlbmRpbmcgY2FsbGJhY2suXG4gICAgICovXG5cbiAgICBpbnZhbGlkYXRlUGVuZGluZzogZnVuY3Rpb24gaW52YWxpZGF0ZVBlbmRpbmcoKSB7XG4gICAgICBpZiAodGhpcy5wZW5kaW5nQ29tcG9uZW50Q2IpIHtcbiAgICAgICAgdGhpcy5wZW5kaW5nQ29tcG9uZW50Q2IuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMucGVuZGluZ0NvbXBvbmVudENiID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUvaW5zZXJ0IGEgbmV3IGNoaWxkIHZtLlxuICAgICAqIElmIGtlZXAgYWxpdmUgYW5kIGhhcyBjYWNoZWQgaW5zdGFuY2UsIGluc2VydCB0aGF0XG4gICAgICogaW5zdGFuY2U7IG90aGVyd2lzZSBidWlsZCBhIG5ldyBvbmUgYW5kIGNhY2hlIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtleHRyYU9wdGlvbnNdXG4gICAgICogQHJldHVybiB7VnVlfSAtIHRoZSBjcmVhdGVkIGluc3RhbmNlXG4gICAgICovXG5cbiAgICBidWlsZDogZnVuY3Rpb24gYnVpbGQoZXh0cmFPcHRpb25zKSB7XG4gICAgICB2YXIgY2FjaGVkID0gdGhpcy5nZXRDYWNoZWQoKTtcbiAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLkNvbXBvbmVudCkge1xuICAgICAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgbmFtZTogdGhpcy5Db21wb25lbnROYW1lLFxuICAgICAgICAgIGVsOiBjbG9uZU5vZGUodGhpcy5lbCksXG4gICAgICAgICAgdGVtcGxhdGU6IHRoaXMuaW5saW5lVGVtcGxhdGUsXG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIGFkZCB0aGUgY2hpbGQgd2l0aCBjb3JyZWN0IHBhcmVudFxuICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYSB0cmFuc2NsdWRlZCBjb21wb25lbnQsIGl0cyBwYXJlbnRcbiAgICAgICAgICAvLyBzaG91bGQgYmUgdGhlIHRyYW5zY2x1c2lvbiBob3N0LlxuICAgICAgICAgIHBhcmVudDogdGhpcy5faG9zdCB8fCB0aGlzLnZtLFxuICAgICAgICAgIC8vIGlmIG5vIGlubGluZS10ZW1wbGF0ZSwgdGhlbiB0aGUgY29tcGlsZWRcbiAgICAgICAgICAvLyBsaW5rZXIgY2FuIGJlIGNhY2hlZCBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLlxuICAgICAgICAgIF9saW5rZXJDYWNoYWJsZTogIXRoaXMuaW5saW5lVGVtcGxhdGUsXG4gICAgICAgICAgX3JlZjogdGhpcy5kZXNjcmlwdG9yLnJlZixcbiAgICAgICAgICBfYXNDb21wb25lbnQ6IHRydWUsXG4gICAgICAgICAgX2lzUm91dGVyVmlldzogdGhpcy5faXNSb3V0ZXJWaWV3LFxuICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYSB0cmFuc2NsdWRlZCBjb21wb25lbnQsIGNvbnRleHRcbiAgICAgICAgICAvLyB3aWxsIGJlIHRoZSBjb21tb24gcGFyZW50IHZtIG9mIHRoaXMgaW5zdGFuY2VcbiAgICAgICAgICAvLyBhbmQgaXRzIGhvc3QuXG4gICAgICAgICAgX2NvbnRleHQ6IHRoaXMudm0sXG4gICAgICAgICAgLy8gaWYgdGhpcyBpcyBpbnNpZGUgYW4gaW5saW5lIHYtZm9yLCB0aGUgc2NvcGVcbiAgICAgICAgICAvLyB3aWxsIGJlIHRoZSBpbnRlcm1lZGlhdGUgc2NvcGUgY3JlYXRlZCBmb3IgdGhpc1xuICAgICAgICAgIC8vIHJlcGVhdCBmcmFnbWVudC4gdGhpcyBpcyB1c2VkIGZvciBsaW5raW5nIHByb3BzXG4gICAgICAgICAgLy8gYW5kIGNvbnRhaW5lciBkaXJlY3RpdmVzLlxuICAgICAgICAgIF9zY29wZTogdGhpcy5fc2NvcGUsXG4gICAgICAgICAgLy8gcGFzcyBpbiB0aGUgb3duZXIgZnJhZ21lbnQgb2YgdGhpcyBjb21wb25lbnQuXG4gICAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3Nhcnkgc28gdGhhdCB0aGUgZnJhZ21lbnQgY2FuIGtlZXBcbiAgICAgICAgICAvLyB0cmFjayBvZiBpdHMgY29udGFpbmVkIGNvbXBvbmVudHMgaW4gb3JkZXIgdG9cbiAgICAgICAgICAvLyBjYWxsIGF0dGFjaC9kZXRhY2ggaG9va3MgZm9yIHRoZW0uXG4gICAgICAgICAgX2ZyYWc6IHRoaXMuX2ZyYWdcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZXh0cmEgb3B0aW9uc1xuICAgICAgICAvLyBpbiAxLjAuMCB0aGlzIGlzIHVzZWQgYnkgdnVlLXJvdXRlciBvbmx5XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoZXh0cmFPcHRpb25zKSB7XG4gICAgICAgICAgZXh0ZW5kKG9wdGlvbnMsIGV4dHJhT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoaWxkID0gbmV3IHRoaXMuQ29tcG9uZW50KG9wdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5rZWVwQWxpdmUpIHtcbiAgICAgICAgICB0aGlzLmNhY2hlW3RoaXMuQ29tcG9uZW50LmNpZF0gPSBjaGlsZDtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB0aGlzLmVsLmhhc0F0dHJpYnV0ZSgndHJhbnNpdGlvbicpICYmIGNoaWxkLl9pc0ZyYWdtZW50KSB7XG4gICAgICAgICAgd2FybignVHJhbnNpdGlvbnMgd2lsbCBub3Qgd29yayBvbiBhIGZyYWdtZW50IGluc3RhbmNlLiAnICsgJ1RlbXBsYXRlOiAnICsgY2hpbGQuJG9wdGlvbnMudGVtcGxhdGUsIGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyeSB0byBnZXQgYSBjYWNoZWQgaW5zdGFuY2Ugb2YgdGhlIGN1cnJlbnQgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiB7VnVlfHVuZGVmaW5lZH1cbiAgICAgKi9cblxuICAgIGdldENhY2hlZDogZnVuY3Rpb24gZ2V0Q2FjaGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMua2VlcEFsaXZlICYmIHRoaXMuY2FjaGVbdGhpcy5Db21wb25lbnQuY2lkXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGVhcmRvd24gdGhlIGN1cnJlbnQgY2hpbGQsIGJ1dCBkZWZlcnMgY2xlYW51cCBzb1xuICAgICAqIHRoYXQgd2UgY2FuIHNlcGFyYXRlIHRoZSBkZXN0cm95IGFuZCByZW1vdmFsIHN0ZXBzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBkZWZlclxuICAgICAqL1xuXG4gICAgdW5idWlsZDogZnVuY3Rpb24gdW5idWlsZChkZWZlcikge1xuICAgICAgaWYgKHRoaXMud2FpdGluZ0Zvcikge1xuICAgICAgICBpZiAoIXRoaXMua2VlcEFsaXZlKSB7XG4gICAgICAgICAgdGhpcy53YWl0aW5nRm9yLiRkZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53YWl0aW5nRm9yID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRWTTtcbiAgICAgIGlmICghY2hpbGQgfHwgdGhpcy5rZWVwQWxpdmUpIHtcbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIHJlZlxuICAgICAgICAgIGNoaWxkLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgY2hpbGQuX3VwZGF0ZVJlZih0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyB0aGUgc29sZSBwdXJwb3NlIG9mIGBkZWZlckNsZWFudXBgIGlzIHNvIHRoYXQgd2UgY2FuXG4gICAgICAvLyBcImRlYWN0aXZhdGVcIiB0aGUgdm0gcmlnaHQgbm93IGFuZCBwZXJmb3JtIERPTSByZW1vdmFsXG4gICAgICAvLyBsYXRlci5cbiAgICAgIGNoaWxkLiRkZXN0cm95KGZhbHNlLCBkZWZlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBjdXJyZW50IGRlc3Ryb3llZCBjaGlsZCBhbmQgbWFudWFsbHkgZG9cbiAgICAgKiB0aGUgY2xlYW51cCBhZnRlciByZW1vdmFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAgICAgKi9cblxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGNoaWxkLCBjYikge1xuICAgICAgdmFyIGtlZXBBbGl2ZSA9IHRoaXMua2VlcEFsaXZlO1xuICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgIC8vIHdlIG1heSBoYXZlIGEgY29tcG9uZW50IHN3aXRjaCB3aGVuIGEgcHJldmlvdXNcbiAgICAgICAgLy8gY29tcG9uZW50IGlzIHN0aWxsIGJlaW5nIHRyYW5zaXRpb25lZCBvdXQuXG4gICAgICAgIC8vIHdlIHdhbnQgdG8gdHJpZ2dlciBvbmx5IG9uZSBsYXN0ZXN0IGluc2VydGlvbiBjYlxuICAgICAgICAvLyB3aGVuIHRoZSBleGlzdGluZyB0cmFuc2l0aW9uIGZpbmlzaGVzLiAoIzExMTkpXG4gICAgICAgIHRoaXMucGVuZGluZ1JlbW92YWxzKys7XG4gICAgICAgIHRoaXMucGVuZGluZ1JlbW92YWxDYiA9IGNiO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNoaWxkLiRyZW1vdmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5wZW5kaW5nUmVtb3ZhbHMtLTtcbiAgICAgICAgICBpZiAoIWtlZXBBbGl2ZSkgY2hpbGQuX2NsZWFudXAoKTtcbiAgICAgICAgICBpZiAoIXNlbGYucGVuZGluZ1JlbW92YWxzICYmIHNlbGYucGVuZGluZ1JlbW92YWxDYikge1xuICAgICAgICAgICAgc2VsZi5wZW5kaW5nUmVtb3ZhbENiKCk7XG4gICAgICAgICAgICBzZWxmLnBlbmRpbmdSZW1vdmFsQ2IgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFjdHVhbGx5IHN3YXAgdGhlIGNvbXBvbmVudHMsIGRlcGVuZGluZyBvbiB0aGVcbiAgICAgKiB0cmFuc2l0aW9uIG1vZGUuIERlZmF1bHRzIHRvIHNpbXVsdGFuZW91cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VnVlfSB0YXJnZXRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdXG4gICAgICovXG5cbiAgICB0cmFuc2l0aW9uOiBmdW5jdGlvbiB0cmFuc2l0aW9uKHRhcmdldCwgY2IpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jaGlsZFZNO1xuICAgICAgLy8gZm9yIGRldnRvb2wgaW5zcGVjdGlvblxuICAgICAgaWYgKGN1cnJlbnQpIGN1cnJlbnQuX2luYWN0aXZlID0gdHJ1ZTtcbiAgICAgIHRhcmdldC5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hpbGRWTSA9IHRhcmdldDtcbiAgICAgIHN3aXRjaCAoc2VsZi5wYXJhbXMudHJhbnNpdGlvbk1vZGUpIHtcbiAgICAgICAgY2FzZSAnaW4tb3V0JzpcbiAgICAgICAgICB0YXJnZXQuJGJlZm9yZShzZWxmLmFuY2hvciwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLnJlbW92ZShjdXJyZW50LCBjYik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ291dC1pbic6XG4gICAgICAgICAgc2VsZi5yZW1vdmUoY3VycmVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0YXJnZXQuJGJlZm9yZShzZWxmLmFuY2hvciwgY2IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHNlbGYucmVtb3ZlKGN1cnJlbnQpO1xuICAgICAgICAgIHRhcmdldC4kYmVmb3JlKHNlbGYuYW5jaG9yLCBjYik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVuYmluZC5cbiAgICAgKi9cblxuICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgdGhpcy5pbnZhbGlkYXRlUGVuZGluZygpO1xuICAgICAgLy8gRG8gbm90IGRlZmVyIGNsZWFudXAgd2hlbiB1bmJpbmRpbmdcbiAgICAgIHRoaXMudW5idWlsZCgpO1xuICAgICAgLy8gZGVzdHJveSBhbGwga2VlcC1hbGl2ZSBjYWNoZWQgaW5zdGFuY2VzXG4gICAgICBpZiAodGhpcy5jYWNoZSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgICAgIHRoaXMuY2FjaGVba2V5XS4kZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FjaGUgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2FsbCBhY3RpdmF0ZSBob29rcyBpbiBvcmRlciAoYXN5bmNocm9ub3VzKVxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBob29rc1xuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAgICovXG5cbiAgZnVuY3Rpb24gY2FsbEFjdGl2YXRlSG9va3MoaG9va3MsIHZtLCBjYikge1xuICAgIHZhciB0b3RhbCA9IGhvb2tzLmxlbmd0aDtcbiAgICB2YXIgY2FsbGVkID0gMDtcbiAgICBob29rc1swXS5jYWxsKHZtLCBuZXh0KTtcblxuICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBpZiAoKytjYWxsZWQgPj0gdG90YWwpIHtcbiAgICAgICAgY2IoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhvb2tzW2NhbGxlZF0uY2FsbCh2bSwgbmV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3BCaW5kaW5nTW9kZXMgPSBjb25maWcuX3Byb3BCaW5kaW5nTW9kZXM7XG4gIHZhciBlbXB0eSA9IHt9O1xuXG4gIC8vIHJlZ2V4ZXNcbiAgdmFyIGlkZW50UkUkMSA9IC9eWyRfYS16QS1aXStbXFx3JF0qJC87XG4gIHZhciBzZXR0YWJsZVBhdGhSRSA9IC9eW0EtWmEtel8kXVtcXHckXSooXFwuW0EtWmEtel8kXVtcXHckXSp8XFxbW15cXFtcXF1dK1xcXSkqJC87XG5cbiAgLyoqXG4gICAqIENvbXBpbGUgcHJvcHMgb24gYSByb290IGVsZW1lbnQgYW5kIHJldHVyblxuICAgKiBhIHByb3BzIGxpbmsgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fSBlbFxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wT3B0aW9uc1xuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHJldHVybiB7RnVuY3Rpb259IHByb3BzTGlua0ZuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGVQcm9wcyhlbCwgcHJvcE9wdGlvbnMsIHZtKSB7XG4gICAgdmFyIHByb3BzID0gW107XG4gICAgdmFyIG5hbWVzID0gT2JqZWN0LmtleXMocHJvcE9wdGlvbnMpO1xuICAgIHZhciBpID0gbmFtZXMubGVuZ3RoO1xuICAgIHZhciBvcHRpb25zLCBuYW1lLCBhdHRyLCB2YWx1ZSwgcGF0aCwgcGFyc2VkLCBwcm9wO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgIG9wdGlvbnMgPSBwcm9wT3B0aW9uc1tuYW1lXSB8fCBlbXB0eTtcblxuICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lID09PSAnJGRhdGEnKSB7XG4gICAgICAgIHdhcm4oJ0RvIG5vdCB1c2UgJGRhdGEgYXMgcHJvcC4nLCB2bSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBwcm9wcyBjb3VsZCBjb250YWluIGRhc2hlcywgd2hpY2ggd2lsbCBiZVxuICAgICAgLy8gaW50ZXJwcmV0ZWQgYXMgbWludXMgY2FsY3VsYXRpb25zIGJ5IHRoZSBwYXJzZXJcbiAgICAgIC8vIHNvIHdlIG5lZWQgdG8gY2FtZWxpemUgdGhlIHBhdGggaGVyZVxuICAgICAgcGF0aCA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgaWYgKCFpZGVudFJFJDEudGVzdChwYXRoKSkge1xuICAgICAgICAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgd2FybignSW52YWxpZCBwcm9wIGtleTogXCInICsgbmFtZSArICdcIi4gUHJvcCBrZXlzICcgKyAnbXVzdCBiZSB2YWxpZCBpZGVudGlmaWVycy4nLCB2bSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwcm9wID0ge1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICBtb2RlOiBwcm9wQmluZGluZ01vZGVzLk9ORV9XQVksXG4gICAgICAgIHJhdzogbnVsbFxuICAgICAgfTtcblxuICAgICAgYXR0ciA9IGh5cGhlbmF0ZShuYW1lKTtcbiAgICAgIC8vIGZpcnN0IGNoZWNrIGR5bmFtaWMgdmVyc2lvblxuICAgICAgaWYgKCh2YWx1ZSA9IGdldEJpbmRBdHRyKGVsLCBhdHRyKSkgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKCh2YWx1ZSA9IGdldEJpbmRBdHRyKGVsLCBhdHRyICsgJy5zeW5jJykpICE9PSBudWxsKSB7XG4gICAgICAgICAgcHJvcC5tb2RlID0gcHJvcEJpbmRpbmdNb2Rlcy5UV09fV0FZO1xuICAgICAgICB9IGVsc2UgaWYgKCh2YWx1ZSA9IGdldEJpbmRBdHRyKGVsLCBhdHRyICsgJy5vbmNlJykpICE9PSBudWxsKSB7XG4gICAgICAgICAgcHJvcC5tb2RlID0gcHJvcEJpbmRpbmdNb2Rlcy5PTkVfVElNRTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIC8vIGhhcyBkeW5hbWljIGJpbmRpbmchXG4gICAgICAgIHByb3AucmF3ID0gdmFsdWU7XG4gICAgICAgIHBhcnNlZCA9IHBhcnNlRGlyZWN0aXZlKHZhbHVlKTtcbiAgICAgICAgdmFsdWUgPSBwYXJzZWQuZXhwcmVzc2lvbjtcbiAgICAgICAgcHJvcC5maWx0ZXJzID0gcGFyc2VkLmZpbHRlcnM7XG4gICAgICAgIC8vIGNoZWNrIGJpbmRpbmcgdHlwZVxuICAgICAgICBpZiAoaXNMaXRlcmFsKHZhbHVlKSAmJiAhcGFyc2VkLmZpbHRlcnMpIHtcbiAgICAgICAgICAvLyBmb3IgZXhwcmVzc2lvbnMgY29udGFpbmluZyBsaXRlcmFsIG51bWJlcnMgYW5kXG4gICAgICAgICAgLy8gYm9vbGVhbnMsIHRoZXJlJ3Mgbm8gbmVlZCB0byBzZXR1cCBhIHByb3AgYmluZGluZyxcbiAgICAgICAgICAvLyBzbyB3ZSBjYW4gb3B0aW1pemUgdGhlbSBhcyBhIG9uZS10aW1lIHNldC5cbiAgICAgICAgICBwcm9wLm9wdGltaXplZExpdGVyYWwgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3AuZHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgLy8gY2hlY2sgbm9uLXNldHRhYmxlIHBhdGggZm9yIHR3by13YXkgYmluZGluZ3NcbiAgICAgICAgICBpZiAoJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIHByb3AubW9kZSA9PT0gcHJvcEJpbmRpbmdNb2Rlcy5UV09fV0FZICYmICFzZXR0YWJsZVBhdGhSRS50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcHJvcC5tb2RlID0gcHJvcEJpbmRpbmdNb2Rlcy5PTkVfV0FZO1xuICAgICAgICAgICAgd2FybignQ2Fubm90IGJpbmQgdHdvLXdheSBwcm9wIHdpdGggbm9uLXNldHRhYmxlICcgKyAncGFyZW50IHBhdGg6ICcgKyB2YWx1ZSwgdm0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm9wLnBhcmVudFBhdGggPSB2YWx1ZTtcblxuICAgICAgICAvLyB3YXJuIHJlcXVpcmVkIHR3by13YXlcbiAgICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLnR3b1dheSAmJiBwcm9wLm1vZGUgIT09IHByb3BCaW5kaW5nTW9kZXMuVFdPX1dBWSkge1xuICAgICAgICAgIHdhcm4oJ1Byb3AgXCInICsgbmFtZSArICdcIiBleHBlY3RzIGEgdHdvLXdheSBiaW5kaW5nIHR5cGUuJywgdm0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCh2YWx1ZSA9IGdldEF0dHIoZWwsIGF0dHIpKSAhPT0gbnVsbCkge1xuICAgICAgICAvLyBoYXMgbGl0ZXJhbCBiaW5kaW5nIVxuICAgICAgICBwcm9wLnJhdyA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgLy8gY2hlY2sgcG9zc2libGUgY2FtZWxDYXNlIHByb3AgdXNhZ2VcbiAgICAgICAgdmFyIGxvd2VyQ2FzZU5hbWUgPSBwYXRoLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhbHVlID0gL1tBLVpcXC1dLy50ZXN0KG5hbWUpICYmIChlbC5nZXRBdHRyaWJ1dGUobG93ZXJDYXNlTmFtZSkgfHwgZWwuZ2V0QXR0cmlidXRlKCc6JyArIGxvd2VyQ2FzZU5hbWUpIHx8IGVsLmdldEF0dHJpYnV0ZSgndi1iaW5kOicgKyBsb3dlckNhc2VOYW1lKSB8fCBlbC5nZXRBdHRyaWJ1dGUoJzonICsgbG93ZXJDYXNlTmFtZSArICcub25jZScpIHx8IGVsLmdldEF0dHJpYnV0ZSgndi1iaW5kOicgKyBsb3dlckNhc2VOYW1lICsgJy5vbmNlJykgfHwgZWwuZ2V0QXR0cmlidXRlKCc6JyArIGxvd2VyQ2FzZU5hbWUgKyAnLnN5bmMnKSB8fCBlbC5nZXRBdHRyaWJ1dGUoJ3YtYmluZDonICsgbG93ZXJDYXNlTmFtZSArICcuc3luYycpKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgd2FybignUG9zc2libGUgdXNhZ2UgZXJyb3IgZm9yIHByb3AgYCcgKyBsb3dlckNhc2VOYW1lICsgJ2AgLSAnICsgJ2RpZCB5b3UgbWVhbiBgJyArIGF0dHIgKyAnYD8gSFRNTCBpcyBjYXNlLWluc2Vuc2l0aXZlLCByZW1lbWJlciB0byB1c2UgJyArICdrZWJhYi1jYXNlIGZvciBwcm9wcyBpbiB0ZW1wbGF0ZXMuJywgdm0pO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucmVxdWlyZWQpIHtcbiAgICAgICAgICAvLyB3YXJuIG1pc3NpbmcgcmVxdWlyZWRcbiAgICAgICAgICB3YXJuKCdNaXNzaW5nIHJlcXVpcmVkIHByb3A6ICcgKyBuYW1lLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIHB1c2ggcHJvcFxuICAgICAgcHJvcHMucHVzaChwcm9wKTtcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VQcm9wc0xpbmtGbihwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGQgYSBmdW5jdGlvbiB0aGF0IGFwcGxpZXMgcHJvcHMgdG8gYSB2bS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHNcbiAgICogQHJldHVybiB7RnVuY3Rpb259IHByb3BzTGlua0ZuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG1ha2VQcm9wc0xpbmtGbihwcm9wcykge1xuICAgIHJldHVybiBmdW5jdGlvbiBwcm9wc0xpbmtGbih2bSwgc2NvcGUpIHtcbiAgICAgIC8vIHN0b3JlIHJlc29sdmVkIHByb3BzIGluZm9cbiAgICAgIHZtLl9wcm9wcyA9IHt9O1xuICAgICAgdmFyIGlubGluZVByb3BzID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhO1xuICAgICAgdmFyIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgICB2YXIgcHJvcCwgcGF0aCwgb3B0aW9ucywgdmFsdWUsIHJhdztcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgICByYXcgPSBwcm9wLnJhdztcbiAgICAgICAgcGF0aCA9IHByb3AucGF0aDtcbiAgICAgICAgb3B0aW9ucyA9IHByb3Aub3B0aW9ucztcbiAgICAgICAgdm0uX3Byb3BzW3BhdGhdID0gcHJvcDtcbiAgICAgICAgaWYgKGlubGluZVByb3BzICYmIGhhc093bihpbmxpbmVQcm9wcywgcGF0aCkpIHtcbiAgICAgICAgICBpbml0UHJvcCh2bSwgcHJvcCwgaW5saW5lUHJvcHNbcGF0aF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyYXcgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBpbml0aWFsaXplIGFic2VudCBwcm9wXG4gICAgICAgICAgaW5pdFByb3Aodm0sIHByb3AsIHVuZGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcC5keW5hbWljKSB7XG4gICAgICAgICAgLy8gZHluYW1pYyBwcm9wXG4gICAgICAgICAgaWYgKHByb3AubW9kZSA9PT0gcHJvcEJpbmRpbmdNb2Rlcy5PTkVfVElNRSkge1xuICAgICAgICAgICAgLy8gb25lIHRpbWUgYmluZGluZ1xuICAgICAgICAgICAgdmFsdWUgPSAoc2NvcGUgfHwgdm0uX2NvbnRleHQgfHwgdm0pLiRnZXQocHJvcC5wYXJlbnRQYXRoKTtcbiAgICAgICAgICAgIGluaXRQcm9wKHZtLCBwcm9wLCB2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh2bS5fY29udGV4dCkge1xuICAgICAgICAgICAgICAvLyBkeW5hbWljIGJpbmRpbmdcbiAgICAgICAgICAgICAgdm0uX2JpbmREaXIoe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9wJyxcbiAgICAgICAgICAgICAgICBkZWY6IHByb3BEZWYsXG4gICAgICAgICAgICAgICAgcHJvcDogcHJvcFxuICAgICAgICAgICAgICB9LCBudWxsLCBudWxsLCBzY29wZSk7IC8vIGVsLCBob3N0LCBzY29wZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gcm9vdCBpbnN0YW5jZVxuICAgICAgICAgICAgICBpbml0UHJvcCh2bSwgcHJvcCwgdm0uJGdldChwcm9wLnBhcmVudFBhdGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcC5vcHRpbWl6ZWRMaXRlcmFsKSB7XG4gICAgICAgICAgLy8gb3B0aW1pemVkIGxpdGVyYWwsIGNhc3QgaXQgYW5kIGp1c3Qgc2V0IG9uY2VcbiAgICAgICAgICB2YXIgc3RyaXBwZWQgPSBzdHJpcFF1b3RlcyhyYXcpO1xuICAgICAgICAgIHZhbHVlID0gc3RyaXBwZWQgPT09IHJhdyA/IHRvQm9vbGVhbih0b051bWJlcihyYXcpKSA6IHN0cmlwcGVkO1xuICAgICAgICAgIGluaXRQcm9wKHZtLCBwcm9wLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gc3RyaW5nIGxpdGVyYWwsIGJ1dCB3ZSBuZWVkIHRvIGNhdGVyIGZvclxuICAgICAgICAgIC8vIEJvb2xlYW4gcHJvcHMgd2l0aCBubyB2YWx1ZSwgb3Igd2l0aCBzYW1lXG4gICAgICAgICAgLy8gbGl0ZXJhbCB2YWx1ZSAoZS5nLiBkaXNhYmxlZD1cImRpc2FibGVkXCIpXG4gICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtbG9hZGVyL2lzc3Vlcy8xODJcbiAgICAgICAgICB2YWx1ZSA9IG9wdGlvbnMudHlwZSA9PT0gQm9vbGVhbiAmJiAocmF3ID09PSAnJyB8fCByYXcgPT09IGh5cGhlbmF0ZShwcm9wLm5hbWUpKSA/IHRydWUgOiByYXc7XG4gICAgICAgICAgaW5pdFByb3Aodm0sIHByb3AsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBhIHByb3Agd2l0aCBhIHJhd1ZhbHVlLCBhcHBseWluZyBuZWNlc3NhcnkgY29lcnNpb25zLFxuICAgKiBkZWZhdWx0IHZhbHVlcyAmIGFzc2VydGlvbnMgYW5kIGNhbGwgdGhlIGdpdmVuIGNhbGxiYWNrIHdpdGhcbiAgICogcHJvY2Vzc2VkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BcbiAgICogQHBhcmFtIHsqfSByYXdWYWx1ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKi9cblxuICBmdW5jdGlvbiBwcm9jZXNzUHJvcFZhbHVlKHZtLCBwcm9wLCByYXdWYWx1ZSwgZm4pIHtcbiAgICB2YXIgaXNTaW1wbGUgPSBwcm9wLmR5bmFtaWMgJiYgaXNTaW1wbGVQYXRoKHByb3AucGFyZW50UGF0aCk7XG4gICAgdmFyIHZhbHVlID0gcmF3VmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCk7XG4gICAgfVxuICAgIHZhbHVlID0gY29lcmNlUHJvcChwcm9wLCB2YWx1ZSwgdm0pO1xuICAgIHZhciBjb2VyY2VkID0gdmFsdWUgIT09IHJhd1ZhbHVlO1xuICAgIGlmICghYXNzZXJ0UHJvcChwcm9wLCB2YWx1ZSwgdm0pKSB7XG4gICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGlzU2ltcGxlICYmICFjb2VyY2VkKSB7XG4gICAgICB3aXRob3V0Q29udmVyc2lvbihmdW5jdGlvbigpIHtcbiAgICAgICAgZm4odmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZuKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgcHJvcCdzIGluaXRpYWwgdmFsdWUgb24gYSB2bSBhbmQgaXRzIGRhdGEgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cblxuICBmdW5jdGlvbiBpbml0UHJvcCh2bSwgcHJvcCwgdmFsdWUpIHtcbiAgICBwcm9jZXNzUHJvcFZhbHVlKHZtLCBwcm9wLCB2YWx1ZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBwcm9wLnBhdGgsIHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSBwcm9wJ3MgdmFsdWUgb24gYSB2bS5cbiAgICpcbiAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG5cbiAgZnVuY3Rpb24gdXBkYXRlUHJvcCh2bSwgcHJvcCwgdmFsdWUpIHtcbiAgICBwcm9jZXNzUHJvcFZhbHVlKHZtLCBwcm9wLCB2YWx1ZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZtW3Byb3AucGF0aF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICAgKlxuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BcbiAgICogQHJldHVybiB7Kn1cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCkge1xuICAgIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgICB2YXIgb3B0aW9ucyA9IHByb3Aub3B0aW9ucztcbiAgICBpZiAoIWhhc093bihvcHRpb25zLCAnZGVmYXVsdCcpKSB7XG4gICAgICAvLyBhYnNlbnQgYm9vbGVhbiB2YWx1ZSBkZWZhdWx0cyB0byBmYWxzZVxuICAgICAgcmV0dXJuIG9wdGlvbnMudHlwZSA9PT0gQm9vbGVhbiA/IGZhbHNlIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICB2YXIgZGVmID0gb3B0aW9uc1snZGVmYXVsdCddO1xuICAgIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgICBpZiAoaXNPYmplY3QoZGVmKSkge1xuICAgICAgJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBwcm9wLm5hbWUgKyAnXCI6ICcgKyAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJywgdm0pO1xuICAgIH1cbiAgICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAgIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIG9wdGlvbnMudHlwZSAhPT0gRnVuY3Rpb24gPyBkZWYuY2FsbCh2bSkgOiBkZWY7XG4gIH1cblxuICAvKipcbiAgICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcFxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7VnVlfSB2bVxuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRQcm9wKHByb3AsIHZhbHVlLCB2bSkge1xuICAgIGlmICghcHJvcC5vcHRpb25zLnJlcXVpcmVkICYmICggLy8gbm9uLXJlcXVpcmVkXG4gICAgICAgIHByb3AucmF3ID09PSBudWxsIHx8IC8vIGFic2NlbnRcbiAgICAgICAgdmFsdWUgPT0gbnVsbCkgLy8gbnVsbCBvciB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHByb3Aub3B0aW9ucztcbiAgICB2YXIgdHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICB2YXIgdmFsaWQgPSAhdHlwZTtcbiAgICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICBpZiAoIWlzQXJyYXkodHlwZSkpIHtcbiAgICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSk7XG4gICAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICBpZiAoJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ0ludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgcHJvcC5uYW1lICsgJ1wiLicgKyAnIEV4cGVjdGVkICcgKyBleHBlY3RlZFR5cGVzLm1hcChmb3JtYXRUeXBlKS5qb2luKCcsICcpICsgJywgZ290ICcgKyBmb3JtYXRWYWx1ZSh2YWx1ZSkgKyAnLicsIHZtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHZhbGlkYXRvciA9IG9wdGlvbnMudmFsaWRhdG9yO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgICAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgd2FybignSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBwcm9wLm5hbWUgKyAnXCIuJywgdm0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcmNlIHBhcnNpbmcgdmFsdWUgd2l0aCBjb2VyY2Ugb3B0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEByZXR1cm4geyp9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNvZXJjZVByb3AocHJvcCwgdmFsdWUsIHZtKSB7XG4gICAgdmFyIGNvZXJjZSA9IHByb3Aub3B0aW9ucy5jb2VyY2U7XG4gICAgaWYgKCFjb2VyY2UpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2VyY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjb2VyY2UodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgd2FybignSW52YWxpZCBjb2VyY2UgZm9yIHByb3AgXCInICsgcHJvcC5uYW1lICsgJ1wiOiBleHBlY3RlZCBmdW5jdGlvbiwgZ290ICcgKyB0eXBlb2YgY29lcmNlICsgJy4nLCB2bSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFzc2VydCB0aGUgdHlwZSBvZiBhIHZhbHVlXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHlwZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydFR5cGUodmFsdWUsIHR5cGUpIHtcbiAgICB2YXIgdmFsaWQ7XG4gICAgdmFyIGV4cGVjdGVkVHlwZTtcbiAgICBpZiAodHlwZSA9PT0gU3RyaW5nKSB7XG4gICAgICBleHBlY3RlZFR5cGUgPSAnc3RyaW5nJztcbiAgICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSBleHBlY3RlZFR5cGU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBOdW1iZXIpIHtcbiAgICAgIGV4cGVjdGVkVHlwZSA9ICdudW1iZXInO1xuICAgICAgdmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09IGV4cGVjdGVkVHlwZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEJvb2xlYW4pIHtcbiAgICAgIGV4cGVjdGVkVHlwZSA9ICdib29sZWFuJztcbiAgICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSBleHBlY3RlZFR5cGU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBGdW5jdGlvbikge1xuICAgICAgZXhwZWN0ZWRUeXBlID0gJ2Z1bmN0aW9uJztcbiAgICAgIHZhbGlkID0gdHlwZW9mIHZhbHVlID09PSBleHBlY3RlZFR5cGU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBPYmplY3QpIHtcbiAgICAgIGV4cGVjdGVkVHlwZSA9ICdvYmplY3QnO1xuICAgICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEFycmF5KSB7XG4gICAgICBleHBlY3RlZFR5cGUgPSAnYXJyYXknO1xuICAgICAgdmFsaWQgPSBpc0FycmF5KHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB2YWxpZDogdmFsaWQsXG4gICAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0IHR5cGUgZm9yIG91dHB1dFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGZvcm1hdFR5cGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlID8gdHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoMSkgOiAnY3VzdG9tIHR5cGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdCB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG5cbiAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpLnNsaWNlKDgsIC0xKTtcbiAgfVxuXG4gIHZhciBiaW5kaW5nTW9kZXMgPSBjb25maWcuX3Byb3BCaW5kaW5nTW9kZXM7XG5cbiAgdmFyIHByb3BEZWYgPSB7XG5cbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgdmFyIGNoaWxkID0gdGhpcy52bTtcbiAgICAgIHZhciBwYXJlbnQgPSBjaGlsZC5fY29udGV4dDtcbiAgICAgIC8vIHBhc3NlZCBpbiBmcm9tIGNvbXBpbGVyIGRpcmVjdGx5XG4gICAgICB2YXIgcHJvcCA9IHRoaXMuZGVzY3JpcHRvci5wcm9wO1xuICAgICAgdmFyIGNoaWxkS2V5ID0gcHJvcC5wYXRoO1xuICAgICAgdmFyIHBhcmVudEtleSA9IHByb3AucGFyZW50UGF0aDtcbiAgICAgIHZhciB0d29XYXkgPSBwcm9wLm1vZGUgPT09IGJpbmRpbmdNb2Rlcy5UV09fV0FZO1xuXG4gICAgICB2YXIgcGFyZW50V2F0Y2hlciA9IHRoaXMucGFyZW50V2F0Y2hlciA9IG5ldyBXYXRjaGVyKHBhcmVudCwgcGFyZW50S2V5LCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgdXBkYXRlUHJvcChjaGlsZCwgcHJvcCwgdmFsKTtcbiAgICAgIH0sIHtcbiAgICAgICAgdHdvV2F5OiB0d29XYXksXG4gICAgICAgIGZpbHRlcnM6IHByb3AuZmlsdGVycyxcbiAgICAgICAgLy8gaW1wb3J0YW50OiBwcm9wcyBuZWVkIHRvIGJlIG9ic2VydmVkIG9uIHRoZVxuICAgICAgICAvLyB2LWZvciBzY29wZSBpZiBwcmVzZW50XG4gICAgICAgIHNjb3BlOiB0aGlzLl9zY29wZVxuICAgICAgfSk7XG5cbiAgICAgIC8vIHNldCB0aGUgY2hpbGQgaW5pdGlhbCB2YWx1ZS5cbiAgICAgIGluaXRQcm9wKGNoaWxkLCBwcm9wLCBwYXJlbnRXYXRjaGVyLnZhbHVlKTtcblxuICAgICAgLy8gc2V0dXAgdHdvLXdheSBiaW5kaW5nXG4gICAgICBpZiAodHdvV2F5KSB7XG4gICAgICAgIC8vIGltcG9ydGFudDogZGVmZXIgdGhlIGNoaWxkIHdhdGNoZXIgY3JlYXRpb24gdW50aWxcbiAgICAgICAgLy8gdGhlIGNyZWF0ZWQgaG9vayAoYWZ0ZXIgZGF0YSBvYnNlcnZhdGlvbilcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBjaGlsZC4kb25jZSgncHJlLWhvb2s6Y3JlYXRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuY2hpbGRXYXRjaGVyID0gbmV3IFdhdGNoZXIoY2hpbGQsIGNoaWxkS2V5LCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIHBhcmVudFdhdGNoZXIuc2V0KHZhbCk7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgLy8gZW5zdXJlIHN5bmMgdXB3YXJkIGJlZm9yZSBwYXJlbnQgc3luYyBkb3duLlxuICAgICAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgaW4gY2FzZXMgZS5nLiB0aGUgY2hpbGRcbiAgICAgICAgICAgIC8vIG11dGF0ZXMgYSBwcm9wIGFycmF5LCB0aGVuIHJlcGxhY2VzIGl0LiAoIzE2ODMpXG4gICAgICAgICAgICBzeW5jOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIHRoaXMucGFyZW50V2F0Y2hlci50ZWFyZG93bigpO1xuICAgICAgaWYgKHRoaXMuY2hpbGRXYXRjaGVyKSB7XG4gICAgICAgIHRoaXMuY2hpbGRXYXRjaGVyLnRlYXJkb3duKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBxdWV1ZSQxID0gW107XG4gIHZhciBxdWV1ZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogUHVzaCBhIGpvYiBpbnRvIHRoZSBxdWV1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gam9iXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHB1c2hKb2Ioam9iKSB7XG4gICAgcXVldWUkMS5wdXNoKGpvYik7XG4gICAgaWYgKCFxdWV1ZWQpIHtcbiAgICAgIHF1ZXVlZCA9IHRydWU7XG4gICAgICBuZXh0VGljayhmbHVzaCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZsdXNoIHRoZSBxdWV1ZSwgYW5kIGRvIG9uZSBmb3JjZWQgcmVmbG93IGJlZm9yZVxuICAgKiB0cmlnZ2VyaW5nIHRyYW5zaXRpb25zLlxuICAgKi9cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAvLyBGb3JjZSBsYXlvdXRcbiAgICB2YXIgZiA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZSQxLmxlbmd0aDsgaSsrKSB7XG4gICAgICBxdWV1ZSQxW2ldKCk7XG4gICAgfVxuICAgIHF1ZXVlJDEgPSBbXTtcbiAgICBxdWV1ZWQgPSBmYWxzZTtcbiAgICAvLyBkdW1teSByZXR1cm4sIHNvIGpzIGxpbnRlcnMgZG9uJ3QgY29tcGxhaW4gYWJvdXRcbiAgICAvLyB1bnVzZWQgdmFyaWFibGUgZlxuICAgIHJldHVybiBmO1xuICB9XG5cbiAgdmFyIFRZUEVfVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbiAgdmFyIFRZUEVfQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG4gIHZhciB0cmFuc0R1cmF0aW9uUHJvcCA9IHRyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJztcbiAgdmFyIGFuaW1EdXJhdGlvblByb3AgPSBhbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJztcblxuICAvKipcbiAgICogSWYgYSBqdXN0LWVudGVyZWQgZWxlbWVudCBpcyBhcHBsaWVkIHRoZVxuICAgKiBsZWF2ZSBjbGFzcyB3aGlsZSBpdHMgZW50ZXIgdHJhbnNpdGlvbiBoYXNuJ3Qgc3RhcnRlZCB5ZXQsXG4gICAqIGFuZCB0aGUgdHJhbnNpdGlvbmVkIHByb3BlcnR5IGhhcyB0aGUgc2FtZSB2YWx1ZSBmb3IgYm90aFxuICAgKiBlbnRlci9sZWF2ZSwgdGhlbiB0aGUgbGVhdmUgdHJhbnNpdGlvbiB3aWxsIGJlIHNraXBwZWQgYW5kXG4gICAqIHRoZSB0cmFuc2l0aW9uZW5kIGV2ZW50IG5ldmVyIGZpcmVzLiBUaGlzIGZ1bmN0aW9uIGVuc3VyZXNcbiAgICogaXRzIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBhZnRlciBhIHRyYW5zaXRpb24gaGFzIHN0YXJ0ZWRcbiAgICogYnkgd2FpdGluZyBmb3IgZG91YmxlIHJhZi5cbiAgICpcbiAgICogSXQgZmFsbHMgYmFjayB0byBzZXRUaW1lb3V0IG9uIGRldmljZXMgdGhhdCBzdXBwb3J0IENTU1xuICAgKiB0cmFuc2l0aW9ucyBidXQgbm90IHJhZiAoZS5nLiBBbmRyb2lkIDQuMiBicm93c2VyKSAtIHNpbmNlXG4gICAqIHRoZXNlIGVudmlyb25tZW50cyBhcmUgdXN1YWxseSBzbG93LCB3ZSBhcmUgZ2l2aW5nIGl0IGFcbiAgICogcmVsYXRpdmVseSBsYXJnZSB0aW1lb3V0LlxuICAgKi9cblxuICB2YXIgcmFmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gIHZhciB3YWl0Rm9yVHJhbnNpdGlvblN0YXJ0ID0gcmFmXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICA/IGZ1bmN0aW9uKGZuKSB7XG4gICAgICByYWYoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJhZihmbik7XG4gICAgICB9KTtcbiAgICB9IDogZnVuY3Rpb24oZm4pIHtcbiAgICAgIHNldFRpbWVvdXQoZm4sIDUwKTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBBIFRyYW5zaXRpb24gb2JqZWN0IHRoYXQgZW5jYXBzdWxhdGVzIHRoZSBzdGF0ZSBhbmQgbG9naWNcbiAgICogb2YgdGhlIHRyYW5zaXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBob29rc1xuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICovXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24oZWwsIGlkLCBob29rcywgdm0pIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5lbCA9IGVsO1xuICAgIHRoaXMuZW50ZXJDbGFzcyA9IGhvb2tzICYmIGhvb2tzLmVudGVyQ2xhc3MgfHwgaWQgKyAnLWVudGVyJztcbiAgICB0aGlzLmxlYXZlQ2xhc3MgPSBob29rcyAmJiBob29rcy5sZWF2ZUNsYXNzIHx8IGlkICsgJy1sZWF2ZSc7XG4gICAgdGhpcy5ob29rcyA9IGhvb2tzO1xuICAgIHRoaXMudm0gPSB2bTtcbiAgICAvLyBhc3luYyBzdGF0ZVxuICAgIHRoaXMucGVuZGluZ0Nzc0V2ZW50ID0gdGhpcy5wZW5kaW5nQ3NzQ2IgPSB0aGlzLmNhbmNlbCA9IHRoaXMucGVuZGluZ0pzQ2IgPSB0aGlzLm9wID0gdGhpcy5jYiA9IG51bGw7XG4gICAgdGhpcy5qdXN0RW50ZXJlZCA9IGZhbHNlO1xuICAgIHRoaXMuZW50ZXJlZCA9IHRoaXMubGVmdCA9IGZhbHNlO1xuICAgIHRoaXMudHlwZUNhY2hlID0ge307XG4gICAgLy8gY2hlY2sgY3NzIHRyYW5zaXRpb24gdHlwZVxuICAgIHRoaXMudHlwZSA9IGhvb2tzICYmIGhvb2tzLnR5cGU7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHRoaXMudHlwZSAmJiB0aGlzLnR5cGUgIT09IFRZUEVfVFJBTlNJVElPTiAmJiB0aGlzLnR5cGUgIT09IFRZUEVfQU5JTUFUSU9OKSB7XG4gICAgICAgIHdhcm4oJ2ludmFsaWQgQ1NTIHRyYW5zaXRpb24gdHlwZSBmb3IgdHJhbnNpdGlvbj1cIicgKyB0aGlzLmlkICsgJ1wiOiAnICsgdGhpcy50eXBlLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGJpbmRcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgWydlbnRlck5leHRUaWNrJywgJ2VudGVyRG9uZScsICdsZWF2ZU5leHRUaWNrJywgJ2xlYXZlRG9uZSddLmZvckVhY2goZnVuY3Rpb24obSkge1xuICAgICAgc2VsZlttXSA9IGJpbmQoc2VsZlttXSwgc2VsZik7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgcCQxID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFuIGVudGVyaW5nIHRyYW5zaXRpb24uXG4gICAqXG4gICAqIDEuIGVudGVyIHRyYW5zaXRpb24gdHJpZ2dlcmVkXG4gICAqIDIuIGNhbGwgYmVmb3JlRW50ZXIgaG9va1xuICAgKiAzLiBhZGQgZW50ZXIgY2xhc3NcbiAgICogNC4gaW5zZXJ0L3Nob3cgZWxlbWVudFxuICAgKiA1LiBjYWxsIGVudGVyIGhvb2sgKHdpdGggcG9zc2libGUgZXhwbGljaXQganMgY2FsbGJhY2spXG4gICAqIDYuIHJlZmxvd1xuICAgKiA3LiBiYXNlZCBvbiB0cmFuc2l0aW9uIHR5cGU6XG4gICAqICAgIC0gdHJhbnNpdGlvbjpcbiAgICogICAgICAgIHJlbW92ZSBjbGFzcyBub3csIHdhaXQgZm9yIHRyYW5zaXRpb25lbmQsXG4gICAqICAgICAgICB0aGVuIGRvbmUgaWYgdGhlcmUncyBubyBleHBsaWNpdCBqcyBjYWxsYmFjay5cbiAgICogICAgLSBhbmltYXRpb246XG4gICAqICAgICAgICB3YWl0IGZvciBhbmltYXRpb25lbmQsIHJlbW92ZSBjbGFzcyxcbiAgICogICAgICAgIHRoZW4gZG9uZSBpZiB0aGVyZSdzIG5vIGV4cGxpY2l0IGpzIGNhbGxiYWNrLlxuICAgKiAgICAtIG5vIGNzcyB0cmFuc2l0aW9uOlxuICAgKiAgICAgICAgZG9uZSBub3cgaWYgdGhlcmUncyBubyBleHBsaWNpdCBqcyBjYWxsYmFjay5cbiAgICogOC4gd2FpdCBmb3IgZWl0aGVyIGRvbmUgb3IganMgY2FsbGJhY2ssIHRoZW4gY2FsbFxuICAgKiAgICBhZnRlckVudGVyIGhvb2suXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wIC0gaW5zZXJ0L3Nob3cgdGhlIGVsZW1lbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXVxuICAgKi9cblxuICBwJDEuZW50ZXIgPSBmdW5jdGlvbihvcCwgY2IpIHtcbiAgICB0aGlzLmNhbmNlbFBlbmRpbmcoKTtcbiAgICB0aGlzLmNhbGxIb29rKCdiZWZvcmVFbnRlcicpO1xuICAgIHRoaXMuY2IgPSBjYjtcbiAgICBhZGRDbGFzcyh0aGlzLmVsLCB0aGlzLmVudGVyQ2xhc3MpO1xuICAgIG9wKCk7XG4gICAgdGhpcy5lbnRlcmVkID0gZmFsc2U7XG4gICAgdGhpcy5jYWxsSG9va1dpdGhDYignZW50ZXInKTtcbiAgICBpZiAodGhpcy5lbnRlcmVkKSB7XG4gICAgICByZXR1cm47IC8vIHVzZXIgY2FsbGVkIGRvbmUgc3luY2hyb25vdXNseS5cbiAgICB9XG4gICAgdGhpcy5jYW5jZWwgPSB0aGlzLmhvb2tzICYmIHRoaXMuaG9va3MuZW50ZXJDYW5jZWxsZWQ7XG4gICAgcHVzaEpvYih0aGlzLmVudGVyTmV4dFRpY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUaGUgXCJuZXh0VGlja1wiIHBoYXNlIG9mIGFuIGVudGVyaW5nIHRyYW5zaXRpb24sIHdoaWNoIGlzXG4gICAqIHRvIGJlIHB1c2hlZCBpbnRvIGEgcXVldWUgYW5kIGV4ZWN1dGVkIGFmdGVyIGEgcmVmbG93IHNvXG4gICAqIHRoYXQgcmVtb3ZpbmcgdGhlIGNsYXNzIGNhbiB0cmlnZ2VyIGEgQ1NTIHRyYW5zaXRpb24uXG4gICAqL1xuXG4gIHAkMS5lbnRlck5leHRUaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIHByZXZlbnQgdHJhbnNpdGlvbiBza2lwcGluZ1xuICAgIHRoaXMuanVzdEVudGVyZWQgPSB0cnVlO1xuICAgIHdhaXRGb3JUcmFuc2l0aW9uU3RhcnQoZnVuY3Rpb24oKSB7XG4gICAgICBfdGhpcy5qdXN0RW50ZXJlZCA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHZhciBlbnRlckRvbmUgPSB0aGlzLmVudGVyRG9uZTtcbiAgICB2YXIgdHlwZSA9IHRoaXMuZ2V0Q3NzVHJhbnNpdGlvblR5cGUodGhpcy5lbnRlckNsYXNzKTtcbiAgICBpZiAoIXRoaXMucGVuZGluZ0pzQ2IpIHtcbiAgICAgIGlmICh0eXBlID09PSBUWVBFX1RSQU5TSVRJT04pIHtcbiAgICAgICAgLy8gdHJpZ2dlciB0cmFuc2l0aW9uIGJ5IHJlbW92aW5nIGVudGVyIGNsYXNzIG5vd1xuICAgICAgICByZW1vdmVDbGFzcyh0aGlzLmVsLCB0aGlzLmVudGVyQ2xhc3MpO1xuICAgICAgICB0aGlzLnNldHVwQ3NzQ2IodHJhbnNpdGlvbkVuZEV2ZW50LCBlbnRlckRvbmUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBUWVBFX0FOSU1BVElPTikge1xuICAgICAgICB0aGlzLnNldHVwQ3NzQ2IoYW5pbWF0aW9uRW5kRXZlbnQsIGVudGVyRG9uZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbnRlckRvbmUoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFRZUEVfVFJBTlNJVElPTikge1xuICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5lbCwgdGhpcy5lbnRlckNsYXNzKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSBcImNsZWFudXBcIiBwaGFzZSBvZiBhbiBlbnRlcmluZyB0cmFuc2l0aW9uLlxuICAgKi9cblxuICBwJDEuZW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5lbnRlcmVkID0gdHJ1ZTtcbiAgICB0aGlzLmNhbmNlbCA9IHRoaXMucGVuZGluZ0pzQ2IgPSBudWxsO1xuICAgIHJlbW92ZUNsYXNzKHRoaXMuZWwsIHRoaXMuZW50ZXJDbGFzcyk7XG4gICAgdGhpcy5jYWxsSG9vaygnYWZ0ZXJFbnRlcicpO1xuICAgIGlmICh0aGlzLmNiKSB0aGlzLmNiKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGEgbGVhdmluZyB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiAxLiBsZWF2ZSB0cmFuc2l0aW9uIHRyaWdnZXJlZC5cbiAgICogMi4gY2FsbCBiZWZvcmVMZWF2ZSBob29rXG4gICAqIDMuIGFkZCBsZWF2ZSBjbGFzcyAodHJpZ2dlciBjc3MgdHJhbnNpdGlvbilcbiAgICogNC4gY2FsbCBsZWF2ZSBob29rICh3aXRoIHBvc3NpYmxlIGV4cGxpY2l0IGpzIGNhbGxiYWNrKVxuICAgKiA1LiByZWZsb3cgaWYgbm8gZXhwbGljaXQganMgY2FsbGJhY2sgaXMgcHJvdmlkZWRcbiAgICogNi4gYmFzZWQgb24gdHJhbnNpdGlvbiB0eXBlOlxuICAgKiAgICAtIHRyYW5zaXRpb24gb3IgYW5pbWF0aW9uOlxuICAgKiAgICAgICAgd2FpdCBmb3IgZW5kIGV2ZW50LCByZW1vdmUgY2xhc3MsIHRoZW4gZG9uZSBpZlxuICAgKiAgICAgICAgdGhlcmUncyBubyBleHBsaWNpdCBqcyBjYWxsYmFjay5cbiAgICogICAgLSBubyBjc3MgdHJhbnNpdGlvbjpcbiAgICogICAgICAgIGRvbmUgaWYgdGhlcmUncyBubyBleHBsaWNpdCBqcyBjYWxsYmFjay5cbiAgICogNy4gd2FpdCBmb3IgZWl0aGVyIGRvbmUgb3IganMgY2FsbGJhY2ssIHRoZW4gY2FsbFxuICAgKiAgICBhZnRlckxlYXZlIGhvb2suXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wIC0gcmVtb3ZlL2hpZGUgdGhlIGVsZW1lbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXVxuICAgKi9cblxuICBwJDEubGVhdmUgPSBmdW5jdGlvbihvcCwgY2IpIHtcbiAgICB0aGlzLmNhbmNlbFBlbmRpbmcoKTtcbiAgICB0aGlzLmNhbGxIb29rKCdiZWZvcmVMZWF2ZScpO1xuICAgIHRoaXMub3AgPSBvcDtcbiAgICB0aGlzLmNiID0gY2I7XG4gICAgYWRkQ2xhc3ModGhpcy5lbCwgdGhpcy5sZWF2ZUNsYXNzKTtcbiAgICB0aGlzLmxlZnQgPSBmYWxzZTtcbiAgICB0aGlzLmNhbGxIb29rV2l0aENiKCdsZWF2ZScpO1xuICAgIGlmICh0aGlzLmxlZnQpIHtcbiAgICAgIHJldHVybjsgLy8gdXNlciBjYWxsZWQgZG9uZSBzeW5jaHJvbm91c2x5LlxuICAgIH1cbiAgICB0aGlzLmNhbmNlbCA9IHRoaXMuaG9va3MgJiYgdGhpcy5ob29rcy5sZWF2ZUNhbmNlbGxlZDtcbiAgICAvLyBvbmx5IG5lZWQgdG8gaGFuZGxlIGxlYXZlRG9uZSBpZlxuICAgIC8vIDEuIHRoZSB0cmFuc2l0aW9uIGlzIGFscmVhZHkgZG9uZSAoc3luY2hyb25vdXNseSBjYWxsZWRcbiAgICAvLyAgICBieSB0aGUgdXNlciwgd2hpY2ggY2F1c2VzIHRoaXMub3Agc2V0IHRvIG51bGwpXG4gICAgLy8gMi4gdGhlcmUncyBubyBleHBsaWNpdCBqcyBjYWxsYmFja1xuICAgIGlmICh0aGlzLm9wICYmICF0aGlzLnBlbmRpbmdKc0NiKSB7XG4gICAgICAvLyBpZiBhIENTUyB0cmFuc2l0aW9uIGxlYXZlcyBpbW1lZGlhdGVseSBhZnRlciBlbnRlcixcbiAgICAgIC8vIHRoZSB0cmFuc2l0aW9uZW5kIGV2ZW50IG5ldmVyIGZpcmVzLiB0aGVyZWZvcmUgd2VcbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBlbmQgdGhlIGxlYXZlIGltbWVkaWF0ZWx5LlxuICAgICAgaWYgKHRoaXMuanVzdEVudGVyZWQpIHtcbiAgICAgICAgdGhpcy5sZWF2ZURvbmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hKb2IodGhpcy5sZWF2ZU5leHRUaWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSBcIm5leHRUaWNrXCIgcGhhc2Ugb2YgYSBsZWF2aW5nIHRyYW5zaXRpb24uXG4gICAqL1xuXG4gIHAkMS5sZWF2ZU5leHRUaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHR5cGUgPSB0aGlzLmdldENzc1RyYW5zaXRpb25UeXBlKHRoaXMubGVhdmVDbGFzcyk7XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHZhciBldmVudCA9IHR5cGUgPT09IFRZUEVfVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICAgICAgdGhpcy5zZXR1cENzc0NiKGV2ZW50LCB0aGlzLmxlYXZlRG9uZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGVhdmVEb25lKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBUaGUgXCJjbGVhbnVwXCIgcGhhc2Ugb2YgYSBsZWF2aW5nIHRyYW5zaXRpb24uXG4gICAqL1xuXG4gIHAkMS5sZWF2ZURvbmUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmxlZnQgPSB0cnVlO1xuICAgIHRoaXMuY2FuY2VsID0gdGhpcy5wZW5kaW5nSnNDYiA9IG51bGw7XG4gICAgdGhpcy5vcCgpO1xuICAgIHJlbW92ZUNsYXNzKHRoaXMuZWwsIHRoaXMubGVhdmVDbGFzcyk7XG4gICAgdGhpcy5jYWxsSG9vaygnYWZ0ZXJMZWF2ZScpO1xuICAgIGlmICh0aGlzLmNiKSB0aGlzLmNiKCk7XG4gICAgdGhpcy5vcCA9IG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbmNlbCBhbnkgcGVuZGluZyBjYWxsYmFja3MgZnJvbSBhIHByZXZpb3VzbHkgcnVubmluZ1xuICAgKiBidXQgbm90IGZpbmlzaGVkIHRyYW5zaXRpb24uXG4gICAqL1xuXG4gIHAkMS5jYW5jZWxQZW5kaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5vcCA9IHRoaXMuY2IgPSBudWxsO1xuICAgIHZhciBoYXNQZW5kaW5nID0gZmFsc2U7XG4gICAgaWYgKHRoaXMucGVuZGluZ0Nzc0NiKSB7XG4gICAgICBoYXNQZW5kaW5nID0gdHJ1ZTtcbiAgICAgIG9mZih0aGlzLmVsLCB0aGlzLnBlbmRpbmdDc3NFdmVudCwgdGhpcy5wZW5kaW5nQ3NzQ2IpO1xuICAgICAgdGhpcy5wZW5kaW5nQ3NzRXZlbnQgPSB0aGlzLnBlbmRpbmdDc3NDYiA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLnBlbmRpbmdKc0NiKSB7XG4gICAgICBoYXNQZW5kaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMucGVuZGluZ0pzQ2IuY2FuY2VsKCk7XG4gICAgICB0aGlzLnBlbmRpbmdKc0NiID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGhhc1BlbmRpbmcpIHtcbiAgICAgIHJlbW92ZUNsYXNzKHRoaXMuZWwsIHRoaXMuZW50ZXJDbGFzcyk7XG4gICAgICByZW1vdmVDbGFzcyh0aGlzLmVsLCB0aGlzLmxlYXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jYW5jZWwpIHtcbiAgICAgIHRoaXMuY2FuY2VsLmNhbGwodGhpcy52bSwgdGhpcy5lbCk7XG4gICAgICB0aGlzLmNhbmNlbCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxsIGEgdXNlci1wcm92aWRlZCBzeW5jaHJvbm91cyBob29rIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKi9cblxuICBwJDEuY2FsbEhvb2sgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgaWYgKHRoaXMuaG9va3MgJiYgdGhpcy5ob29rc1t0eXBlXSkge1xuICAgICAgdGhpcy5ob29rc1t0eXBlXS5jYWxsKHRoaXMudm0sIHRoaXMuZWwpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2FsbCBhIHVzZXItcHJvdmlkZWQsIHBvdGVudGlhbGx5LWFzeW5jIGhvb2sgZnVuY3Rpb24uXG4gICAqIFdlIGNoZWNrIGZvciB0aGUgbGVuZ3RoIG9mIGFyZ3VtZW50cyB0byBzZWUgaWYgdGhlIGhvb2tcbiAgICogZXhwZWN0cyBhIGBkb25lYCBjYWxsYmFjay4gSWYgdHJ1ZSwgdGhlIHRyYW5zaXRpb24ncyBlbmRcbiAgICogd2lsbCBiZSBkZXRlcm1pbmVkIGJ5IHdoZW4gdGhlIHVzZXIgY2FsbHMgdGhhdCBjYWxsYmFjaztcbiAgICogb3RoZXJ3aXNlLCB0aGUgZW5kIGlzIGRldGVybWluZWQgYnkgdGhlIENTUyB0cmFuc2l0aW9uIG9yXG4gICAqIGFuaW1hdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICovXG5cbiAgcCQxLmNhbGxIb29rV2l0aENiID0gZnVuY3Rpb24odHlwZSkge1xuICAgIHZhciBob29rID0gdGhpcy5ob29rcyAmJiB0aGlzLmhvb2tzW3R5cGVdO1xuICAgIGlmIChob29rKSB7XG4gICAgICBpZiAoaG9vay5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRoaXMucGVuZGluZ0pzQ2IgPSBjYW5jZWxsYWJsZSh0aGlzW3R5cGUgKyAnRG9uZSddKTtcbiAgICAgIH1cbiAgICAgIGhvb2suY2FsbCh0aGlzLnZtLCB0aGlzLmVsLCB0aGlzLnBlbmRpbmdKc0NiKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhbiBlbGVtZW50J3MgdHJhbnNpdGlvbiB0eXBlIGJhc2VkIG9uIHRoZVxuICAgKiBjYWxjdWxhdGVkIHN0eWxlcy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuXG4gIHAkMS5nZXRDc3NUcmFuc2l0aW9uVHlwZSA9IGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdHJhbnNpdGlvbkVuZEV2ZW50IHx8XG4gICAgICAvLyBza2lwIENTUyB0cmFuc2l0aW9ucyBpZiBwYWdlIGlzIG5vdCB2aXNpYmxlIC1cbiAgICAgIC8vIHRoaXMgc29sdmVzIHRoZSBpc3N1ZSBvZiB0cmFuc2l0aW9uZW5kIGV2ZW50cyBub3RcbiAgICAgIC8vIGZpcmluZyB1bnRpbCB0aGUgcGFnZSBpcyB2aXNpYmxlIGFnYWluLlxuICAgICAgLy8gcGFnZVZpc2liaWxpdHkgQVBJIGlzIHN1cHBvcnRlZCBpbiBJRTEwKywgc2FtZSBhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLlxuICAgICAgZG9jdW1lbnQuaGlkZGVuIHx8XG4gICAgICAvLyBleHBsaWNpdCBqcy1vbmx5IHRyYW5zaXRpb25cbiAgICAgIHRoaXMuaG9va3MgJiYgdGhpcy5ob29rcy5jc3MgPT09IGZhbHNlIHx8XG4gICAgICAvLyBlbGVtZW50IGlzIGhpZGRlblxuICAgICAgaXNIaWRkZW4odGhpcy5lbCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHR5cGUgPSB0aGlzLnR5cGUgfHwgdGhpcy50eXBlQ2FjaGVbY2xhc3NOYW1lXTtcbiAgICBpZiAodHlwZSkgcmV0dXJuIHR5cGU7XG4gICAgdmFyIGlubGluZVN0eWxlcyA9IHRoaXMuZWwuc3R5bGU7XG4gICAgdmFyIGNvbXB1dGVkU3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbCk7XG4gICAgdmFyIHRyYW5zRHVyYXRpb24gPSBpbmxpbmVTdHlsZXNbdHJhbnNEdXJhdGlvblByb3BdIHx8IGNvbXB1dGVkU3R5bGVzW3RyYW5zRHVyYXRpb25Qcm9wXTtcbiAgICBpZiAodHJhbnNEdXJhdGlvbiAmJiB0cmFuc0R1cmF0aW9uICE9PSAnMHMnKSB7XG4gICAgICB0eXBlID0gVFlQRV9UUkFOU0lUSU9OO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5pbUR1cmF0aW9uID0gaW5saW5lU3R5bGVzW2FuaW1EdXJhdGlvblByb3BdIHx8IGNvbXB1dGVkU3R5bGVzW2FuaW1EdXJhdGlvblByb3BdO1xuICAgICAgaWYgKGFuaW1EdXJhdGlvbiAmJiBhbmltRHVyYXRpb24gIT09ICcwcycpIHtcbiAgICAgICAgdHlwZSA9IFRZUEVfQU5JTUFUSU9OO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZSkge1xuICAgICAgdGhpcy50eXBlQ2FjaGVbY2xhc3NOYW1lXSA9IHR5cGU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXR1cCBhIENTUyB0cmFuc2l0aW9uZW5kL2FuaW1hdGlvbmVuZCBjYWxsYmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gICAqL1xuXG4gIHAkMS5zZXR1cENzc0NiID0gZnVuY3Rpb24oZXZlbnQsIGNiKSB7XG4gICAgdGhpcy5wZW5kaW5nQ3NzRXZlbnQgPSBldmVudDtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICB2YXIgb25FbmQgPSB0aGlzLnBlbmRpbmdDc3NDYiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgICAgb2ZmKGVsLCBldmVudCwgb25FbmQpO1xuICAgICAgICBzZWxmLnBlbmRpbmdDc3NFdmVudCA9IHNlbGYucGVuZGluZ0Nzc0NiID0gbnVsbDtcbiAgICAgICAgaWYgKCFzZWxmLnBlbmRpbmdKc0NiICYmIGNiKSB7XG4gICAgICAgICAgY2IoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgb24oZWwsIGV2ZW50LCBvbkVuZCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGVsZW1lbnQgaXMgaGlkZGVuIC0gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0XG4gICAqIHNraXAgdGhlIHRyYW5zaXRpb24gYWxsdG9nZXRoZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG5cbiAgZnVuY3Rpb24gaXNIaWRkZW4oZWwpIHtcbiAgICBpZiAoL3N2ZyQvLnRlc3QoZWwubmFtZXNwYWNlVVJJKSkge1xuICAgICAgLy8gU1ZHIGVsZW1lbnRzIGRvIG5vdCBoYXZlIG9mZnNldChXaWR0aHxIZWlnaHQpXG4gICAgICAvLyBzbyB3ZSBuZWVkIHRvIGNoZWNrIHRoZSBjbGllbnQgcmVjdFxuICAgICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHJldHVybiAhKHJlY3Qud2lkdGggfHwgcmVjdC5oZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gIShlbC5vZmZzZXRXaWR0aCB8fCBlbC5vZmZzZXRIZWlnaHQgfHwgZWwuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uJDEgPSB7XG5cbiAgICBwcmlvcml0eTogVFJBTlNJVElPTixcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGlkLCBvbGRJZCkge1xuICAgICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICAgIC8vIHJlc29sdmUgb24gb3duZXIgdm1cbiAgICAgIHZhciBob29rcyA9IHJlc29sdmVBc3NldCh0aGlzLnZtLiRvcHRpb25zLCAndHJhbnNpdGlvbnMnLCBpZCk7XG4gICAgICBpZCA9IGlkIHx8ICd2JztcbiAgICAgIG9sZElkID0gb2xkSWQgfHwgJ3YnO1xuICAgICAgZWwuX192X3RyYW5zID0gbmV3IFRyYW5zaXRpb24oZWwsIGlkLCBob29rcywgdGhpcy52bSk7XG4gICAgICByZW1vdmVDbGFzcyhlbCwgb2xkSWQgKyAnLXRyYW5zaXRpb24nKTtcbiAgICAgIGFkZENsYXNzKGVsLCBpZCArICctdHJhbnNpdGlvbicpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW50ZXJuYWxEaXJlY3RpdmVzID0ge1xuICAgIHN0eWxlOiBzdHlsZSxcbiAgICAnY2xhc3MnOiB2Q2xhc3MsXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgcHJvcDogcHJvcERlZixcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uJDFcbiAgfTtcblxuICAvLyBzcGVjaWFsIGJpbmRpbmcgcHJlZml4ZXNcbiAgdmFyIGJpbmRSRSA9IC9edi1iaW5kOnxeOi87XG4gIHZhciBvblJFID0gL152LW9uOnxeQC87XG4gIHZhciBkaXJBdHRyUkUgPSAvXnYtKFteOl0rKSg/OiR8OiguKikkKS87XG4gIHZhciBtb2RpZmllclJFID0gL1xcLlteXFwuXSsvZztcbiAgdmFyIHRyYW5zaXRpb25SRSA9IC9eKHYtYmluZDp8Oik/dHJhbnNpdGlvbiQvO1xuXG4gIC8vIGRlZmF1bHQgZGlyZWN0aXZlIHByaW9yaXR5XG4gIHZhciBERUZBVUxUX1BSSU9SSVRZID0gMTAwMDtcbiAgdmFyIERFRkFVTFRfVEVSTUlOQUxfUFJJT1JJVFkgPSAyMDAwO1xuXG4gIC8qKlxuICAgKiBDb21waWxlIGEgdGVtcGxhdGUgYW5kIHJldHVybiBhIHJldXNhYmxlIGNvbXBvc2l0ZSBsaW5rXG4gICAqIGZ1bmN0aW9uLCB3aGljaCByZWN1cnNpdmVseSBjb250YWlucyBtb3JlIGxpbmsgZnVuY3Rpb25zXG4gICAqIGluc2lkZS4gVGhpcyB0b3AgbGV2ZWwgY29tcGlsZSBmdW5jdGlvbiB3b3VsZCBub3JtYWxseVxuICAgKiBiZSBjYWxsZWQgb24gaW5zdGFuY2Ugcm9vdCBub2RlcywgYnV0IGNhbiBhbHNvIGJlIHVzZWRcbiAgICogZm9yIHBhcnRpYWwgY29tcGlsYXRpb24gaWYgdGhlIHBhcnRpYWwgYXJndW1lbnQgaXMgdHJ1ZS5cbiAgICpcbiAgICogVGhlIHJldHVybmVkIGNvbXBvc2l0ZSBsaW5rIGZ1bmN0aW9uLCB3aGVuIGNhbGxlZCwgd2lsbFxuICAgKiByZXR1cm4gYW4gdW5saW5rIGZ1bmN0aW9uIHRoYXQgdGVhcnNkb3duIGFsbCBkaXJlY3RpdmVzXG4gICAqIGNyZWF0ZWQgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR8RG9jdW1lbnRGcmFnbWVudH0gZWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtCb29sZWFufSBwYXJ0aWFsXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgKi9cblxuICBmdW5jdGlvbiBjb21waWxlKGVsLCBvcHRpb25zLCBwYXJ0aWFsKSB7XG4gICAgLy8gbGluayBmdW5jdGlvbiBmb3IgdGhlIG5vZGUgaXRzZWxmLlxuICAgIHZhciBub2RlTGlua0ZuID0gcGFydGlhbCB8fCAhb3B0aW9ucy5fYXNDb21wb25lbnQgPyBjb21waWxlTm9kZShlbCwgb3B0aW9ucykgOiBudWxsO1xuICAgIC8vIGxpbmsgZnVuY3Rpb24gZm9yIHRoZSBjaGlsZE5vZGVzXG4gICAgdmFyIGNoaWxkTGlua0ZuID0gIShub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4udGVybWluYWwpICYmICFpc1NjcmlwdChlbCkgJiYgZWwuaGFzQ2hpbGROb2RlcygpID8gY29tcGlsZU5vZGVMaXN0KGVsLmNoaWxkTm9kZXMsIG9wdGlvbnMpIDogbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgY29tcG9zaXRlIGxpbmtlciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gYSBhbHJlYWR5XG4gICAgICogY29tcGlsZWQgcGllY2Ugb2YgRE9NLCB3aGljaCBpbnN0YW50aWF0ZXMgYWxsIGRpcmVjdGl2ZVxuICAgICAqIGluc3RhbmNlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VnVlfSB2bVxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fSBlbFxuICAgICAqIEBwYXJhbSB7VnVlfSBbaG9zdF0gLSBob3N0IHZtIG9mIHRyYW5zY2x1ZGVkIGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Njb3BlXSAtIHYtZm9yIHNjb3BlXG4gICAgICogQHBhcmFtIHtGcmFnbWVudH0gW2ZyYWddIC0gbGluayBjb250ZXh0IGZyYWdtZW50XG4gICAgICogQHJldHVybiB7RnVuY3Rpb258dW5kZWZpbmVkfVxuICAgICAqL1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNvbXBvc2l0ZUxpbmtGbih2bSwgZWwsIGhvc3QsIHNjb3BlLCBmcmFnKSB7XG4gICAgICAvLyBjYWNoZSBjaGlsZE5vZGVzIGJlZm9yZSBsaW5raW5nIHBhcmVudCwgZml4ICM2NTdcbiAgICAgIHZhciBjaGlsZE5vZGVzID0gdG9BcnJheShlbC5jaGlsZE5vZGVzKTtcbiAgICAgIC8vIGxpbmtcbiAgICAgIHZhciBkaXJzID0gbGlua0FuZENhcHR1cmUoZnVuY3Rpb24gY29tcG9zaXRlTGlua0NhcHR1cmVyKCkge1xuICAgICAgICBpZiAobm9kZUxpbmtGbikgbm9kZUxpbmtGbih2bSwgZWwsIGhvc3QsIHNjb3BlLCBmcmFnKTtcbiAgICAgICAgaWYgKGNoaWxkTGlua0ZuKSBjaGlsZExpbmtGbih2bSwgY2hpbGROb2RlcywgaG9zdCwgc2NvcGUsIGZyYWcpO1xuICAgICAgfSwgdm0pO1xuICAgICAgcmV0dXJuIG1ha2VVbmxpbmtGbih2bSwgZGlycyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBhIGxpbmtlciB0byBhIHZtL2VsZW1lbnQgcGFpciBhbmQgY2FwdHVyZSB0aGVcbiAgICogZGlyZWN0aXZlcyBjcmVhdGVkIGR1cmluZyB0aGUgcHJvY2Vzcy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlua2VyXG4gICAqIEBwYXJhbSB7VnVlfSB2bVxuICAgKi9cblxuICBmdW5jdGlvbiBsaW5rQW5kQ2FwdHVyZShsaW5rZXIsIHZtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCdkZXZlbG9wbWVudCcgPT09ICdwcm9kdWN0aW9uJykge31cbiAgICB2YXIgb3JpZ2luYWxEaXJDb3VudCA9IHZtLl9kaXJlY3RpdmVzLmxlbmd0aDtcbiAgICBsaW5rZXIoKTtcbiAgICB2YXIgZGlycyA9IHZtLl9kaXJlY3RpdmVzLnNsaWNlKG9yaWdpbmFsRGlyQ291bnQpO1xuICAgIGRpcnMuc29ydChkaXJlY3RpdmVDb21wYXJhdG9yKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBkaXJzW2ldLl9iaW5kKCk7XG4gICAgfVxuICAgIHJldHVybiBkaXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIERpcmVjdGl2ZSBwcmlvcml0eSBzb3J0IGNvbXBhcmF0b3JcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFcbiAgICogQHBhcmFtIHtPYmplY3R9IGJcbiAgICovXG5cbiAgZnVuY3Rpb24gZGlyZWN0aXZlQ29tcGFyYXRvcihhLCBiKSB7XG4gICAgYSA9IGEuZGVzY3JpcHRvci5kZWYucHJpb3JpdHkgfHwgREVGQVVMVF9QUklPUklUWTtcbiAgICBiID0gYi5kZXNjcmlwdG9yLmRlZi5wcmlvcml0eSB8fCBERUZBVUxUX1BSSU9SSVRZO1xuICAgIHJldHVybiBhID4gYiA/IC0xIDogYSA9PT0gYiA/IDAgOiAxO1xuICB9XG5cbiAgLyoqXG4gICAqIExpbmtlciBmdW5jdGlvbnMgcmV0dXJuIGFuIHVubGluayBmdW5jdGlvbiB0aGF0XG4gICAqIHRlYXJzZG93biBhbGwgZGlyZWN0aXZlcyBpbnN0YW5jZXMgZ2VuZXJhdGVkIGR1cmluZ1xuICAgKiB0aGUgcHJvY2Vzcy5cbiAgICpcbiAgICogV2UgY3JlYXRlIHVubGluayBmdW5jdGlvbnMgd2l0aCBvbmx5IHRoZSBuZWNlc3NhcnlcbiAgICogaW5mb3JtYXRpb24gdG8gYXZvaWQgcmV0YWluaW5nIGFkZGl0aW9uYWwgY2xvc3VyZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7VnVlfSB2bVxuICAgKiBAcGFyYW0ge0FycmF5fSBkaXJzXG4gICAqIEBwYXJhbSB7VnVlfSBbY29udGV4dF1cbiAgICogQHBhcmFtIHtBcnJheX0gW2NvbnRleHREaXJzXVxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICovXG5cbiAgZnVuY3Rpb24gbWFrZVVubGlua0ZuKHZtLCBkaXJzLCBjb250ZXh0LCBjb250ZXh0RGlycykge1xuICAgIGZ1bmN0aW9uIHVubGluayhkZXN0cm95aW5nKSB7XG4gICAgICB0ZWFyZG93bkRpcnModm0sIGRpcnMsIGRlc3Ryb3lpbmcpO1xuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dERpcnMpIHtcbiAgICAgICAgdGVhcmRvd25EaXJzKGNvbnRleHQsIGNvbnRleHREaXJzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZXhwb3NlIGxpbmtlZCBkaXJlY3RpdmVzXG4gICAgdW5saW5rLmRpcnMgPSBkaXJzO1xuICAgIHJldHVybiB1bmxpbms7XG4gIH1cblxuICAvKipcbiAgICogVGVhcmRvd24gcGFydGlhbCBsaW5rZWQgZGlyZWN0aXZlcy5cbiAgICpcbiAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAqIEBwYXJhbSB7QXJyYXl9IGRpcnNcbiAgICogQHBhcmFtIHtCb29sZWFufSBkZXN0cm95aW5nXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHRlYXJkb3duRGlycyh2bSwgZGlycywgZGVzdHJveWluZykge1xuICAgIHZhciBpID0gZGlycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgZGlyc1tpXS5fdGVhcmRvd24oKTtcbiAgICAgIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgIWRlc3Ryb3lpbmcpIHtcbiAgICAgICAgdm0uX2RpcmVjdGl2ZXMuJHJlbW92ZShkaXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcGlsZSBsaW5rIHByb3BzIG9uIGFuIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHNcbiAgICogQHBhcmFtIHtPYmplY3R9IFtzY29wZV1cbiAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGVBbmRMaW5rUHJvcHModm0sIGVsLCBwcm9wcywgc2NvcGUpIHtcbiAgICB2YXIgcHJvcHNMaW5rRm4gPSBjb21waWxlUHJvcHMoZWwsIHByb3BzLCB2bSk7XG4gICAgdmFyIHByb3BEaXJzID0gbGlua0FuZENhcHR1cmUoZnVuY3Rpb24oKSB7XG4gICAgICBwcm9wc0xpbmtGbih2bSwgc2NvcGUpO1xuICAgIH0sIHZtKTtcbiAgICByZXR1cm4gbWFrZVVubGlua0ZuKHZtLCBwcm9wRGlycyk7XG4gIH1cblxuICAvKipcbiAgICogQ29tcGlsZSB0aGUgcm9vdCBlbGVtZW50IG9mIGFuIGluc3RhbmNlLlxuICAgKlxuICAgKiAxLiBhdHRycyBvbiBjb250ZXh0IGNvbnRhaW5lciAoY29udGV4dCBzY29wZSlcbiAgICogMi4gYXR0cnMgb24gdGhlIGNvbXBvbmVudCB0ZW1wbGF0ZSByb290IG5vZGUsIGlmXG4gICAqICAgIHJlcGxhY2U6dHJ1ZSAoY2hpbGQgc2NvcGUpXG4gICAqXG4gICAqIElmIHRoaXMgaXMgYSBmcmFnbWVudCBpbnN0YW5jZSwgd2Ugb25seSBuZWVkIHRvIGNvbXBpbGUgMS5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dE9wdGlvbnNcbiAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGVSb290KGVsLCBvcHRpb25zLCBjb250ZXh0T3B0aW9ucykge1xuICAgIHZhciBjb250YWluZXJBdHRycyA9IG9wdGlvbnMuX2NvbnRhaW5lckF0dHJzO1xuICAgIHZhciByZXBsYWNlckF0dHJzID0gb3B0aW9ucy5fcmVwbGFjZXJBdHRycztcbiAgICB2YXIgY29udGV4dExpbmtGbiwgcmVwbGFjZXJMaW5rRm47XG5cbiAgICAvLyBvbmx5IG5lZWQgdG8gY29tcGlsZSBvdGhlciBhdHRyaWJ1dGVzIGZvclxuICAgIC8vIG5vbi1mcmFnbWVudCBpbnN0YW5jZXNcbiAgICBpZiAoZWwubm9kZVR5cGUgIT09IDExKSB7XG4gICAgICAvLyBmb3IgY29tcG9uZW50cywgY29udGFpbmVyIGFuZCByZXBsYWNlciBuZWVkIHRvIGJlXG4gICAgICAvLyBjb21waWxlZCBzZXBhcmF0ZWx5IGFuZCBsaW5rZWQgaW4gZGlmZmVyZW50IHNjb3Blcy5cbiAgICAgIGlmIChvcHRpb25zLl9hc0NvbXBvbmVudCkge1xuICAgICAgICAvLyAyLiBjb250YWluZXIgYXR0cmlidXRlc1xuICAgICAgICBpZiAoY29udGFpbmVyQXR0cnMgJiYgY29udGV4dE9wdGlvbnMpIHtcbiAgICAgICAgICBjb250ZXh0TGlua0ZuID0gY29tcGlsZURpcmVjdGl2ZXMoY29udGFpbmVyQXR0cnMsIGNvbnRleHRPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwbGFjZXJBdHRycykge1xuICAgICAgICAgIC8vIDMuIHJlcGxhY2VyIGF0dHJpYnV0ZXNcbiAgICAgICAgICByZXBsYWNlckxpbmtGbiA9IGNvbXBpbGVEaXJlY3RpdmVzKHJlcGxhY2VyQXR0cnMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBub24tY29tcG9uZW50LCBqdXN0IGNvbXBpbGUgYXMgYSBub3JtYWwgZWxlbWVudC5cbiAgICAgICAgcmVwbGFjZXJMaW5rRm4gPSBjb21waWxlRGlyZWN0aXZlcyhlbC5hdHRyaWJ1dGVzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiBjb250YWluZXJBdHRycykge1xuICAgICAgLy8gd2FybiBjb250YWluZXIgZGlyZWN0aXZlcyBmb3IgZnJhZ21lbnQgaW5zdGFuY2VzXG4gICAgICB2YXIgbmFtZXMgPSBjb250YWluZXJBdHRycy5maWx0ZXIoZnVuY3Rpb24oYXR0cikge1xuICAgICAgICAvLyBhbGxvdyB2dWUtbG9hZGVyL3Z1ZWlmeSBzY29wZWQgY3NzIGF0dHJpYnV0ZXNcbiAgICAgICAgcmV0dXJuIGF0dHIubmFtZS5pbmRleE9mKCdfdi0nKSA8IDAgJiZcbiAgICAgICAgICAvLyBhbGxvdyBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAhb25SRS50ZXN0KGF0dHIubmFtZSkgJiZcbiAgICAgICAgICAvLyBhbGxvdyBzbG90c1xuICAgICAgICAgIGF0dHIubmFtZSAhPT0gJ3Nsb3QnO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgcmV0dXJuICdcIicgKyBhdHRyLm5hbWUgKyAnXCInO1xuICAgICAgfSk7XG4gICAgICBpZiAobmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBwbHVyYWwgPSBuYW1lcy5sZW5ndGggPiAxO1xuICAgICAgICB3YXJuKCdBdHRyaWJ1dGUnICsgKHBsdXJhbCA/ICdzICcgOiAnICcpICsgbmFtZXMuam9pbignLCAnKSArIChwbHVyYWwgPyAnIGFyZScgOiAnIGlzJykgKyAnIGlnbm9yZWQgb24gY29tcG9uZW50ICcgKyAnPCcgKyBvcHRpb25zLmVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSArICc+IGJlY2F1c2UgJyArICd0aGUgY29tcG9uZW50IGlzIGEgZnJhZ21lbnQgaW5zdGFuY2U6ICcgKyAnaHR0cDovL3Z1ZWpzLm9yZy9ndWlkZS9jb21wb25lbnRzLmh0bWwjRnJhZ21lbnQtSW5zdGFuY2UnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvcHRpb25zLl9jb250YWluZXJBdHRycyA9IG9wdGlvbnMuX3JlcGxhY2VyQXR0cnMgPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbiByb290TGlua0ZuKHZtLCBlbCwgc2NvcGUpIHtcbiAgICAgIC8vIGxpbmsgY29udGV4dCBzY29wZSBkaXJzXG4gICAgICB2YXIgY29udGV4dCA9IHZtLl9jb250ZXh0O1xuICAgICAgdmFyIGNvbnRleHREaXJzO1xuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dExpbmtGbikge1xuICAgICAgICBjb250ZXh0RGlycyA9IGxpbmtBbmRDYXB0dXJlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNvbnRleHRMaW5rRm4oY29udGV4dCwgZWwsIG51bGwsIHNjb3BlKTtcbiAgICAgICAgfSwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGxpbmsgc2VsZlxuICAgICAgdmFyIHNlbGZEaXJzID0gbGlua0FuZENhcHR1cmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChyZXBsYWNlckxpbmtGbikgcmVwbGFjZXJMaW5rRm4odm0sIGVsKTtcbiAgICAgIH0sIHZtKTtcblxuICAgICAgLy8gcmV0dXJuIHRoZSB1bmxpbmsgZnVuY3Rpb24gdGhhdCB0ZWFyc2Rvd24gY29udGV4dFxuICAgICAgLy8gY29udGFpbmVyIGRpcmVjdGl2ZXMuXG4gICAgICByZXR1cm4gbWFrZVVubGlua0ZuKHZtLCBzZWxmRGlycywgY29udGV4dCwgY29udGV4dERpcnMpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ29tcGlsZSBhIG5vZGUgYW5kIHJldHVybiBhIG5vZGVMaW5rRm4gYmFzZWQgb24gdGhlXG4gICAqIG5vZGUgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufG51bGx9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGVOb2RlKG5vZGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgdHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgaWYgKHR5cGUgPT09IDEgJiYgIWlzU2NyaXB0KG5vZGUpKSB7XG4gICAgICByZXR1cm4gY29tcGlsZUVsZW1lbnQobm9kZSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAzICYmIG5vZGUuZGF0YS50cmltKCkpIHtcbiAgICAgIHJldHVybiBjb21waWxlVGV4dE5vZGUobm9kZSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb21waWxlIGFuIGVsZW1lbnQgYW5kIHJldHVybiBhIG5vZGVMaW5rRm4uXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHJldHVybiB7RnVuY3Rpb258bnVsbH1cbiAgICovXG5cbiAgZnVuY3Rpb24gY29tcGlsZUVsZW1lbnQoZWwsIG9wdGlvbnMpIHtcbiAgICAvLyBwcmVwcm9jZXNzIHRleHRhcmVhcy5cbiAgICAvLyB0ZXh0YXJlYSB0cmVhdHMgaXRzIHRleHQgY29udGVudCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAvLyBqdXN0IGJpbmQgaXQgYXMgYW4gYXR0ciBkaXJlY3RpdmUgZm9yIHZhbHVlLlxuICAgIGlmIChlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICB2YXIgdG9rZW5zID0gcGFyc2VUZXh0KGVsLnZhbHVlKTtcbiAgICAgIGlmICh0b2tlbnMpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCc6dmFsdWUnLCB0b2tlbnNUb0V4cCh0b2tlbnMpKTtcbiAgICAgICAgZWwudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxpbmtGbjtcbiAgICB2YXIgaGFzQXR0cnMgPSBlbC5oYXNBdHRyaWJ1dGVzKCk7XG4gICAgdmFyIGF0dHJzID0gaGFzQXR0cnMgJiYgdG9BcnJheShlbC5hdHRyaWJ1dGVzKTtcbiAgICAvLyBjaGVjayB0ZXJtaW5hbCBkaXJlY3RpdmVzIChmb3IgJiBpZilcbiAgICBpZiAoaGFzQXR0cnMpIHtcbiAgICAgIGxpbmtGbiA9IGNoZWNrVGVybWluYWxEaXJlY3RpdmVzKGVsLCBhdHRycywgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIGNoZWNrIGVsZW1lbnQgZGlyZWN0aXZlc1xuICAgIGlmICghbGlua0ZuKSB7XG4gICAgICBsaW5rRm4gPSBjaGVja0VsZW1lbnREaXJlY3RpdmVzKGVsLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLy8gY2hlY2sgY29tcG9uZW50XG4gICAgaWYgKCFsaW5rRm4pIHtcbiAgICAgIGxpbmtGbiA9IGNoZWNrQ29tcG9uZW50KGVsLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLy8gbm9ybWFsIGRpcmVjdGl2ZXNcbiAgICBpZiAoIWxpbmtGbiAmJiBoYXNBdHRycykge1xuICAgICAgbGlua0ZuID0gY29tcGlsZURpcmVjdGl2ZXMoYXR0cnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gbGlua0ZuO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBpbGUgYSB0ZXh0Tm9kZSBhbmQgcmV0dXJuIGEgbm9kZUxpbmtGbi5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0Tm9kZX0gbm9kZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtGdW5jdGlvbnxudWxsfSB0ZXh0Tm9kZUxpbmtGblxuICAgKi9cblxuICBmdW5jdGlvbiBjb21waWxlVGV4dE5vZGUobm9kZSwgb3B0aW9ucykge1xuICAgIC8vIHNraXAgbWFya2VkIHRleHQgbm9kZXNcbiAgICBpZiAobm9kZS5fc2tpcCkge1xuICAgICAgcmV0dXJuIHJlbW92ZVRleHQ7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IHBhcnNlVGV4dChub2RlLndob2xlVGV4dCk7XG4gICAgaWYgKCF0b2tlbnMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIG1hcmsgYWRqYWNlbnQgdGV4dCBub2RlcyBhcyBza2lwcGVkLFxuICAgIC8vIGJlY2F1c2Ugd2UgYXJlIHVzaW5nIG5vZGUud2hvbGVUZXh0IHRvIGNvbXBpbGVcbiAgICAvLyBhbGwgYWRqYWNlbnQgdGV4dCBub2RlcyB0b2dldGhlci4gVGhpcyBmaXhlc1xuICAgIC8vIGlzc3VlcyBpbiBJRSB3aGVyZSBzb21ldGltZXMgaXQgc3BsaXRzIHVwIGEgc2luZ2xlXG4gICAgLy8gdGV4dCBub2RlIGludG8gbXVsdGlwbGUgb25lcy5cbiAgICB2YXIgbmV4dCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgd2hpbGUgKG5leHQgJiYgbmV4dC5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgbmV4dC5fc2tpcCA9IHRydWU7XG4gICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcbiAgICB9XG5cbiAgICB2YXIgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICB2YXIgZWwsIHRva2VuO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdG9rZW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICBlbCA9IHRva2VuLnRhZyA/IHByb2Nlc3NUZXh0VG9rZW4odG9rZW4sIG9wdGlvbnMpIDogZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodG9rZW4udmFsdWUpO1xuICAgICAgZnJhZy5hcHBlbmRDaGlsZChlbCk7XG4gICAgfVxuICAgIHJldHVybiBtYWtlVGV4dE5vZGVMaW5rRm4odG9rZW5zLCBmcmFnLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaW5rZXIgZm9yIGFuIHNraXBwZWQgdGV4dCBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge1Z1ZX0gdm1cbiAgICogQHBhcmFtIHtUZXh0fSBub2RlXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlbW92ZVRleHQodm0sIG5vZGUpIHtcbiAgICByZW1vdmUobm9kZSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBhIHNpbmdsZSB0ZXh0IHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdG9rZW5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHJldHVybiB7Tm9kZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1RleHRUb2tlbih0b2tlbiwgb3B0aW9ucykge1xuICAgIHZhciBlbDtcbiAgICBpZiAodG9rZW4ub25lVGltZSkge1xuICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0b2tlbi52YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0b2tlbi5odG1sKSB7XG4gICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgndi1odG1sJyk7XG4gICAgICAgIHNldFRva2VuVHlwZSgnaHRtbCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSUUgd2lsbCBjbGVhbiB1cCBlbXB0eSB0ZXh0Tm9kZXMgZHVyaW5nXG4gICAgICAgIC8vIGZyYWcuY2xvbmVOb2RlKHRydWUpLCBzbyB3ZSBoYXZlIHRvIGdpdmUgaXRcbiAgICAgICAgLy8gc29tZXRoaW5nIGhlcmUuLi5cbiAgICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnICcpO1xuICAgICAgICBzZXRUb2tlblR5cGUoJ3RleHQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRUb2tlblR5cGUodHlwZSkge1xuICAgICAgaWYgKHRva2VuLmRlc2NyaXB0b3IpIHJldHVybjtcbiAgICAgIHZhciBwYXJzZWQgPSBwYXJzZURpcmVjdGl2ZSh0b2tlbi52YWx1ZSk7XG4gICAgICB0b2tlbi5kZXNjcmlwdG9yID0ge1xuICAgICAgICBuYW1lOiB0eXBlLFxuICAgICAgICBkZWY6IGRpcmVjdGl2ZXNbdHlwZV0sXG4gICAgICAgIGV4cHJlc3Npb246IHBhcnNlZC5leHByZXNzaW9uLFxuICAgICAgICBmaWx0ZXJzOiBwYXJzZWQuZmlsdGVyc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIGEgZnVuY3Rpb24gdGhhdCBwcm9jZXNzZXMgYSB0ZXh0Tm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSB0b2tlbnNcbiAgICogQHBhcmFtIHtEb2N1bWVudEZyYWdtZW50fSBmcmFnXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG1ha2VUZXh0Tm9kZUxpbmtGbih0b2tlbnMsIGZyYWcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gdGV4dE5vZGVMaW5rRm4odm0sIGVsLCBob3N0LCBzY29wZSkge1xuICAgICAgdmFyIGZyYWdDbG9uZSA9IGZyYWcuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgdmFyIGNoaWxkTm9kZXMgPSB0b0FycmF5KGZyYWdDbG9uZS5jaGlsZE5vZGVzKTtcbiAgICAgIHZhciB0b2tlbiwgdmFsdWUsIG5vZGU7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRva2Vucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgIHZhbHVlID0gdG9rZW4udmFsdWU7XG4gICAgICAgIGlmICh0b2tlbi50YWcpIHtcbiAgICAgICAgICBub2RlID0gY2hpbGROb2Rlc1tpXTtcbiAgICAgICAgICBpZiAodG9rZW4ub25lVGltZSkge1xuICAgICAgICAgICAgdmFsdWUgPSAoc2NvcGUgfHwgdm0pLiRldmFsKHZhbHVlKTtcbiAgICAgICAgICAgIGlmICh0b2tlbi5odG1sKSB7XG4gICAgICAgICAgICAgIHJlcGxhY2Uobm9kZSwgcGFyc2VUZW1wbGF0ZSh2YWx1ZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbm9kZS5kYXRhID0gX3RvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdm0uX2JpbmREaXIodG9rZW4uZGVzY3JpcHRvciwgbm9kZSwgaG9zdCwgc2NvcGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVwbGFjZShlbCwgZnJhZ0Nsb25lKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBpbGUgYSBub2RlIGxpc3QgYW5kIHJldHVybiBhIGNoaWxkTGlua0ZuLlxuICAgKlxuICAgKiBAcGFyYW0ge05vZGVMaXN0fSBub2RlTGlzdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtGdW5jdGlvbnx1bmRlZmluZWR9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGVOb2RlTGlzdChub2RlTGlzdCwgb3B0aW9ucykge1xuICAgIHZhciBsaW5rRm5zID0gW107XG4gICAgdmFyIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuLCBub2RlO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZUxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBub2RlID0gbm9kZUxpc3RbaV07XG4gICAgICBub2RlTGlua0ZuID0gY29tcGlsZU5vZGUobm9kZSwgb3B0aW9ucyk7XG4gICAgICBjaGlsZExpbmtGbiA9ICEobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnRlcm1pbmFsKSAmJiBub2RlLnRhZ05hbWUgIT09ICdTQ1JJUFQnICYmIG5vZGUuaGFzQ2hpbGROb2RlcygpID8gY29tcGlsZU5vZGVMaXN0KG5vZGUuY2hpbGROb2Rlcywgb3B0aW9ucykgOiBudWxsO1xuICAgICAgbGlua0Zucy5wdXNoKG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmtGbnMubGVuZ3RoID8gbWFrZUNoaWxkTGlua0ZuKGxpbmtGbnMpIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIGEgY2hpbGQgbGluayBmdW5jdGlvbiBmb3IgYSBub2RlJ3MgY2hpbGROb2Rlcy5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxGdW5jdGlvbj59IGxpbmtGbnNcbiAgICogQHJldHVybiB7RnVuY3Rpb259IGNoaWxkTGlua0ZuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG1ha2VDaGlsZExpbmtGbihsaW5rRm5zKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoaWxkTGlua0ZuKHZtLCBub2RlcywgaG9zdCwgc2NvcGUsIGZyYWcpIHtcbiAgICAgIHZhciBub2RlLCBub2RlTGlua0ZuLCBjaGlsZHJlbkxpbmtGbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gMCwgbCA9IGxpbmtGbnMubGVuZ3RoOyBpIDwgbDsgbisrKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tuXTtcbiAgICAgICAgbm9kZUxpbmtGbiA9IGxpbmtGbnNbaSsrXTtcbiAgICAgICAgY2hpbGRyZW5MaW5rRm4gPSBsaW5rRm5zW2krK107XG4gICAgICAgIC8vIGNhY2hlIGNoaWxkTm9kZXMgYmVmb3JlIGxpbmtpbmcgcGFyZW50LCBmaXggIzY1N1xuICAgICAgICB2YXIgY2hpbGROb2RlcyA9IHRvQXJyYXkobm9kZS5jaGlsZE5vZGVzKTtcbiAgICAgICAgaWYgKG5vZGVMaW5rRm4pIHtcbiAgICAgICAgICBub2RlTGlua0ZuKHZtLCBub2RlLCBob3N0LCBzY29wZSwgZnJhZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkcmVuTGlua0ZuKSB7XG4gICAgICAgICAgY2hpbGRyZW5MaW5rRm4odm0sIGNoaWxkTm9kZXMsIGhvc3QsIHNjb3BlLCBmcmFnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgZm9yIGVsZW1lbnQgZGlyZWN0aXZlcyAoY3VzdG9tIGVsZW1lbnRzIHRoYXQgc2hvdWxkXG4gICAqIGJlIHJlc292bGVkIGFzIHRlcm1pbmFsIGRpcmVjdGl2ZXMpLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNoZWNrRWxlbWVudERpcmVjdGl2ZXMoZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGFnID0gZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChjb21tb25UYWdSRS50ZXN0KHRhZykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGRlZiA9IHJlc29sdmVBc3NldChvcHRpb25zLCAnZWxlbWVudERpcmVjdGl2ZXMnLCB0YWcpO1xuICAgIGlmIChkZWYpIHtcbiAgICAgIHJldHVybiBtYWtlVGVybWluYWxOb2RlTGlua0ZuKGVsLCB0YWcsICcnLCBvcHRpb25zLCBkZWYpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBlbGVtZW50IGlzIGEgY29tcG9uZW50LiBJZiB5ZXMsIHJldHVyblxuICAgKiBhIGNvbXBvbmVudCBsaW5rIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufHVuZGVmaW5lZH1cbiAgICovXG5cbiAgZnVuY3Rpb24gY2hlY2tDb21wb25lbnQoZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gY2hlY2tDb21wb25lbnRBdHRyKGVsLCBvcHRpb25zKTtcbiAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICB2YXIgcmVmID0gZmluZFJlZihlbCk7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgbmFtZTogJ2NvbXBvbmVudCcsXG4gICAgICAgIHJlZjogcmVmLFxuICAgICAgICBleHByZXNzaW9uOiBjb21wb25lbnQuaWQsXG4gICAgICAgIGRlZjogaW50ZXJuYWxEaXJlY3RpdmVzLmNvbXBvbmVudCxcbiAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgbGl0ZXJhbDogIWNvbXBvbmVudC5keW5hbWljXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY29tcG9uZW50TGlua0ZuID0gZnVuY3Rpb24gY29tcG9uZW50TGlua0ZuKHZtLCBlbCwgaG9zdCwgc2NvcGUsIGZyYWcpIHtcbiAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgIGRlZmluZVJlYWN0aXZlKChzY29wZSB8fCB2bSkuJHJlZnMsIHJlZiwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdm0uX2JpbmREaXIoZGVzY3JpcHRvciwgZWwsIGhvc3QsIHNjb3BlLCBmcmFnKTtcbiAgICAgIH07XG4gICAgICBjb21wb25lbnRMaW5rRm4udGVybWluYWwgPSB0cnVlO1xuICAgICAgcmV0dXJuIGNvbXBvbmVudExpbmtGbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgYW4gZWxlbWVudCBmb3IgdGVybWluYWwgZGlyZWN0aXZlcyBpbiBmaXhlZCBvcmRlci5cbiAgICogSWYgaXQgZmluZHMgb25lLCByZXR1cm4gYSB0ZXJtaW5hbCBsaW5rIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7QXJyYXl9IGF0dHJzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0ZXJtaW5hbExpbmtGblxuICAgKi9cblxuICBmdW5jdGlvbiBjaGVja1Rlcm1pbmFsRGlyZWN0aXZlcyhlbCwgYXR0cnMsIG9wdGlvbnMpIHtcbiAgICAvLyBza2lwIHYtcHJlXG4gICAgaWYgKGdldEF0dHIoZWwsICd2LXByZScpICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gc2tpcDtcbiAgICB9XG4gICAgLy8gc2tpcCB2LWVsc2UgYmxvY2ssIGJ1dCBvbmx5IGlmIGZvbGxvd2luZyB2LWlmXG4gICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSgndi1lbHNlJykpIHtcbiAgICAgIHZhciBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgIGlmIChwcmV2ICYmIHByZXYuaGFzQXR0cmlidXRlKCd2LWlmJykpIHtcbiAgICAgICAgcmV0dXJuIHNraXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGF0dHIsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMsIG1hdGNoZWQsIGRpck5hbWUsIHJhd05hbWUsIGFyZywgZGVmLCB0ZXJtRGVmO1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gYXR0cnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBhdHRyID0gYXR0cnNbaV07XG4gICAgICBuYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UobW9kaWZpZXJSRSwgJycpO1xuICAgICAgaWYgKG1hdGNoZWQgPSBuYW1lLm1hdGNoKGRpckF0dHJSRSkpIHtcbiAgICAgICAgZGVmID0gcmVzb2x2ZUFzc2V0KG9wdGlvbnMsICdkaXJlY3RpdmVzJywgbWF0Y2hlZFsxXSk7XG4gICAgICAgIGlmIChkZWYgJiYgZGVmLnRlcm1pbmFsKSB7XG4gICAgICAgICAgaWYgKCF0ZXJtRGVmIHx8IChkZWYucHJpb3JpdHkgfHwgREVGQVVMVF9URVJNSU5BTF9QUklPUklUWSkgPiB0ZXJtRGVmLnByaW9yaXR5KSB7XG4gICAgICAgICAgICB0ZXJtRGVmID0gZGVmO1xuICAgICAgICAgICAgcmF3TmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHBhcnNlTW9kaWZpZXJzKGF0dHIubmFtZSk7XG4gICAgICAgICAgICB2YWx1ZSA9IGF0dHIudmFsdWU7XG4gICAgICAgICAgICBkaXJOYW1lID0gbWF0Y2hlZFsxXTtcbiAgICAgICAgICAgIGFyZyA9IG1hdGNoZWRbMl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRlcm1EZWYpIHtcbiAgICAgIHJldHVybiBtYWtlVGVybWluYWxOb2RlTGlua0ZuKGVsLCBkaXJOYW1lLCB2YWx1ZSwgb3B0aW9ucywgdGVybURlZiwgcmF3TmFtZSwgYXJnLCBtb2RpZmllcnMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNraXAoKSB7fVxuICBza2lwLnRlcm1pbmFsID0gdHJ1ZTtcblxuICAvKipcbiAgICogQnVpbGQgYSBub2RlIGxpbmsgZnVuY3Rpb24gZm9yIGEgdGVybWluYWwgZGlyZWN0aXZlLlxuICAgKiBBIHRlcm1pbmFsIGxpbmsgZnVuY3Rpb24gdGVybWluYXRlcyB0aGUgY3VycmVudFxuICAgKiBjb21waWxhdGlvbiByZWN1cnNpb24gYW5kIGhhbmRsZXMgY29tcGlsYXRpb24gb2YgdGhlXG4gICAqIHN1YnRyZWUgaW4gdGhlIGRpcmVjdGl2ZS5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyTmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3R9IGRlZlxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3Jhd05hbWVdXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbYXJnXVxuICAgKiBAcGFyYW0ge09iamVjdH0gW21vZGlmaWVyc11cbiAgICogQHJldHVybiB7RnVuY3Rpb259IHRlcm1pbmFsTGlua0ZuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG1ha2VUZXJtaW5hbE5vZGVMaW5rRm4oZWwsIGRpck5hbWUsIHZhbHVlLCBvcHRpb25zLCBkZWYsIHJhd05hbWUsIGFyZywgbW9kaWZpZXJzKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlRGlyZWN0aXZlKHZhbHVlKTtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHtcbiAgICAgIG5hbWU6IGRpck5hbWUsXG4gICAgICBhcmc6IGFyZyxcbiAgICAgIGV4cHJlc3Npb246IHBhcnNlZC5leHByZXNzaW9uLFxuICAgICAgZmlsdGVyczogcGFyc2VkLmZpbHRlcnMsXG4gICAgICByYXc6IHZhbHVlLFxuICAgICAgYXR0cjogcmF3TmFtZSxcbiAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzLFxuICAgICAgZGVmOiBkZWZcbiAgICB9O1xuICAgIC8vIGNoZWNrIHJlZiBmb3Igdi1mb3IgYW5kIHJvdXRlci12aWV3XG4gICAgaWYgKGRpck5hbWUgPT09ICdmb3InIHx8IGRpck5hbWUgPT09ICdyb3V0ZXItdmlldycpIHtcbiAgICAgIGRlc2NyaXB0b3IucmVmID0gZmluZFJlZihlbCk7XG4gICAgfVxuICAgIHZhciBmbiA9IGZ1bmN0aW9uIHRlcm1pbmFsTm9kZUxpbmtGbih2bSwgZWwsIGhvc3QsIHNjb3BlLCBmcmFnKSB7XG4gICAgICBpZiAoZGVzY3JpcHRvci5yZWYpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUoKHNjb3BlIHx8IHZtKS4kcmVmcywgZGVzY3JpcHRvci5yZWYsIG51bGwpO1xuICAgICAgfVxuICAgICAgdm0uX2JpbmREaXIoZGVzY3JpcHRvciwgZWwsIGhvc3QsIHNjb3BlLCBmcmFnKTtcbiAgICB9O1xuICAgIGZuLnRlcm1pbmFsID0gdHJ1ZTtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICAvKipcbiAgICogQ29tcGlsZSB0aGUgZGlyZWN0aXZlcyBvbiBhbiBlbGVtZW50IGFuZCByZXR1cm4gYSBsaW5rZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl8TmFtZWROb2RlTWFwfSBhdHRyc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICovXG5cbiAgZnVuY3Rpb24gY29tcGlsZURpcmVjdGl2ZXMoYXR0cnMsIG9wdGlvbnMpIHtcbiAgICB2YXIgaSA9IGF0dHJzLmxlbmd0aDtcbiAgICB2YXIgZGlycyA9IFtdO1xuICAgIHZhciBhdHRyLCBuYW1lLCB2YWx1ZSwgcmF3TmFtZSwgcmF3VmFsdWUsIGRpck5hbWUsIGFyZywgbW9kaWZpZXJzLCBkaXJEZWYsIHRva2VucywgbWF0Y2hlZDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBhdHRyID0gYXR0cnNbaV07XG4gICAgICBuYW1lID0gcmF3TmFtZSA9IGF0dHIubmFtZTtcbiAgICAgIHZhbHVlID0gcmF3VmFsdWUgPSBhdHRyLnZhbHVlO1xuICAgICAgdG9rZW5zID0gcGFyc2VUZXh0KHZhbHVlKTtcbiAgICAgIC8vIHJlc2V0IGFyZ1xuICAgICAgYXJnID0gbnVsbDtcbiAgICAgIC8vIGNoZWNrIG1vZGlmaWVyc1xuICAgICAgbW9kaWZpZXJzID0gcGFyc2VNb2RpZmllcnMobmFtZSk7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG1vZGlmaWVyUkUsICcnKTtcblxuICAgICAgLy8gYXR0cmlidXRlIGludGVycG9sYXRpb25zXG4gICAgICBpZiAodG9rZW5zKSB7XG4gICAgICAgIHZhbHVlID0gdG9rZW5zVG9FeHAodG9rZW5zKTtcbiAgICAgICAgYXJnID0gbmFtZTtcbiAgICAgICAgcHVzaERpcignYmluZCcsIGRpcmVjdGl2ZXMuYmluZCwgdG9rZW5zKTtcbiAgICAgICAgLy8gd2FybiBhZ2FpbnN0IG1peGluZyBtdXN0YWNoZXMgd2l0aCB2LWJpbmRcbiAgICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnICYmIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwoYXR0cnMsIGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGF0dHIubmFtZSA9PT0gJzpjbGFzcycgfHwgYXR0ci5uYW1lID09PSAndi1iaW5kOmNsYXNzJztcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICB3YXJuKCdjbGFzcz1cIicgKyByYXdWYWx1ZSArICdcIjogRG8gbm90IG1peCBtdXN0YWNoZSBpbnRlcnBvbGF0aW9uICcgKyAnYW5kIHYtYmluZCBmb3IgXCJjbGFzc1wiIG9uIHRoZSBzYW1lIGVsZW1lbnQuIFVzZSBvbmUgb3IgdGhlIG90aGVyLicsIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlXG5cbiAgICAgIC8vIHNwZWNpYWwgYXR0cmlidXRlOiB0cmFuc2l0aW9uXG4gICAgICBpZiAodHJhbnNpdGlvblJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgbW9kaWZpZXJzLmxpdGVyYWwgPSAhYmluZFJFLnRlc3QobmFtZSk7XG4gICAgICAgIHB1c2hEaXIoJ3RyYW5zaXRpb24nLCBpbnRlcm5hbERpcmVjdGl2ZXMudHJhbnNpdGlvbik7XG4gICAgICB9IGVsc2VcblxuICAgICAgLy8gZXZlbnQgaGFuZGxlcnNcbiAgICAgIGlmIChvblJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgYXJnID0gbmFtZS5yZXBsYWNlKG9uUkUsICcnKTtcbiAgICAgICAgcHVzaERpcignb24nLCBkaXJlY3RpdmVzLm9uKTtcbiAgICAgIH0gZWxzZVxuXG4gICAgICAvLyBhdHRyaWJ1dGUgYmluZGluZ3NcbiAgICAgIGlmIChiaW5kUkUudGVzdChuYW1lKSkge1xuICAgICAgICBkaXJOYW1lID0gbmFtZS5yZXBsYWNlKGJpbmRSRSwgJycpO1xuICAgICAgICBpZiAoZGlyTmFtZSA9PT0gJ3N0eWxlJyB8fCBkaXJOYW1lID09PSAnY2xhc3MnKSB7XG4gICAgICAgICAgcHVzaERpcihkaXJOYW1lLCBpbnRlcm5hbERpcmVjdGl2ZXNbZGlyTmFtZV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFyZyA9IGRpck5hbWU7XG4gICAgICAgICAgcHVzaERpcignYmluZCcsIGRpcmVjdGl2ZXMuYmluZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZVxuXG4gICAgICAvLyBub3JtYWwgZGlyZWN0aXZlc1xuICAgICAgaWYgKG1hdGNoZWQgPSBuYW1lLm1hdGNoKGRpckF0dHJSRSkpIHtcbiAgICAgICAgZGlyTmFtZSA9IG1hdGNoZWRbMV07XG4gICAgICAgIGFyZyA9IG1hdGNoZWRbMl07XG5cbiAgICAgICAgLy8gc2tpcCB2LWVsc2UgKHdoZW4gdXNlZCB3aXRoIHYtc2hvdylcbiAgICAgICAgaWYgKGRpck5hbWUgPT09ICdlbHNlJykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlyRGVmID0gcmVzb2x2ZUFzc2V0KG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyTmFtZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChkaXJEZWYpIHtcbiAgICAgICAgICBwdXNoRGlyKGRpck5hbWUsIGRpckRlZik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdXNoIGEgZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRpck5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gZGVmXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2ludGVycFRva2Vuc11cbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIHB1c2hEaXIoZGlyTmFtZSwgZGVmLCBpbnRlcnBUb2tlbnMpIHtcbiAgICAgIHZhciBoYXNPbmVUaW1lVG9rZW4gPSBpbnRlcnBUb2tlbnMgJiYgaGFzT25lVGltZShpbnRlcnBUb2tlbnMpO1xuICAgICAgdmFyIHBhcnNlZCA9ICFoYXNPbmVUaW1lVG9rZW4gJiYgcGFyc2VEaXJlY3RpdmUodmFsdWUpO1xuICAgICAgZGlycy5wdXNoKHtcbiAgICAgICAgbmFtZTogZGlyTmFtZSxcbiAgICAgICAgYXR0cjogcmF3TmFtZSxcbiAgICAgICAgcmF3OiByYXdWYWx1ZSxcbiAgICAgICAgZGVmOiBkZWYsXG4gICAgICAgIGFyZzogYXJnLFxuICAgICAgICBtb2RpZmllcnM6IG1vZGlmaWVycyxcbiAgICAgICAgLy8gY29udmVyc2lvbiBmcm9tIGludGVycG9sYXRpb24gc3RyaW5ncyB3aXRoIG9uZS10aW1lIHRva2VuXG4gICAgICAgIC8vIHRvIGV4cHJlc3Npb24gaXMgZGlmZmVyZWQgdW50aWwgZGlyZWN0aXZlIGJpbmQgdGltZSBzbyB0aGF0IHdlXG4gICAgICAgIC8vIGhhdmUgYWNjZXNzIHRvIHRoZSBhY3R1YWwgdm0gY29udGV4dCBmb3Igb25lLXRpbWUgYmluZGluZ3MuXG4gICAgICAgIGV4cHJlc3Npb246IHBhcnNlZCAmJiBwYXJzZWQuZXhwcmVzc2lvbixcbiAgICAgICAgZmlsdGVyczogcGFyc2VkICYmIHBhcnNlZC5maWx0ZXJzLFxuICAgICAgICBpbnRlcnA6IGludGVycFRva2VucyxcbiAgICAgICAgaGFzT25lVGltZTogaGFzT25lVGltZVRva2VuXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZGlycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBtYWtlTm9kZUxpbmtGbihkaXJzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgbW9kaWZpZXJzIGZyb20gZGlyZWN0aXZlIGF0dHJpYnV0ZSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHBhcnNlTW9kaWZpZXJzKG5hbWUpIHtcbiAgICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgbWF0Y2ggPSBuYW1lLm1hdGNoKG1vZGlmaWVyUkUpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgdmFyIGkgPSBtYXRjaC5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHJlc1ttYXRjaFtpXS5zbGljZSgxKV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIGEgbGluayBmdW5jdGlvbiBmb3IgYWxsIGRpcmVjdGl2ZXMgb24gYSBzaW5nbGUgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gZGlyZWN0aXZlc1xuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gZGlyZWN0aXZlc0xpbmtGblxuICAgKi9cblxuICBmdW5jdGlvbiBtYWtlTm9kZUxpbmtGbihkaXJlY3RpdmVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5vZGVMaW5rRm4odm0sIGVsLCBob3N0LCBzY29wZSwgZnJhZykge1xuICAgICAgLy8gcmV2ZXJzZSBhcHBseSBiZWNhdXNlIGl0J3Mgc29ydGVkIGxvdyB0byBoaWdoXG4gICAgICB2YXIgaSA9IGRpcmVjdGl2ZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2bS5fYmluZERpcihkaXJlY3RpdmVzW2ldLCBlbCwgaG9zdCwgc2NvcGUsIGZyYWcpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gaW50ZXJwb2xhdGlvbiBzdHJpbmcgY29udGFpbnMgb25lLXRpbWUgdG9rZW5zLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSB0b2tlbnNcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG5cbiAgZnVuY3Rpb24gaGFzT25lVGltZSh0b2tlbnMpIHtcbiAgICB2YXIgaSA9IHRva2Vucy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKHRva2Vuc1tpXS5vbmVUaW1lKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1NjcmlwdChlbCkge1xuICAgIHJldHVybiBlbC50YWdOYW1lID09PSAnU0NSSVBUJyAmJiAoIWVsLmhhc0F0dHJpYnV0ZSgndHlwZScpIHx8IGVsLmdldEF0dHJpYnV0ZSgndHlwZScpID09PSAndGV4dC9qYXZhc2NyaXB0Jyk7XG4gIH1cblxuICB2YXIgc3BlY2lhbENoYXJSRSA9IC9bXlxcd1xcLTpcXC5dLztcblxuICAvKipcbiAgICogUHJvY2VzcyBhbiBlbGVtZW50IG9yIGEgRG9jdW1lbnRGcmFnbWVudCBiYXNlZCBvbiBhXG4gICAqIGluc3RhbmNlIG9wdGlvbiBvYmplY3QuIFRoaXMgYWxsb3dzIHVzIHRvIHRyYW5zY2x1ZGVcbiAgICogYSB0ZW1wbGF0ZSBub2RlL2ZyYWdtZW50IGJlZm9yZSB0aGUgaW5zdGFuY2UgaXMgY3JlYXRlZCxcbiAgICogc28gdGhlIHByb2Nlc3NlZCBmcmFnbWVudCBjYW4gdGhlbiBiZSBjbG9uZWQgYW5kIHJldXNlZFxuICAgKiBpbiB2LWZvci5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtFbGVtZW50fERvY3VtZW50RnJhZ21lbnR9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHRyYW5zY2x1ZGUoZWwsIG9wdGlvbnMpIHtcbiAgICAvLyBleHRyYWN0IGNvbnRhaW5lciBhdHRyaWJ1dGVzIHRvIHBhc3MgdGhlbSBkb3duXG4gICAgLy8gdG8gY29tcGlsZXIsIGJlY2F1c2UgdGhleSBuZWVkIHRvIGJlIGNvbXBpbGVkIGluXG4gICAgLy8gcGFyZW50IHNjb3BlLiB3ZSBhcmUgbXV0YXRpbmcgdGhlIG9wdGlvbnMgb2JqZWN0IGhlcmVcbiAgICAvLyBhc3N1bWluZyB0aGUgc2FtZSBvYmplY3Qgd2lsbCBiZSB1c2VkIGZvciBjb21waWxlXG4gICAgLy8gcmlnaHQgYWZ0ZXIgdGhpcy5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgb3B0aW9ucy5fY29udGFpbmVyQXR0cnMgPSBleHRyYWN0QXR0cnMoZWwpO1xuICAgIH1cbiAgICAvLyBmb3IgdGVtcGxhdGUgdGFncywgd2hhdCB3ZSB3YW50IGlzIGl0cyBjb250ZW50IGFzXG4gICAgLy8gYSBkb2N1bWVudEZyYWdtZW50IChmb3IgZnJhZ21lbnQgaW5zdGFuY2VzKVxuICAgIGlmIChpc1RlbXBsYXRlKGVsKSkge1xuICAgICAgZWwgPSBwYXJzZVRlbXBsYXRlKGVsKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLl9hc0NvbXBvbmVudCAmJiAhb3B0aW9ucy50ZW1wbGF0ZSkge1xuICAgICAgICBvcHRpb25zLnRlbXBsYXRlID0gJzxzbG90Pjwvc2xvdD4nO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMudGVtcGxhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5fY29udGVudCA9IGV4dHJhY3RDb250ZW50KGVsKTtcbiAgICAgICAgZWwgPSB0cmFuc2NsdWRlVGVtcGxhdGUoZWwsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNGcmFnbWVudChlbCkpIHtcbiAgICAgIC8vIGFuY2hvcnMgZm9yIGZyYWdtZW50IGluc3RhbmNlXG4gICAgICAvLyBwYXNzaW5nIGluIGBwZXJzaXN0OiB0cnVlYCB0byBhdm9pZCB0aGVtIGJlaW5nXG4gICAgICAvLyBkaXNjYXJkZWQgYnkgSUUgZHVyaW5nIHRlbXBsYXRlIGNsb25pbmdcbiAgICAgIHByZXBlbmQoY3JlYXRlQW5jaG9yKCd2LXN0YXJ0JywgdHJ1ZSksIGVsKTtcbiAgICAgIGVsLmFwcGVuZENoaWxkKGNyZWF0ZUFuY2hvcigndi1lbmQnLCB0cnVlKSk7XG4gICAgfVxuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHRoZSB0ZW1wbGF0ZSBvcHRpb24uXG4gICAqIElmIHRoZSByZXBsYWNlIG9wdGlvbiBpcyB0cnVlIHRoaXMgd2lsbCBzd2FwIHRoZSAkZWwuXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHJldHVybiB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fVxuICAgKi9cblxuICBmdW5jdGlvbiB0cmFuc2NsdWRlVGVtcGxhdGUoZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGVtcGxhdGUgPSBvcHRpb25zLnRlbXBsYXRlO1xuICAgIHZhciBmcmFnID0gcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgdHJ1ZSk7XG4gICAgaWYgKGZyYWcpIHtcbiAgICAgIHZhciByZXBsYWNlciA9IGZyYWcuZmlyc3RDaGlsZDtcbiAgICAgIHZhciB0YWcgPSByZXBsYWNlci50YWdOYW1lICYmIHJlcGxhY2VyLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChvcHRpb25zLnJlcGxhY2UpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdZb3UgYXJlIG1vdW50aW5nIGFuIGluc3RhbmNlIHdpdGggYSB0ZW1wbGF0ZSB0byAnICsgJzxib2R5Pi4gVGhpcyB3aWxsIHJlcGxhY2UgPGJvZHk+IGVudGlyZWx5LiBZb3UgJyArICdzaG91bGQgcHJvYmFibHkgdXNlIGByZXBsYWNlOiBmYWxzZWAgaGVyZS4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGVyZSBhcmUgbWFueSBjYXNlcyB3aGVyZSB0aGUgaW5zdGFuY2UgbXVzdFxuICAgICAgICAvLyBiZWNvbWUgYSBmcmFnbWVudCBpbnN0YW5jZTogYmFzaWNhbGx5IGFueXRoaW5nIHRoYXRcbiAgICAgICAgLy8gY2FuIGNyZWF0ZSBtb3JlIHRoYW4gMSByb290IG5vZGVzLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgLy8gbXVsdGktY2hpbGRyZW4gdGVtcGxhdGVcbiAgICAgICAgICBmcmFnLmNoaWxkTm9kZXMubGVuZ3RoID4gMSB8fFxuICAgICAgICAgIC8vIG5vbi1lbGVtZW50IHRlbXBsYXRlXG4gICAgICAgICAgcmVwbGFjZXIubm9kZVR5cGUgIT09IDEgfHxcbiAgICAgICAgICAvLyBzaW5nbGUgbmVzdGVkIGNvbXBvbmVudFxuICAgICAgICAgIHRhZyA9PT0gJ2NvbXBvbmVudCcgfHwgcmVzb2x2ZUFzc2V0KG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSB8fCBoYXNCaW5kQXR0cihyZXBsYWNlciwgJ2lzJykgfHxcbiAgICAgICAgICAvLyBlbGVtZW50IGRpcmVjdGl2ZVxuICAgICAgICAgIHJlc29sdmVBc3NldChvcHRpb25zLCAnZWxlbWVudERpcmVjdGl2ZXMnLCB0YWcpIHx8XG4gICAgICAgICAgLy8gZm9yIGJsb2NrXG4gICAgICAgICAgcmVwbGFjZXIuaGFzQXR0cmlidXRlKCd2LWZvcicpIHx8XG4gICAgICAgICAgLy8gaWYgYmxvY2tcbiAgICAgICAgICByZXBsYWNlci5oYXNBdHRyaWJ1dGUoJ3YtaWYnKSkge1xuICAgICAgICAgIHJldHVybiBmcmFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMuX3JlcGxhY2VyQXR0cnMgPSBleHRyYWN0QXR0cnMocmVwbGFjZXIpO1xuICAgICAgICAgIG1lcmdlQXR0cnMoZWwsIHJlcGxhY2VyKTtcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZXI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGZyYWcpO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdJbnZhbGlkIHRlbXBsYXRlIG9wdGlvbjogJyArIHRlbXBsYXRlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIHRvIGV4dHJhY3QgYSBjb21wb25lbnQgY29udGFpbmVyJ3MgYXR0cmlidXRlc1xuICAgKiBpbnRvIGEgcGxhaW4gb2JqZWN0IGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuICBmdW5jdGlvbiBleHRyYWN0QXR0cnMoZWwpIHtcbiAgICBpZiAoZWwubm9kZVR5cGUgPT09IDEgJiYgZWwuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICByZXR1cm4gdG9BcnJheShlbC5hdHRyaWJ1dGVzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdGhlIGF0dHJpYnV0ZXMgb2YgdHdvIGVsZW1lbnRzLCBhbmQgbWFrZSBzdXJlXG4gICAqIHRoZSBjbGFzcyBuYW1lcyBhcmUgbWVyZ2VkIHByb3Blcmx5LlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGZyb21cbiAgICogQHBhcmFtIHtFbGVtZW50fSB0b1xuICAgKi9cblxuICBmdW5jdGlvbiBtZXJnZUF0dHJzKGZyb20sIHRvKSB7XG4gICAgdmFyIGF0dHJzID0gZnJvbS5hdHRyaWJ1dGVzO1xuICAgIHZhciBpID0gYXR0cnMubGVuZ3RoO1xuICAgIHZhciBuYW1lLCB2YWx1ZTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBuYW1lID0gYXR0cnNbaV0ubmFtZTtcbiAgICAgIHZhbHVlID0gYXR0cnNbaV0udmFsdWU7XG4gICAgICBpZiAoIXRvLmhhc0F0dHJpYnV0ZShuYW1lKSAmJiAhc3BlY2lhbENoYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHRvLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGFzcycgJiYgIXBhcnNlVGV4dCh2YWx1ZSkgJiYgKHZhbHVlID0gdmFsdWUudHJpbSgpKSkge1xuICAgICAgICB2YWx1ZS5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24oY2xzKSB7XG4gICAgICAgICAgYWRkQ2xhc3ModG8sIGNscyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FuIGFuZCBkZXRlcm1pbmUgc2xvdCBjb250ZW50IGRpc3RyaWJ1dGlvbi5cbiAgICogV2UgZG8gdGhpcyBkdXJpbmcgdHJhbnNjbHVzaW9uIGluc3RlYWQgYXQgY29tcGlsZSB0aW1lIHNvIHRoYXRcbiAgICogdGhlIGRpc3RyaWJ1dGlvbiBpcyBkZWNvdXBsZWQgZnJvbSB0aGUgY29tcGlsYXRpb24gb3JkZXIgb2ZcbiAgICogdGhlIHNsb3RzLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR8RG9jdW1lbnRGcmFnbWVudH0gdGVtcGxhdGVcbiAgICogQHBhcmFtIHtFbGVtZW50fSBjb250ZW50XG4gICAqIEBwYXJhbSB7VnVlfSB2bVxuICAgKi9cblxuICBmdW5jdGlvbiByZXNvbHZlU2xvdHModm0sIGNvbnRlbnQpIHtcbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGNvbnRlbnRzID0gdm0uX3Nsb3RDb250ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGVsLCBuYW1lO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY29udGVudC5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGVsID0gY29udGVudC5jaGlsZHJlbltpXTtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG4gICAgICBpZiAobmFtZSA9IGVsLmdldEF0dHJpYnV0ZSgnc2xvdCcpKSB7XG4gICAgICAgIChjb250ZW50c1tuYW1lXSB8fCAoY29udGVudHNbbmFtZV0gPSBbXSkpLnB1c2goZWwpO1xuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiBnZXRCaW5kQXR0cihlbCwgJ3Nsb3QnKSkge1xuICAgICAgICB3YXJuKCdUaGUgXCJzbG90XCIgYXR0cmlidXRlIG11c3QgYmUgc3RhdGljLicsIHZtLiRwYXJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKG5hbWUgaW4gY29udGVudHMpIHtcbiAgICAgIGNvbnRlbnRzW25hbWVdID0gZXh0cmFjdEZyYWdtZW50KGNvbnRlbnRzW25hbWVdLCBjb250ZW50KTtcbiAgICB9XG4gICAgaWYgKGNvbnRlbnQuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBjb250ZW50LmNoaWxkTm9kZXM7XG4gICAgICBpZiAobm9kZXMubGVuZ3RoID09PSAxICYmIG5vZGVzWzBdLm5vZGVUeXBlID09PSAzICYmICFub2Rlc1swXS5kYXRhLnRyaW0oKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb250ZW50c1snZGVmYXVsdCddID0gZXh0cmFjdEZyYWdtZW50KGNvbnRlbnQuY2hpbGROb2RlcywgY29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3QgcXVhbGlmaWVkIGNvbnRlbnQgbm9kZXMgZnJvbSBhIG5vZGUgbGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZXNcbiAgICogQHJldHVybiB7RG9jdW1lbnRGcmFnbWVudH1cbiAgICovXG5cbiAgZnVuY3Rpb24gZXh0cmFjdEZyYWdtZW50KG5vZGVzLCBwYXJlbnQpIHtcbiAgICB2YXIgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBub2RlcyA9IHRvQXJyYXkobm9kZXMpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgaWYgKGlzVGVtcGxhdGUobm9kZSkgJiYgIW5vZGUuaGFzQXR0cmlidXRlKCd2LWlmJykgJiYgIW5vZGUuaGFzQXR0cmlidXRlKCd2LWZvcicpKSB7XG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgbm9kZSA9IHBhcnNlVGVtcGxhdGUobm9kZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBmcmFnLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZnJhZztcbiAgfVxuXG5cblxuICB2YXIgY29tcGlsZXIgPSBPYmplY3QuZnJlZXplKHtcbiAgICBjb21waWxlOiBjb21waWxlLFxuICAgIGNvbXBpbGVBbmRMaW5rUHJvcHM6IGNvbXBpbGVBbmRMaW5rUHJvcHMsXG4gICAgY29tcGlsZVJvb3Q6IGNvbXBpbGVSb290LFxuICAgIHRyYW5zY2x1ZGU6IHRyYW5zY2x1ZGUsXG4gICAgcmVzb2x2ZVNsb3RzOiByZXNvbHZlU2xvdHNcbiAgfSk7XG5cbiAgZnVuY3Rpb24gc3RhdGVNaXhpbihWdWUpIHtcbiAgICAvKipcbiAgICAgKiBBY2Nlc3NvciBmb3IgYCRkYXRhYCBwcm9wZXJ0eSwgc2luY2Ugc2V0dGluZyAkZGF0YVxuICAgICAqIHJlcXVpcmVzIG9ic2VydmluZyB0aGUgbmV3IG9iamVjdCBhbmQgdXBkYXRpbmdcbiAgICAgKiBwcm94aWVkIHByb3BlcnRpZXMuXG4gICAgICovXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld0RhdGEpIHtcbiAgICAgICAgaWYgKG5ld0RhdGEgIT09IHRoaXMuX2RhdGEpIHtcbiAgICAgICAgICB0aGlzLl9zZXREYXRhKG5ld0RhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTZXR1cCB0aGUgc2NvcGUgb2YgYW4gaW5zdGFuY2UsIHdoaWNoIGNvbnRhaW5zOlxuICAgICAqIC0gb2JzZXJ2ZWQgZGF0YVxuICAgICAqIC0gY29tcHV0ZWQgcHJvcGVydGllc1xuICAgICAqIC0gdXNlciBtZXRob2RzXG4gICAgICogLSBtZXRhIHByb3BlcnRpZXNcbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5faW5pdFByb3BzKCk7XG4gICAgICB0aGlzLl9pbml0TWV0YSgpO1xuICAgICAgdGhpcy5faW5pdE1ldGhvZHMoKTtcbiAgICAgIHRoaXMuX2luaXREYXRhKCk7XG4gICAgICB0aGlzLl9pbml0Q29tcHV0ZWQoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBwcm9wcy5cbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXRQcm9wcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zO1xuICAgICAgdmFyIGVsID0gb3B0aW9ucy5lbDtcbiAgICAgIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gICAgICBpZiAocHJvcHMgJiYgIWVsKSB7XG4gICAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdQcm9wcyB3aWxsIG5vdCBiZSBjb21waWxlZCBpZiBubyBgZWxgIG9wdGlvbiBpcyAnICsgJ3Byb3ZpZGVkIGF0IGluc3RhbnRpYXRpb24uJywgdGhpcyk7XG4gICAgICB9XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gY29udmVydCBzdHJpbmcgc2VsZWN0b3JzIGludG8gZWxlbWVudCBub3dcbiAgICAgIGVsID0gb3B0aW9ucy5lbCA9IHF1ZXJ5KGVsKTtcbiAgICAgIHRoaXMuX3Byb3BzVW5saW5rRm4gPSBlbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSAmJiBwcm9wc1xuICAgICAgICAvLyBwcm9wcyBtdXN0IGJlIGxpbmtlZCBpbiBwcm9wZXIgc2NvcGUgaWYgaW5zaWRlIHYtZm9yXG4gICAgICAgID8gY29tcGlsZUFuZExpbmtQcm9wcyh0aGlzLCBlbCwgcHJvcHMsIHRoaXMuX3Njb3BlKSA6IG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIGRhdGEuXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLl9pbml0RGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRhdGFGbiA9IHRoaXMuJG9wdGlvbnMuZGF0YTtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YSA9IGRhdGFGbiA/IGRhdGFGbigpIDoge307XG4gICAgICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IHt9O1xuICAgICAgICAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgd2FybignZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuJywgdGhpcyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLl9wcm9wcztcbiAgICAgIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgICB2YXIgaSwga2V5O1xuICAgICAgaSA9IGtleXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAvLyB0aGVyZSBhcmUgdHdvIHNjZW5hcmlvcyB3aGVyZSB3ZSBjYW4gcHJveHkgYSBkYXRhIGtleTpcbiAgICAgICAgLy8gMS4gaXQncyBub3QgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcFxuICAgICAgICAvLyAyLiBpdCdzIHByb3ZpZGVkIHZpYSBhIGluc3RhbnRpYXRpb24gb3B0aW9uIEFORCB0aGVyZSBhcmUgbm9cbiAgICAgICAgLy8gICAgdGVtcGxhdGUgcHJvcCBwcmVzZW50XG4gICAgICAgIGlmICghcHJvcHMgfHwgIWhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICAgIHRoaXMuX3Byb3h5KGtleSk7XG4gICAgICAgIH0gZWxzZSBpZiAoJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybignRGF0YSBmaWVsZCBcIicgKyBrZXkgKyAnXCIgaXMgYWxyZWFkeSBkZWZpbmVkICcgKyAnYXMgYSBwcm9wLiBUbyBwcm92aWRlIGRlZmF1bHQgdmFsdWUgZm9yIGEgcHJvcCwgdXNlIHRoZSBcImRlZmF1bHRcIiAnICsgJ3Byb3Agb3B0aW9uOyBpZiB5b3Ugd2FudCB0byBwYXNzIHByb3AgdmFsdWVzIHRvIGFuIGluc3RhbnRpYXRpb24gJyArICdjYWxsLCB1c2UgdGhlIFwicHJvcHNEYXRhXCIgb3B0aW9uLicsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBvYnNlcnZlIGRhdGFcbiAgICAgIG9ic2VydmUoZGF0YSwgdGhpcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN3YXAgdGhlIGluc3RhbmNlJ3MgJGRhdGEuIENhbGxlZCBpbiAkZGF0YSdzIHNldHRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBuZXdEYXRhXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLl9zZXREYXRhID0gZnVuY3Rpb24obmV3RGF0YSkge1xuICAgICAgbmV3RGF0YSA9IG5ld0RhdGEgfHwge307XG4gICAgICB2YXIgb2xkRGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICB0aGlzLl9kYXRhID0gbmV3RGF0YTtcbiAgICAgIHZhciBrZXlzLCBrZXksIGk7XG4gICAgICAvLyB1bnByb3h5IGtleXMgbm90IHByZXNlbnQgaW4gbmV3IGRhdGFcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhvbGREYXRhKTtcbiAgICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgaWYgKCEoa2V5IGluIG5ld0RhdGEpKSB7XG4gICAgICAgICAgdGhpcy5fdW5wcm94eShrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBwcm94eSBrZXlzIG5vdCBhbHJlYWR5IHByb3hpZWQsXG4gICAgICAvLyBhbmQgdHJpZ2dlciBjaGFuZ2UgZm9yIGNoYW5nZWQgdmFsdWVzXG4gICAgICBrZXlzID0gT2JqZWN0LmtleXMobmV3RGF0YSk7XG4gICAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmICghaGFzT3duKHRoaXMsIGtleSkpIHtcbiAgICAgICAgICAvLyBuZXcgcHJvcGVydHlcbiAgICAgICAgICB0aGlzLl9wcm94eShrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvbGREYXRhLl9fb2JfXy5yZW1vdmVWbSh0aGlzKTtcbiAgICAgIG9ic2VydmUobmV3RGF0YSwgdGhpcyk7XG4gICAgICB0aGlzLl9kaWdlc3QoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHJveHkgYSBwcm9wZXJ0eSwgc28gdGhhdFxuICAgICAqIHZtLnByb3AgPT09IHZtLl9kYXRhLnByb3BcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuX3Byb3h5ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICAvLyBuZWVkIHRvIHN0b3JlIHJlZiB0byBzZWxmIGhlcmVcbiAgICAgICAgLy8gYmVjYXVzZSB0aGVzZSBnZXR0ZXIvc2V0dGVycyBtaWdodFxuICAgICAgICAvLyBiZSBjYWxsZWQgYnkgY2hpbGQgc2NvcGVzIHZpYVxuICAgICAgICAvLyBwcm90b3R5cGUgaW5oZXJpdGFuY2UuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYsIGtleSwge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gcHJveHlHZXR0ZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0YVtrZXldO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBwcm94eVNldHRlcih2YWwpIHtcbiAgICAgICAgICAgIHNlbGYuX2RhdGFba2V5XSA9IHZhbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVbnByb3h5IGEgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLl91bnByb3h5ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGb3JjZSB1cGRhdGUgb24gZXZlcnkgd2F0Y2hlciBpbiBzY29wZS5cbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl93YXRjaGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5fd2F0Y2hlcnNbaV0udXBkYXRlKHRydWUpOyAvLyBzaGFsbG93IHVwZGF0ZXNcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0dXAgY29tcHV0ZWQgcHJvcGVydGllcy4gVGhleSBhcmUgZXNzZW50aWFsbHlcbiAgICAgKiBzcGVjaWFsIGdldHRlci9zZXR0ZXJzXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBub29wKCkge31cbiAgICBWdWUucHJvdG90eXBlLl9pbml0Q29tcHV0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb21wdXRlZCA9IHRoaXMuJG9wdGlvbnMuY29tcHV0ZWQ7XG4gICAgICBpZiAoY29tcHV0ZWQpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xuICAgICAgICAgIHZhciBkZWYgPSB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGRlZi5nZXQgPSBtYWtlQ29tcHV0ZWRHZXR0ZXIodXNlckRlZiwgdGhpcyk7XG4gICAgICAgICAgICBkZWYuc2V0ID0gbm9vcDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVmLmdldCA9IHVzZXJEZWYuZ2V0ID8gdXNlckRlZi5jYWNoZSAhPT0gZmFsc2UgPyBtYWtlQ29tcHV0ZWRHZXR0ZXIodXNlckRlZi5nZXQsIHRoaXMpIDogYmluZCh1c2VyRGVmLmdldCwgdGhpcykgOiBub29wO1xuICAgICAgICAgICAgZGVmLnNldCA9IHVzZXJEZWYuc2V0ID8gYmluZCh1c2VyRGVmLnNldCwgdGhpcykgOiBub29wO1xuICAgICAgICAgIH1cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCBkZWYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG1ha2VDb21wdXRlZEdldHRlcihnZXR0ZXIsIG93bmVyKSB7XG4gICAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKG93bmVyLCBnZXR0ZXIsIG51bGwsIHtcbiAgICAgICAgbGF6eTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIoKSB7XG4gICAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dXAgaW5zdGFuY2UgbWV0aG9kcy4gTWV0aG9kcyBtdXN0IGJlIGJvdW5kIHRvIHRoZVxuICAgICAqIGluc3RhbmNlIHNpbmNlIHRoZXkgbWlnaHQgYmUgcGFzc2VkIGRvd24gYXMgYSBwcm9wIHRvXG4gICAgICogY2hpbGQgY29tcG9uZW50cy5cbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXRNZXRob2RzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWV0aG9kcyA9IHRoaXMuJG9wdGlvbnMubWV0aG9kcztcbiAgICAgIGlmIChtZXRob2RzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgICAgICAgdGhpc1trZXldID0gYmluZChtZXRob2RzW2tleV0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgbWV0YSBpbmZvcm1hdGlvbiBsaWtlICRpbmRleCwgJGtleSAmICR2YWx1ZS5cbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXRNZXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWV0YXMgPSB0aGlzLiRvcHRpb25zLl9tZXRhO1xuICAgICAgaWYgKG1ldGFzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtZXRhcykge1xuICAgICAgICAgIGRlZmluZVJlYWN0aXZlKHRoaXMsIGtleSwgbWV0YXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGV2ZW50UkUgPSAvXnYtb246fF5ALztcblxuICBmdW5jdGlvbiBldmVudHNNaXhpbihWdWUpIHtcbiAgICAvKipcbiAgICAgKiBTZXR1cCB0aGUgaW5zdGFuY2UncyBvcHRpb24gZXZlbnRzICYgd2F0Y2hlcnMuXG4gICAgICogSWYgdGhlIHZhbHVlIGlzIGEgc3RyaW5nLCB3ZSBwdWxsIGl0IGZyb20gdGhlXG4gICAgICogaW5zdGFuY2UncyBtZXRob2RzIGJ5IG5hbWUuXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLl9pbml0RXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gICAgICBpZiAob3B0aW9ucy5fYXNDb21wb25lbnQpIHtcbiAgICAgICAgcmVnaXN0ZXJDb21wb25lbnRFdmVudHModGhpcywgb3B0aW9ucy5lbCk7XG4gICAgICB9XG4gICAgICByZWdpc3RlckNhbGxiYWNrcyh0aGlzLCAnJG9uJywgb3B0aW9ucy5ldmVudHMpO1xuICAgICAgcmVnaXN0ZXJDYWxsYmFja3ModGhpcywgJyR3YXRjaCcsIG9wdGlvbnMud2F0Y2gpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciB2LW9uIGV2ZW50cyBvbiBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnRFdmVudHModm0sIGVsKSB7XG4gICAgICB2YXIgYXR0cnMgPSBlbC5hdHRyaWJ1dGVzO1xuICAgICAgdmFyIG5hbWUsIHZhbHVlLCBoYW5kbGVyO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbmFtZSA9IGF0dHJzW2ldLm5hbWU7XG4gICAgICAgIGlmIChldmVudFJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGV2ZW50UkUsICcnKTtcbiAgICAgICAgICAvLyBmb3JjZSB0aGUgZXhwcmVzc2lvbiBpbnRvIGEgc3RhdGVtZW50IHNvIHRoYXRcbiAgICAgICAgICAvLyBpdCBhbHdheXMgZHluYW1pY2FsbHkgcmVzb2x2ZXMgdGhlIG1ldGhvZCB0byBjYWxsICgjMjY3MClcbiAgICAgICAgICAvLyBraW5kYSB1Z2x5IGhhY2ssIGJ1dCBkb2VzIHRoZSBqb2IuXG4gICAgICAgICAgdmFsdWUgPSBhdHRyc1tpXS52YWx1ZTtcbiAgICAgICAgICBpZiAoaXNTaW1wbGVQYXRoKHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgKz0gJy5hcHBseSh0aGlzLCAkYXJndW1lbnRzKSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhbmRsZXIgPSAodm0uX3Njb3BlIHx8IHZtLl9jb250ZXh0KS4kZXZhbCh2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaGFuZGxlci5fZnJvbVBhcmVudCA9IHRydWU7XG4gICAgICAgICAgdm0uJG9uKG5hbWUucmVwbGFjZShldmVudFJFKSwgaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBjYWxsYmFja3MgZm9yIG9wdGlvbiBldmVudHMgYW5kIHdhdGNoZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiByZWdpc3RlckNhbGxiYWNrcyh2bSwgYWN0aW9uLCBoYXNoKSB7XG4gICAgICBpZiAoIWhhc2gpIHJldHVybjtcbiAgICAgIHZhciBoYW5kbGVycywga2V5LCBpLCBqO1xuICAgICAgZm9yIChrZXkgaW4gaGFzaCkge1xuICAgICAgICBoYW5kbGVycyA9IGhhc2hba2V5XTtcbiAgICAgICAgaWYgKGlzQXJyYXkoaGFuZGxlcnMpKSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgcmVnaXN0ZXIodm0sIGFjdGlvbiwga2V5LCBoYW5kbGVyc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZ2lzdGVyKHZtLCBhY3Rpb24sIGtleSwgaGFuZGxlcnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGVscGVyIHRvIHJlZ2lzdGVyIGFuIGV2ZW50L3dhdGNoIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ3xPYmplY3R9IGhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiByZWdpc3Rlcih2bSwgYWN0aW9uLCBrZXksIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGhhbmRsZXI7XG4gICAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2bVthY3Rpb25dKGtleSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgICAgICAgdmFyIG1ldGhvZCA9IG1ldGhvZHMgJiYgbWV0aG9kc1toYW5kbGVyXTtcbiAgICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICAgIHZtW2FjdGlvbl0oa2V5LCBtZXRob2QsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdVbmtub3duIG1ldGhvZDogXCInICsgaGFuZGxlciArICdcIiB3aGVuICcgKyAncmVnaXN0ZXJpbmcgY2FsbGJhY2sgZm9yICcgKyBhY3Rpb24gKyAnOiBcIicgKyBrZXkgKyAnXCIuJywgdm0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgJiYgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmVnaXN0ZXIodm0sIGFjdGlvbiwga2V5LCBoYW5kbGVyLmhhbmRsZXIsIGhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHVwIHJlY3Vyc2l2ZSBhdHRhY2hlZC9kZXRhY2hlZCBjYWxsc1xuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS5faW5pdERPTUhvb2tzID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRvbignaG9vazphdHRhY2hlZCcsIG9uQXR0YWNoZWQpO1xuICAgICAgdGhpcy4kb24oJ2hvb2s6ZGV0YWNoZWQnLCBvbkRldGFjaGVkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgdG8gcmVjdXJzaXZlbHkgY2FsbCBhdHRhY2hlZCBob29rIG9uIGNoaWxkcmVuXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBvbkF0dGFjaGVkKCkge1xuICAgICAgaWYgKCF0aGlzLl9pc0F0dGFjaGVkKSB7XG4gICAgICAgIHRoaXMuX2lzQXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLiRjaGlsZHJlbi5mb3JFYWNoKGNhbGxBdHRhY2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdG9yIHRvIGNhbGwgYXR0YWNoZWQgaG9va1xuICAgICAqXG4gICAgICogQHBhcmFtIHtWdWV9IGNoaWxkXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBjYWxsQXR0YWNoKGNoaWxkKSB7XG4gICAgICBpZiAoIWNoaWxkLl9pc0F0dGFjaGVkICYmIGluRG9jKGNoaWxkLiRlbCkpIHtcbiAgICAgICAgY2hpbGQuX2NhbGxIb29rKCdhdHRhY2hlZCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHRvIHJlY3Vyc2l2ZWx5IGNhbGwgZGV0YWNoZWQgaG9vayBvbiBjaGlsZHJlblxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gb25EZXRhY2hlZCgpIHtcbiAgICAgIGlmICh0aGlzLl9pc0F0dGFjaGVkKSB7XG4gICAgICAgIHRoaXMuX2lzQXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy4kY2hpbGRyZW4uZm9yRWFjaChjYWxsRGV0YWNoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRvciB0byBjYWxsIGRldGFjaGVkIGhvb2tcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VnVlfSBjaGlsZFxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gY2FsbERldGFjaChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9pc0F0dGFjaGVkICYmICFpbkRvYyhjaGlsZC4kZWwpKSB7XG4gICAgICAgIGNoaWxkLl9jYWxsSG9vaygnZGV0YWNoZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGFsbCBoYW5kbGVycyBmb3IgYSBob29rXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaG9va1xuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS5fY2FsbEhvb2sgPSBmdW5jdGlvbihob29rKSB7XG4gICAgICB0aGlzLiRlbWl0KCdwcmUtaG9vazonICsgaG9vayk7XG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLiRvcHRpb25zW2hvb2tdO1xuICAgICAgaWYgKGhhbmRsZXJzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgaGFuZGxlcnNbaV0uY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vb3AkMSgpIHt9XG5cbiAgLyoqXG4gICAqIEEgZGlyZWN0aXZlIGxpbmtzIGEgRE9NIGVsZW1lbnQgd2l0aCBhIHBpZWNlIG9mIGRhdGEsXG4gICAqIHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyBhbiBleHByZXNzaW9uLlxuICAgKiBJdCByZWdpc3RlcnMgYSB3YXRjaGVyIHdpdGggdGhlIGV4cHJlc3Npb24gYW5kIGNhbGxzXG4gICAqIHRoZSBET00gdXBkYXRlIGZ1bmN0aW9uIHdoZW4gYSBjaGFuZ2UgaXMgdHJpZ2dlcmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGVzY3JpcHRvclxuICAgKiAgICAgICAgICAgICAgICAgLSB7U3RyaW5nfSBuYW1lXG4gICAqICAgICAgICAgICAgICAgICAtIHtPYmplY3R9IGRlZlxuICAgKiAgICAgICAgICAgICAgICAgLSB7U3RyaW5nfSBleHByZXNzaW9uXG4gICAqICAgICAgICAgICAgICAgICAtIHtBcnJheTxPYmplY3Q+fSBbZmlsdGVyc11cbiAgICogICAgICAgICAgICAgICAgIC0ge09iamVjdH0gW21vZGlmaWVyc11cbiAgICogICAgICAgICAgICAgICAgIC0ge0Jvb2xlYW59IGxpdGVyYWxcbiAgICogICAgICAgICAgICAgICAgIC0ge1N0cmluZ30gYXR0clxuICAgKiAgICAgICAgICAgICAgICAgLSB7U3RyaW5nfSBhcmdcbiAgICogICAgICAgICAgICAgICAgIC0ge1N0cmluZ30gcmF3XG4gICAqICAgICAgICAgICAgICAgICAtIHtTdHJpbmd9IFtyZWZdXG4gICAqICAgICAgICAgICAgICAgICAtIHtBcnJheTxPYmplY3Q+fSBbaW50ZXJwXVxuICAgKiAgICAgICAgICAgICAgICAgLSB7Qm9vbGVhbn0gW2hhc09uZVRpbWVdXG4gICAqIEBwYXJhbSB7VnVlfSB2bVxuICAgKiBAcGFyYW0ge05vZGV9IGVsXG4gICAqIEBwYXJhbSB7VnVlfSBbaG9zdF0gLSB0cmFuc2NsdXNpb24gaG9zdCBjb21wb25lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IFtzY29wZV0gLSB2LWZvciBzY29wZVxuICAgKiBAcGFyYW0ge0ZyYWdtZW50fSBbZnJhZ10gLSBvd25lciBmcmFnbWVudFxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGZ1bmN0aW9uIERpcmVjdGl2ZShkZXNjcmlwdG9yLCB2bSwgZWwsIGhvc3QsIHNjb3BlLCBmcmFnKSB7XG4gICAgdGhpcy52bSA9IHZtO1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICAvLyBjb3B5IGRlc2NyaXB0b3IgcHJvcGVydGllc1xuICAgIHRoaXMuZGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7XG4gICAgdGhpcy5uYW1lID0gZGVzY3JpcHRvci5uYW1lO1xuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGRlc2NyaXB0b3IuZXhwcmVzc2lvbjtcbiAgICB0aGlzLmFyZyA9IGRlc2NyaXB0b3IuYXJnO1xuICAgIHRoaXMubW9kaWZpZXJzID0gZGVzY3JpcHRvci5tb2RpZmllcnM7XG4gICAgdGhpcy5maWx0ZXJzID0gZGVzY3JpcHRvci5maWx0ZXJzO1xuICAgIHRoaXMubGl0ZXJhbCA9IHRoaXMubW9kaWZpZXJzICYmIHRoaXMubW9kaWZpZXJzLmxpdGVyYWw7XG4gICAgLy8gcHJpdmF0ZVxuICAgIHRoaXMuX2xvY2tlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2JvdW5kID0gZmFsc2U7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICAvLyBsaW5rIGNvbnRleHRcbiAgICB0aGlzLl9ob3N0ID0gaG9zdDtcbiAgICB0aGlzLl9zY29wZSA9IHNjb3BlO1xuICAgIHRoaXMuX2ZyYWcgPSBmcmFnO1xuICAgIC8vIHN0b3JlIGRpcmVjdGl2ZXMgb24gbm9kZSBpbiBkZXYgbW9kZVxuICAgIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy5lbCkge1xuICAgICAgdGhpcy5lbC5fdnVlX2RpcmVjdGl2ZXMgPSB0aGlzLmVsLl92dWVfZGlyZWN0aXZlcyB8fCBbXTtcbiAgICAgIHRoaXMuZWwuX3Z1ZV9kaXJlY3RpdmVzLnB1c2godGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIGRpcmVjdGl2ZSwgbWl4aW4gZGVmaW5pdGlvbiBwcm9wZXJ0aWVzLFxuICAgKiBzZXR1cCB0aGUgd2F0Y2hlciwgY2FsbCBkZWZpbml0aW9uIGJpbmQoKSBhbmQgdXBkYXRlKClcbiAgICogaWYgcHJlc2VudC5cbiAgICovXG5cbiAgRGlyZWN0aXZlLnByb3RvdHlwZS5fYmluZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuYW1lID0gdGhpcy5uYW1lO1xuICAgIHZhciBkZXNjcmlwdG9yID0gdGhpcy5kZXNjcmlwdG9yO1xuXG4gICAgLy8gcmVtb3ZlIGF0dHJpYnV0ZVxuICAgIGlmICgobmFtZSAhPT0gJ2Nsb2FrJyB8fCB0aGlzLnZtLl9pc0NvbXBpbGVkKSAmJiB0aGlzLmVsICYmIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKSB7XG4gICAgICB2YXIgYXR0ciA9IGRlc2NyaXB0b3IuYXR0ciB8fCAndi0nICsgbmFtZTtcbiAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgIH1cblxuICAgIC8vIGNvcHkgZGVmIHByb3BlcnRpZXNcbiAgICB2YXIgZGVmID0gZGVzY3JpcHRvci5kZWY7XG4gICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMudXBkYXRlID0gZGVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHRlbmQodGhpcywgZGVmKTtcbiAgICB9XG5cbiAgICAvLyBzZXR1cCBkaXJlY3RpdmUgcGFyYW1zXG4gICAgdGhpcy5fc2V0dXBQYXJhbXMoKTtcblxuICAgIC8vIGluaXRpYWwgYmluZFxuICAgIGlmICh0aGlzLmJpbmQpIHtcbiAgICAgIHRoaXMuYmluZCgpO1xuICAgIH1cbiAgICB0aGlzLl9ib3VuZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5saXRlcmFsKSB7XG4gICAgICB0aGlzLnVwZGF0ZSAmJiB0aGlzLnVwZGF0ZShkZXNjcmlwdG9yLnJhdyk7XG4gICAgfSBlbHNlIGlmICgodGhpcy5leHByZXNzaW9uIHx8IHRoaXMubW9kaWZpZXJzKSAmJiAodGhpcy51cGRhdGUgfHwgdGhpcy50d29XYXkpICYmICF0aGlzLl9jaGVja1N0YXRlbWVudCgpKSB7XG4gICAgICAvLyB3cmFwcGVkIHVwZGF0ZXIgZm9yIGNvbnRleHRcbiAgICAgIHZhciBkaXIgPSB0aGlzO1xuICAgICAgaWYgKHRoaXMudXBkYXRlKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uKHZhbCwgb2xkVmFsKSB7XG4gICAgICAgICAgaWYgKCFkaXIuX2xvY2tlZCkge1xuICAgICAgICAgICAgZGlyLnVwZGF0ZSh2YWwsIG9sZFZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlID0gbm9vcCQxO1xuICAgICAgfVxuICAgICAgdmFyIHByZVByb2Nlc3MgPSB0aGlzLl9wcmVQcm9jZXNzID8gYmluZCh0aGlzLl9wcmVQcm9jZXNzLCB0aGlzKSA6IG51bGw7XG4gICAgICB2YXIgcG9zdFByb2Nlc3MgPSB0aGlzLl9wb3N0UHJvY2VzcyA/IGJpbmQodGhpcy5fcG9zdFByb2Nlc3MsIHRoaXMpIDogbnVsbDtcbiAgICAgIHZhciB3YXRjaGVyID0gdGhpcy5fd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHRoaXMudm0sIHRoaXMuZXhwcmVzc2lvbiwgdGhpcy5fdXBkYXRlLCAvLyBjYWxsYmFja1xuICAgICAgICB7XG4gICAgICAgICAgZmlsdGVyczogdGhpcy5maWx0ZXJzLFxuICAgICAgICAgIHR3b1dheTogdGhpcy50d29XYXksXG4gICAgICAgICAgZGVlcDogdGhpcy5kZWVwLFxuICAgICAgICAgIHByZVByb2Nlc3M6IHByZVByb2Nlc3MsXG4gICAgICAgICAgcG9zdFByb2Nlc3M6IHBvc3RQcm9jZXNzLFxuICAgICAgICAgIHNjb3BlOiB0aGlzLl9zY29wZVxuICAgICAgICB9KTtcbiAgICAgIC8vIHYtbW9kZWwgd2l0aCBpbml0YWwgaW5saW5lIHZhbHVlIG5lZWQgdG8gc3luYyBiYWNrIHRvXG4gICAgICAvLyBtb2RlbCBpbnN0ZWFkIG9mIHVwZGF0ZSB0byBET00gb24gaW5pdC4gVGhleSB3b3VsZFxuICAgICAgLy8gc2V0IHRoZSBhZnRlckJpbmQgaG9vayB0byBpbmRpY2F0ZSB0aGF0LlxuICAgICAgaWYgKHRoaXMuYWZ0ZXJCaW5kKSB7XG4gICAgICAgIHRoaXMuYWZ0ZXJCaW5kKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMudXBkYXRlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKHdhdGNoZXIudmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogU2V0dXAgYWxsIHBhcmFtIGF0dHJpYnV0ZXMsIGUuZy4gdHJhY2stYnksXG4gICAqIHRyYW5zaXRpb24tbW9kZSwgZXRjLi4uXG4gICAqL1xuXG4gIERpcmVjdGl2ZS5wcm90b3R5cGUuX3NldHVwUGFyYW1zID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLnBhcmFtcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJhbXM7XG4gICAgLy8gc3dhcCB0aGUgcGFyYW1zIGFycmF5IHdpdGggYSBmcmVzaCBvYmplY3QuXG4gICAgdGhpcy5wYXJhbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBpID0gcGFyYW1zLmxlbmd0aDtcbiAgICB2YXIga2V5LCB2YWwsIG1hcHBlZEtleTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBrZXkgPSBoeXBoZW5hdGUocGFyYW1zW2ldKTtcbiAgICAgIG1hcHBlZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICB2YWwgPSBnZXRCaW5kQXR0cih0aGlzLmVsLCBrZXkpO1xuICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgIC8vIGR5bmFtaWNcbiAgICAgICAgdGhpcy5fc2V0dXBQYXJhbVdhdGNoZXIobWFwcGVkS2V5LCB2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3RhdGljXG4gICAgICAgIHZhbCA9IGdldEF0dHIodGhpcy5lbCwga2V5KTtcbiAgICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5wYXJhbXNbbWFwcGVkS2V5XSA9IHZhbCA9PT0gJycgPyB0cnVlIDogdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBTZXR1cCBhIHdhdGNoZXIgZm9yIGEgZHluYW1pYyBwYXJhbS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXhwcmVzc2lvblxuICAgKi9cblxuICBEaXJlY3RpdmUucHJvdG90eXBlLl9zZXR1cFBhcmFtV2F0Y2hlciA9IGZ1bmN0aW9uKGtleSwgZXhwcmVzc2lvbikge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHVud2F0Y2ggPSAodGhpcy5fc2NvcGUgfHwgdGhpcy52bSkuJHdhdGNoKGV4cHJlc3Npb24sIGZ1bmN0aW9uKHZhbCwgb2xkVmFsKSB7XG4gICAgICBzZWxmLnBhcmFtc1trZXldID0gdmFsO1xuICAgICAgLy8gc2luY2Ugd2UgYXJlIGluIGltbWVkaWF0ZSBtb2RlLFxuICAgICAgLy8gb25seSBjYWxsIHRoZSBwYXJhbSBjaGFuZ2UgY2FsbGJhY2tzIGlmIHRoaXMgaXMgbm90IHRoZSBmaXJzdCB1cGRhdGUuXG4gICAgICBpZiAoY2FsbGVkKSB7XG4gICAgICAgIHZhciBjYiA9IHNlbGYucGFyYW1XYXRjaGVycyAmJiBzZWxmLnBhcmFtV2F0Y2hlcnNba2V5XTtcbiAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgY2IuY2FsbChzZWxmLCB2YWwsIG9sZFZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuICAgICAgdXNlcjogZmFsc2VcbiAgICB9KTtcbiAgICAodGhpcy5fcGFyYW1VbndhdGNoRm5zIHx8ICh0aGlzLl9wYXJhbVVud2F0Y2hGbnMgPSBbXSkpLnB1c2godW53YXRjaCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBkaXJlY3RpdmUgaXMgYSBmdW5jdGlvbiBjYWxsZXJcbiAgICogYW5kIGlmIHRoZSBleHByZXNzaW9uIGlzIGEgY2FsbGFibGUgb25lLiBJZiBib3RoIHRydWUsXG4gICAqIHdlIHdyYXAgdXAgdGhlIGV4cHJlc3Npb24gYW5kIHVzZSBpdCBhcyB0aGUgZXZlbnRcbiAgICogaGFuZGxlci5cbiAgICpcbiAgICogZS5nLiBvbi1jbGljaz1cImErK1wiXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG4gIERpcmVjdGl2ZS5wcm90b3R5cGUuX2NoZWNrU3RhdGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLmV4cHJlc3Npb247XG4gICAgaWYgKGV4cHJlc3Npb24gJiYgdGhpcy5hY2NlcHRTdGF0ZW1lbnQgJiYgIWlzU2ltcGxlUGF0aChleHByZXNzaW9uKSkge1xuICAgICAgdmFyIGZuID0gcGFyc2VFeHByZXNzaW9uKGV4cHJlc3Npb24pLmdldDtcbiAgICAgIHZhciBzY29wZSA9IHRoaXMuX3Njb3BlIHx8IHRoaXMudm07XG4gICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoZSkge1xuICAgICAgICBzY29wZS4kZXZlbnQgPSBlO1xuICAgICAgICBmbi5jYWxsKHNjb3BlLCBzY29wZSk7XG4gICAgICAgIHNjb3BlLiRldmVudCA9IG51bGw7XG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuZmlsdGVycykge1xuICAgICAgICBoYW5kbGVyID0gc2NvcGUuX2FwcGx5RmlsdGVycyhoYW5kbGVyLCBudWxsLCB0aGlzLmZpbHRlcnMpO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGUoaGFuZGxlcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZSB3aXRoIHRoZSBzZXR0ZXIuXG4gICAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0d28td2F5IGRpcmVjdGl2ZXNcbiAgICogZS5nLiB2LW1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwdWJsaWNcbiAgICovXG5cbiAgRGlyZWN0aXZlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHRoaXMudHdvV2F5KSB7XG4gICAgICB0aGlzLl93aXRoTG9jayhmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fd2F0Y2hlci5zZXQodmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oJ0RpcmVjdGl2ZS5zZXQoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB0d29XYXknICsgJ2RpcmVjdGl2ZXMuJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGEgZnVuY3Rpb24gd2hpbGUgcHJldmVudGluZyB0aGF0IGZ1bmN0aW9uIGZyb21cbiAgICogdHJpZ2dlcmluZyB1cGRhdGVzIG9uIHRoaXMgZGlyZWN0aXZlIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKi9cblxuICBEaXJlY3RpdmUucHJvdG90eXBlLl93aXRoTG9jayA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYuX2xvY2tlZCA9IHRydWU7XG4gICAgZm4uY2FsbChzZWxmKTtcbiAgICBuZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYuX2xvY2tlZCA9IGZhbHNlO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdGhhdCBhdHRhY2hlcyBhIERPTSBldmVudCBsaXN0ZW5lclxuICAgKiB0byB0aGUgZGlyZWN0aXZlIGVsZW1lbnQgYW5kIGF1dG9tZXRpY2FsbHkgdGVhcnMgaXQgZG93blxuICAgKiBkdXJpbmcgdW5iaW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFt1c2VDYXB0dXJlXVxuICAgKi9cblxuICBEaXJlY3RpdmUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXZlbnQsIGhhbmRsZXIsIHVzZUNhcHR1cmUpIHtcbiAgICBvbih0aGlzLmVsLCBldmVudCwgaGFuZGxlciwgdXNlQ2FwdHVyZSk7XG4gICAgKHRoaXMuX2xpc3RlbmVycyB8fCAodGhpcy5fbGlzdGVuZXJzID0gW10pKS5wdXNoKFtldmVudCwgaGFuZGxlcl0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUZWFyZG93biB0aGUgd2F0Y2hlciBhbmQgY2FsbCB1bmJpbmQuXG4gICAqL1xuXG4gIERpcmVjdGl2ZS5wcm90b3R5cGUuX3RlYXJkb3duID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2JvdW5kKSB7XG4gICAgICB0aGlzLl9ib3VuZCA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMudW5iaW5kKSB7XG4gICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fd2F0Y2hlcikge1xuICAgICAgICB0aGlzLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgICAgdmFyIGk7XG4gICAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgIGkgPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgb2ZmKHRoaXMuZWwsIGxpc3RlbmVyc1tpXVswXSwgbGlzdGVuZXJzW2ldWzFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHVud2F0Y2hGbnMgPSB0aGlzLl9wYXJhbVVud2F0Y2hGbnM7XG4gICAgICBpZiAodW53YXRjaEZucykge1xuICAgICAgICBpID0gdW53YXRjaEZucy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICB1bndhdGNoRm5zW2ldKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy5lbCkge1xuICAgICAgICB0aGlzLmVsLl92dWVfZGlyZWN0aXZlcy4kcmVtb3ZlKHRoaXMpO1xuICAgICAgfVxuICAgICAgdGhpcy52bSA9IHRoaXMuZWwgPSB0aGlzLl93YXRjaGVyID0gdGhpcy5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4oVnVlKSB7XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHYtcmVmIGZvciBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlbW92ZVxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS5fdXBkYXRlUmVmID0gZnVuY3Rpb24ocmVtb3ZlKSB7XG4gICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucy5fcmVmO1xuICAgICAgaWYgKHJlZikge1xuICAgICAgICB2YXIgcmVmcyA9ICh0aGlzLl9zY29wZSB8fCB0aGlzLl9jb250ZXh0KS4kcmVmcztcbiAgICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICAgIGlmIChyZWZzW3JlZl0gPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJlZnNbcmVmXSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZnNbcmVmXSA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNjbHVkZSwgY29tcGlsZSBhbmQgbGluayBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSBwcmUtY29tcGlsZWQgbGlua2VyIGlzIGF2YWlsYWJsZSwgdGhhdCBtZWFucyB0aGVcbiAgICAgKiBwYXNzZWQgaW4gZWxlbWVudCB3aWxsIGJlIHByZS10cmFuc2NsdWRlZCBhbmQgY29tcGlsZWRcbiAgICAgKiBhcyB3ZWxsIC0gYWxsIHdlIG5lZWQgdG8gZG8gaXMgdG8gY2FsbCB0aGUgbGlua2VyLlxuICAgICAqXG4gICAgICogT3RoZXJ3aXNlIHdlIG5lZWQgdG8gY2FsbCB0cmFuc2NsdWRlL2NvbXBpbGUvbGluayBoZXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS5fY29tcGlsZSA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG5cbiAgICAgIC8vIHRyYW5zY2x1ZGUgYW5kIGluaXQgZWxlbWVudFxuICAgICAgLy8gdHJhbnNjbHVkZSBjYW4gcG90ZW50aWFsbHkgcmVwbGFjZSBvcmlnaW5hbFxuICAgICAgLy8gc28gd2UgbmVlZCB0byBrZWVwIHJlZmVyZW5jZTsgdGhpcyBzdGVwIGFsc28gaW5qZWN0c1xuICAgICAgLy8gdGhlIHRlbXBsYXRlIGFuZCBjYWNoZXMgdGhlIG9yaWdpbmFsIGF0dHJpYnV0ZXNcbiAgICAgIC8vIG9uIHRoZSBjb250YWluZXIgbm9kZSBhbmQgcmVwbGFjZXIgbm9kZS5cbiAgICAgIHZhciBvcmlnaW5hbCA9IGVsO1xuICAgICAgZWwgPSB0cmFuc2NsdWRlKGVsLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuX2luaXRFbGVtZW50KGVsKTtcblxuICAgICAgLy8gaGFuZGxlIHYtcHJlIG9uIHJvb3Qgbm9kZSAoIzIwMjYpXG4gICAgICBpZiAoZWwubm9kZVR5cGUgPT09IDEgJiYgZ2V0QXR0cihlbCwgJ3YtcHJlJykgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyByb290IGlzIGFsd2F5cyBjb21waWxlZCBwZXItaW5zdGFuY2UsIGJlY2F1c2VcbiAgICAgIC8vIGNvbnRhaW5lciBhdHRycyBhbmQgcHJvcHMgY2FuIGJlIGRpZmZlcmVudCBldmVyeSB0aW1lLlxuICAgICAgdmFyIGNvbnRleHRPcHRpb25zID0gdGhpcy5fY29udGV4dCAmJiB0aGlzLl9jb250ZXh0LiRvcHRpb25zO1xuICAgICAgdmFyIHJvb3RMaW5rZXIgPSBjb21waWxlUm9vdChlbCwgb3B0aW9ucywgY29udGV4dE9wdGlvbnMpO1xuXG4gICAgICAvLyByZXNvbHZlIHNsb3QgZGlzdHJpYnV0aW9uXG4gICAgICByZXNvbHZlU2xvdHModGhpcywgb3B0aW9ucy5fY29udGVudCk7XG5cbiAgICAgIC8vIGNvbXBpbGUgYW5kIGxpbmsgdGhlIHJlc3RcbiAgICAgIHZhciBjb250ZW50TGlua0ZuO1xuICAgICAgdmFyIGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY29tcG9uZW50IGNvbXBpbGF0aW9uIGNhbiBiZSBjYWNoZWRcbiAgICAgIC8vIGFzIGxvbmcgYXMgaXQncyBub3QgdXNpbmcgaW5saW5lLXRlbXBsYXRlXG4gICAgICBpZiAob3B0aW9ucy5fbGlua2VyQ2FjaGFibGUpIHtcbiAgICAgICAgY29udGVudExpbmtGbiA9IGN0b3IubGlua2VyO1xuICAgICAgICBpZiAoIWNvbnRlbnRMaW5rRm4pIHtcbiAgICAgICAgICBjb250ZW50TGlua0ZuID0gY3Rvci5saW5rZXIgPSBjb21waWxlKGVsLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBsaW5rIHBoYXNlXG4gICAgICAvLyBtYWtlIHN1cmUgdG8gbGluayByb290IHdpdGggcHJvcCBzY29wZSFcbiAgICAgIHZhciByb290VW5saW5rRm4gPSByb290TGlua2VyKHRoaXMsIGVsLCB0aGlzLl9zY29wZSk7XG4gICAgICB2YXIgY29udGVudFVubGlua0ZuID0gY29udGVudExpbmtGbiA/IGNvbnRlbnRMaW5rRm4odGhpcywgZWwpIDogY29tcGlsZShlbCwgb3B0aW9ucykodGhpcywgZWwpO1xuXG4gICAgICAvLyByZWdpc3RlciBjb21wb3NpdGUgdW5saW5rIGZ1bmN0aW9uXG4gICAgICAvLyB0byBiZSBjYWxsZWQgZHVyaW5nIGluc3RhbmNlIGRlc3RydWN0aW9uXG4gICAgICB0aGlzLl91bmxpbmtGbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByb290VW5saW5rRm4oKTtcbiAgICAgICAgLy8gcGFzc2luZyBkZXN0cm95aW5nOiB0cnVlIHRvIGF2b2lkIHNlYXJjaGluZyBhbmRcbiAgICAgICAgLy8gc3BsaWNpbmcgdGhlIGRpcmVjdGl2ZXNcbiAgICAgICAgY29udGVudFVubGlua0ZuKHRydWUpO1xuICAgICAgfTtcblxuICAgICAgLy8gZmluYWxseSByZXBsYWNlIG9yaWdpbmFsXG4gICAgICBpZiAob3B0aW9ucy5yZXBsYWNlKSB7XG4gICAgICAgIHJlcGxhY2Uob3JpZ2luYWwsIGVsKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNDb21waWxlZCA9IHRydWU7XG4gICAgICB0aGlzLl9jYWxsSG9vaygnY29tcGlsZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBpbnN0YW5jZSBlbGVtZW50LiBDYWxsZWQgaW4gdGhlIHB1YmxpY1xuICAgICAqICRtb3VudCgpIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXRFbGVtZW50ID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGVsKSkge1xuICAgICAgICB0aGlzLl9pc0ZyYWdtZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy4kZWwgPSB0aGlzLl9mcmFnbWVudFN0YXJ0ID0gZWwuZmlyc3RDaGlsZDtcbiAgICAgICAgdGhpcy5fZnJhZ21lbnRFbmQgPSBlbC5sYXN0Q2hpbGQ7XG4gICAgICAgIC8vIHNldCBwZXJzaXN0ZWQgdGV4dCBhbmNob3JzIHRvIGVtcHR5XG4gICAgICAgIGlmICh0aGlzLl9mcmFnbWVudFN0YXJ0Lm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgdGhpcy5fZnJhZ21lbnRTdGFydC5kYXRhID0gdGhpcy5fZnJhZ21lbnRFbmQuZGF0YSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZyYWdtZW50ID0gZWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbCA9IGVsO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWwuX192dWVfXyA9IHRoaXM7XG4gICAgICB0aGlzLl9jYWxsSG9vaygnYmVmb3JlQ29tcGlsZScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIGJpbmQgYSBkaXJlY3RpdmUgdG8gYW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkZXNjcmlwdG9yIC0gcGFyc2VkIGRpcmVjdGl2ZSBkZXNjcmlwdG9yXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlICAgLSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSB7VnVlfSBbaG9zdF0gLSB0cmFuc2NsdXNpb24gaG9zdCBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Njb3BlXSAtIHYtZm9yIHNjb3BlXG4gICAgICogQHBhcmFtIHtGcmFnbWVudH0gW2ZyYWddIC0gb3duZXIgZnJhZ21lbnRcbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuX2JpbmREaXIgPSBmdW5jdGlvbihkZXNjcmlwdG9yLCBub2RlLCBob3N0LCBzY29wZSwgZnJhZykge1xuICAgICAgdGhpcy5fZGlyZWN0aXZlcy5wdXNoKG5ldyBEaXJlY3RpdmUoZGVzY3JpcHRvciwgdGhpcywgbm9kZSwgaG9zdCwgc2NvcGUsIGZyYWcpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGVhcmRvd24gYW4gaW5zdGFuY2UsIHVub2JzZXJ2ZXMgdGhlIGRhdGEsIHVuYmluZCBhbGwgdGhlXG4gICAgICogZGlyZWN0aXZlcywgdHVybiBvZmYgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMsIGV0Yy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVtb3ZlIC0gd2hldGhlciB0byByZW1vdmUgdGhlIERPTSBub2RlLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZGVmZXJDbGVhbnVwIC0gaWYgdHJ1ZSwgZGVmZXIgY2xlYW51cCB0b1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY2FsbGVkIGxhdGVyXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24ocmVtb3ZlLCBkZWZlckNsZWFudXApIHtcbiAgICAgIGlmICh0aGlzLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICAgIGlmICghZGVmZXJDbGVhbnVwKSB7XG4gICAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlc3Ryb3lSZWFkeTtcbiAgICAgIHZhciBwZW5kaW5nUmVtb3ZhbDtcblxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgLy8gQ2xlYW51cCBzaG91bGQgYmUgY2FsbGVkIGVpdGhlciBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm95c2x5IGFzXG4gICAgICAvLyBjYWxsYmFjayBvZiB0aGlzLiRyZW1vdmUoKSwgb3IgaWYgcmVtb3ZlIGFuZCBkZWZlckNsZWFudXAgYXJlIGZhbHNlLlxuICAgICAgLy8gSW4gYW55IGNhc2UgaXQgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciBhbGwgb3RoZXIgcmVtb3ZpbmcsIHVuYmluZGluZyBhbmRcbiAgICAgIC8vIHR1cm5pbmcgb2YgaXMgZG9uZVxuICAgICAgdmFyIGNsZWFudXBJZlBvc3NpYmxlID0gZnVuY3Rpb24gY2xlYW51cElmUG9zc2libGUoKSB7XG4gICAgICAgIGlmIChkZXN0cm95UmVhZHkgJiYgIXBlbmRpbmdSZW1vdmFsICYmICFkZWZlckNsZWFudXApIHtcbiAgICAgICAgICBzZWxmLl9jbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIHJlbW92ZSBET00gZWxlbWVudFxuICAgICAgaWYgKHJlbW92ZSAmJiB0aGlzLiRlbCkge1xuICAgICAgICBwZW5kaW5nUmVtb3ZhbCA9IHRydWU7XG4gICAgICAgIHRoaXMuJHJlbW92ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICBwZW5kaW5nUmVtb3ZhbCA9IGZhbHNlO1xuICAgICAgICAgIGNsZWFudXBJZlBvc3NpYmxlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYWxsSG9vaygnYmVmb3JlRGVzdHJveScpO1xuICAgICAgdGhpcy5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB2YXIgaTtcbiAgICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50LiBvbmx5IG5lY2Vzc2FyeVxuICAgICAgLy8gaWYgcGFyZW50IGlzIG5vdCBiZWluZyBkZXN0cm95ZWQgYXMgd2VsbC5cbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7XG4gICAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgICAgcGFyZW50LiRjaGlsZHJlbi4kcmVtb3ZlKHRoaXMpO1xuICAgICAgICAvLyB1bnJlZ2lzdGVyIHJlZiAocmVtb3ZlOiB0cnVlKVxuICAgICAgICB0aGlzLl91cGRhdGVSZWYodHJ1ZSk7XG4gICAgICB9XG4gICAgICAvLyBkZXN0cm95IGFsbCBjaGlsZHJlbi5cbiAgICAgIGkgPSB0aGlzLiRjaGlsZHJlbi5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHRoaXMuJGNoaWxkcmVuW2ldLiRkZXN0cm95KCk7XG4gICAgICB9XG4gICAgICAvLyB0ZWFyZG93biBwcm9wc1xuICAgICAgaWYgKHRoaXMuX3Byb3BzVW5saW5rRm4pIHtcbiAgICAgICAgdGhpcy5fcHJvcHNVbmxpbmtGbigpO1xuICAgICAgfVxuICAgICAgLy8gdGVhcmRvd24gYWxsIGRpcmVjdGl2ZXMuIHRoaXMgYWxzbyB0ZWFyc2Rvd24gYWxsXG4gICAgICAvLyBkaXJlY3RpdmUtb3duZWQgd2F0Y2hlcnMuXG4gICAgICBpZiAodGhpcy5fdW5saW5rRm4pIHtcbiAgICAgICAgdGhpcy5fdW5saW5rRm4oKTtcbiAgICAgIH1cbiAgICAgIGkgPSB0aGlzLl93YXRjaGVycy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHRoaXMuX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgICB9XG4gICAgICAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIHNlbGYgb24gJGVsXG4gICAgICBpZiAodGhpcy4kZWwpIHtcbiAgICAgICAgdGhpcy4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGRlc3Ryb3lSZWFkeSA9IHRydWU7XG4gICAgICBjbGVhbnVwSWZQb3NzaWJsZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhbiB1cCB0byBlbnN1cmUgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgICAqIFRoaXMgaXMgY2FsbGVkIGFmdGVyIHRoZSBsZWF2ZSB0cmFuc2l0aW9uIGlmIHRoZXJlXG4gICAgICogaXMgYW55LlxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gb3duZXIgZnJhZ21lbnRcbiAgICAgIC8vIGRvIGl0IGluIGNsZWFudXAgc28gdGhhdCB3ZSBjYW4gY2FsbCAkZGVzdHJveSB3aXRoXG4gICAgICAvLyBkZWZlciByaWdodCB3aGVuIGEgZnJhZ21lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZC5cbiAgICAgIGlmICh0aGlzLl9mcmFnKSB7XG4gICAgICAgIHRoaXMuX2ZyYWcuY2hpbGRyZW4uJHJlbW92ZSh0aGlzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICAgIGlmICh0aGlzLl9kYXRhICYmIHRoaXMuX2RhdGEuX19vYl9fKSB7XG4gICAgICAgIHRoaXMuX2RhdGEuX19vYl9fLnJlbW92ZVZtKHRoaXMpO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW4gdXAgcmVmZXJlbmNlcyB0byBwcml2YXRlIHByb3BlcnRpZXMgYW5kIG90aGVyXG4gICAgICAvLyBpbnN0YW5jZXMuIHByZXNlcnZlIHJlZmVyZW5jZSB0byBfZGF0YSBzbyB0aGF0IHByb3h5XG4gICAgICAvLyBhY2Nlc3NvcnMgc3RpbGwgd29yay4gVGhlIG9ubHkgcG90ZW50aWFsIHNpZGUgZWZmZWN0XG4gICAgICAvLyBoZXJlIGlzIHRoYXQgbXV0YXRpbmcgdGhlIGluc3RhbmNlIGFmdGVyIGl0J3MgZGVzdHJveWVkXG4gICAgICAvLyBtYXkgYWZmZWN0IHRoZSBzdGF0ZSBvZiBvdGhlciBjb21wb25lbnRzIHRoYXQgYXJlIHN0aWxsXG4gICAgICAvLyBvYnNlcnZpbmcgdGhlIHNhbWUgb2JqZWN0LCBidXQgdGhhdCBzZWVtcyB0byBiZSBhXG4gICAgICAvLyByZWFzb25hYmxlIHJlc3BvbnNpYmlsaXR5IGZvciB0aGUgdXNlciByYXRoZXIgdGhhblxuICAgICAgLy8gYWx3YXlzIHRocm93aW5nIGFuIGVycm9yIG9uIHRoZW0uXG4gICAgICB0aGlzLiRlbCA9IHRoaXMuJHBhcmVudCA9IHRoaXMuJHJvb3QgPSB0aGlzLiRjaGlsZHJlbiA9IHRoaXMuX3dhdGNoZXJzID0gdGhpcy5fY29udGV4dCA9IHRoaXMuX3Njb3BlID0gdGhpcy5fZGlyZWN0aXZlcyA9IG51bGw7XG4gICAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICAgIHRoaXMuX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2NhbGxIb29rKCdkZXN0cm95ZWQnKTtcbiAgICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgICB0aGlzLiRvZmYoKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbWlzY01peGluKFZ1ZSkge1xuICAgIC8qKlxuICAgICAqIEFwcGx5IGEgbGlzdCBvZiBmaWx0ZXIgKGRlc2NyaXB0b3JzKSB0byBhIHZhbHVlLlxuICAgICAqIFVzaW5nIHBsYWluIGZvciBsb29wcyBoZXJlIGJlY2F1c2UgdGhpcyB3aWxsIGJlIGNhbGxlZCBpblxuICAgICAqIHRoZSBnZXR0ZXIgb2YgYW55IHdhdGNoZXIgd2l0aCBmaWx0ZXJzIHNvIGl0IGlzIHZlcnlcbiAgICAgKiBwZXJmb3JtYW5jZSBzZW5zaXRpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHBhcmFtIHsqfSBbb2xkVmFsdWVdXG4gICAgICogQHBhcmFtIHtBcnJheX0gZmlsdGVyc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gd3JpdGVcbiAgICAgKiBAcmV0dXJuIHsqfVxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS5fYXBwbHlGaWx0ZXJzID0gZnVuY3Rpb24odmFsdWUsIG9sZFZhbHVlLCBmaWx0ZXJzLCB3cml0ZSkge1xuICAgICAgdmFyIGZpbHRlciwgZm4sIGFyZ3MsIGFyZywgb2Zmc2V0LCBpLCBsLCBqLCBrO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGZpbHRlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGZpbHRlciA9IGZpbHRlcnNbd3JpdGUgPyBsIC0gaSAtIDEgOiBpXTtcbiAgICAgICAgZm4gPSByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBmaWx0ZXIubmFtZSwgdHJ1ZSk7XG4gICAgICAgIGlmICghZm4pIGNvbnRpbnVlO1xuICAgICAgICBmbiA9IHdyaXRlID8gZm4ud3JpdGUgOiBmbi5yZWFkIHx8IGZuO1xuICAgICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSBjb250aW51ZTtcbiAgICAgICAgYXJncyA9IHdyaXRlID8gW3ZhbHVlLCBvbGRWYWx1ZV0gOiBbdmFsdWVdO1xuICAgICAgICBvZmZzZXQgPSB3cml0ZSA/IDIgOiAxO1xuICAgICAgICBpZiAoZmlsdGVyLmFyZ3MpIHtcbiAgICAgICAgICBmb3IgKGogPSAwLCBrID0gZmlsdGVyLmFyZ3MubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICBhcmcgPSBmaWx0ZXIuYXJnc1tqXTtcbiAgICAgICAgICAgIGFyZ3NbaiArIG9mZnNldF0gPSBhcmcuZHluYW1pYyA/IHRoaXMuJGdldChhcmcudmFsdWUpIDogYXJnLnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIGEgY29tcG9uZW50LCBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgY29tcG9uZW50XG4gICAgICogaXMgZGVmaW5lZCBub3JtYWxseSBvciB1c2luZyBhbiBhc3luYyBmYWN0b3J5IGZ1bmN0aW9uLlxuICAgICAqIFJlc29sdmVzIHN5bmNocm9ub3VzbHkgaWYgYWxyZWFkeSByZXNvbHZlZCwgb3RoZXJ3aXNlXG4gICAgICogcmVzb2x2ZXMgYXN5bmNocm9ub3VzbHkgYW5kIGNhY2hlcyB0aGUgcmVzb2x2ZWRcbiAgICAgKiBjb25zdHJ1Y3RvciBvbiB0aGUgZmFjdG9yeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLl9yZXNvbHZlQ29tcG9uZW50ID0gZnVuY3Rpb24odmFsdWUsIGNiKSB7XG4gICAgICB2YXIgZmFjdG9yeTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZmFjdG9yeSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeSA9IHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnY29tcG9uZW50cycsIHZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFmYWN0b3J5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5XG4gICAgICBpZiAoIWZhY3Rvcnkub3B0aW9ucykge1xuICAgICAgICBpZiAoZmFjdG9yeS5yZXNvbHZlZCkge1xuICAgICAgICAgIC8vIGNhY2hlZFxuICAgICAgICAgIGNiKGZhY3RvcnkucmVzb2x2ZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKGZhY3RvcnkucmVxdWVzdGVkKSB7XG4gICAgICAgICAgLy8gcG9vbCBjYWxsYmFja3NcbiAgICAgICAgICBmYWN0b3J5LnBlbmRpbmdDYWxsYmFja3MucHVzaChjYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmFjdG9yeS5yZXF1ZXN0ZWQgPSB0cnVlO1xuICAgICAgICAgIHZhciBjYnMgPSBmYWN0b3J5LnBlbmRpbmdDYWxsYmFja3MgPSBbY2JdO1xuICAgICAgICAgIGZhY3RvcnkuY2FsbCh0aGlzLCBmdW5jdGlvbiByZXNvbHZlKHJlcykge1xuICAgICAgICAgICAgaWYgKGlzUGxhaW5PYmplY3QocmVzKSkge1xuICAgICAgICAgICAgICByZXMgPSBWdWUuZXh0ZW5kKHJlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IHJlcztcbiAgICAgICAgICAgIC8vIGludm9rZSBjYWxsYmFja3NcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICBjYnNbaV0ocmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBmdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gICAgICAgICAgICAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgd2FybignRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50JyArICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gJzogJyArIHZhbHVlIDogJycpICsgJy4gJyArIChyZWFzb24gPyAnXFxuUmVhc29uOiAnICsgcmVhc29uIDogJycpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm9ybWFsIGNvbXBvbmVudFxuICAgICAgICBjYihmYWN0b3J5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGZpbHRlclJFJDEgPSAvW158XVxcfFtefF0vO1xuXG4gIGZ1bmN0aW9uIGRhdGFBUEkoVnVlKSB7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB2YWx1ZSBmcm9tIGFuIGV4cHJlc3Npb24gb24gdGhpcyB2bS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBleHBcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthc1N0YXRlbWVudF1cbiAgICAgKiBAcmV0dXJuIHsqfVxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS4kZ2V0ID0gZnVuY3Rpb24oZXhwLCBhc1N0YXRlbWVudCkge1xuICAgICAgdmFyIHJlcyA9IHBhcnNlRXhwcmVzc2lvbihleHApO1xuICAgICAgaWYgKHJlcykge1xuICAgICAgICBpZiAoYXNTdGF0ZW1lbnQpIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHN0YXRlbWVudEhhbmRsZXIoKSB7XG4gICAgICAgICAgICBzZWxmLiRhcmd1bWVudHMgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzLmdldC5jYWxsKHNlbGYsIHNlbGYpO1xuICAgICAgICAgICAgc2VsZi4kYXJndW1lbnRzID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5nZXQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgdmFsdWUgZnJvbSBhbiBleHByZXNzaW9uIG9uIHRoaXMgdm0uXG4gICAgICogVGhlIGV4cHJlc3Npb24gbXVzdCBiZSBhIHZhbGlkIGxlZnQtaGFuZFxuICAgICAqIGV4cHJlc3Npb24gaW4gYW4gYXNzaWdubWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBleHBcbiAgICAgKiBAcGFyYW0geyp9IHZhbFxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS4kc2V0ID0gZnVuY3Rpb24oZXhwLCB2YWwpIHtcbiAgICAgIHZhciByZXMgPSBwYXJzZUV4cHJlc3Npb24oZXhwLCB0cnVlKTtcbiAgICAgIGlmIChyZXMgJiYgcmVzLnNldCkge1xuICAgICAgICByZXMuc2V0LmNhbGwodGhpcywgdGhpcywgdmFsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgcHJvcGVydHkgb24gdGhlIFZNXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIGRlbCh0aGlzLl9kYXRhLCBrZXkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBXYXRjaCBhbiBleHByZXNzaW9uLCB0cmlnZ2VyIGNhbGxiYWNrIHdoZW4gaXRzXG4gICAgICogdmFsdWUgY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBleHBPckZuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAgICogICAgICAgICAgICAgICAgIC0ge0Jvb2xlYW59IGRlZXBcbiAgICAgKiAgICAgICAgICAgICAgICAgLSB7Qm9vbGVhbn0gaW1tZWRpYXRlXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IC0gdW53YXRjaEZuXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uKGV4cE9yRm4sIGNiLCBvcHRpb25zKSB7XG4gICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgdmFyIHBhcnNlZDtcbiAgICAgIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGFyc2VkID0gcGFyc2VEaXJlY3RpdmUoZXhwT3JGbik7XG4gICAgICAgIGV4cE9yRm4gPSBwYXJzZWQuZXhwcmVzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCB7XG4gICAgICAgIGRlZXA6IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWVwLFxuICAgICAgICBzeW5jOiBvcHRpb25zICYmIG9wdGlvbnMuc3luYyxcbiAgICAgICAgZmlsdGVyczogcGFyc2VkICYmIHBhcnNlZC5maWx0ZXJzLFxuICAgICAgICB1c2VyOiAhb3B0aW9ucyB8fCBvcHRpb25zLnVzZXIgIT09IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbigpIHtcbiAgICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXZhbHVhdGUgYSB0ZXh0IGRpcmVjdGl2ZSwgaW5jbHVkaW5nIGZpbHRlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FzU3RhdGVtZW50XVxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuJGV2YWwgPSBmdW5jdGlvbih0ZXh0LCBhc1N0YXRlbWVudCkge1xuICAgICAgLy8gY2hlY2sgZm9yIGZpbHRlcnMuXG4gICAgICBpZiAoZmlsdGVyUkUkMS50ZXN0KHRleHQpKSB7XG4gICAgICAgIHZhciBkaXIgPSBwYXJzZURpcmVjdGl2ZSh0ZXh0KTtcbiAgICAgICAgLy8gdGhlIGZpbHRlciByZWdleCBjaGVjayBtaWdodCBnaXZlIGZhbHNlIHBvc2l0aXZlXG4gICAgICAgIC8vIGZvciBwaXBlcyBpbnNpZGUgc3RyaW5ncywgc28gaXQncyBwb3NzaWJsZSB0aGF0XG4gICAgICAgIC8vIHdlIGRvbid0IGdldCBhbnkgZmlsdGVycyBoZXJlXG4gICAgICAgIHZhciB2YWwgPSB0aGlzLiRnZXQoZGlyLmV4cHJlc3Npb24sIGFzU3RhdGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGRpci5maWx0ZXJzID8gdGhpcy5fYXBwbHlGaWx0ZXJzKHZhbCwgbnVsbCwgZGlyLmZpbHRlcnMpIDogdmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm8gZmlsdGVyXG4gICAgICAgIHJldHVybiB0aGlzLiRnZXQodGV4dCwgYXNTdGF0ZW1lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcnBvbGF0ZSBhIHBpZWNlIG9mIHRlbXBsYXRlIHRleHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuJGludGVycG9sYXRlID0gZnVuY3Rpb24odGV4dCkge1xuICAgICAgdmFyIHRva2VucyA9IHBhcnNlVGV4dCh0ZXh0KTtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICBpZiAodG9rZW5zKSB7XG4gICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIHZtLiRldmFsKHRva2Vuc1swXS52YWx1ZSkgKyAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdG9rZW5zLm1hcChmdW5jdGlvbih0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuLnRhZyA/IHZtLiRldmFsKHRva2VuLnZhbHVlKSA6IHRva2VuLnZhbHVlO1xuICAgICAgICAgIH0pLmpvaW4oJycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTG9nIGluc3RhbmNlIGRhdGEgYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAgICAgKiBzbyB0aGF0IGl0IGlzIGVhc2llciB0byBpbnNwZWN0IGluIGNvbnNvbGUuXG4gICAgICogVGhpcyBtZXRob2QgYXNzdW1lcyBjb25zb2xlIGlzIGF2YWlsYWJsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbcGF0aF1cbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuJGxvZyA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHZhciBkYXRhID0gcGF0aCA/IGdldFBhdGgodGhpcy5fZGF0YSwgcGF0aCkgOiB0aGlzLl9kYXRhO1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgZGF0YSA9IGNsZWFuKGRhdGEpO1xuICAgICAgfVxuICAgICAgLy8gaW5jbHVkZSBjb21wdXRlZCBmaWVsZHNcbiAgICAgIGlmICghcGF0aCkge1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGtleSBpbiB0aGlzLiRvcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICAgICAgZGF0YVtrZXldID0gY2xlYW4odGhpc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJvcHMpIHtcbiAgICAgICAgICBmb3IgKGtleSBpbiB0aGlzLl9wcm9wcykge1xuICAgICAgICAgICAgZGF0YVtrZXldID0gY2xlYW4odGhpc1trZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBcImNsZWFuXCIgYSBnZXR0ZXIvc2V0dGVyIGNvbnZlcnRlZCBvYmplY3QgaW50byBhIHBsYWluXG4gICAgICogb2JqZWN0IGNvcHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gLSBvYmpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBjbGVhbihvYmopIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbUFQSShWdWUpIHtcbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBvbi1pbnN0YW5jZSBuZXh0VGljay4gVGhlIGNhbGxiYWNrIGlzXG4gICAgICogYXV0by1ib3VuZCB0byB0aGUgaW5zdGFuY2UsIGFuZCB0aGlzIGF2b2lkcyBjb21wb25lbnRcbiAgICAgKiBtb2R1bGVzIGhhdmluZyB0byByZWx5IG9uIHRoZSBnbG9iYWwgVnVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgIG5leHRUaWNrKGZuLCB0aGlzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kIGluc3RhbmNlIHRvIHRhcmdldFxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSB0YXJnZXRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbd2l0aFRyYW5zaXRpb25dIC0gZGVmYXVsdHMgdG8gdHJ1ZVxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS4kYXBwZW5kVG8gPSBmdW5jdGlvbih0YXJnZXQsIGNiLCB3aXRoVHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIGluc2VydCh0aGlzLCB0YXJnZXQsIGNiLCB3aXRoVHJhbnNpdGlvbiwgYXBwZW5kLCBhcHBlbmRXaXRoVHJhbnNpdGlvbik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFByZXBlbmQgaW5zdGFuY2UgdG8gdGFyZ2V0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYl1cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFt3aXRoVHJhbnNpdGlvbl0gLSBkZWZhdWx0cyB0byB0cnVlXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLiRwcmVwZW5kVG8gPSBmdW5jdGlvbih0YXJnZXQsIGNiLCB3aXRoVHJhbnNpdGlvbikge1xuICAgICAgdGFyZ2V0ID0gcXVlcnkodGFyZ2V0KTtcbiAgICAgIGlmICh0YXJnZXQuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgIHRoaXMuJGJlZm9yZSh0YXJnZXQuZmlyc3RDaGlsZCwgY2IsIHdpdGhUcmFuc2l0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGFwcGVuZFRvKHRhcmdldCwgY2IsIHdpdGhUcmFuc2l0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgaW5zdGFuY2UgYmVmb3JlIHRhcmdldFxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSB0YXJnZXRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbd2l0aFRyYW5zaXRpb25dIC0gZGVmYXVsdHMgdG8gdHJ1ZVxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS4kYmVmb3JlID0gZnVuY3Rpb24odGFyZ2V0LCBjYiwgd2l0aFRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiBpbnNlcnQodGhpcywgdGFyZ2V0LCBjYiwgd2l0aFRyYW5zaXRpb24sIGJlZm9yZVdpdGhDYiwgYmVmb3JlV2l0aFRyYW5zaXRpb24pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgaW5zdGFuY2UgYWZ0ZXIgdGFyZ2V0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYl1cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFt3aXRoVHJhbnNpdGlvbl0gLSBkZWZhdWx0cyB0byB0cnVlXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLiRhZnRlciA9IGZ1bmN0aW9uKHRhcmdldCwgY2IsIHdpdGhUcmFuc2l0aW9uKSB7XG4gICAgICB0YXJnZXQgPSBxdWVyeSh0YXJnZXQpO1xuICAgICAgaWYgKHRhcmdldC5uZXh0U2libGluZykge1xuICAgICAgICB0aGlzLiRiZWZvcmUodGFyZ2V0Lm5leHRTaWJsaW5nLCBjYiwgd2l0aFRyYW5zaXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kYXBwZW5kVG8odGFyZ2V0LnBhcmVudE5vZGUsIGNiLCB3aXRoVHJhbnNpdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGluc3RhbmNlIGZyb20gRE9NXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbd2l0aFRyYW5zaXRpb25dIC0gZGVmYXVsdHMgdG8gdHJ1ZVxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS4kcmVtb3ZlID0gZnVuY3Rpb24oY2IsIHdpdGhUcmFuc2l0aW9uKSB7XG4gICAgICBpZiAoIXRoaXMuJGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGNiICYmIGNiKCk7XG4gICAgICB9XG4gICAgICB2YXIgaW5Eb2N1bWVudCA9IHRoaXMuX2lzQXR0YWNoZWQgJiYgaW5Eb2ModGhpcy4kZWwpO1xuICAgICAgLy8gaWYgd2UgYXJlIG5vdCBpbiBkb2N1bWVudCwgbm8gbmVlZCB0byBjaGVja1xuICAgICAgLy8gZm9yIHRyYW5zaXRpb25zXG4gICAgICBpZiAoIWluRG9jdW1lbnQpIHdpdGhUcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgcmVhbENiID0gZnVuY3Rpb24gcmVhbENiKCkge1xuICAgICAgICBpZiAoaW5Eb2N1bWVudCkgc2VsZi5fY2FsbEhvb2soJ2RldGFjaGVkJyk7XG4gICAgICAgIGlmIChjYikgY2IoKTtcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5faXNGcmFnbWVudCkge1xuICAgICAgICByZW1vdmVOb2RlUmFuZ2UodGhpcy5fZnJhZ21lbnRTdGFydCwgdGhpcy5fZnJhZ21lbnRFbmQsIHRoaXMsIHRoaXMuX2ZyYWdtZW50LCByZWFsQ2IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG9wID0gd2l0aFRyYW5zaXRpb24gPT09IGZhbHNlID8gcmVtb3ZlV2l0aENiIDogcmVtb3ZlV2l0aFRyYW5zaXRpb247XG4gICAgICAgIG9wKHRoaXMuJGVsLCB0aGlzLCByZWFsQ2IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNoYXJlZCBET00gaW5zZXJ0aW9uIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbd2l0aFRyYW5zaXRpb25dXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3AxIC0gb3AgZm9yIG5vbi10cmFuc2l0aW9uIGluc2VydFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wMiAtIG9wIGZvciB0cmFuc2l0aW9uIGluc2VydFxuICAgICAqIEByZXR1cm4gdm1cbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGluc2VydCh2bSwgdGFyZ2V0LCBjYiwgd2l0aFRyYW5zaXRpb24sIG9wMSwgb3AyKSB7XG4gICAgICB0YXJnZXQgPSBxdWVyeSh0YXJnZXQpO1xuICAgICAgdmFyIHRhcmdldElzRGV0YWNoZWQgPSAhaW5Eb2ModGFyZ2V0KTtcbiAgICAgIHZhciBvcCA9IHdpdGhUcmFuc2l0aW9uID09PSBmYWxzZSB8fCB0YXJnZXRJc0RldGFjaGVkID8gb3AxIDogb3AyO1xuICAgICAgdmFyIHNob3VsZENhbGxIb29rID0gIXRhcmdldElzRGV0YWNoZWQgJiYgIXZtLl9pc0F0dGFjaGVkICYmICFpbkRvYyh2bS4kZWwpO1xuICAgICAgaWYgKHZtLl9pc0ZyYWdtZW50KSB7XG4gICAgICAgIG1hcE5vZGVSYW5nZSh2bS5fZnJhZ21lbnRTdGFydCwgdm0uX2ZyYWdtZW50RW5kLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgb3Aobm9kZSwgdGFyZ2V0LCB2bSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjYiAmJiBjYigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3Aodm0uJGVsLCB0YXJnZXQsIHZtLCBjYik7XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkQ2FsbEhvb2spIHtcbiAgICAgICAgdm0uX2NhbGxIb29rKCdhdHRhY2hlZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGZvciBzZWxlY3RvcnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEVsZW1lbnR9IGVsXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBxdWVyeShlbCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKSA6IGVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGVuZCBvcGVyYXRpb24gdGhhdCB0YWtlcyBhIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gICAgICogQHBhcmFtIHtWdWV9IHZtIC0gdW51c2VkXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXVxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gYXBwZW5kKGVsLCB0YXJnZXQsIHZtLCBjYikge1xuICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsKTtcbiAgICAgIGlmIChjYikgY2IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRCZWZvcmUgb3BlcmF0aW9uIHRoYXQgdGFrZXMgYSBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICAgICAqIEBwYXJhbSB7VnVlfSB2bSAtIHVudXNlZFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYl1cbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGJlZm9yZVdpdGhDYihlbCwgdGFyZ2V0LCB2bSwgY2IpIHtcbiAgICAgIGJlZm9yZShlbCwgdGFyZ2V0KTtcbiAgICAgIGlmIChjYikgY2IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgb3BlcmF0aW9uIHRoYXQgdGFrZXMgYSBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge1Z1ZX0gdm0gLSB1bnVzZWRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiByZW1vdmVXaXRoQ2IoZWwsIHZtLCBjYikge1xuICAgICAgcmVtb3ZlKGVsKTtcbiAgICAgIGlmIChjYikgY2IoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBldmVudHNBUEkoVnVlKSB7XG4gICAgLyoqXG4gICAgICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uKGV2ZW50LCBmbikge1xuICAgICAgKHRoaXMuX2V2ZW50c1tldmVudF0gfHwgKHRoaXMuX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgbW9kaWZ5TGlzdGVuZXJDb3VudCh0aGlzLCBldmVudCwgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXG4gICAgICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGZ1bmN0aW9uIG9uKCkge1xuICAgICAgICBzZWxmLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIG9uLmZuID0gZm47XG4gICAgICB0aGlzLiRvbihldmVudCwgb24pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXG4gICAgICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24oZXZlbnQsIGZuKSB7XG4gICAgICB2YXIgY2JzO1xuICAgICAgLy8gYWxsXG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMuJHBhcmVudCkge1xuICAgICAgICAgIGZvciAoZXZlbnQgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICAgICAgICBjYnMgPSB0aGlzLl9ldmVudHNbZXZlbnRdO1xuICAgICAgICAgICAgaWYgKGNicykge1xuICAgICAgICAgICAgICBtb2RpZnlMaXN0ZW5lckNvdW50KHRoaXMsIGV2ZW50LCAtY2JzLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgICBjYnMgPSB0aGlzLl9ldmVudHNbZXZlbnRdO1xuICAgICAgaWYgKCFjYnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBtb2RpZnlMaXN0ZW5lckNvdW50KHRoaXMsIGV2ZW50LCAtY2JzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICAgIHZhciBjYjtcbiAgICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY2IgPSBjYnNbaV07XG4gICAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgICAgbW9kaWZ5TGlzdGVuZXJDb3VudCh0aGlzLCBldmVudCwgLTEpO1xuICAgICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGFuIGV2ZW50IG9uIHNlbGYuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGV2ZW50XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gc2hvdWxkUHJvcGFnYXRlXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBpc1NvdXJjZSA9IHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZyc7XG4gICAgICBldmVudCA9IGlzU291cmNlID8gZXZlbnQgOiBldmVudC5uYW1lO1xuICAgICAgdmFyIGNicyA9IHRoaXMuX2V2ZW50c1tldmVudF07XG4gICAgICB2YXIgc2hvdWxkUHJvcGFnYXRlID0gaXNTb3VyY2UgfHwgIWNicztcbiAgICAgIGlmIChjYnMpIHtcbiAgICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBoYWNreSBzb2x1dGlvbiB0byB0aGUgcXVlc3Rpb24gcmFpc2VkXG4gICAgICAgIC8vIGluICMyMTAyOiBmb3IgYW4gaW5saW5lIGNvbXBvbmVudCBsaXN0ZW5lciBsaWtlIDxjb21wIEB0ZXN0PVwiZG9UaGlzXCI+LFxuICAgICAgICAvLyB0aGUgcHJvcGFnYXRpb24gaGFuZGxpbmcgaXMgc29tZXdoYXQgYnJva2VuLiBUaGVyZWZvcmUgd2VcbiAgICAgICAgLy8gbmVlZCB0byB0cmVhdCB0aGVzZSBpbmxpbmUgY2FsbGJhY2tzIGRpZmZlcmVudGx5LlxuICAgICAgICB2YXIgaGFzUGFyZW50Q2JzID0gaXNTb3VyY2UgJiYgY2JzLnNvbWUoZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgICByZXR1cm4gY2IuX2Zyb21QYXJlbnQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaGFzUGFyZW50Q2JzKSB7XG4gICAgICAgICAgc2hvdWxkUHJvcGFnYXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHZhciBjYiA9IGNic1tpXTtcbiAgICAgICAgICB2YXIgcmVzID0gY2IuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgaWYgKHJlcyA9PT0gdHJ1ZSAmJiAoIWhhc1BhcmVudENicyB8fCBjYi5fZnJvbVBhcmVudCkpIHtcbiAgICAgICAgICAgIHNob3VsZFByb3BhZ2F0ZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2hvdWxkUHJvcGFnYXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBicm9hZGNhc3QgYW4gZXZlbnQgdG8gYWxsIGNoaWxkcmVuIGluc3RhbmNlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gZXZlbnRcbiAgICAgKiBAcGFyYW0gey4uLip9IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLiRicm9hZGNhc3QgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIGlzU291cmNlID0gdHlwZW9mIGV2ZW50ID09PSAnc3RyaW5nJztcbiAgICAgIGV2ZW50ID0gaXNTb3VyY2UgPyBldmVudCA6IGV2ZW50Lm5hbWU7XG4gICAgICAvLyBpZiBubyBjaGlsZCBoYXMgcmVnaXN0ZXJlZCBmb3IgdGhpcyBldmVudCxcbiAgICAgIC8vIHRoZW4gdGhlcmUncyBubyBuZWVkIHRvIGJyb2FkY2FzdC5cbiAgICAgIGlmICghdGhpcy5fZXZlbnRzQ291bnRbZXZlbnRdKSByZXR1cm47XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRjaGlsZHJlbjtcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICAgICAgaWYgKGlzU291cmNlKSB7XG4gICAgICAgIC8vIHVzZSBvYmplY3QgZXZlbnQgdG8gaW5kaWNhdGUgbm9uLXNvdXJjZSBlbWl0XG4gICAgICAgIC8vIG9uIGNoaWxkcmVuXG4gICAgICAgIGFyZ3NbMF0gPSB7XG4gICAgICAgICAgbmFtZTogZXZlbnQsXG4gICAgICAgICAgc291cmNlOiB0aGlzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgdmFyIHNob3VsZFByb3BhZ2F0ZSA9IGNoaWxkLiRlbWl0LmFwcGx5KGNoaWxkLCBhcmdzKTtcbiAgICAgICAgaWYgKHNob3VsZFByb3BhZ2F0ZSkge1xuICAgICAgICAgIGNoaWxkLiRicm9hZGNhc3QuYXBwbHkoY2hpbGQsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgcHJvcGFnYXRlIGFuIGV2ZW50IHVwIHRoZSBwYXJlbnQgY2hhaW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAgICAgKiBAcGFyYW0gey4uLip9IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLiRkaXNwYXRjaCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgc2hvdWxkUHJvcGFnYXRlID0gdGhpcy4kZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKCFzaG91bGRQcm9wYWdhdGUpIHJldHVybjtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgIC8vIHVzZSBvYmplY3QgZXZlbnQgdG8gaW5kaWNhdGUgbm9uLXNvdXJjZSBlbWl0XG4gICAgICAvLyBvbiBwYXJlbnRzXG4gICAgICBhcmdzWzBdID0ge1xuICAgICAgICBuYW1lOiBldmVudCxcbiAgICAgICAgc291cmNlOiB0aGlzXG4gICAgICB9O1xuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBzaG91bGRQcm9wYWdhdGUgPSBwYXJlbnQuJGVtaXQuYXBwbHkocGFyZW50LCBhcmdzKTtcbiAgICAgICAgcGFyZW50ID0gc2hvdWxkUHJvcGFnYXRlID8gcGFyZW50LiRwYXJlbnQgOiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1vZGlmeSB0aGUgbGlzdGVuZXIgY291bnRzIG9uIGFsbCBwYXJlbnRzLlxuICAgICAqIFRoaXMgYm9va2tlZXBpbmcgYWxsb3dzICRicm9hZGNhc3QgdG8gcmV0dXJuIGVhcmx5IHdoZW5cbiAgICAgKiBubyBjaGlsZCBoYXMgbGlzdGVuZWQgdG8gYSBjZXJ0YWluIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWdWV9IHZtXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50XG4gICAgICovXG5cbiAgICB2YXIgaG9va1JFID0gL15ob29rOi87XG5cbiAgICBmdW5jdGlvbiBtb2RpZnlMaXN0ZW5lckNvdW50KHZtLCBldmVudCwgY291bnQpIHtcbiAgICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgICAgLy8gaG9va3MgZG8gbm90IGdldCBicm9hZGNhc3RlZCBzbyBubyBuZWVkXG4gICAgICAvLyB0byBkbyBib29ra2VlcGluZyBmb3IgdGhlbVxuICAgICAgaWYgKCFwYXJlbnQgfHwgIWNvdW50IHx8IGhvb2tSRS50ZXN0KGV2ZW50KSkgcmV0dXJuO1xuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQuX2V2ZW50c0NvdW50W2V2ZW50XSA9IChwYXJlbnQuX2V2ZW50c0NvdW50W2V2ZW50XSB8fCAwKSArIGNvdW50O1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsaWZlY3ljbGVBUEkoVnVlKSB7XG4gICAgLyoqXG4gICAgICogU2V0IGluc3RhbmNlIHRhcmdldCBlbGVtZW50IGFuZCBraWNrIG9mZiB0aGUgY29tcGlsYXRpb25cbiAgICAgKiBwcm9jZXNzLiBUaGUgcGFzc2VkIGluIGBlbGAgY2FuIGJlIGEgc2VsZWN0b3Igc3RyaW5nLCBhblxuICAgICAqIGV4aXN0aW5nIEVsZW1lbnQsIG9yIGEgRG9jdW1lbnRGcmFnbWVudCAoZm9yIGJsb2NrXG4gICAgICogaW5zdGFuY2VzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fHN0cmluZ30gZWxcbiAgICAgKiBAcHVibGljXG4gICAgICovXG5cbiAgICBWdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICBpZiAodGhpcy5faXNDb21waWxlZCkge1xuICAgICAgICAnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicgJiYgd2FybignJG1vdW50KCkgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IG9uY2UuJywgdGhpcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsID0gcXVlcnkoZWwpO1xuICAgICAgaWYgKCFlbCkge1xuICAgICAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fY29tcGlsZShlbCk7XG4gICAgICB0aGlzLl9pbml0RE9NSG9va3MoKTtcbiAgICAgIGlmIChpbkRvYyh0aGlzLiRlbCkpIHtcbiAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2F0dGFjaGVkJyk7XG4gICAgICAgIHJlYWR5LmNhbGwodGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRvbmNlKCdob29rOmF0dGFjaGVkJywgcmVhZHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1hcmsgYW4gaW5zdGFuY2UgYXMgcmVhZHkuXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiByZWFkeSgpIHtcbiAgICAgIHRoaXMuX2lzQXR0YWNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5faXNSZWFkeSA9IHRydWU7XG4gICAgICB0aGlzLl9jYWxsSG9vaygncmVhZHknKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZWFyZG93biB0aGUgaW5zdGFuY2UsIHNpbXBseSBkZWxlZ2F0ZSB0byB0aGUgaW50ZXJuYWxcbiAgICAgKiBfZGVzdHJveS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVtb3ZlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBkZWZlckNsZWFudXBcbiAgICAgKi9cblxuICAgIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbihyZW1vdmUsIGRlZmVyQ2xlYW51cCkge1xuICAgICAgdGhpcy5fZGVzdHJveShyZW1vdmUsIGRlZmVyQ2xlYW51cCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBhcnRpYWxseSBjb21waWxlIGEgcGllY2Ugb2YgRE9NIGFuZCByZXR1cm4gYVxuICAgICAqIGRlY29tcGlsZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fSBlbFxuICAgICAqIEBwYXJhbSB7VnVlfSBbaG9zdF1cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Njb3BlXVxuICAgICAqIEBwYXJhbSB7RnJhZ21lbnR9IFtmcmFnXVxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgICAqL1xuXG4gICAgVnVlLnByb3RvdHlwZS4kY29tcGlsZSA9IGZ1bmN0aW9uKGVsLCBob3N0LCBzY29wZSwgZnJhZykge1xuICAgICAgcmV0dXJuIGNvbXBpbGUoZWwsIHRoaXMuJG9wdGlvbnMsIHRydWUpKHRoaXMsIGVsLCBob3N0LCBzY29wZSwgZnJhZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZXhwb3NlZCBWdWUgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEFQSSBjb252ZW50aW9uczpcbiAgICogLSBwdWJsaWMgQVBJIG1ldGhvZHMvcHJvcGVydGllcyBhcmUgcHJlZml4ZWQgd2l0aCBgJGBcbiAgICogLSBpbnRlcm5hbCBtZXRob2RzL3Byb3BlcnRpZXMgYXJlIHByZWZpeGVkIHdpdGggYF9gXG4gICAqIC0gbm9uLXByZWZpeGVkIHByb3BlcnRpZXMgYXJlIGFzc3VtZWQgdG8gYmUgcHJveGllZCB1c2VyXG4gICAqICAgZGF0YS5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBWdWUob3B0aW9ucykge1xuICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gIH1cblxuICAvLyBpbnN0YWxsIGludGVybmFsc1xuICBpbml0TWl4aW4oVnVlKTtcbiAgc3RhdGVNaXhpbihWdWUpO1xuICBldmVudHNNaXhpbihWdWUpO1xuICBsaWZlY3ljbGVNaXhpbihWdWUpO1xuICBtaXNjTWl4aW4oVnVlKTtcblxuICAvLyBpbnN0YWxsIGluc3RhbmNlIEFQSXNcbiAgZGF0YUFQSShWdWUpO1xuICBkb21BUEkoVnVlKTtcbiAgZXZlbnRzQVBJKFZ1ZSk7XG4gIGxpZmVjeWNsZUFQSShWdWUpO1xuXG4gIHZhciBzbG90ID0ge1xuXG4gICAgcHJpb3JpdHk6IFNMT1QsXG4gICAgcGFyYW1zOiBbJ25hbWUnXSxcblxuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICAvLyB0aGlzIHdhcyByZXNvbHZlZCBkdXJpbmcgY29tcG9uZW50IHRyYW5zY2x1c2lvblxuICAgICAgdmFyIG5hbWUgPSB0aGlzLnBhcmFtcy5uYW1lIHx8ICdkZWZhdWx0JztcbiAgICAgIHZhciBjb250ZW50ID0gdGhpcy52bS5fc2xvdENvbnRlbnRzICYmIHRoaXMudm0uX3Nsb3RDb250ZW50c1tuYW1lXTtcbiAgICAgIGlmICghY29udGVudCB8fCAhY29udGVudC5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgdGhpcy5mYWxsYmFjaygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb21waWxlKGNvbnRlbnQuY2xvbmVOb2RlKHRydWUpLCB0aGlzLnZtLl9jb250ZXh0LCB0aGlzLnZtKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcGlsZTogZnVuY3Rpb24gY29tcGlsZShjb250ZW50LCBjb250ZXh0LCBob3N0KSB7XG4gICAgICBpZiAoY29udGVudCAmJiBjb250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLmVsLmhhc0NoaWxkTm9kZXMoKSAmJiBjb250ZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICYmIGNvbnRlbnQuY2hpbGROb2Rlc1swXS5ub2RlVHlwZSA9PT0gMSAmJiBjb250ZW50LmNoaWxkTm9kZXNbMF0uaGFzQXR0cmlidXRlKCd2LWlmJykpIHtcbiAgICAgICAgICAvLyBpZiB0aGUgaW5zZXJ0ZWQgc2xvdCBoYXMgdi1pZlxuICAgICAgICAgIC8vIGluamVjdCBmYWxsYmFjayBjb250ZW50IGFzIHRoZSB2LWVsc2VcbiAgICAgICAgICB2YXIgZWxzZUJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICAgICAgICBlbHNlQmxvY2suc2V0QXR0cmlidXRlKCd2LWVsc2UnLCAnJyk7XG4gICAgICAgICAgZWxzZUJsb2NrLmlubmVySFRNTCA9IHRoaXMuZWwuaW5uZXJIVE1MO1xuICAgICAgICAgIC8vIHRoZSBlbHNlIGJsb2NrIHNob3VsZCBiZSBjb21waWxlZCBpbiBjaGlsZCBzY29wZVxuICAgICAgICAgIGVsc2VCbG9jay5fY29udGV4dCA9IHRoaXMudm07XG4gICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChlbHNlQmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzY29wZSA9IGhvc3QgPyBob3N0Ll9zY29wZSA6IHRoaXMuX3Njb3BlO1xuICAgICAgICB0aGlzLnVubGluayA9IGNvbnRleHQuJGNvbXBpbGUoY29udGVudCwgaG9zdCwgc2NvcGUsIHRoaXMuX2ZyYWcpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgcmVwbGFjZSh0aGlzLmVsLCBjb250ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbW92ZSh0aGlzLmVsKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZmFsbGJhY2s6IGZ1bmN0aW9uIGZhbGxiYWNrKCkge1xuICAgICAgdGhpcy5jb21waWxlKGV4dHJhY3RDb250ZW50KHRoaXMuZWwsIHRydWUpLCB0aGlzLnZtKTtcbiAgICB9LFxuXG4gICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICBpZiAodGhpcy51bmxpbmspIHtcbiAgICAgICAgdGhpcy51bmxpbmsoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHBhcnRpYWwgPSB7XG5cbiAgICBwcmlvcml0eTogUEFSVElBTCxcblxuICAgIHBhcmFtczogWyduYW1lJ10sXG5cbiAgICAvLyB3YXRjaCBjaGFuZ2VzIHRvIG5hbWUgZm9yIGR5bmFtaWMgcGFydGlhbHNcbiAgICBwYXJhbVdhdGNoZXJzOiB7XG4gICAgICBuYW1lOiBmdW5jdGlvbiBuYW1lKHZhbHVlKSB7XG4gICAgICAgIHZJZi5yZW1vdmUuY2FsbCh0aGlzKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5pbnNlcnQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICB0aGlzLmFuY2hvciA9IGNyZWF0ZUFuY2hvcigndi1wYXJ0aWFsJyk7XG4gICAgICByZXBsYWNlKHRoaXMuZWwsIHRoaXMuYW5jaG9yKTtcbiAgICAgIHRoaXMuaW5zZXJ0KHRoaXMucGFyYW1zLm5hbWUpO1xuICAgIH0sXG5cbiAgICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydChpZCkge1xuICAgICAgdmFyIHBhcnRpYWwgPSByZXNvbHZlQXNzZXQodGhpcy52bS4kb3B0aW9ucywgJ3BhcnRpYWxzJywgaWQsIHRydWUpO1xuICAgICAgaWYgKHBhcnRpYWwpIHtcbiAgICAgICAgdGhpcy5mYWN0b3J5ID0gbmV3IEZyYWdtZW50RmFjdG9yeSh0aGlzLnZtLCBwYXJ0aWFsKTtcbiAgICAgICAgdklmLmluc2VydC5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIGlmICh0aGlzLmZyYWcpIHtcbiAgICAgICAgdGhpcy5mcmFnLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGVsZW1lbnREaXJlY3RpdmVzID0ge1xuICAgIHNsb3Q6IHNsb3QsXG4gICAgcGFydGlhbDogcGFydGlhbFxuICB9O1xuXG4gIHZhciBjb252ZXJ0QXJyYXkgPSB2Rm9yLl9wb3N0UHJvY2VzcztcblxuICAvKipcbiAgICogTGltaXQgZmlsdGVyIGZvciBhcnJheXNcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCAoRGVjaW1hbCBleHBlY3RlZClcbiAgICovXG5cbiAgZnVuY3Rpb24gbGltaXRCeShhcnIsIG4sIG9mZnNldCkge1xuICAgIG9mZnNldCA9IG9mZnNldCA/IHBhcnNlSW50KG9mZnNldCwgMTApIDogMDtcbiAgICBuID0gdG9OdW1iZXIobik7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJyA/IGFyci5zbGljZShvZmZzZXQsIG9mZnNldCArIG4pIDogYXJyO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbHRlciBmaWx0ZXIgZm9yIGFycmF5c1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbZGVsaW1pdGVyXVxuICAgKiBAcGFyYW0ge1N0cmluZ30gLi4uZGF0YUtleXNcbiAgICovXG5cbiAgZnVuY3Rpb24gZmlsdGVyQnkoYXJyLCBzZWFyY2gsIGRlbGltaXRlcikge1xuICAgIGFyciA9IGNvbnZlcnRBcnJheShhcnIpO1xuICAgIGlmIChzZWFyY2ggPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWFyY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBhcnIuZmlsdGVyKHNlYXJjaCk7XG4gICAgfVxuICAgIC8vIGNhc3QgdG8gbG93ZXJjYXNlIHN0cmluZ1xuICAgIHNlYXJjaCA9ICgnJyArIHNlYXJjaCkudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBhbGxvdyBvcHRpb25hbCBgaW5gIGRlbGltaXRlclxuICAgIC8vIGJlY2F1c2Ugd2h5IG5vdFxuICAgIHZhciBuID0gZGVsaW1pdGVyID09PSAnaW4nID8gMyA6IDI7XG4gICAgLy8gZXh0cmFjdCBhbmQgZmxhdHRlbiBrZXlzXG4gICAgdmFyIGtleXMgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCB0b0FycmF5KGFyZ3VtZW50cywgbikpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaXRlbSwga2V5LCB2YWwsIGo7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpdGVtID0gYXJyW2ldO1xuICAgICAgdmFsID0gaXRlbSAmJiBpdGVtLiR2YWx1ZSB8fCBpdGVtO1xuICAgICAgaiA9IGtleXMubGVuZ3RoO1xuICAgICAgaWYgKGopIHtcbiAgICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICAgIGtleSA9IGtleXNbal07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJyRrZXknICYmIGNvbnRhaW5zKGl0ZW0uJGtleSwgc2VhcmNoKSB8fCBjb250YWlucyhnZXRQYXRoKHZhbCwga2V5KSwgc2VhcmNoKSkge1xuICAgICAgICAgICAgcmVzLnB1c2goaXRlbSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29udGFpbnMoaXRlbSwgc2VhcmNoKSkge1xuICAgICAgICByZXMucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWx0ZXIgZmlsdGVyIGZvciBhcnJheXNcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXk8U3RyaW5nPnxGdW5jdGlvbn0gLi4uc29ydEtleXNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcmRlcl1cbiAgICovXG5cbiAgZnVuY3Rpb24gb3JkZXJCeShhcnIpIHtcbiAgICB2YXIgY29tcGFyYXRvciA9IG51bGw7XG4gICAgdmFyIHNvcnRLZXlzID0gdW5kZWZpbmVkO1xuICAgIGFyciA9IGNvbnZlcnRBcnJheShhcnIpO1xuXG4gICAgLy8gZGV0ZXJtaW5lIG9yZGVyIChsYXN0IGFyZ3VtZW50KVxuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIHZhciBvcmRlciA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICBpZiAodHlwZW9mIG9yZGVyID09PSAnbnVtYmVyJykge1xuICAgICAgb3JkZXIgPSBvcmRlciA8IDAgPyAtMSA6IDE7XG4gICAgICBhcmdzID0gYXJncy5sZW5ndGggPiAxID8gYXJncy5zbGljZSgwLCAtMSkgOiBhcmdzO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcmRlciA9IDE7XG4gICAgfVxuXG4gICAgLy8gZGV0ZXJtaW5lIHNvcnRLZXlzICYgY29tcGFyYXRvclxuICAgIHZhciBmaXJzdEFyZyA9IGFyZ3NbMF07XG4gICAgaWYgKCFmaXJzdEFyZykge1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBmaXJzdEFyZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY3VzdG9tIGNvbXBhcmF0b3JcbiAgICAgIGNvbXBhcmF0b3IgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBmaXJzdEFyZyhhLCBiKSAqIG9yZGVyO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3RyaW5nIGtleXMuIGZsYXR0ZW4gZmlyc3RcbiAgICAgIHNvcnRLZXlzID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJncyk7XG4gICAgICBjb21wYXJhdG9yID0gZnVuY3Rpb24oYSwgYiwgaSkge1xuICAgICAgICBpID0gaSB8fCAwO1xuICAgICAgICByZXR1cm4gaSA+PSBzb3J0S2V5cy5sZW5ndGggLSAxID8gYmFzZUNvbXBhcmUoYSwgYiwgaSkgOiBiYXNlQ29tcGFyZShhLCBiLCBpKSB8fCBjb21wYXJhdG9yKGEsIGIsIGkgKyAxKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmFzZUNvbXBhcmUoYSwgYiwgc29ydEtleUluZGV4KSB7XG4gICAgICB2YXIgc29ydEtleSA9IHNvcnRLZXlzW3NvcnRLZXlJbmRleF07XG4gICAgICBpZiAoc29ydEtleSkge1xuICAgICAgICBpZiAoc29ydEtleSAhPT0gJyRrZXknKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICckdmFsdWUnIGluIGEpIGEgPSBhLiR2YWx1ZTtcbiAgICAgICAgICBpZiAoaXNPYmplY3QoYikgJiYgJyR2YWx1ZScgaW4gYikgYiA9IGIuJHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGEgPSBpc09iamVjdChhKSA/IGdldFBhdGgoYSwgc29ydEtleSkgOiBhO1xuICAgICAgICBiID0gaXNPYmplY3QoYikgPyBnZXRQYXRoKGIsIHNvcnRLZXkpIDogYjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhID09PSBiID8gMCA6IGEgPiBiID8gb3JkZXIgOiAtb3JkZXI7XG4gICAgfVxuXG4gICAgLy8gc29ydCBvbiBhIGNvcHkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgYXJyYXlcbiAgICByZXR1cm4gYXJyLnNsaWNlKCkuc29ydChjb21wYXJhdG9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdHJpbmcgY29udGFpbiBoZWxwZXJcbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFxuICAgKi9cblxuICBmdW5jdGlvbiBjb250YWlucyh2YWwsIHNlYXJjaCkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGNvbnRhaW5zKHZhbFtrZXlzW2ldXSwgc2VhcmNoKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAoY29udGFpbnModmFsW2ldLCBzZWFyY2gpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdmFsLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaCkgPiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGlnaXRzUkUgPSAvKFxcZHszfSkoPz1cXGQpL2c7XG5cbiAgLy8gYXNzZXQgY29sbGVjdGlvbnMgbXVzdCBiZSBhIHBsYWluIG9iamVjdC5cbiAgdmFyIGZpbHRlcnMgPSB7XG5cbiAgICBvcmRlckJ5OiBvcmRlckJ5LFxuICAgIGZpbHRlckJ5OiBmaWx0ZXJCeSxcbiAgICBsaW1pdEJ5OiBsaW1pdEJ5LFxuXG4gICAgLyoqXG4gICAgICogU3RyaW5naWZ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGVudFxuICAgICAqL1xuXG4gICAganNvbjoge1xuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCh2YWx1ZSwgaW5kZW50KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBpbmRlbnQgOiAyKTtcbiAgICAgIH0sXG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogJ2FiYycgPT4gJ0FiYydcbiAgICAgKi9cblxuICAgIGNhcGl0YWxpemU6IGZ1bmN0aW9uIGNhcGl0YWxpemUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHJldHVybiAnJztcbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIHJldHVybiB2YWx1ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHZhbHVlLnNsaWNlKDEpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAnYWJjJyA9PiAnQUJDJ1xuICAgICAqL1xuXG4gICAgdXBwZXJjYXNlOiBmdW5jdGlvbiB1cHBlcmNhc2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IHZhbHVlLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKSA6ICcnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAnQWJDJyA9PiAnYWJjJ1xuICAgICAqL1xuXG4gICAgbG93ZXJjYXNlOiBmdW5jdGlvbiBsb3dlcmNhc2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IHZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA6ICcnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAxMjM0NSA9PiAkMTIsMzQ1LjAwXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2lnblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWNpbWFscyBEZWNpbWFsIHBsYWNlc1xuICAgICAqL1xuXG4gICAgY3VycmVuY3k6IGZ1bmN0aW9uIGN1cnJlbmN5KHZhbHVlLCBfY3VycmVuY3ksIGRlY2ltYWxzKSB7XG4gICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgaWYgKCFpc0Zpbml0ZSh2YWx1ZSkgfHwgIXZhbHVlICYmIHZhbHVlICE9PSAwKSByZXR1cm4gJyc7XG4gICAgICBfY3VycmVuY3kgPSBfY3VycmVuY3kgIT0gbnVsbCA/IF9jdXJyZW5jeSA6ICckJztcbiAgICAgIGRlY2ltYWxzID0gZGVjaW1hbHMgIT0gbnVsbCA/IGRlY2ltYWxzIDogMjtcbiAgICAgIHZhciBzdHJpbmdpZmllZCA9IE1hdGguYWJzKHZhbHVlKS50b0ZpeGVkKGRlY2ltYWxzKTtcbiAgICAgIHZhciBfaW50ID0gZGVjaW1hbHMgPyBzdHJpbmdpZmllZC5zbGljZSgwLCAtMSAtIGRlY2ltYWxzKSA6IHN0cmluZ2lmaWVkO1xuICAgICAgdmFyIGkgPSBfaW50Lmxlbmd0aCAlIDM7XG4gICAgICB2YXIgaGVhZCA9IGkgPiAwID8gX2ludC5zbGljZSgwLCBpKSArIChfaW50Lmxlbmd0aCA+IDMgPyAnLCcgOiAnJykgOiAnJztcbiAgICAgIHZhciBfZmxvYXQgPSBkZWNpbWFscyA/IHN0cmluZ2lmaWVkLnNsaWNlKC0xIC0gZGVjaW1hbHMpIDogJyc7XG4gICAgICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/ICctJyA6ICcnO1xuICAgICAgcmV0dXJuIHNpZ24gKyBfY3VycmVuY3kgKyBoZWFkICsgX2ludC5zbGljZShpKS5yZXBsYWNlKGRpZ2l0c1JFLCAnJDEsJykgKyBfZmxvYXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICdpdGVtJyA9PiAnaXRlbXMnXG4gICAgICpcbiAgICAgKiBAcGFyYW1zXG4gICAgICogIGFuIGFycmF5IG9mIHN0cmluZ3MgY29ycmVzcG9uZGluZyB0b1xuICAgICAqICB0aGUgc2luZ2xlLCBkb3VibGUsIHRyaXBsZSAuLi4gZm9ybXMgb2YgdGhlIHdvcmQgdG9cbiAgICAgKiAgYmUgcGx1cmFsaXplZC4gV2hlbiB0aGUgbnVtYmVyIHRvIGJlIHBsdXJhbGl6ZWRcbiAgICAgKiAgZXhjZWVkcyB0aGUgbGVuZ3RoIG9mIHRoZSBhcmdzLCBpdCB3aWxsIHVzZSB0aGUgbGFzdFxuICAgICAqICBlbnRyeSBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiAgZS5nLiBbJ3NpbmdsZScsICdkb3VibGUnLCAndHJpcGxlJywgJ211bHRpcGxlJ11cbiAgICAgKi9cblxuICAgIHBsdXJhbGl6ZTogZnVuY3Rpb24gcGx1cmFsaXplKHZhbHVlKSB7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHZhbHVlICUgMTAgLSAxO1xuICAgICAgICByZXR1cm4gaW5kZXggaW4gYXJncyA/IGFyZ3NbaW5kZXhdIDogYXJnc1tsZW5ndGggLSAxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhcmdzWzBdICsgKHZhbHVlID09PSAxID8gJycgOiAncycpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWJvdW5jZSBhIGhhbmRsZXIgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5ID0gMzAwXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAgICovXG5cbiAgICBkZWJvdW5jZTogZnVuY3Rpb24gZGVib3VuY2UoaGFuZGxlciwgZGVsYXkpIHtcbiAgICAgIGlmICghaGFuZGxlcikgcmV0dXJuO1xuICAgICAgaWYgKCFkZWxheSkge1xuICAgICAgICBkZWxheSA9IDMwMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfZGVib3VuY2UoaGFuZGxlciwgZGVsYXkpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBpbnN0YWxsR2xvYmFsQVBJKFZ1ZSkge1xuICAgIC8qKlxuICAgICAqIFZ1ZSBhbmQgZXZlcnkgY29uc3RydWN0b3IgdGhhdCBleHRlbmRzIFZ1ZSBoYXMgYW5cbiAgICAgKiBhc3NvY2lhdGVkIG9wdGlvbnMgb2JqZWN0LCB3aGljaCBjYW4gYmUgYWNjZXNzZWQgZHVyaW5nXG4gICAgICogY29tcGlsYXRpb24gc3RlcHMgYXMgYHRoaXMuY29uc3RydWN0b3Iub3B0aW9uc2AuXG4gICAgICpcbiAgICAgKiBUaGVzZSBjYW4gYmUgc2VlbiBhcyB0aGUgZGVmYXVsdCBvcHRpb25zIG9mIGV2ZXJ5XG4gICAgICogVnVlIGluc3RhbmNlLlxuICAgICAqL1xuXG4gICAgVnVlLm9wdGlvbnMgPSB7XG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgZWxlbWVudERpcmVjdGl2ZXM6IGVsZW1lbnREaXJlY3RpdmVzLFxuICAgICAgZmlsdGVyczogZmlsdGVycyxcbiAgICAgIHRyYW5zaXRpb25zOiB7fSxcbiAgICAgIGNvbXBvbmVudHM6IHt9LFxuICAgICAgcGFydGlhbHM6IHt9LFxuICAgICAgcmVwbGFjZTogdHJ1ZVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFeHBvc2UgdXNlZnVsIGludGVybmFsc1xuICAgICAqL1xuXG4gICAgVnVlLnV0aWwgPSB1dGlsO1xuICAgIFZ1ZS5jb25maWcgPSBjb25maWc7XG4gICAgVnVlLnNldCA9IHNldDtcbiAgICBWdWVbJ2RlbGV0ZSddID0gZGVsO1xuICAgIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZvbGxvd2luZyBhcmUgZXhwb3NlZCBmb3IgYWR2YW5jZWQgdXNhZ2UgLyBwbHVnaW5zXG4gICAgICovXG5cbiAgICBWdWUuY29tcGlsZXIgPSBjb21waWxlcjtcbiAgICBWdWUuRnJhZ21lbnRGYWN0b3J5ID0gRnJhZ21lbnRGYWN0b3J5O1xuICAgIFZ1ZS5pbnRlcm5hbERpcmVjdGl2ZXMgPSBpbnRlcm5hbERpcmVjdGl2ZXM7XG4gICAgVnVlLnBhcnNlcnMgPSB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgdGV4dDogdGV4dCxcbiAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcbiAgICAgIGRpcmVjdGl2ZTogZGlyZWN0aXZlLFxuICAgICAgZXhwcmVzc2lvbjogZXhwcmVzc2lvblxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAgICovXG5cbiAgICBWdWUuY2lkID0gMDtcbiAgICB2YXIgY2lkID0gMTtcblxuICAgIC8qKlxuICAgICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXh0ZW5kT3B0aW9uc1xuICAgICAqL1xuXG4gICAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uKGV4dGVuZE9wdGlvbnMpIHtcbiAgICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICAgIHZhciBpc0ZpcnN0RXh0ZW5kID0gU3VwZXIuY2lkID09PSAwO1xuICAgICAgaWYgKGlzRmlyc3RFeHRlbmQgJiYgZXh0ZW5kT3B0aW9ucy5fQ3Rvcikge1xuICAgICAgICByZXR1cm4gZXh0ZW5kT3B0aW9ucy5fQ3RvcjtcbiAgICAgIH1cbiAgICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICAgIGlmICgnZGV2ZWxvcG1lbnQnICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCEvXlthLXpBLVpdW1xcdy1dKiQvLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICB3YXJuKCdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArICdjYW4gb25seSBjb250YWluIGFscGhhbnVtZXJpYyBjaGFyYWNhdGVycyBhbmQgdGhlIGh5cGhlbi4nKTtcbiAgICAgICAgICBuYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIFN1YiA9IGNyZWF0ZUNsYXNzKG5hbWUgfHwgJ1Z1ZUNvbXBvbmVudCcpO1xuICAgICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhTdXBlci5vcHRpb25zLCBleHRlbmRPcHRpb25zKTtcbiAgICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuICAgICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb25cbiAgICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgICAgfSk7XG4gICAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgICAgfVxuICAgICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICAgIGlmIChpc0ZpcnN0RXh0ZW5kKSB7XG4gICAgICAgIGV4dGVuZE9wdGlvbnMuX0N0b3IgPSBTdWI7XG4gICAgICB9XG4gICAgICByZXR1cm4gU3ViO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHN1Yi1jbGFzcyBjb25zdHJ1Y3RvciB3aXRoIHRoZVxuICAgICAqIGdpdmVuIG5hbWUuIFRoaXMgZ2l2ZXMgdXMgbXVjaCBuaWNlciBvdXRwdXQgd2hlblxuICAgICAqIGxvZ2dpbmcgaW5zdGFuY2VzIGluIHRoZSBjb25zb2xlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNsYXNzKG5hbWUpIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLW5ldy1mdW5jICovXG4gICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdyZXR1cm4gZnVuY3Rpb24gJyArIGNsYXNzaWZ5KG5hbWUpICsgJyAob3B0aW9ucykgeyB0aGlzLl9pbml0KG9wdGlvbnMpIH0nKSgpO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1uZXctZnVuYyAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBsdWdpbiBzeXN0ZW1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW5cbiAgICAgKi9cblxuICAgIFZ1ZS51c2UgPSBmdW5jdGlvbihwbHVnaW4pIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHBsdWdpbi5pbnN0YWxsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHBsdWdpbi5pbnN0YWxsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IGEgZ2xvYmFsIG1peGluIGJ5IG1lcmdpbmcgaXQgaW50byB0aGUgZGVmYXVsdFxuICAgICAqIG9wdGlvbnMuXG4gICAgICovXG5cbiAgICBWdWUubWl4aW4gPSBmdW5jdGlvbihtaXhpbikge1xuICAgICAgVnVlLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoVnVlLm9wdGlvbnMsIG1peGluKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgICAqIHNpZ25hdHVyZTpcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAqIEBwYXJhbSB7Kn0gZGVmaW5pdGlvblxuICAgICAqL1xuXG4gICAgY29uZmlnLl9hc3NldFR5cGVzLmZvckVhY2goZnVuY3Rpb24odHlwZSkge1xuICAgICAgVnVlW3R5cGVdID0gZnVuY3Rpb24oaWQsIGRlZmluaXRpb24pIHtcbiAgICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKCdkZXZlbG9wbWVudCcgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIChjb21tb25UYWdSRS50ZXN0KGlkKSB8fCByZXNlcnZlZFRhZ1JFLnRlc3QoaWQpKSkge1xuICAgICAgICAgICAgICB3YXJuKCdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgKyAnaWQ6ICcgKyBpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgICBpZiAoIWRlZmluaXRpb24ubmFtZSkge1xuICAgICAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmluaXRpb24gPSBWdWUuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIGV4cG9zZSBpbnRlcm5hbCB0cmFuc2l0aW9uIEFQSVxuICAgIGV4dGVuZChWdWUudHJhbnNpdGlvbiwgdHJhbnNpdGlvbik7XG4gIH1cblxuICBpbnN0YWxsR2xvYmFsQVBJKFZ1ZSk7XG5cbiAgVnVlLnZlcnNpb24gPSAnMS4wLjI2JztcblxuICAvLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoJ2RldmVsb3BtZW50JyAhPT0gJ3Byb2R1Y3Rpb24nICYmIGluQnJvd3NlciAmJiAvQ2hyb21lXFwvXFxkKy8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCAwKTtcblxuICByZXR1cm4gVnVlO1xuXG59KSk7XG4iXX0=
