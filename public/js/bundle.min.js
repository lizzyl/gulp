function isAndroid(){return"Android"===$.ua.os.name}function isiOS(){return"iOS"===$.ua.os.name}function isWechat(){return"WeChat"===$.ua.browser.name}function isWeibo(){return/weibo/i.test($.ua.ua)}function digger(e){function t(e){return unescape(B(e))}function n(e){var t=typeof e;return"undefined"!==t}function i(e){return"function"==typeof e}function r(e){return"object"==typeof e}function o(e){return"string"==typeof e||e instanceof String}function a(e,t){return null===e||void 0===e||!t&&""===e||ne(e)&&0===e.length}function s(e,t){if(e&&t&&"object"==typeof t){var n;for(n in t)e[n]=t[n]}return e}function l(e,t,n,i,r,o){var a;n&&(a=new Date,a.setTime(a.getTime()+n)),P.cookie=e+"="+B(t)+(n?";expires="+a.toGMTString():"")+";path="+(i||"/")+(r?";domain="+r:"")+(o?";secure":"")}function u(e){var t=new RegExp("(^|;)[ ]*"+e+"=([^;]*)"),n=t.exec(P.cookie);return n?q(n[2]):null}function c(){if(!n(M.cookieEnabled)){var e=getCookieName("testcookie");return l(e,"1"),"1"===u(e)?"1":"0"}return M.cookieEnabled?"1":"0"}function f(){var e,t,r={pdf:"application/pdf",qt:"video/quicktime",realp:"audio/x-pn-realaudio-plugin",wma:"application/x-mplayer2",dir:"application/x-director",fla:"application/x-shockwave-flash",java:"application/x-java-vm",gears:"application/x-googlegears",ag:"application/x-silverlight"},o=F.devicePixelRatio||1;if(!new RegExp("MSIE").test(M.userAgent)){if(M.mimeTypes&&M.mimeTypes.length)for(e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t=M.mimeTypes[r[e]],D[e]=t&&t.enabledPlugin?"1":"0");"unknown"!=typeof navigator.javaEnabled&&n(M.javaEnabled)&&M.javaEnabled()&&(D.java="1"),i(F.GearsFactory)&&(D.gears="1"),D.cookie=c()}var a=parseInt(H.width,10)*o,s=parseInt(H.height,10)*o;D.res=parseInt(a,10)+"x"+parseInt(s,10)}function d(){return W((M.userAgent||"")+(M.platform||"")+JSON.stringify(D)+(new Date).getTime()+Math.random()).slice(0,16)}function h(e){var t=new RegExp("^(?:(?:https?|ftp):)/*(?:[^@]+@)?([^:/#]+)"),n=t.exec(e);return n?n[1]:e}function p(e){var n,i,r,o,a,s,l,u,c,f,d=function(e,t){return e<<t|e>>>32-t},h=function(e){var t,n,i="";for(t=7;t>=0;t--)n=e>>>4*t&15,i+=n.toString(16);return i},p=[],v=1732584193,m=4023233417,g=2562383102,y=271733878,b=3285377520,w=[];for(e=t(e),f=e.length,i=0;i<f-3;i+=4)r=e.charCodeAt(i)<<24|e.charCodeAt(i+1)<<16|e.charCodeAt(i+2)<<8|e.charCodeAt(i+3),w.push(r);switch(3&f){case 0:i=2147483648;break;case 1:i=e.charCodeAt(f-1)<<24|8388608;break;case 2:i=e.charCodeAt(f-2)<<24|e.charCodeAt(f-1)<<16|32768;break;case 3:i=e.charCodeAt(f-3)<<24|e.charCodeAt(f-2)<<16|e.charCodeAt(f-1)<<8|128}for(w.push(i);14!==(15&w.length);)w.push(0);for(w.push(f>>>29),w.push(f<<3&4294967295),n=0;n<w.length;n+=16){for(i=0;i<16;i++)p[i]=w[n+i];for(i=16;i<=79;i++)p[i]=d(p[i-3]^p[i-8]^p[i-14]^p[i-16],1);for(o=v,a=m,s=g,l=y,u=b,i=0;i<=19;i++)c=d(o,5)+(a&s|~a&l)+u+p[i]+1518500249&4294967295,u=l,l=s,s=d(a,30),a=o,o=c;for(i=20;i<=39;i++)c=d(o,5)+(a^s^l)+u+p[i]+1859775393&4294967295,u=l,l=s,s=d(a,30),a=o,o=c;for(i=40;i<=59;i++)c=d(o,5)+(a&s|a&l|s&l)+u+p[i]+2400959708&4294967295,u=l,l=s,s=d(a,30),a=o,o=c;for(i=60;i<=79;i++)c=d(o,5)+(a^s^l)+u+p[i]+3395469782&4294967295,u=l,l=s,s=d(a,30),a=o,o=c;v=v+o&4294967295,m=m+a&4294967295,g=g+s&4294967295,y=y+l&4294967295,b=b+u&4294967295}return c=h(v)+h(m)+h(g)+h(y)+h(b),c.toLowerCase()}function v(e,t,n,i){return e.addEventListener?(e.addEventListener(t,n,i),!0):e.attachEvent?e.attachEvent("on"+t,n):void(e["on"+t]=n)}function m(e){switch(e.type){case"click":S(e)}}function g(){var e="";try{e=F.top.document.referrer}catch(t){if(F.parent)try{e=F.parent.document.referrer}catch(t){e=""}}return""===e&&(e=P.referrer),e}function y(){var e={};for(var t in J)e[t]=B(u(J[t]));return e}function w(){var e={};for(var t in Y)e[t]=B(R.getItem(Y[t]));return e}function x(e){if(!e)return"";var t="";for(var n in e)t+=n+"="+B(e[n])+"&";return t.length>0?t.substring(0,t.length-1):t}function C(e,t,n){var i=new Image(1,1);i.onload=function(){j=0,"function"==typeof n&&n()},i.src=e+(e.indexOf("?")<0?"?":"")+t}function _(e){if(!window.DmallAnalysis.digger.config.overrideParams||!r(window.DmallAnalysis.digger.config.overrideParams))return e;for(var t in window.DmallAnalysis.digger.config.overrideParams)void 0!==e[t]&&(e[t]=window.DmallAnalysis.digger.config.overrideParams[t]);return e}function k(){var e={},t=u(I+"uuid"),n=24*X*60*60,i=u("cookie_id");return e=s(e,y()),e=s(e,K),R&&(e=s(e,w())),a(t)&&(l(I+"uuid",d(),n,G,z||h(F.location.href)),t=u(I+"uuid")),a(i)&&(i=Date.now()+String(t).substr(0,5),l("cookie_id",i,n,G,z||h(F.location.href))),e[I+"uuid"]=u(I+"uuid"),e.cookie_id=i,e.url=P.URL,e.refer_url=g(),e.pageTitle=Z,e}function A(e,t){if(!te)return _(e);var n={},i=te.paramOrder[t];if(!i)return _(e);for(var r=0;r<i.length;r++)n[i[r]]=e[i[r]];if(te&&te.disableDefaultParams)return _(n);for(var o in e)void 0===n[o]&&(n[o]=e[o]);return _(n)}function E(){window.DmallAnalysis||(window.DmallAnalysis={}),window.DmallAnalysis.digger||(window.DmallAnalysis.digger={}),window.DmallAnalysis.digger.config||(window.DmallAnalysis.digger.config={})}function T(e){E(),window.DmallAnalysis.digger.config.overrideParams=e}function N(){E();var e=k(),t={};e.action=$.pageVie;for(var n in Q)if("pageView"===n)if(ne(Q[n]))for(var i in Q[n])t=A(e,Q[n][i]),C(Q[n][i],x(t));else o(Q[n])&&(t=A(e,Q[n]),C(Q[n],x(t)))}function S(e){for(var t=(e.currentTarget||e.target,{}),n=k(),i={},r=0;r<ee.length;r++)if("click"===e.type){t=ee[r];break}if(t)if(t.extendParams&&(n=s(n,t.extendParams)),n.action=$.click,i=A(n,Q.click),ne(Q.click))for(var a in Q.click)C(Q.click[a],x(i));else o(Q[b])&&C(Q.click,x(i))}function O(){if(ee&&!(ee.length<1))for(var e=0;e<ee.length;e++){var t=ee[e].eventType,n=ee[e].selectors,i=[];if(!n)break;if(o(n)&&(i=i.concat(ie.find(n))),ne(n))for(var r=0;r<n.length;r++)i=i.concat(ie.find(n[r]));ee[e].currentTargets=i;for(var a=0;a<i.length;a++)v(i[a],t,m,!1)}}var j,$={pageView:"0",download:"1",click:"2",link:"3"},D={},L={},P=document,M=navigator,H=screen,F=window,R=localStorage,B=(F.performance||F.mozPerformance||F.msPerformance||F.webkitPerformance,F.encodeURIComponent),q=F.decodeURIComponent,I=(unescape,"_digger_"),W=p,V=(e&&e.disableUUID,e&&e.disablePageViewTrack),U=e&&e.disableAutoReport,z=e&&e.cookieDomain?e.cookieDomain:"",X=e&&e.expireDay?e.expireDay:365,G=e&&e.cookiePath?e.cookiePath:"/",J=e&&e.trackCookieKeys?e.trackCookieKeys:{},Y=e&&e.trackLocalStorageKeys?e.trackLocalStorageKeys:{},K=e&&e.extendParams?e.extendParams:{},Q=e&&e.trackerUrlMap?s(L,e.trackerUrlMap):L,Z=e&&e.trackerTitle?e.trackerTitle:P.title,ee=e&&e.eventConfigArr?e.eventConfigArr:[],te=!(!e||!e.strictMode)&&e.strictMode,ne="isArray"in Array?Array.isArray:function(e){return"[object Array]"===toString.call(e)},ie={htmlCollectionToArray:function(e){var t,n=[];if(!e||!e.length)return n;for(t=0;t<e.length;t++)n.push(e[t]);return n},find:function(e){if(!document.querySelectorAll||!e)return[];var t=document.querySelectorAll(e);return this.htmlCollectionToArray(t)},findMultiple:function(e){if(!e||!e.length)return[];var t,n,i=[];for(t=0;t<e.length;t++)n=this.find(e[t]),i=i.concat(n);return i=this.makeNodesUnique(i)},findNodesByTagName:function(e,t){if(!e||!t||!e.getElementsByTagName)return[];var n=e.getElementsByTagName(t);return this.htmlCollectionToArray(n)},makeNodesUnique:function(e){var t=[].concat(e);if(e.sort(function(e,n){if(e===n)return 0;var i=indexOfArray(t,e),r=indexOfArray(t,n);return i===r?0:i>r?-1:1}),e.length<=1)return e;var n,i=0,r=0,o=[];for(n=e[i++];n;)n===e[i]&&(r=o.push(i)),n=e[i++]||null;for(;r--;)e.splice(o[r],1);return e},getAttributeValueFromNode:function(e,t){if(this.hasNodeAttribute(e,t)){if(e&&e.getAttribute)return e.getAttribute(t);if(e&&e.attributes){var n=typeof e.attributes[t];if("undefined"!==n){if(e.attributes[t].value)return e.attributes[t].value;if(e.attributes[t].nodeValue)return e.attributes[t].nodeValue;var i,r=e.attributes;if(r){for(i=0;i<r.length;i++)if(r[i].nodeName===t)return r[i].nodeValue;return null}}}}},hasNodeAttributeWithValue:function(e,t){var n=this.getAttributeValueFromNode(e,t);return!!n},hasNodeAttribute:function(e,t){if(e&&e.hasAttribute)return e.hasAttribute(t);if(e&&e.attributes){var n=typeof e.attributes[t];return"undefined"!==n}return!1},hasNodeCssClass:function(e,t){if(e&&t&&e.className){var n="string"==typeof e.className?e.className.split(" "):[];if(-1!==indexOfArray(n,t))return!0}return!1},findNodesHavingAttribute:function(e,t,n){if(n||(n=[]),!e||!t)return n;var i=getChildrenFromNode(e);if(!i||!i.length)return n;var r,o;for(r=0;r<i.length;r++)o=i[r],this.hasNodeAttribute(o,t)&&n.push(o),n=this.findNodesHavingAttribute(o,t,n);return n},findFirstNodeHavingAttribute:function(e,t){if(e&&t){if(this.hasNodeAttribute(e,t))return e;var n=this.findNodesHavingAttribute(e,t);return n&&n.length?n[0]:void 0}},findFirstNodeHavingAttributeWithValue:function(e,t){if(e&&t){if(this.hasNodeAttributeWithValue(e,t))return e;var n=this.findNodesHavingAttribute(e,t);if(n&&n.length){var i;for(i=0;i<n.length;i++)if(this.getAttributeValueFromNode(n[i],t))return n[i]}}},findNodesHavingCssClass:function(e,t,n){if(n||(n=[]),!e||!t)return n;if(e.getElementsByClassName){var i=e.getElementsByClassName(t);return this.htmlCollectionToArray(i)}var r=getChildrenFromNode(e);if(!r||!r.length)return[];var o,a;for(o=0;o<r.length;o++)a=r[o],this.hasNodeCssClass(a,t)&&n.push(a),n=this.findNodesHavingCssClass(a,t,n);return n},findFirstNodeHavingClass:function(e,t){if(e&&t){if(this.hasNodeCssClass(e,t))return e;var n=this.findNodesHavingCssClass(e,t);return n&&n.length?n[0]:void 0}},isLinkElement:function(e){if(!e)return!1;var t=String(e.nodeName).toLowerCase(),n=["a","area"],i=indexOfArray(n,t);return i!==-1},setAnyAttribute:function(e,t,n){e&&t&&(e.setAttribute?e.setAttribute(t,n):e[t]=n)}};return E(),f(),O(),V||U||N(),window.DmallAnalysis.digger=Object.assign(window.DmallAnalysis.digger,{sendPageViewTracker:N,setOverrideParams:T}),window.DmallAnalysis}!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.axios=t():e.axios=t()}(this,function(){return function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function i(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var r=n(2),o=n(3),a=n(4),s=n(5),l=i(s);l.Axios=a,l.create=function(e){return i(r.merge(s,e))},l.Cancel=n(22),l.CancelToken=n(23),l.isCancel=n(19),l.all=function(e){return Promise.all(e)},l.spread=n(24),e.exports=l,e.exports.default=l},function(e,t,n){"use strict";function i(e){return"[object Array]"===_.call(e)}function r(e){return"[object ArrayBuffer]"===_.call(e)}function o(e){return"undefined"!=typeof FormData&&e instanceof FormData}function a(e){var t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer}function s(e){return"string"==typeof e}function l(e){return"number"==typeof e}function u(e){return"undefined"==typeof e}function c(e){return null!==e&&"object"==typeof e}function f(e){return"[object Date]"===_.call(e)}function d(e){return"[object File]"===_.call(e)}function h(e){return"[object Blob]"===_.call(e)}function p(e){return"[object Function]"===_.call(e)}function v(e){return c(e)&&p(e.pipe)}function m(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}function g(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}function y(){return"undefined"!=typeof window&&"undefined"!=typeof document&&"function"==typeof document.createElement}function b(e,t){if(null!==e&&"undefined"!=typeof e)if("object"==typeof e||i(e)||(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}function w(){function e(e,n){"object"==typeof t[n]&&"object"==typeof e?t[n]=w(t[n],e):t[n]=e}for(var t={},n=0,i=arguments.length;n<i;n++)b(arguments[n],e);return t}function x(e,t,n){return b(t,function(t,i){n&&"function"==typeof t?e[i]=C(t,n):e[i]=t}),e}var C=n(3),_=Object.prototype.toString;e.exports={isArray:i,isArrayBuffer:r,isFormData:o,isArrayBufferView:a,isString:s,isNumber:l,isObject:c,isUndefined:u,isDate:f,isFile:d,isBlob:h,isFunction:p,isStream:v,isURLSearchParams:m,isStandardBrowserEnv:y,forEach:b,merge:w,extend:x,trim:g}},function(e,t){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),i=0;i<n.length;i++)n[i]=arguments[i];return e.apply(t,n)}}},function(e,t,n){"use strict";function i(e){this.defaults=e,this.interceptors={request:new a,response:new a}}var r=n(5),o=n(2),a=n(16),s=n(17),l=n(20),u=n(21);i.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),e=o.merge(r,this.defaults,{method:"get"},e),e.baseURL&&!l(e.url)&&(e.url=u(e.baseURL,e.url));var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head"],function(e){i.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){i.prototype[e]=function(t,n,i){return this.request(o.merge(i||{},{method:e,url:t,data:n}))}}),e.exports=i},function(e,t,n){"use strict";function i(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}function r(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(7):"undefined"!=typeof process&&(e=n(7)),e}var o=n(2),a=n(6),s=/^\)\]\}',?\n/,l={"Content-Type":"application/x-www-form-urlencoded"},u={adapter:r(),transformRequest:[function(e,t){return a(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e){e=e.replace(s,"");try{e=JSON.parse(e)}catch(e){}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],function(e){u.headers[e]={}}),o.forEach(["post","put","patch"],function(e){u.headers[e]=o.merge(l)}),e.exports=u},function(e,t,n){"use strict";var i=n(2);e.exports=function(e,t){i.forEach(e,function(n,i){i!==t&&i.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[i])})}},function(e,t,n){"use strict";var i=n(2),r=n(8),o=n(11),a=n(12),s=n(13),l=n(9),u="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(14);e.exports=function(e){return new Promise(function(t,c){var f=e.data,d=e.headers;i.isFormData(f)&&delete d["Content-Type"];var h=new XMLHttpRequest,p="onreadystatechange",v=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||s(e.url)||(h=new window.XDomainRequest,p="onload",v=!0,h.onprogress=function(){},h.ontimeout=function(){}),e.auth){var m=e.auth.username||"",g=e.auth.password||"";d.Authorization="Basic "+u(m+":"+g)}if(h.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h[p]=function(){if(h&&(4===h.readyState||v)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in h?a(h.getAllResponseHeaders()):null,i=e.responseType&&"text"!==e.responseType?h.response:h.responseText,o={data:i,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:n,config:e,request:h};r(t,c,o),h=null}},h.onerror=function(){c(l("Network Error",e)),h=null},h.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED")),h=null},i.isStandardBrowserEnv()){var y=n(15),b=(e.withCredentials||s(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;b&&(d[e.xsrfHeaderName]=b)}if("setRequestHeader"in h&&i.forEach(d,function(e,t){"undefined"==typeof f&&"content-type"===t.toLowerCase()?delete d[t]:h.setRequestHeader(t,e)}),e.withCredentials&&(h.withCredentials=!0),e.responseType)try{h.responseType=e.responseType}catch(e){if("json"!==h.responseType)throw e}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){h&&(h.abort(),c(e),h=null)}),void 0===f&&(f=null),h.send(f)})}},function(e,t,n){"use strict";var i=n(9);e.exports=function(e,t,n){var r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(i("Request failed with status code "+n.status,n.config,null,n)):e(n)}},function(e,t,n){"use strict";var i=n(10);e.exports=function(e,t,n,r){var o=new Error(e);return i(o,t,n,r)}},function(e,t){"use strict";e.exports=function(e,t,n,i){return e.config=t,n&&(e.code=n),e.response=i,e}},function(e,t,n){"use strict";function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var r=n(2);e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var a=[];r.forEach(t,function(e,t){null!==e&&"undefined"!=typeof e&&(r.isArray(e)&&(t+="[]"),r.isArray(e)||(e=[e]),r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(i(t)+"="+i(e))}))}),o=a.join("&")}return o&&(e+=(e.indexOf("?")===-1?"?":"&")+o),e}},function(e,t,n){"use strict";var i=n(2);e.exports=function(e){var t,n,r,o={};return e?(i.forEach(e.split("\n"),function(e){r=e.indexOf(":"),t=i.trim(e.substr(0,r)).toLowerCase(),n=i.trim(e.substr(r+1)),t&&(o[t]=o[t]?o[t]+", "+n:n)}),o):o}},function(e,t,n){"use strict";var i=n(2);e.exports=i.isStandardBrowserEnv()?function(){function e(e){var t=e;return n&&(r.setAttribute("href",t),t=r.href),r.setAttribute("href",t),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}var t,n=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");return t=e(window.location.href),function(n){var r=i.isString(n)?e(n):n;return r.protocol===t.protocol&&r.host===t.host}}():function(){return function(){return!0}}()},function(e,t){"use strict";function n(){this.message="String contains an invalid character"}function i(e){for(var t,i,o=String(e),a="",s=0,l=r;o.charAt(0|s)||(l="=",s%1);a+=l.charAt(63&t>>8-s%1*8)){if(i=o.charCodeAt(s+=.75),i>255)throw new n;t=t<<8|i}return a}var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";n.prototype=new Error,n.prototype.code=5,n.prototype.name="InvalidCharacterError",e.exports=i},function(e,t,n){"use strict";var i=n(2);e.exports=i.isStandardBrowserEnv()?function(){return{write:function(e,t,n,r,o,a){var s=[];s.push(e+"="+encodeURIComponent(t)),i.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),i.isString(r)&&s.push("path="+r),i.isString(o)&&s.push("domain="+o),a===!0&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}()},function(e,t,n){"use strict";function i(){this.handlers=[]}var r=n(2);i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=i},function(e,t,n){"use strict";function i(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var r=n(2),o=n(18),a=n(19),s=n(5);e.exports=function(e){i(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]});var t=e.adapter||s.adapter;return t(e).then(function(t){return i(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return a(t)||(i(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var i=n(2);e.exports=function(e,t,n){return i.forEach(n,function(n){e=n(e,t)}),e}},function(e,t){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t){"use strict";e.exports=function(e,t){return e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,"")}},function(e,t){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,n){"use strict";function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}var r=n(22);i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e,t=new i(function(t){e=t});return{token:t,cancel:e}},e.exports=i},function(e,t){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}}])}),function(e){function t(e){return unescape(B(e))}function n(e){var t=typeof e;return"undefined"!==t}function i(e){return"function"==typeof e}function r(e){return"object"==typeof e}function o(e){return"string"==typeof e||e instanceof String}function a(e,t){return null===e||void 0===e||!t&&""===e||ne(e)&&0===e.length}function s(e,t){if(e&&t&&"object"==typeof t){var n;for(n in t)e[n]=t[n]}return e}function l(e,t,n,i,r,o){var a;n&&(a=new Date,a.setTime(a.getTime()+n)),P.cookie=e+"="+B(t)+(n?";expires="+a.toGMTString():"")+";path="+(i||"/")+(r?";domain="+r:"")+(o?";secure":"")}function u(e){var t=new RegExp("(^|;)[ ]*"+e+"=([^;]*)"),n=t.exec(P.cookie);return n?q(n[2]):null}function c(){if(!n(M.cookieEnabled)){var e=getCookieName("testcookie");return l(e,"1"),"1"===u(e)?"1":"0"}return M.cookieEnabled?"1":"0"}function f(){var e,t,r={pdf:"application/pdf",qt:"video/quicktime",realp:"audio/x-pn-realaudio-plugin",wma:"application/x-mplayer2",dir:"application/x-director",fla:"application/x-shockwave-flash",java:"application/x-java-vm",gears:"application/x-googlegears",ag:"application/x-silverlight"},o=F.devicePixelRatio||1;if(!new RegExp("MSIE").test(M.userAgent)){if(M.mimeTypes&&M.mimeTypes.length)for(e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t=M.mimeTypes[r[e]],D[e]=t&&t.enabledPlugin?"1":"0");"unknown"!=typeof navigator.javaEnabled&&n(M.javaEnabled)&&M.javaEnabled()&&(D.java="1"),i(F.GearsFactory)&&(D.gears="1"),D.cookie=c()}var a=parseInt(H.width,10)*o,s=parseInt(H.height,10)*o;D.res=parseInt(a,10)+"x"+parseInt(s,10)}function d(){return W((M.userAgent||"")+(M.platform||"")+JSON.stringify(D)+(new Date).getTime()+Math.random()).slice(0,16)}function h(e){var t=new RegExp("^(?:(?:https?|ftp):)/*(?:[^@]+@)?([^:/#]+)"),n=t.exec(e);return n?n[1]:e}function p(e){var n,i,r,o,a,s,l,u,c,f,d=function(e,t){return e<<t|e>>>32-t},h=function(e){var t,n,i="";for(t=7;t>=0;t--)n=e>>>4*t&15,i+=n.toString(16);return i},p=[],v=1732584193,m=4023233417,g=2562383102,y=271733878,b=3285377520,w=[];for(e=t(e),f=e.length,i=0;i<f-3;i+=4)r=e.charCodeAt(i)<<24|e.charCodeAt(i+1)<<16|e.charCodeAt(i+2)<<8|e.charCodeAt(i+3),w.push(r);switch(3&f){case 0:i=2147483648;break;case 1:i=e.charCodeAt(f-1)<<24|8388608;break;case 2:i=e.charCodeAt(f-2)<<24|e.charCodeAt(f-1)<<16|32768;break;case 3:i=e.charCodeAt(f-3)<<24|e.charCodeAt(f-2)<<16|e.charCodeAt(f-1)<<8|128}for(w.push(i);14!==(15&w.length);)w.push(0);for(w.push(f>>>29),w.push(f<<3&4294967295),n=0;n<w.length;n+=16){for(i=0;i<16;i++)p[i]=w[n+i];for(i=16;i<=79;i++)p[i]=d(p[i-3]^p[i-8]^p[i-14]^p[i-16],1);for(o=v,a=m,s=g,l=y,u=b,i=0;i<=19;i++)c=d(o,5)+(a&s|~a&l)+u+p[i]+1518500249&4294967295,u=l,l=s,s=d(a,30),a=o,o=c;for(i=20;i<=39;i++)c=d(o,5)+(a^s^l)+u+p[i]+1859775393&4294967295,u=l,l=s,s=d(a,30),a=o,o=c;for(i=40;i<=59;i++)c=d(o,5)+(a&s|a&l|s&l)+u+p[i]+2400959708&4294967295,u=l,l=s,s=d(a,30),a=o,o=c;for(i=60;i<=79;i++)c=d(o,5)+(a^s^l)+u+p[i]+3395469782&4294967295,u=l,l=s,s=d(a,30),a=o,o=c;v=v+o&4294967295,m=m+a&4294967295,g=g+s&4294967295,y=y+l&4294967295,b=b+u&4294967295}return c=h(v)+h(m)+h(g)+h(y)+h(b),c.toLowerCase()}function v(e,t,n,i){return e.addEventListener?(e.addEventListener(t,n,i),!0):e.attachEvent?e.attachEvent("on"+t,n):void(e["on"+t]=n)}function m(e){switch(e.type){case"click":S(e)}}function g(){var e="";try{e=F.top.document.referrer}catch(t){if(F.parent)try{e=F.parent.document.referrer}catch(t){e=""}}return""===e&&(e=P.referrer),e}function y(){var e={};for(var t in J)e[t]=B(u(J[t]));return e}function w(){var e={};for(var t in Y)e[t]=B(R.getItem(Y[t]));return e}function x(e){if(!e)return"";var t="";for(var n in e)t+=n+"="+B(e[n])+"&";return t.length>0?t.substring(0,t.length-1):t}function C(e,t,n){var i=new Image(1,1);i.onload=function(){j=0,"function"==typeof n&&n()},i.src=e+(e.indexOf("?")<0?"?":"")+t}function _(e){if(!window.DmallAnalysis.digger.config.overrideParams||!r(window.DmallAnalysis.digger.config.overrideParams))return e;for(var t in window.DmallAnalysis.digger.config.overrideParams)void 0!==e[t]&&(e[t]=window.DmallAnalysis.digger.config.overrideParams[t]);return e}function k(){var e={},t=u(I+"uuid"),n=24*X*60*60,i=u("cookie_id");return e=s(e,y()),e=s(e,K),R&&(e=s(e,w())),a(t)&&(l(I+"uuid",d(),n,G,z||h(F.location.href)),t=u(I+"uuid")),a(i)&&(i=Date.now()+String(t).substr(0,5),l("cookie_id",i,n,G,z||h(F.location.href))),e[I+"uuid"]=u(I+"uuid"),e.cookie_id=i,e.url=P.URL,e.refer_url=g(),e.pageTitle=Z,e}function A(e,t){if(!te)return _(e);var n={},i=te.paramOrder[t];if(!i)return _(e);for(var r=0;r<i.length;r++)n[i[r]]=e[i[r]];if(te&&te.disableDefaultParams)return _(n);for(var o in e)void 0===n[o]&&(n[o]=e[o]);return _(n)}function E(){window.DmallAnalysis||(window.DmallAnalysis={}),window.DmallAnalysis.digger||(window.DmallAnalysis.digger={}),window.DmallAnalysis.digger.config||(window.DmallAnalysis.digger.config={})}function T(e){E(),window.DmallAnalysis.digger.config.overrideParams=e}function N(){E();var e=k(),t={};e.action=$.pageVie;for(var n in Q)if("pageView"===n)if(ne(Q[n]))for(var i in Q[n])t=A(e,Q[n][i]),C(Q[n][i],x(t));else o(Q[n])&&(t=A(e,Q[n]),C(Q[n],x(t)))}function S(e){for(var t=(e.currentTarget||e.target,{}),n=k(),i={},r=0;r<ee.length;r++)if("click"===e.type){t=ee[r];break}if(t)if(t.extendParams&&(n=s(n,t.extendParams)),n.action=$.click,i=A(n,Q.click),ne(Q.click))for(var a in Q.click)C(Q.click[a],x(i));else o(Q[b])&&C(Q.click,x(i))}function O(){if(ee&&!(ee.length<1))for(var e=0;e<ee.length;e++){var t=ee[e].eventType,n=ee[e].selectors,i=[];if(!n)break;if(o(n)&&(i=i.concat(ie.find(n))),ne(n))for(var r=0;r<n.length;r++)i=i.concat(ie.find(n[r]));ee[e].currentTargets=i;for(var a=0;a<i.length;a++)v(i[a],t,m,!1)}}var j,$={pageView:"0",download:"1",click:"2",link:"3"},D={},L={},P=document,M=navigator,H=screen,F=window,R=localStorage,B=(F.performance||F.mozPerformance||F.msPerformance||F.webkitPerformance,F.encodeURIComponent),q=F.decodeURIComponent,I=(unescape,"_digger_"),W=p,V=(e&&e.disableUUID,e&&e.disablePageViewTrack),U=e&&e.disableAutoReport,z=e&&e.cookieDomain?e.cookieDomain:"",X=e&&e.expireDay?e.expireDay:365,G=e&&e.cookiePath?e.cookiePath:"/",J=e&&e.trackCookieKeys?e.trackCookieKeys:{},Y=e&&e.trackLocalStorageKeys?e.trackLocalStorageKeys:{},K=e&&e.extendParams?e.extendParams:{},Q=e&&e.trackerUrlMap?s(L,e.trackerUrlMap):L,Z=e&&e.trackerTitle?e.trackerTitle:P.title,ee=e&&e.eventConfigArr?e.eventConfigArr:[],te=!(!e||!e.strictMode)&&e.strictMode,ne="isArray"in Array?Array.isArray:function(e){return"[object Array]"===toString.call(e)},ie={htmlCollectionToArray:function(e){var t,n=[];if(!e||!e.length)return n;for(t=0;t<e.length;t++)n.push(e[t]);return n},find:function(e){if(!document.querySelectorAll||!e)return[];var t=document.querySelectorAll(e);return this.htmlCollectionToArray(t)},findMultiple:function(e){if(!e||!e.length)return[];var t,n,i=[];for(t=0;t<e.length;t++)n=this.find(e[t]),i=i.concat(n);return i=this.makeNodesUnique(i)},findNodesByTagName:function(e,t){if(!e||!t||!e.getElementsByTagName)return[];var n=e.getElementsByTagName(t);return this.htmlCollectionToArray(n)},makeNodesUnique:function(e){var t=[].concat(e);if(e.sort(function(e,n){if(e===n)return 0;var i=indexOfArray(t,e),r=indexOfArray(t,n);return i===r?0:i>r?-1:1}),e.length<=1)return e;var n,i=0,r=0,o=[];for(n=e[i++];n;)n===e[i]&&(r=o.push(i)),n=e[i++]||null;for(;r--;)e.splice(o[r],1);return e},getAttributeValueFromNode:function(e,t){if(this.hasNodeAttribute(e,t)){if(e&&e.getAttribute)return e.getAttribute(t);if(e&&e.attributes){var n=typeof e.attributes[t];if("undefined"!==n){if(e.attributes[t].value)return e.attributes[t].value;if(e.attributes[t].nodeValue)return e.attributes[t].nodeValue;var i,r=e.attributes;if(r){for(i=0;i<r.length;i++)if(r[i].nodeName===t)return r[i].nodeValue;return null}}}}},hasNodeAttributeWithValue:function(e,t){var n=this.getAttributeValueFromNode(e,t);return!!n},hasNodeAttribute:function(e,t){if(e&&e.hasAttribute)return e.hasAttribute(t);if(e&&e.attributes){var n=typeof e.attributes[t];return"undefined"!==n}return!1},hasNodeCssClass:function(e,t){if(e&&t&&e.className){var n="string"==typeof e.className?e.className.split(" "):[];if(-1!==indexOfArray(n,t))return!0}return!1},findNodesHavingAttribute:function(e,t,n){if(n||(n=[]),!e||!t)return n;var i=getChildrenFromNode(e);if(!i||!i.length)return n;var r,o;for(r=0;r<i.length;r++)o=i[r],this.hasNodeAttribute(o,t)&&n.push(o),n=this.findNodesHavingAttribute(o,t,n);return n},findFirstNodeHavingAttribute:function(e,t){if(e&&t){if(this.hasNodeAttribute(e,t))return e;var n=this.findNodesHavingAttribute(e,t);return n&&n.length?n[0]:void 0}},findFirstNodeHavingAttributeWithValue:function(e,t){if(e&&t){if(this.hasNodeAttributeWithValue(e,t))return e;var n=this.findNodesHavingAttribute(e,t);if(n&&n.length){var i;for(i=0;i<n.length;i++)if(this.getAttributeValueFromNode(n[i],t))return n[i]}}},findNodesHavingCssClass:function(e,t,n){if(n||(n=[]),!e||!t)return n;if(e.getElementsByClassName){var i=e.getElementsByClassName(t);return this.htmlCollectionToArray(i)}var r=getChildrenFromNode(e);if(!r||!r.length)return[];var o,a;for(o=0;o<r.length;o++)a=r[o],this.hasNodeCssClass(a,t)&&n.push(a),n=this.findNodesHavingCssClass(a,t,n);return n},findFirstNodeHavingClass:function(e,t){if(e&&t){if(this.hasNodeCssClass(e,t))return e;var n=this.findNodesHavingCssClass(e,t);return n&&n.length?n[0]:void 0}},isLinkElement:function(e){if(!e)return!1;var t=String(e.nodeName).toLowerCase(),n=["a","area"],i=indexOfArray(n,t);return i!==-1},setAnyAttribute:function(e,t,n){e&&t&&(e.setAttribute?e.setAttribute(t,n):e[t]=n)}};return E(),f(),O(),V||U||N(),window.DmallAnalysis.digger=Object.assign(window.DmallAnalysis.digger,{sendPageViewTracker:N,setOverrideParams:T}),window.DmallAnalysis}(_digger_),!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.ES6Promise=t()}(this,function(){"use strict";function e(e){return"function"==typeof e||"object"==typeof e&&null!==e}function t(e){return"function"==typeof e}function n(e){
z=e}function i(e){X=e}function r(){return function(){return process.nextTick(u)}}function o(){return"undefined"!=typeof U?function(){U(u)}:l()}function a(){var e=0,t=new Y(u),n=document.createTextNode("");return t.observe(n,{characterData:!0}),function(){n.data=e=++e%2}}function s(){var e=new MessageChannel;return e.port1.onmessage=u,function(){return e.port2.postMessage(0)}}function l(){var e=setTimeout;return function(){return e(u,1)}}function u(){for(var e=0;e<V;e+=2){var t=Z[e],n=Z[e+1];t(n),Z[e]=void 0,Z[e+1]=void 0}V=0}function c(){try{var e=require,t=e("vertx");return U=t.runOnLoop||t.runOnContext,o()}catch(e){return l()}}function f(e,t){var n=arguments,i=this,r=new this.constructor(h);void 0===r[te]&&$(r);var o=i._state;return o?!function(){var e=n[o-1];X(function(){return S(o,r,e,i._result)})}():A(i,r,e,t),r}function d(e){var t=this;if(e&&"object"==typeof e&&e.constructor===t)return e;var n=new t(h);return x(n,e),n}function h(){}function p(){return new TypeError("You cannot resolve a promise with itself")}function v(){return new TypeError("A promises callback cannot return that same promise.")}function m(e){try{return e.then}catch(e){return oe.error=e,oe}}function g(e,t,n,i){try{e.call(t,n,i)}catch(e){return e}}function y(e,t,n){X(function(e){var i=!1,r=g(n,t,function(n){i||(i=!0,t!==n?x(e,n):_(e,n))},function(t){i||(i=!0,k(e,t))},"Settle: "+(e._label||" unknown promise"));!i&&r&&(i=!0,k(e,r))},e)}function b(e,t){t._state===ie?_(e,t._result):t._state===re?k(e,t._result):A(t,void 0,function(t){return x(e,t)},function(t){return k(e,t)})}function w(e,n,i){n.constructor===e.constructor&&i===f&&n.constructor.resolve===d?b(e,n):i===oe?k(e,oe.error):void 0===i?_(e,n):t(i)?y(e,n,i):_(e,n)}function x(t,n){t===n?k(t,p()):e(n)?w(t,n,m(n)):_(t,n)}function C(e){e._onerror&&e._onerror(e._result),E(e)}function _(e,t){e._state===ne&&(e._result=t,e._state=ie,0!==e._subscribers.length&&X(E,e))}function k(e,t){e._state===ne&&(e._state=re,e._result=t,X(C,e))}function A(e,t,n,i){var r=e._subscribers,o=r.length;e._onerror=null,r[o]=t,r[o+ie]=n,r[o+re]=i,0===o&&e._state&&X(E,e)}function E(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var i=void 0,r=void 0,o=e._result,a=0;a<t.length;a+=3)i=t[a],r=t[a+n],i?S(n,i,r,o):r(o);e._subscribers.length=0}}function T(){this.error=null}function N(e,t){try{return e(t)}catch(e){return ae.error=e,ae}}function S(e,n,i,r){var o=t(i),a=void 0,s=void 0,l=void 0,u=void 0;if(o){if(a=N(i,r),a===ae?(u=!0,s=a.error,a=null):l=!0,n===a)return void k(n,v())}else a=r,l=!0;n._state!==ne||(o&&l?x(n,a):u?k(n,s):e===ie?_(n,a):e===re&&k(n,a))}function O(e,t){try{t(function(t){x(e,t)},function(t){k(e,t)})}catch(t){k(e,t)}}function j(){return se++}function $(e){e[te]=se++,e._state=void 0,e._result=void 0,e._subscribers=[]}function D(e,t){this._instanceConstructor=e,this.promise=new e(h),this.promise[te]||$(this.promise),W(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?_(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&_(this.promise,this._result))):k(this.promise,L())}function L(){return new Error("Array Methods must be provided an Array")}function P(e){return new D(this,e).promise}function M(e){var t=this;return new t(W(e)?function(n,i){for(var r=e.length,o=0;o<r;o++)t.resolve(e[o]).then(n,i)}:function(e,t){return t(new TypeError("You must pass an array to race."))})}function H(e){var t=this,n=new t(h);return k(n,e),n}function F(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function R(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function B(e){this[te]=j(),this._result=this._state=void 0,this._subscribers=[],h!==e&&("function"!=typeof e&&F(),this instanceof B?O(this,e):R())}function q(){var e=void 0;if("undefined"!=typeof global)e=global;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=B}var I=void 0;I=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)};var W=I,V=0,U=void 0,z=void 0,X=function(e,t){Z[V]=e,Z[V+1]=t,V+=2,2===V&&(z?z(u):ee())},G="undefined"!=typeof window?window:void 0,J=G||{},Y=J.MutationObserver||J.WebKitMutationObserver,K="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),Q="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Z=new Array(1e3),ee=void 0;ee=K?r():Y?a():Q?s():void 0===G&&"function"==typeof require?c():l();var te=Math.random().toString(36).substring(16),ne=void 0,ie=1,re=2,oe=new T,ae=new T,se=0;return D.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===ne&&n<e;n++)this._eachEntry(t[n],n)},D.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,i=n.resolve;if(i===d){var r=m(e);if(r===f&&e._state!==ne)this._settledAt(e._state,t,e._result);else if("function"!=typeof r)this._remaining--,this._result[t]=e;else if(n===B){var o=new n(h);w(o,e,r),this._willSettleAt(o,t)}else this._willSettleAt(new n(function(t){return t(e)}),t)}else this._willSettleAt(i(e),t)},D.prototype._settledAt=function(e,t,n){var i=this.promise;i._state===ne&&(this._remaining--,e===re?k(i,n):this._result[t]=n),0===this._remaining&&_(i,this._result)},D.prototype._willSettleAt=function(e,t){var n=this;A(e,void 0,function(e){return n._settledAt(ie,t,e)},function(e){return n._settledAt(re,t,e)})},B.all=P,B.race=M,B.resolve=d,B.reject=H,B._setScheduler=n,B._setAsap=i,B._asap=X,B.prototype={constructor:B,then:f,catch:function(e){return this.then(null,e)}},B.polyfill=q,B.Promise=B,B}),ES6Promise.polyfill(),!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=e.length,n=re.type(e);return"function"!==n&&!re.isWindow(e)&&(!(1!==e.nodeType||!t)||("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e))}function i(e,t,n){if(re.isFunction(t))return re.grep(e,function(e,i){return!!t.call(e,i,e)!==n});if(t.nodeType)return re.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(de.test(t))return re.filter(t,e,n);t=re.filter(t,e)}return re.grep(e,function(e){return re.inArray(e,t)>=0!==n})}function r(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function o(e){var t=we[e]={};return re.each(e.match(be)||[],function(e,n){t[n]=!0}),t}function a(){pe.addEventListener?(pe.removeEventListener("DOMContentLoaded",s,!1),e.removeEventListener("load",s,!1)):(pe.detachEvent("onreadystatechange",s),e.detachEvent("onload",s))}function s(){(pe.addEventListener||"load"===event.type||"complete"===pe.readyState)&&(a(),re.ready())}function l(e,t,n){if(void 0===n&&1===e.nodeType){var i="data-"+t.replace(Ae,"-$1").toLowerCase();if(n=e.getAttribute(i),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:ke.test(n)?re.parseJSON(n):n)}catch(e){}re.data(e,t,n)}else n=void 0}return n}function u(e){var t;for(t in e)if(("data"!==t||!re.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function c(e,t,n,i){if(re.acceptData(e)){var r,o,a=re.expando,s=e.nodeType,l=s?re.cache:e,u=s?e[a]:e[a]&&a;if(u&&l[u]&&(i||l[u].data)||void 0!==n||"string"!=typeof t)return u||(u=s?e[a]=G.pop()||re.guid++:a),l[u]||(l[u]=s?{}:{toJSON:re.noop}),("object"==typeof t||"function"==typeof t)&&(i?l[u]=re.extend(l[u],t):l[u].data=re.extend(l[u].data,t)),o=l[u],i||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[re.camelCase(t)]=n),"string"==typeof t?(r=o[t],null==r&&(r=o[re.camelCase(t)])):r=o,r}}function f(e,t,n){if(re.acceptData(e)){var i,r,o=e.nodeType,a=o?re.cache:e,s=o?e[re.expando]:re.expando;if(a[s]){if(t&&(i=n?a[s]:a[s].data)){re.isArray(t)?t=t.concat(re.map(t,re.camelCase)):t in i?t=[t]:(t=re.camelCase(t),t=t in i?[t]:t.split(" ")),r=t.length;for(;r--;)delete i[t[r]];if(n?!u(i):!re.isEmptyObject(i))return}(n||(delete a[s].data,u(a[s])))&&(o?re.cleanData([e],!0):ne.deleteExpando||a!=a.window?delete a[s]:a[s]=null)}}}function d(){return!0}function h(){return!1}function p(){try{return pe.activeElement}catch(e){}}function v(e){var t=Me.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function m(e,t){var n,i,r=0,o=typeof e.getElementsByTagName!==_e?e.getElementsByTagName(t||"*"):typeof e.querySelectorAll!==_e?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(i=n[r]);r++)!t||re.nodeName(i,t)?o.push(i):re.merge(o,m(i,t));return void 0===t||t&&re.nodeName(e,t)?re.merge([e],o):o}function g(e){Oe.test(e.type)&&(e.defaultChecked=e.checked)}function y(e,t){return re.nodeName(e,"table")&&re.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function b(e){return e.type=(null!==re.find.attr(e,"type"))+"/"+e.type,e}function w(e){var t=Xe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function x(e,t){for(var n,i=0;null!=(n=e[i]);i++)re._data(n,"globalEval",!t||re._data(t[i],"globalEval"))}function C(e,t){if(1===t.nodeType&&re.hasData(e)){var n,i,r,o=re._data(e),a=re._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(i=0,r=s[n].length;r>i;i++)re.event.add(t,n,s[n][i])}a.data&&(a.data=re.extend({},a.data))}}function _(e,t){var n,i,r;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!ne.noCloneEvent&&t[re.expando]){r=re._data(t);for(i in r.events)re.removeEvent(t,i,r.handle);t.removeAttribute(re.expando)}"script"===n&&t.text!==e.text?(b(t).text=e.text,w(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),ne.html5Clone&&e.innerHTML&&!re.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Oe.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}function k(t,n){var i,r=re(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(i=e.getDefaultComputedStyle(r[0]))?i.display:re.css(r[0],"display");return r.detach(),o}function A(e){var t=pe,n=Ze[e];return n||(n=k(e,t),"none"!==n&&n||(Qe=(Qe||re("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(Qe[0].contentWindow||Qe[0].contentDocument).document,t.write(),t.close(),n=k(e,t),Qe.detach()),Ze[e]=n),n}function E(e,t){return{get:function(){var n=e();if(null!=n)return n?void delete this.get:(this.get=t).apply(this,arguments)}}}function T(e,t){if(t in e)return t;for(var n=t.charAt(0).toUpperCase()+t.slice(1),i=t,r=dt.length;r--;)if(t=dt[r]+n,t in e)return t;return i}function N(e,t){for(var n,i,r,o=[],a=0,s=e.length;s>a;a++)i=e[a],i.style&&(o[a]=re._data(i,"olddisplay"),n=i.style.display,t?(o[a]||"none"!==n||(i.style.display=""),""===i.style.display&&Ne(i)&&(o[a]=re._data(i,"olddisplay",A(i.nodeName)))):(r=Ne(i),(n&&"none"!==n||!r)&&re._data(i,"olddisplay",r?n:re.css(i,"display"))));for(a=0;s>a;a++)i=e[a],i.style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?o[a]||"":"none"));return e}function S(e,t,n){var i=lt.exec(t);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):t}function O(e,t,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===t?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=re.css(e,n+Te[o],!0,r)),i?("content"===n&&(a-=re.css(e,"padding"+Te[o],!0,r)),"margin"!==n&&(a-=re.css(e,"border"+Te[o]+"Width",!0,r))):(a+=re.css(e,"padding"+Te[o],!0,r),"padding"!==n&&(a+=re.css(e,"border"+Te[o]+"Width",!0,r)));return a}function j(e,t,n){var i=!0,r="width"===t?e.offsetWidth:e.offsetHeight,o=et(e),a=ne.boxSizing&&"border-box"===re.css(e,"boxSizing",!1,o);if(0>=r||null==r){if(r=tt(e,t,o),(0>r||null==r)&&(r=e.style[t]),it.test(r))return r;i=a&&(ne.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+O(e,t,n||(a?"border":"content"),i,o)+"px"}function $(e,t,n,i,r){return new $.prototype.init(e,t,n,i,r)}function D(){return setTimeout(function(){ht=void 0}),ht=re.now()}function L(e,t){var n,i={height:e},r=0;for(t=t?1:0;4>r;r+=2-t)n=Te[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function P(e,t,n){for(var i,r=(bt[t]||[]).concat(bt["*"]),o=0,a=r.length;a>o;o++)if(i=r[o].call(n,t,e))return i}function M(e,t,n){var i,r,o,a,s,l,u,c,f=this,d={},h=e.style,p=e.nodeType&&Ne(e),v=re._data(e,"fxshow");n.queue||(s=re._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,re.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],u=re.css(e,"display"),c="none"===u?re._data(e,"olddisplay")||A(e.nodeName):u,"inline"===c&&"none"===re.css(e,"float")&&(ne.inlineBlockNeedsLayout&&"inline"!==A(e.nodeName)?h.zoom=1:h.display="inline-block")),n.overflow&&(h.overflow="hidden",ne.shrinkWrapBlocks()||f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(i in t)if(r=t[i],vt.exec(r)){if(delete t[i],o=o||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;p=!0}d[i]=v&&v[i]||re.style(e,i)}else u=void 0;if(re.isEmptyObject(d))"inline"===("none"===u?A(e.nodeName):u)&&(h.display=u);else{v?"hidden"in v&&(p=v.hidden):v=re._data(e,"fxshow",{}),o&&(v.hidden=!p),p?re(e).show():f.done(function(){re(e).hide()}),f.done(function(){var t;re._removeData(e,"fxshow");for(t in d)re.style(e,t,d[t])});for(i in d)a=P(p?v[i]:0,i,f),i in v||(v[i]=a.start,p&&(a.end=a.start,a.start="width"===i||"height"===i?1:0))}}function H(e,t){var n,i,r,o,a;for(n in e)if(i=re.camelCase(n),r=t[i],o=e[n],re.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),a=re.cssHooks[i],a&&"expand"in a){o=a.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}function F(e,t,n){var i,r,o=0,a=yt.length,s=re.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=ht||D(),n=Math.max(0,u.startTime+u.duration-t),i=n/u.duration||0,o=1-i,a=0,l=u.tweens.length;l>a;a++)u.tweens[a].run(o);return s.notifyWith(e,[u,o,n]),1>o&&l?n:(s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:re.extend({},t),opts:re.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:ht||D(),duration:n.duration,tweens:[],createTween:function(t,n){var i=re.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)u.tweens[n].run(1);return t?s.resolveWith(e,[u,t]):s.rejectWith(e,[u,t]),this}}),c=u.props;for(H(c,u.opts.specialEasing);a>o;o++)if(i=yt[o].call(u,e,c,u.opts))return i;return re.map(c,P,u),re.isFunction(u.opts.start)&&u.opts.start.call(e,u),re.fx.timer(re.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function R(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(be)||[];if(re.isFunction(n))for(;i=o[r++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function B(e,t,n,i){function r(s){var l;return o[s]=!0,re.each(e[s]||[],function(e,s){var u=s(t,n,i);return"string"!=typeof u||a||o[u]?a?!(l=u):void 0:(t.dataTypes.unshift(u),r(u),!1)}),l}var o={},a=e===Wt;return r(t.dataTypes[0])||!o["*"]&&r("*")}function q(e,t){var n,i,r=re.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((r[i]?e:n||(n={}))[i]=t[i]);return n&&re.extend(!0,e,n),e}function I(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in s)if(s[a]&&s[a].test(r)){l.unshift(a);break}if(l[0]in n)o=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){o=a;break}i||(i=a)}o=o||i}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function W(e,t,n,i){var r,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(a=u[l+" "+o]||u["* "+o],!a)for(r in u)if(s=r.split(" "),s[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){a===!0?a=u[r]:u[r]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}function V(e,t,n,i){var r;if(re.isArray(t))re.each(t,function(t,r){n||zt.test(e)?i(e,r):V(e+"["+("object"==typeof r?t:"")+"]",r,n,i)});else if(n||"object"!==re.type(t))i(e,t);else for(r in t)V(e+"["+r+"]",t[r],n,i)}function U(){try{return new e.XMLHttpRequest}catch(e){}}function z(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function X(e){return re.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}var G=[],J=G.slice,Y=G.concat,K=G.push,Q=G.indexOf,Z={},ee=Z.toString,te=Z.hasOwnProperty,ne={},ie="1.11.2",re=function(e,t){return new re.fn.init(e,t)},oe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ae=/^-ms-/,se=/-([\da-z])/gi,le=function(e,t){return t.toUpperCase()};re.fn=re.prototype={jquery:ie,constructor:re,selector:"",length:0,toArray:function(){return J.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:J.call(this)},pushStack:function(e){var t=re.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return re.each(this,e,t)},map:function(e){return this.pushStack(re.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(J.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:K,sort:G.sort,splice:G.splice},re.extend=re.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||re.isFunction(a)||(a={}),s===l&&(a=this,s--);l>s;s++)if(null!=(r=arguments[s]))for(i in r)e=a[i],n=r[i],a!==n&&(u&&n&&(re.isPlainObject(n)||(t=re.isArray(n)))?(t?(t=!1,o=e&&re.isArray(e)?e:[]):o=e&&re.isPlainObject(e)?e:{},a[i]=re.extend(u,o,n)):void 0!==n&&(a[i]=n));return a},re.extend({expando:"jQuery"+(ie+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===re.type(e)},isArray:Array.isArray||function(e){return"array"===re.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!re.isArray(e)&&e-parseFloat(e)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==re.type(e)||e.nodeType||re.isWindow(e))return!1;try{if(e.constructor&&!te.call(e,"constructor")&&!te.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(ne.ownLast)for(t in e)return te.call(e,t);for(t in e);return void 0===t||te.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?Z[ee.call(e)]||"object":typeof e},globalEval:function(t){t&&re.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(ae,"ms-").replace(se,le)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,i){var r,o=0,a=e.length,s=n(e);if(i){if(s)for(;a>o&&(r=t.apply(e[o],i),r!==!1);o++);else for(o in e)if(r=t.apply(e[o],i),r===!1)break}else if(s)for(;a>o&&(r=t.call(e[o],o,e[o]),r!==!1);o++);else for(o in e)if(r=t.call(e[o],o,e[o]),r===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(oe,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(n(Object(e))?re.merge(i,"string"==typeof e?[e]:e):K.call(i,e)),i},inArray:function(e,t,n){var i;if(t){if(Q)return Q.call(t,e,n);for(i=t.length,n=n?0>n?Math.max(0,i+n):n:0;i>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;n>i;)e[r++]=t[i++];if(n!==n)for(;void 0!==t[i];)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){for(var i,r=[],o=0,a=e.length,s=!n;a>o;o++)i=!t(e[o],o),i!==s&&r.push(e[o]);return r},map:function(e,t,i){var r,o=0,a=e.length,s=n(e),l=[];if(s)for(;a>o;o++)r=t(e[o],o,i),null!=r&&l.push(r);else for(o in e)r=t(e[o],o,i),null!=r&&l.push(r);return Y.apply([],l)},guid:1,proxy:function(e,t){var n,i,r;return"string"==typeof t&&(r=e[t],t=e,e=r),re.isFunction(e)?(n=J.call(arguments,2),i=function(){return e.apply(t||this,n.concat(J.call(arguments)))},i.guid=e.guid=e.guid||re.guid++,i):void 0},now:function(){return+new Date},support:ne}),re.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){Z["[object "+t+"]"]=t.toLowerCase()});var ue=function(e){function t(e,t,n,i){var r,o,a,s,l,u,f,h,p,v;if((t?t.ownerDocument||t:B)!==$&&j(t),t=t||$,n=n||[],s=t.nodeType,"string"!=typeof e||!e||1!==s&&9!==s&&11!==s)return n;if(!i&&L){if(11!==s&&(r=ye.exec(e)))if(a=r[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&F(t,o)&&o.id===a)return n.push(o),n}else{if(r[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((a=r[3])&&x.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(a)),n}if(x.qsa&&(!P||!P.test(e))){if(h=f=R,p=t,v=1!==s&&e,1===s&&"object"!==t.nodeName.toLowerCase()){for(u=A(e),(f=t.getAttribute("id"))?h=f.replace(we,"\\$&"):t.setAttribute("id",h),h="[id='"+h+"'] ",l=u.length;l--;)u[l]=h+d(u[l]);p=be.test(e)&&c(t.parentNode)||t,v=u.join(",")}if(v)try{return Q.apply(n,p.querySelectorAll(v)),n}catch(e){}finally{f||t.removeAttribute("id")}}}return T(e.replace(le,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>C.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[R]=!0,e}function r(e){var t=$.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),i=e.length;i--;)C.attrHandle[n[i]]=t}function a(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||X)-(~e.sourceIndex||X);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function u(e){return i(function(t){return t=+t,i(function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function d(e){for(var t=0,n=e.length,i="";n>t;t++)i+=e[t].value;return i}function h(e,t,n){var i=t.dir,r=n&&"parentNode"===i,o=I++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||r)return e(t,n,o)}:function(t,n,a){var s,l,u=[q,o];if(a){for(;t=t[i];)if((1===t.nodeType||r)&&e(t,n,a))return!0}else for(;t=t[i];)if(1===t.nodeType||r){if(l=t[R]||(t[R]={}),(s=l[i])&&s[0]===q&&s[1]===o)return u[2]=s[2];if(l[i]=u,u[2]=e(t,n,a))return!0}}}function p(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function v(e,n,i){for(var r=0,o=n.length;o>r;r++)t(e,n[r],i);return i}function m(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,u=null!=t;l>s;s++)(o=e[s])&&(!n||n(o,i,r))&&(a.push(o),u&&t.push(s));return a}function g(e,t,n,r,o,a){return r&&!r[R]&&(r=g(r)),o&&!o[R]&&(o=g(o,a)),i(function(i,a,s,l){var u,c,f,d=[],h=[],p=a.length,g=i||v(t||"*",s.nodeType?[s]:s,[]),y=!e||!i&&t?g:m(g,d,e,s,l),b=n?o||(i?e:p||r)?[]:a:y;if(n&&n(y,b,s,l),r)for(u=m(b,h),r(u,[],s,l),c=u.length;c--;)(f=u[c])&&(b[h[c]]=!(y[h[c]]=f));if(i){if(o||e){if(o){for(u=[],c=b.length;c--;)(f=b[c])&&u.push(y[c]=f);o(null,b=[],u,l)}for(c=b.length;c--;)(f=b[c])&&(u=o?ee(i,f):d[c])>-1&&(i[u]=!(a[u]=f))}}else b=m(b===a?b.splice(p,b.length):b),o?o(null,a,b,l):Q.apply(a,b)})}function y(e){for(var t,n,i,r=e.length,o=C.relative[e[0].type],a=o||C.relative[" "],s=o?1:0,l=h(function(e){return e===t},a,!0),u=h(function(e){return ee(t,e)>-1},a,!0),c=[function(e,n,i){var r=!o&&(i||n!==N)||((t=n).nodeType?l(e,n,i):u(e,n,i));return t=null,r}];r>s;s++)if(n=C.relative[e[s].type])c=[h(p(c),n)];else{if(n=C.filter[e[s].type].apply(null,e[s].matches),n[R]){for(i=++s;r>i&&!C.relative[e[i].type];i++);return g(s>1&&p(c),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(le,"$1"),n,i>s&&y(e.slice(s,i)),r>i&&y(e=e.slice(i)),r>i&&d(e))}c.push(n)}return p(c)}function b(e,n){var r=n.length>0,o=e.length>0,a=function(i,a,s,l,u){var c,f,d,h=0,p="0",v=i&&[],g=[],y=N,b=i||o&&C.find.TAG("*",u),w=q+=null==y?1:Math.random()||.1,x=b.length;for(u&&(N=a!==$&&a);p!==x&&null!=(c=b[p]);p++){if(o&&c){for(f=0;d=e[f++];)if(d(c,a,s)){l.push(c);break}u&&(q=w)}r&&((c=!d&&c)&&h--,i&&v.push(c))}if(h+=p,r&&p!==h){for(f=0;d=n[f++];)d(v,g,a,s);if(i){if(h>0)for(;p--;)v[p]||g[p]||(g[p]=Y.call(l));g=m(g)}Q.apply(l,g),u&&!i&&g.length>0&&h+n.length>1&&t.uniqueSort(l)}return u&&(q=w,N=y),v};return r?i(a):a}var w,x,C,_,k,A,E,T,N,S,O,j,$,D,L,P,M,H,F,R="sizzle"+1*new Date,B=e.document,q=0,I=0,W=n(),V=n(),U=n(),z=function(e,t){return e===t&&(O=!0),0},X=1<<31,G={}.hasOwnProperty,J=[],Y=J.pop,K=J.push,Q=J.push,Z=J.slice,ee=function(e,t){for(var n=0,i=e.length;i>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",ie="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",re=ie.replace("w","w#"),oe="\\["+ne+"*("+ie+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",ae=":("+ie+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+oe+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),le=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),fe=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),de=new RegExp(ae),he=new RegExp("^"+re+"$"),pe={ID:new RegExp("^#("+ie+")"),CLASS:new RegExp("^\\.("+ie+")"),TAG:new RegExp("^("+ie.replace("w","w*")+")"),ATTR:new RegExp("^"+oe),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},ve=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ge=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,be=/[+~]/,we=/'|\\/g,xe=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),Ce=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},_e=function(){j()};try{Q.apply(J=Z.call(B.childNodes),B.childNodes),J[B.childNodes.length].nodeType}catch(e){Q={apply:J.length?function(e,t){K.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}x=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},j=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:B;return i!==$&&9===i.nodeType&&i.documentElement?($=i,D=i.documentElement,n=i.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",_e,!1):n.attachEvent&&n.attachEvent("onunload",_e)),L=!k(i),x.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=r(function(e){return e.appendChild(i.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=ge.test(i.getElementsByClassName),x.getById=r(function(e){return D.appendChild(e).id=R,!i.getElementsByName||!i.getElementsByName(R).length}),x.getById?(C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&L){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},C.filter.ID=function(e){var t=e.replace(xe,Ce);return function(e){return e.getAttribute("id")===t}}):(delete C.find.ID,C.filter.ID=function(e){var t=e.replace(xe,Ce);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),C.find.TAG=x.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},C.find.CLASS=x.getElementsByClassName&&function(e,t){return L?t.getElementsByClassName(e):void 0},M=[],P=[],(x.qsa=ge.test(i.querySelectorAll))&&(r(function(e){D.appendChild(e).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||P.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+R+"-]").length||P.push("~="),e.querySelectorAll(":checked").length||P.push(":checked"),e.querySelectorAll("a#"+R+"+*").length||P.push(".#.+[+~]")}),r(function(e){var t=i.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&P.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||P.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),P.push(",.*:")})),(x.matchesSelector=ge.test(H=D.matches||D.webkitMatchesSelector||D.mozMatchesSelector||D.oMatchesSelector||D.msMatchesSelector))&&r(function(e){x.disconnectedMatch=H.call(e,"div"),H.call(e,"[s!='']:x"),M.push("!=",ae)}),P=P.length&&new RegExp(P.join("|")),M=M.length&&new RegExp(M.join("|")),t=ge.test(D.compareDocumentPosition),F=t||ge.test(D.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},z=t?function(e,t){if(e===t)return O=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===i||e.ownerDocument===B&&F(B,e)?-1:t===i||t.ownerDocument===B&&F(B,t)?1:S?ee(S,e)-ee(S,t):0:4&n?-1:1)}:function(e,t){if(e===t)return O=!0,0;var n,r=0,o=e.parentNode,s=t.parentNode,l=[e],u=[t];if(!o||!s)return e===i?-1:t===i?1:o?-1:s?1:S?ee(S,e)-ee(S,t):0;if(o===s)return a(e,t);for(n=e;n=n.parentNode;)l.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;l[r]===u[r];)r++;return r?a(l[r],u[r]):l[r]===B?-1:u[r]===B?1:0},i):$},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==$&&j(e),n=n.replace(fe,"='$1']"),!(!x.matchesSelector||!L||M&&M.test(n)||P&&P.test(n)))try{var i=H.call(e,n);if(i||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,$,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==$&&j(e),F(e,t)},t.attr=function(e,t){
(e.ownerDocument||e)!==$&&j(e);var n=C.attrHandle[t.toLowerCase()],i=n&&G.call(C.attrHandle,t.toLowerCase())?n(e,t,!L):void 0;return void 0!==i?i:x.attributes||!L?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if(O=!x.detectDuplicates,S=!x.sortStable&&e.slice(0),e.sort(z),O){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return S=null,e},_=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=_(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=_(t);return n},C=t.selectors={cacheLength:50,createPseudo:i,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,Ce),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,Ce),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=A(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,Ce).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var o=t.attr(r,e);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(se," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,f,d,h,p,v=o!==a?"nextSibling":"previousSibling",m=t.parentNode,g=s&&t.nodeName.toLowerCase(),y=!l&&!s;if(m){if(o){for(;v;){for(f=t;f=f[v];)if(s?f.nodeName.toLowerCase()===g:1===f.nodeType)return!1;p=v="only"===e&&!p&&"nextSibling"}return!0}if(p=[a?m.firstChild:m.lastChild],a&&y){for(c=m[R]||(m[R]={}),u=c[e]||[],h=u[0]===q&&u[1],d=u[0]===q&&u[2],f=h&&m.childNodes[h];f=++h&&f&&f[v]||(d=h=0)||p.pop();)if(1===f.nodeType&&++d&&f===t){c[e]=[q,h,d];break}}else if(y&&(u=(t[R]||(t[R]={}))[e])&&u[0]===q)d=u[1];else for(;(f=++h&&f&&f[v]||(d=h=0)||p.pop())&&((s?f.nodeName.toLowerCase()!==g:1!==f.nodeType)||!++d||(y&&((f[R]||(f[R]={}))[e]=[q,d]),f!==t)););return d-=r,d===i||d%i===0&&d/i>=0}}},PSEUDO:function(e,n){var r,o=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[R]?o(n):o.length>1?(r=[e,e,"",n],C.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=o(e,n),a=r.length;a--;)i=ee(e,r[a]),e[i]=!(t[i]=r[a])}):function(e){return o(e,0,r)}):o}},pseudos:{not:i(function(e){var t=[],n=[],r=E(e.replace(le,"$1"));return r[R]?i(function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(xe,Ce),function(t){return(t.textContent||t.innerText||_(t)).indexOf(e)>-1}}),lang:i(function(e){return he.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xe,Ce).toLowerCase(),function(t){var n;do if(n=L?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===D},focus:function(e){return e===$.activeElement&&(!$.hasFocus||$.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return ve.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[0>n?n+t:n]}),even:u(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var i=0>n?n+t:n;--i>=0;)e.push(i);return e}),gt:u(function(e,t,n){for(var i=0>n?n+t:n;++i<t;)e.push(i);return e})}},C.pseudos.nth=C.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[w]=s(w);for(w in{submit:!0,reset:!0})C.pseudos[w]=l(w);return f.prototype=C.filters=C.pseudos,C.setFilters=new f,A=t.tokenize=function(e,n){var i,r,o,a,s,l,u,c=V[e+" "];if(c)return n?0:c.slice(0);for(s=e,l=[],u=C.preFilter;s;){(!i||(r=ue.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),i=!1,(r=ce.exec(s))&&(i=r.shift(),o.push({value:i,type:r[0].replace(le," ")}),s=s.slice(i.length));for(a in C.filter)!(r=pe[a].exec(s))||u[a]&&!(r=u[a](r))||(i=r.shift(),o.push({value:i,type:a,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?t.error(e):V(e,l).slice(0)},E=t.compile=function(e,t){var n,i=[],r=[],o=U[e+" "];if(!o){for(t||(t=A(e)),n=t.length;n--;)o=y(t[n]),o[R]?i.push(o):r.push(o);o=U(e,b(r,i)),o.selector=e}return o},T=t.select=function(e,t,n,i){var r,o,a,s,l,u="function"==typeof e&&e,f=!i&&A(e=u.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&x.getById&&9===t.nodeType&&L&&C.relative[o[1].type]){if(t=(C.find.ID(a.matches[0].replace(xe,Ce),t)||[])[0],!t)return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=pe.needsContext.test(e)?0:o.length;r--&&(a=o[r],!C.relative[s=a.type]);)if((l=C.find[s])&&(i=l(a.matches[0].replace(xe,Ce),be.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(r,1),e=i.length&&d(o),!e)return Q.apply(n,i),n;break}}return(u||E(e,f))(i,t,!L,n,be.test(e)&&c(t.parentNode)||t),n},x.sortStable=R.split("").sort(z).join("")===R,x.detectDuplicates=!!O,j(),x.sortDetached=r(function(e){return 1&e.compareDocumentPosition($.createElement("div"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var i;return n?void 0:e[t]===!0?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);re.find=ue,re.expr=ue.selectors,re.expr[":"]=re.expr.pseudos,re.unique=ue.uniqueSort,re.text=ue.getText,re.isXMLDoc=ue.isXML,re.contains=ue.contains;var ce=re.expr.match.needsContext,fe=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,de=/^.[^:#\[\.,]*$/;re.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?re.find.matchesSelector(i,e)?[i]:[]:re.find.matches(e,re.grep(t,function(e){return 1===e.nodeType}))},re.fn.extend({find:function(e){var t,n=[],i=this,r=i.length;if("string"!=typeof e)return this.pushStack(re(e).filter(function(){for(t=0;r>t;t++)if(re.contains(i[t],this))return!0}));for(t=0;r>t;t++)re.find(e,i[t],n);return n=this.pushStack(r>1?re.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&ce.test(e)?re(e):e||[],!1).length}});var he,pe=e.document,ve=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,me=re.fn.init=function(e,t){var n,i;if(!e)return this;if("string"==typeof e){if(n="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:ve.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||he).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof re?t[0]:t,re.merge(this,re.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:pe,!0)),fe.test(n[1])&&re.isPlainObject(t))for(n in t)re.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}if(i=pe.getElementById(n[2]),i&&i.parentNode){if(i.id!==n[2])return he.find(e);this.length=1,this[0]=i}return this.context=pe,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):re.isFunction(e)?"undefined"!=typeof he.ready?he.ready(e):e(re):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),re.makeArray(e,this))};me.prototype=re.fn,he=re(pe);var ge=/^(?:parents|prev(?:Until|All))/,ye={children:!0,contents:!0,next:!0,prev:!0};re.extend({dir:function(e,t,n){for(var i=[],r=e[t];r&&9!==r.nodeType&&(void 0===n||1!==r.nodeType||!re(r).is(n));)1===r.nodeType&&i.push(r),r=r[t];return i},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),re.fn.extend({has:function(e){var t,n=re(e,this),i=n.length;return this.filter(function(){for(t=0;i>t;t++)if(re.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,i=0,r=this.length,o=[],a=ce.test(e)||"string"!=typeof e?re(e,t||this.context):0;r>i;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&re.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?re.unique(o):o)},index:function(e){return e?"string"==typeof e?re.inArray(this[0],re(e)):re.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(re.unique(re.merge(this.get(),re(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),re.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return re.dir(e,"parentNode")},parentsUntil:function(e,t,n){return re.dir(e,"parentNode",n)},next:function(e){return r(e,"nextSibling")},prev:function(e){return r(e,"previousSibling")},nextAll:function(e){return re.dir(e,"nextSibling")},prevAll:function(e){return re.dir(e,"previousSibling")},nextUntil:function(e,t,n){return re.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return re.dir(e,"previousSibling",n)},siblings:function(e){return re.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return re.sibling(e.firstChild)},contents:function(e){return re.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:re.merge([],e.childNodes)}},function(e,t){re.fn[e]=function(n,i){var r=re.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=re.filter(i,r)),this.length>1&&(ye[e]||(r=re.unique(r)),ge.test(e)&&(r=r.reverse())),this.pushStack(r)}});var be=/\S+/g,we={};re.Callbacks=function(e){e="string"==typeof e?we[e]||o(e):re.extend({},e);var t,n,i,r,a,s,l=[],u=!e.once&&[],c=function(o){for(n=e.memory&&o,i=!0,a=s||0,s=0,r=l.length,t=!0;l&&r>a;a++)if(l[a].apply(o[0],o[1])===!1&&e.stopOnFalse){n=!1;break}t=!1,l&&(u?u.length&&c(u.shift()):n?l=[]:f.disable())},f={add:function(){if(l){var i=l.length;!function t(n){re.each(n,function(n,i){var r=re.type(i);"function"===r?e.unique&&f.has(i)||l.push(i):i&&i.length&&"string"!==r&&t(i)})}(arguments),t?r=l.length:n&&(s=i,c(n))}return this},remove:function(){return l&&re.each(arguments,function(e,n){for(var i;(i=re.inArray(n,l,i))>-1;)l.splice(i,1),t&&(r>=i&&r--,a>=i&&a--)}),this},has:function(e){return e?re.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],r=0,this},disable:function(){return l=u=n=void 0,this},disabled:function(){return!l},lock:function(){return u=void 0,n||f.disable(),this},locked:function(){return!u},fireWith:function(e,n){return!l||i&&!u||(n=n||[],n=[e,n.slice?n.slice():n],t?u.push(n):c(n)),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!i}};return f},re.extend({Deferred:function(e){var t=[["resolve","done",re.Callbacks("once memory"),"resolved"],["reject","fail",re.Callbacks("once memory"),"rejected"],["notify","progress",re.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var e=arguments;return re.Deferred(function(n){re.each(t,function(t,o){var a=re.isFunction(e[t])&&e[t];r[o[1]](function(){var e=a&&a.apply(this,arguments);e&&re.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===i?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?re.extend(e,i):i}},r={};return i.pipe=i.then,re.each(t,function(e,o){var a=o[2],s=o[3];i[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=a.fireWith}),i.promise(r),e&&e.call(r,r),r},when:function(e){var t,n,i,r=0,o=J.call(arguments),a=o.length,s=1!==a||e&&re.isFunction(e.promise)?a:0,l=1===s?e:re.Deferred(),u=function(e,n,i){return function(r){n[e]=this,i[e]=arguments.length>1?J.call(arguments):r,i===t?l.notifyWith(n,i):--s||l.resolveWith(n,i)}};if(a>1)for(t=new Array(a),n=new Array(a),i=new Array(a);a>r;r++)o[r]&&re.isFunction(o[r].promise)?o[r].promise().done(u(r,i,o)).fail(l.reject).progress(u(r,n,t)):--s;return s||l.resolveWith(i,o),l.promise()}});var xe;re.fn.ready=function(e){return re.ready.promise().done(e),this},re.extend({isReady:!1,readyWait:1,holdReady:function(e){e?re.readyWait++:re.ready(!0)},ready:function(e){if(e===!0?!--re.readyWait:!re.isReady){if(!pe.body)return setTimeout(re.ready);re.isReady=!0,e!==!0&&--re.readyWait>0||(xe.resolveWith(pe,[re]),re.fn.triggerHandler&&(re(pe).triggerHandler("ready"),re(pe).off("ready")))}}}),re.ready.promise=function(t){if(!xe)if(xe=re.Deferred(),"complete"===pe.readyState)setTimeout(re.ready);else if(pe.addEventListener)pe.addEventListener("DOMContentLoaded",s,!1),e.addEventListener("load",s,!1);else{pe.attachEvent("onreadystatechange",s),e.attachEvent("onload",s);var n=!1;try{n=null==e.frameElement&&pe.documentElement}catch(e){}n&&n.doScroll&&!function e(){if(!re.isReady){try{n.doScroll("left")}catch(t){return setTimeout(e,50)}a(),re.ready()}}()}return xe.promise(t)};var Ce,_e="undefined";for(Ce in re(ne))break;ne.ownLast="0"!==Ce,ne.inlineBlockNeedsLayout=!1,re(function(){var e,t,n,i;n=pe.getElementsByTagName("body")[0],n&&n.style&&(t=pe.createElement("div"),i=pe.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),typeof t.style.zoom!==_e&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",ne.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(i))}),function(){var e=pe.createElement("div");if(null==ne.deleteExpando){ne.deleteExpando=!0;try{delete e.test}catch(e){ne.deleteExpando=!1}}e=null}(),re.acceptData=function(e){var t=re.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||t!==!0&&e.getAttribute("classid")===t)};var ke=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ae=/([A-Z])/g;re.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?re.cache[e[re.expando]]:e[re.expando],!!e&&!u(e)},data:function(e,t,n){return c(e,t,n)},removeData:function(e,t){return f(e,t)},_data:function(e,t,n){return c(e,t,n,!0)},_removeData:function(e,t){return f(e,t,!0)}}),re.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=re.data(o),1===o.nodeType&&!re._data(o,"parsedAttrs"))){for(n=a.length;n--;)a[n]&&(i=a[n].name,0===i.indexOf("data-")&&(i=re.camelCase(i.slice(5)),l(o,i,r[i])));re._data(o,"parsedAttrs",!0)}return r}return"object"==typeof e?this.each(function(){re.data(this,e)}):arguments.length>1?this.each(function(){re.data(this,e,t)}):o?l(o,e,re.data(o,e)):void 0},removeData:function(e){return this.each(function(){re.removeData(this,e)})}}),re.extend({queue:function(e,t,n){var i;return e?(t=(t||"fx")+"queue",i=re._data(e,t),n&&(!i||re.isArray(n)?i=re._data(e,t,re.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=re.queue(e,t),i=n.length,r=n.shift(),o=re._queueHooks(e,t),a=function(){re.dequeue(e,t)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,a,o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return re._data(e,n)||re._data(e,n,{empty:re.Callbacks("once memory").add(function(){re._removeData(e,t+"queue"),re._removeData(e,n)})})}}),re.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?re.queue(this[0],e):void 0===t?this:this.each(function(){var n=re.queue(this,e,t);re._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&re.dequeue(this,e)})},dequeue:function(e){return this.each(function(){re.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=re.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=re._data(o[a],e+"queueHooks"),n&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var Ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Te=["Top","Right","Bottom","Left"],Ne=function(e,t){return e=t||e,"none"===re.css(e,"display")||!re.contains(e.ownerDocument,e)},Se=re.access=function(e,t,n,i,r,o,a){var s=0,l=e.length,u=null==n;if("object"===re.type(n)){r=!0;for(s in n)re.access(e,t,s,n[s],!0,o,a)}else if(void 0!==i&&(r=!0,re.isFunction(i)||(a=!0),u&&(a?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(re(e),n)})),t))for(;l>s;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:u?t.call(e):l?t(e[0],n):o},Oe=/^(?:checkbox|radio)$/i;!function(){var e=pe.createElement("input"),t=pe.createElement("div"),n=pe.createDocumentFragment();if(t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ne.leadingWhitespace=3===t.firstChild.nodeType,ne.tbody=!t.getElementsByTagName("tbody").length,ne.htmlSerialize=!!t.getElementsByTagName("link").length,ne.html5Clone="<:nav></:nav>"!==pe.createElement("nav").cloneNode(!0).outerHTML,e.type="checkbox",e.checked=!0,n.appendChild(e),ne.appendChecked=e.checked,t.innerHTML="<textarea>x</textarea>",ne.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,n.appendChild(t),t.innerHTML="<input type='radio' checked='checked' name='t'/>",ne.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,ne.noCloneEvent=!0,t.attachEvent&&(t.attachEvent("onclick",function(){ne.noCloneEvent=!1}),t.cloneNode(!0).click()),null==ne.deleteExpando){ne.deleteExpando=!0;try{delete t.test}catch(e){ne.deleteExpando=!1}}}(),function(){var t,n,i=pe.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(ne[t+"Bubbles"]=n in e)||(i.setAttribute(n,"t"),ne[t+"Bubbles"]=i.attributes[n].expando===!1);i=null}();var je=/^(?:input|select|textarea)$/i,$e=/^key/,De=/^(?:mouse|pointer|contextmenu)|click/,Le=/^(?:focusinfocus|focusoutblur)$/,Pe=/^([^.]*)(?:\.(.+)|)$/;re.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,u,c,f,d,h,p,v,m=re._data(e);if(m){for(n.handler&&(l=n,n=l.handler,r=l.selector),n.guid||(n.guid=re.guid++),(a=m.events)||(a=m.events={}),(c=m.handle)||(c=m.handle=function(e){return typeof re===_e||e&&re.event.triggered===e.type?void 0:re.event.dispatch.apply(c.elem,arguments)},c.elem=e),t=(t||"").match(be)||[""],s=t.length;s--;)o=Pe.exec(t[s])||[],h=v=o[1],p=(o[2]||"").split(".").sort(),h&&(u=re.event.special[h]||{},h=(r?u.delegateType:u.bindType)||h,u=re.event.special[h]||{},f=re.extend({type:h,origType:v,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&re.expr.match.needsContext.test(r),namespace:p.join(".")},l),(d=a[h])||(d=a[h]=[],d.delegateCount=0,u.setup&&u.setup.call(e,i,p,c)!==!1||(e.addEventListener?e.addEventListener(h,c,!1):e.attachEvent&&e.attachEvent("on"+h,c))),u.add&&(u.add.call(e,f),f.handler.guid||(f.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,f):d.push(f),re.event.global[h]=!0);e=null}},remove:function(e,t,n,i,r){var o,a,s,l,u,c,f,d,h,p,v,m=re.hasData(e)&&re._data(e);if(m&&(c=m.events)){for(t=(t||"").match(be)||[""],u=t.length;u--;)if(s=Pe.exec(t[u])||[],h=v=s[1],p=(s[2]||"").split(".").sort(),h){for(f=re.event.special[h]||{},h=(i?f.delegateType:f.bindType)||h,d=c[h]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=d.length;o--;)a=d[o],!r&&v!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||i&&i!==a.selector&&("**"!==i||!a.selector)||(d.splice(o,1),a.selector&&d.delegateCount--,f.remove&&f.remove.call(e,a));l&&!d.length&&(f.teardown&&f.teardown.call(e,p,m.handle)!==!1||re.removeEvent(e,h,m.handle),delete c[h])}else for(h in c)re.event.remove(e,h+t[u],n,i,!0);re.isEmptyObject(c)&&(delete m.handle,re._removeData(e,"events"))}},trigger:function(t,n,i,r){var o,a,s,l,u,c,f,d=[i||pe],h=te.call(t,"type")?t.type:t,p=te.call(t,"namespace")?t.namespace.split("."):[];if(s=c=i=i||pe,3!==i.nodeType&&8!==i.nodeType&&!Le.test(h+re.event.triggered)&&(h.indexOf(".")>=0&&(p=h.split("."),h=p.shift(),p.sort()),a=h.indexOf(":")<0&&"on"+h,t=t[re.expando]?t:new re.Event(h,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=p.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:re.makeArray(n,[t]),u=re.event.special[h]||{},r||!u.trigger||u.trigger.apply(i,n)!==!1)){if(!r&&!u.noBubble&&!re.isWindow(i)){for(l=u.delegateType||h,Le.test(l+h)||(s=s.parentNode);s;s=s.parentNode)d.push(s),c=s;c===(i.ownerDocument||pe)&&d.push(c.defaultView||c.parentWindow||e)}for(f=0;(s=d[f++])&&!t.isPropagationStopped();)t.type=f>1?l:u.bindType||h,o=(re._data(s,"events")||{})[t.type]&&re._data(s,"handle"),o&&o.apply(s,n),o=a&&s[a],o&&o.apply&&re.acceptData(s)&&(t.result=o.apply(s,n),t.result===!1&&t.preventDefault());if(t.type=h,!r&&!t.isDefaultPrevented()&&(!u._default||u._default.apply(d.pop(),n)===!1)&&re.acceptData(i)&&a&&i[h]&&!re.isWindow(i)){c=i[a],c&&(i[a]=null),re.event.triggered=h;try{i[h]()}catch(e){}re.event.triggered=void 0,c&&(i[a]=c)}return t.result}},dispatch:function(e){e=re.event.fix(e);var t,n,i,r,o,a=[],s=J.call(arguments),l=(re._data(this,"events")||{})[e.type]||[],u=re.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,e)!==!1){for(a=re.event.handlers.call(this,e,l),t=0;(r=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=r.elem,o=0;(i=r.handlers[o++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,n=((re.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,s),void 0!==n&&(e.result=n)===!1&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,r,o,a=[],s=t.delegateCount,l=e.target;if(s&&l.nodeType&&(!e.button||"click"!==e.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==e.type)){for(r=[],o=0;s>o;o++)i=t[o],n=i.selector+" ",void 0===r[n]&&(r[n]=i.needsContext?re(n,this).index(l)>=0:re.find(n,this,null,[l]).length),r[n]&&r.push(i);r.length&&a.push({elem:l,handlers:r})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},fix:function(e){if(e[re.expando])return e;var t,n,i,r=e.type,o=e,a=this.fixHooks[r];for(a||(this.fixHooks[r]=a=De.test(r)?this.mouseHooks:$e.test(r)?this.keyHooks:{}),i=a.props?this.props.concat(a.props):this.props,e=new re.Event(o),t=i.length;t--;)n=i[t],e[n]=o[n];return e.target||(e.target=o.srcElement||pe),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,a.filter?a.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,r,o=t.button,a=t.fromElement;return null==e.pageX&&null!=t.clientX&&(i=e.target.ownerDocument||pe,r=i.documentElement,n=i.body,e.pageX=t.clientX+(r&&r.scrollLeft||n&&n.scrollLeft||0)-(r&&r.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||n&&n.scrollTop||0)-(r&&r.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?t.toElement:a),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==p()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===p()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return re.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(e){return re.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,i){var r=re.extend(new re.Event,n,{type:e,isSimulated:!0,originalEvent:{}});i?re.event.trigger(r,null,t):re.event.dispatch.call(t,r),r.isDefaultPrevented()&&n.preventDefault()}},re.removeEvent=pe.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var i="on"+t;e.detachEvent&&(typeof e[i]===_e&&(e[i]=null),e.detachEvent(i,n))},re.Event=function(e,t){return this instanceof re.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?d:h):this.type=e,t&&re.extend(this,t),this.timeStamp=e&&e.timeStamp||re.now(),void(this[re.expando]=!0)):new re.Event(e,t)},re.Event.prototype={isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=d,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=d,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=d,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},re.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){re.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return(!r||r!==i&&!re.contains(i,r))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),ne.submitBubbles||(re.event.special.submit={setup:function(){return!re.nodeName(this,"form")&&void re.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=re.nodeName(t,"input")||re.nodeName(t,"button")?t.form:void 0;n&&!re._data(n,"submitBubbles")&&(re.event.add(n,"submit._submit",function(e){e._submit_bubble=!0}),re._data(n,"submitBubbles",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&re.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return!re.nodeName(this,"form")&&void re.event.remove(this,"._submit")}}),ne.changeBubbles||(re.event.special.change={setup:function(){return je.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(re.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),re.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),re.event.simulate("change",this,e,!0)})),!1):void re.event.add(this,"beforeactivate._change",function(e){var t=e.target;je.test(t.nodeName)&&!re._data(t,"changeBubbles")&&(re.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||re.event.simulate("change",this.parentNode,e,!0)}),re._data(t,"changeBubbles",!0))})},handle:function(e){var t=e.target;return this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type?e.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return re.event.remove(this,"._change"),!je.test(this.nodeName)}}),ne.focusinBubbles||re.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){re.event.simulate(t,e.target,re.event.fix(e),!0)};re.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=re._data(i,t);r||i.addEventListener(e,n,!0),re._data(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=re._data(i,t)-1;r?re._data(i,t,r):(i.removeEventListener(e,n,!0),re._removeData(i,t))}}}),re.fn.extend({on:function(e,t,n,i,r){var o,a;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(o in e)this.on(o,t,n,e[o],r);return this}if(null==n&&null==i?(i=t,n=t=void 0):null==i&&("string"==typeof t?(i=n,n=void 0):(i=n,n=t,t=void 0)),i===!1)i=h;else if(!i)return this;return 1===r&&(a=i,i=function(e){return re().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=re.guid++)),this.each(function(){re.event.add(this,e,i,n,t)})},one:function(e,t,n,i){return this.on(e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,re(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=h),this.each(function(){re.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){re.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?re.event.trigger(e,t,n,!0):void 0}});var Me="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",He=/ jQuery\d+="(?:null|\d+)"/g,Fe=new RegExp("<(?:"+Me+")[\\s/>]","i"),Re=/^\s+/,Be=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,qe=/<([\w:]+)/,Ie=/<tbody/i,We=/<|&#?\w+;/,Ve=/<(?:script|style|link)/i,Ue=/checked\s*(?:[^=]|=\s*.checked.)/i,ze=/^$|\/(?:java|ecma)script/i,Xe=/^true\/(.*)/,Ge=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Je={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ne.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Ye=v(pe),Ke=Ye.appendChild(pe.createElement("div"));Je.optgroup=Je.option,Je.tbody=Je.tfoot=Je.colgroup=Je.caption=Je.thead,Je.th=Je.td,re.extend({clone:function(e,t,n){
var i,r,o,a,s,l=re.contains(e.ownerDocument,e);if(ne.html5Clone||re.isXMLDoc(e)||!Fe.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Ke.innerHTML=e.outerHTML,Ke.removeChild(o=Ke.firstChild)),!(ne.noCloneEvent&&ne.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||re.isXMLDoc(e)))for(i=m(o),s=m(e),a=0;null!=(r=s[a]);++a)i[a]&&_(r,i[a]);if(t)if(n)for(s=s||m(e),i=i||m(o),a=0;null!=(r=s[a]);a++)C(r,i[a]);else C(e,o);return i=m(o,"script"),i.length>0&&x(i,!l&&m(e,"script")),i=s=r=null,o},buildFragment:function(e,t,n,i){for(var r,o,a,s,l,u,c,f=e.length,d=v(t),h=[],p=0;f>p;p++)if(o=e[p],o||0===o)if("object"===re.type(o))re.merge(h,o.nodeType?[o]:o);else if(We.test(o)){for(s=s||d.appendChild(t.createElement("div")),l=(qe.exec(o)||["",""])[1].toLowerCase(),c=Je[l]||Je._default,s.innerHTML=c[1]+o.replace(Be,"<$1></$2>")+c[2],r=c[0];r--;)s=s.lastChild;if(!ne.leadingWhitespace&&Re.test(o)&&h.push(t.createTextNode(Re.exec(o)[0])),!ne.tbody)for(o="table"!==l||Ie.test(o)?"<table>"!==c[1]||Ie.test(o)?0:s:s.firstChild,r=o&&o.childNodes.length;r--;)re.nodeName(u=o.childNodes[r],"tbody")&&!u.childNodes.length&&o.removeChild(u);for(re.merge(h,s.childNodes),s.textContent="";s.firstChild;)s.removeChild(s.firstChild);s=d.lastChild}else h.push(t.createTextNode(o));for(s&&d.removeChild(s),ne.appendChecked||re.grep(m(h,"input"),g),p=0;o=h[p++];)if((!i||-1===re.inArray(o,i))&&(a=re.contains(o.ownerDocument,o),s=m(d.appendChild(o),"script"),a&&x(s),n))for(r=0;o=s[r++];)ze.test(o.type||"")&&n.push(o);return s=null,d},cleanData:function(e,t){for(var n,i,r,o,a=0,s=re.expando,l=re.cache,u=ne.deleteExpando,c=re.event.special;null!=(n=e[a]);a++)if((t||re.acceptData(n))&&(r=n[s],o=r&&l[r])){if(o.events)for(i in o.events)c[i]?re.event.remove(n,i):re.removeEvent(n,i,o.handle);l[r]&&(delete l[r],u?delete n[s]:typeof n.removeAttribute!==_e?n.removeAttribute(s):n[s]=null,G.push(r))}}}),re.fn.extend({text:function(e){return Se(this,function(e){return void 0===e?re.text(this):this.empty().append((this[0]&&this[0].ownerDocument||pe).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=y(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=y(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,i=e?re.filter(e,this):this,r=0;null!=(n=i[r]);r++)t||1!==n.nodeType||re.cleanData(m(n)),n.parentNode&&(t&&re.contains(n.ownerDocument,n)&&x(m(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&re.cleanData(m(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&re.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return re.clone(this,e,t)})},html:function(e){return Se(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(He,""):void 0;if(!("string"!=typeof e||Ve.test(e)||!ne.htmlSerialize&&Fe.test(e)||!ne.leadingWhitespace&&Re.test(e)||Je[(qe.exec(e)||["",""])[1].toLowerCase()])){e=e.replace(Be,"<$1></$2>");try{for(;i>n;n++)t=this[n]||{},1===t.nodeType&&(re.cleanData(m(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,re.cleanData(m(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=Y.apply([],e);var n,i,r,o,a,s,l=0,u=this.length,c=this,f=u-1,d=e[0],h=re.isFunction(d);if(h||u>1&&"string"==typeof d&&!ne.checkClone&&Ue.test(d))return this.each(function(n){var i=c.eq(n);h&&(e[0]=d.call(this,n,i.html())),i.domManip(e,t)});if(u&&(s=re.buildFragment(e,this[0].ownerDocument,!1,this),n=s.firstChild,1===s.childNodes.length&&(s=n),n)){for(o=re.map(m(s,"script"),b),r=o.length;u>l;l++)i=s,l!==f&&(i=re.clone(i,!0,!0),r&&re.merge(o,m(i,"script"))),t.call(this[l],i,l);if(r)for(a=o[o.length-1].ownerDocument,re.map(o,w),l=0;r>l;l++)i=o[l],ze.test(i.type||"")&&!re._data(i,"globalEval")&&re.contains(a,i)&&(i.src?re._evalUrl&&re._evalUrl(i.src):re.globalEval((i.text||i.textContent||i.innerHTML||"").replace(Ge,"")));s=n=null}return this}}),re.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){re.fn[e]=function(e){for(var n,i=0,r=[],o=re(e),a=o.length-1;a>=i;i++)n=i===a?this:this.clone(!0),re(o[i])[t](n),K.apply(r,n.get());return this.pushStack(r)}});var Qe,Ze={};!function(){var e;ne.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,i;return n=pe.getElementsByTagName("body")[0],n&&n.style?(t=pe.createElement("div"),i=pe.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),typeof t.style.zoom!==_e&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(pe.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(i),e):void 0}}();var et,tt,nt=/^margin/,it=new RegExp("^("+Ee+")(?!px)[a-z%]+$","i"),rt=/^(top|right|bottom|left)$/;e.getComputedStyle?(et=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)},tt=function(e,t,n){var i,r,o,a,s=e.style;return n=n||et(e),a=n?n.getPropertyValue(t)||n[t]:void 0,n&&(""!==a||re.contains(e.ownerDocument,e)||(a=re.style(e,t)),it.test(a)&&nt.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0===a?a:a+""}):pe.documentElement.currentStyle&&(et=function(e){return e.currentStyle},tt=function(e,t,n){var i,r,o,a,s=e.style;return n=n||et(e),a=n?n[t]:void 0,null==a&&s&&s[t]&&(a=s[t]),it.test(a)&&!rt.test(t)&&(i=s.left,r=e.runtimeStyle,o=r&&r.left,o&&(r.left=e.currentStyle.left),s.left="fontSize"===t?"1em":a,a=s.pixelLeft+"px",s.left=i,o&&(r.left=o)),void 0===a?a:a+""||"auto"}),!function(){function t(){var t,n,i,r;n=pe.getElementsByTagName("body")[0],n&&n.style&&(t=pe.createElement("div"),i=pe.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),t.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",o=a=!1,l=!0,e.getComputedStyle&&(o="1%"!==(e.getComputedStyle(t,null)||{}).top,a="4px"===(e.getComputedStyle(t,null)||{width:"4px"}).width,r=t.appendChild(pe.createElement("div")),r.style.cssText=t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",r.style.marginRight=r.style.width="0",t.style.width="1px",l=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight),t.removeChild(r)),t.innerHTML="<table><tr><td></td><td>t</td></tr></table>",r=t.getElementsByTagName("td"),r[0].style.cssText="margin:0;border:0;padding:0;display:none",s=0===r[0].offsetHeight,s&&(r[0].style.display="",r[1].style.display="none",s=0===r[0].offsetHeight),n.removeChild(i))}var n,i,r,o,a,s,l;n=pe.createElement("div"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",r=n.getElementsByTagName("a")[0],(i=r&&r.style)&&(i.cssText="float:left;opacity:.5",ne.opacity="0.5"===i.opacity,ne.cssFloat=!!i.cssFloat,n.style.backgroundClip="content-box",n.cloneNode(!0).style.backgroundClip="",ne.clearCloneStyle="content-box"===n.style.backgroundClip,ne.boxSizing=""===i.boxSizing||""===i.MozBoxSizing||""===i.WebkitBoxSizing,re.extend(ne,{reliableHiddenOffsets:function(){return null==s&&t(),s},boxSizingReliable:function(){return null==a&&t(),a},pixelPosition:function(){return null==o&&t(),o},reliableMarginRight:function(){return null==l&&t(),l}}))}(),re.swap=function(e,t,n,i){var r,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=a[o];return r};var ot=/alpha\([^)]*\)/i,at=/opacity\s*=\s*([^)]*)/,st=/^(none|table(?!-c[ea]).+)/,lt=new RegExp("^("+Ee+")(.*)$","i"),ut=new RegExp("^([+-])=("+Ee+")","i"),ct={position:"absolute",visibility:"hidden",display:"block"},ft={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","O","Moz","ms"];re.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=tt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:ne.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=re.camelCase(t),l=e.style;if(t=re.cssProps[s]||(re.cssProps[s]=T(l,s)),a=re.cssHooks[t]||re.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:l[t];if(o=typeof n,"string"===o&&(r=ut.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(re.css(e,t)),o="number"),null!=n&&n===n&&("number"!==o||re.cssNumber[s]||(n+="px"),ne.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(a&&"set"in a&&void 0===(n=a.set(e,n,i)))))try{l[t]=n}catch(e){}}},css:function(e,t,n,i){var r,o,a,s=re.camelCase(t);return t=re.cssProps[s]||(re.cssProps[s]=T(e.style,s)),a=re.cssHooks[t]||re.cssHooks[s],a&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=tt(e,t,i)),"normal"===o&&t in ft&&(o=ft[t]),""===n||n?(r=parseFloat(o),n===!0||re.isNumeric(r)?r||0:o):o}}),re.each(["height","width"],function(e,t){re.cssHooks[t]={get:function(e,n,i){return n?st.test(re.css(e,"display"))&&0===e.offsetWidth?re.swap(e,ct,function(){return j(e,t,i)}):j(e,t,i):void 0},set:function(e,n,i){var r=i&&et(e);return S(e,n,i?O(e,t,i,ne.boxSizing&&"border-box"===re.css(e,"boxSizing",!1,r),r):0)}}}),ne.opacity||(re.cssHooks.opacity={get:function(e,t){return at.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,i=e.currentStyle,r=re.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=i&&i.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===re.trim(o.replace(ot,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||i&&!i.filter)||(n.filter=ot.test(o)?o.replace(ot,r):o+" "+r)}}),re.cssHooks.marginRight=E(ne.reliableMarginRight,function(e,t){return t?re.swap(e,{display:"inline-block"},tt,[e,"marginRight"]):void 0}),re.each({margin:"",padding:"",border:"Width"},function(e,t){re.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[e+Te[i]+t]=o[i]||o[i-2]||o[0];return r}},nt.test(e)||(re.cssHooks[e+t].set=S)}),re.fn.extend({css:function(e,t){return Se(this,function(e,t,n){var i,r,o={},a=0;if(re.isArray(t)){for(i=et(e),r=t.length;r>a;a++)o[t[a]]=re.css(e,t[a],!1,i);return o}return void 0!==n?re.style(e,t,n):re.css(e,t)},e,t,arguments.length>1)},show:function(){return N(this,!0)},hide:function(){return N(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ne(this)?re(this).show():re(this).hide()})}}),re.Tween=$,$.prototype={constructor:$,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||"swing",this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(re.cssNumber[n]?"":"px")},cur:function(){var e=$.propHooks[this.prop];return e&&e.get?e.get(this):$.propHooks._default.get(this)},run:function(e){var t,n=$.propHooks[this.prop];return this.pos=t=this.options.duration?re.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):$.propHooks._default.set(this),this}},$.prototype.init.prototype=$.prototype,$.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=re.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){re.fx.step[e.prop]?re.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[re.cssProps[e.prop]]||re.cssHooks[e.prop])?re.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},$.propHooks.scrollTop=$.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},re.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},re.fx=$.prototype.init,re.fx.step={};var ht,pt,vt=/^(?:toggle|show|hide)$/,mt=new RegExp("^(?:([+-])=|)("+Ee+")([a-z%]*)$","i"),gt=/queueHooks$/,yt=[M],bt={"*":[function(e,t){var n=this.createTween(e,t),i=n.cur(),r=mt.exec(t),o=r&&r[3]||(re.cssNumber[e]?"":"px"),a=(re.cssNumber[e]||"px"!==o&&+i)&&mt.exec(re.css(n.elem,e)),s=1,l=20;if(a&&a[3]!==o){o=o||a[3],r=r||[],a=+i||1;do s=s||".5",a/=s,re.style(n.elem,e,a+o);while(s!==(s=n.cur()/i)&&1!==s&&--l)}return r&&(a=n.start=+a||+i||0,n.unit=o,n.end=r[1]?a+(r[1]+1)*r[2]:+r[2]),n}]};re.Animation=re.extend(F,{tweener:function(e,t){re.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,i=0,r=e.length;r>i;i++)n=e[i],bt[n]=bt[n]||[],bt[n].unshift(t)},prefilter:function(e,t){t?yt.unshift(e):yt.push(e)}}),re.speed=function(e,t,n){var i=e&&"object"==typeof e?re.extend({},e):{complete:n||!n&&t||re.isFunction(e)&&e,duration:e,easing:n&&t||t&&!re.isFunction(t)&&t};return i.duration=re.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in re.fx.speeds?re.fx.speeds[i.duration]:re.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){re.isFunction(i.old)&&i.old.call(this),i.queue&&re.dequeue(this,i.queue)},i},re.fn.extend({fadeTo:function(e,t,n,i){return this.filter(Ne).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=re.isEmptyObject(e),o=re.speed(t,n,i),a=function(){var t=F(this,re.extend({},e),o);(r||re._data(this,"finish"))&&t.stop(!0)};return a.finish=a,r||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=re.timers,a=re._data(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&gt.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));(t||!n)&&re.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=re._data(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=re.timers,a=i?i.length:0;for(n.finish=!0,re.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),re.each(["toggle","show","hide"],function(e,t){var n=re.fn[t];re.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(L(t,!0),e,i,r)}}),re.each({slideDown:L("show"),slideUp:L("hide"),slideToggle:L("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){re.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),re.timers=[],re.fx.tick=function(){var e,t=re.timers,n=0;for(ht=re.now();n<t.length;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||re.fx.stop(),ht=void 0},re.fx.timer=function(e){re.timers.push(e),e()?re.fx.start():re.timers.pop()},re.fx.interval=13,re.fx.start=function(){pt||(pt=setInterval(re.fx.tick,re.fx.interval))},re.fx.stop=function(){clearInterval(pt),pt=null},re.fx.speeds={slow:600,fast:200,_default:400},re.fn.delay=function(e,t){return e=re.fx?re.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var i=setTimeout(t,e);n.stop=function(){clearTimeout(i)}})},function(){var e,t,n,i,r;t=pe.createElement("div"),t.setAttribute("className","t"),t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",i=t.getElementsByTagName("a")[0],n=pe.createElement("select"),r=n.appendChild(pe.createElement("option")),e=t.getElementsByTagName("input")[0],i.style.cssText="top:1px",ne.getSetAttribute="t"!==t.className,ne.style=/top/.test(i.getAttribute("style")),ne.hrefNormalized="/a"===i.getAttribute("href"),ne.checkOn=!!e.value,ne.optSelected=r.selected,ne.enctype=!!pe.createElement("form").enctype,n.disabled=!0,ne.optDisabled=!r.disabled,e=pe.createElement("input"),e.setAttribute("value",""),ne.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),ne.radioValue="t"===e.value}();var wt=/\r/g;re.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=re.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(r=i?e.call(this,n,re(this).val()):e,null==r?r="":"number"==typeof r?r+="":re.isArray(r)&&(r=re.map(r,function(e){return null==e?"":e+""})),t=re.valHooks[this.type]||re.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=re.valHooks[r.type]||re.valHooks[r.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(wt,""):null==n?"":n)):void 0}}),re.extend({valHooks:{option:{get:function(e){var t=re.find.attr(e,"value");return null!=t?t:re.trim(re.text(e))}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,o="select-one"===e.type||0>r,a=o?null:[],s=o?r+1:i.length,l=0>r?s:o?r:0;s>l;l++)if(n=i[l],!(!n.selected&&l!==r||(ne.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&re.nodeName(n.parentNode,"optgroup"))){if(t=re(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=re.makeArray(t),a=r.length;a--;)if(i=r[a],re.inArray(re.valHooks.option.get(i),o)>=0)try{i.selected=n=!0}catch(e){i.scrollHeight}else i.selected=!1;return n||(e.selectedIndex=-1),r}}}}),re.each(["radio","checkbox"],function(){re.valHooks[this]={set:function(e,t){return re.isArray(t)?e.checked=re.inArray(re(e).val(),t)>=0:void 0}},ne.checkOn||(re.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var xt,Ct,_t=re.expr.attrHandle,kt=/^(?:checked|selected)$/i,At=ne.getSetAttribute,Et=ne.input;re.fn.extend({attr:function(e,t){return Se(this,re.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){re.removeAttr(this,e)})}}),re.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return typeof e.getAttribute===_e?re.prop(e,t,n):(1===o&&re.isXMLDoc(e)||(t=t.toLowerCase(),i=re.attrHooks[t]||(re.expr.match.bool.test(t)?Ct:xt)),void 0===n?i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=re.find.attr(e,t),null==r?void 0:r):null!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):void re.removeAttr(e,t))},removeAttr:function(e,t){var n,i,r=0,o=t&&t.match(be);if(o&&1===e.nodeType)for(;n=o[r++];)i=re.propFix[n]||n,re.expr.match.bool.test(n)?Et&&At||!kt.test(n)?e[i]=!1:e[re.camelCase("default-"+n)]=e[i]=!1:re.attr(e,n,""),e.removeAttribute(At?n:i)},attrHooks:{type:{set:function(e,t){if(!ne.radioValue&&"radio"===t&&re.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),Ct={set:function(e,t,n){return t===!1?re.removeAttr(e,n):Et&&At||!kt.test(n)?e.setAttribute(!At&&re.propFix[n]||n,n):e[re.camelCase("default-"+n)]=e[n]=!0,n}},re.each(re.expr.match.bool.source.match(/\w+/g),function(e,t){var n=_t[t]||re.find.attr;_t[t]=Et&&At||!kt.test(t)?function(e,t,i){var r,o;return i||(o=_t[t],_t[t]=r,r=null!=n(e,t,i)?t.toLowerCase():null,_t[t]=o),r}:function(e,t,n){return n?void 0:e[re.camelCase("default-"+t)]?t.toLowerCase():null}}),Et&&At||(re.attrHooks.value={set:function(e,t,n){return re.nodeName(e,"input")?void(e.defaultValue=t):xt&&xt.set(e,t,n)}}),At||(xt={set:function(e,t,n){var i=e.getAttributeNode(n);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(n)),i.value=t+="","value"===n||t===e.getAttribute(n)?t:void 0}},_t.id=_t.name=_t.coords=function(e,t,n){var i;return n?void 0:(i=e.getAttributeNode(t))&&""!==i.value?i.value:null},re.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);return n&&n.specified?n.value:void 0},set:xt.set},re.attrHooks.contenteditable={set:function(e,t,n){xt.set(e,""!==t&&t,n)}},re.each(["width","height"],function(e,t){re.attrHooks[t]={set:function(e,n){return""===n?(e.setAttribute(t,"auto"),n):void 0}}})),ne.style||(re.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var Tt=/^(?:input|select|textarea|button|object)$/i,Nt=/^(?:a|area)$/i;re.fn.extend({prop:function(e,t){return Se(this,re.prop,e,t,arguments.length>1)},removeProp:function(e){return e=re.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),re.extend({propFix:{for:"htmlFor",class:"className"},prop:function(e,t,n){var i,r,o,a=e.nodeType;if(e&&3!==a&&8!==a&&2!==a)return o=1!==a||!re.isXMLDoc(e),o&&(t=re.propFix[t]||t,r=re.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=re.find.attr(e,"tabindex");return t?parseInt(t,10):Tt.test(e.nodeName)||Nt.test(e.nodeName)&&e.href?0:-1}}}}),ne.hrefNormalized||re.each(["href","src"],function(e,t){re.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),ne.optSelected||(re.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),re.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){re.propFix[this.toLowerCase()]=this}),ne.enctype||(re.propFix.enctype="encoding");var St=/[\t\r\n\f]/g;re.fn.extend({addClass:function(e){var t,n,i,r,o,a,s=0,l=this.length,u="string"==typeof e&&e;if(re.isFunction(e))return this.each(function(t){re(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(be)||[];l>s;s++)if(n=this[s],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(St," "):" ")){for(o=0;r=t[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a=re.trim(i),n.className!==a&&(n.className=a)}return this},removeClass:function(e){var t,n,i,r,o,a,s=0,l=this.length,u=0===arguments.length||"string"==typeof e&&e;if(re.isFunction(e))return this.each(function(t){re(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(be)||[];l>s;s++)if(n=this[s],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(St," "):"")){for(o=0;r=t[o++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");a=e?re.trim(i):"",n.className!==a&&(n.className=a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):this.each(re.isFunction(e)?function(n){re(this).toggleClass(e.call(this,n,this.className,t),t)}:function(){if("string"===n)for(var t,i=0,r=re(this),o=e.match(be)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else(n===_e||"boolean"===n)&&(this.className&&re._data(this,"__className__",this.className),this.className=this.className||e===!1?"":re._data(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,i=this.length;i>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(St," ").indexOf(t)>=0)return!0;return!1}}),re.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){re.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),re.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var Ot=re.now(),jt=/\?/,$t=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;re.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,i=null,r=re.trim(t+"");return r&&!re.trim(r.replace($t,function(e,t,r,o){return n&&t&&(i=0),0===i?e:(n=r||t,i+=!o-!r,"")}))?Function("return "+r)():re.error("Invalid JSON: "+t)},re.parseXML=function(t){var n,i;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(i=new DOMParser,n=i.parseFromString(t,"text/xml")):(n=new ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(e){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||re.error("Invalid XML: "+t),n};var Dt,Lt,Pt=/#.*$/,Mt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Ft=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Rt=/^(?:GET|HEAD)$/,Bt=/^\/\//,qt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,It={},Wt={},Vt="*/".concat("*");try{Lt=location.href}catch(e){Lt=pe.createElement("a"),Lt.href="",Lt=Lt.href}Dt=qt.exec(Lt.toLowerCase())||[],re.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Lt,type:"GET",isLocal:Ft.test(Dt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":re.parseJSON,"text xml":re.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?q(q(e,re.ajaxSettings),t):q(re.ajaxSettings,e)},ajaxPrefilter:R(It),ajaxTransport:R(Wt),ajax:function(e,t){function n(e,t,n,i){var r,c,g,y,w,C=t;2!==b&&(b=2,s&&clearTimeout(s),u=void 0,a=i||"",x.readyState=e>0?4:0,r=e>=200&&300>e||304===e,n&&(y=I(f,x,n)),y=W(f,y,x,r),r?(f.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(re.lastModified[o]=w),w=x.getResponseHeader("etag"),w&&(re.etag[o]=w)),204===e||"HEAD"===f.type?C="nocontent":304===e?C="notmodified":(C=y.state,c=y.data,g=y.error,r=!g)):(g=C,(e||!C)&&(C="error",0>e&&(e=0))),x.status=e,x.statusText=(t||C)+"",r?p.resolveWith(d,[c,C,x]):p.rejectWith(d,[x,C,g]),x.statusCode(m),m=void 0,l&&h.trigger(r?"ajaxSuccess":"ajaxError",[x,f,r?c:g]),v.fireWith(d,[x,C]),l&&(h.trigger("ajaxComplete",[x,f]),--re.active||re.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,a,s,l,u,c,f=re.ajaxSetup({},t),d=f.context||f,h=f.context&&(d.nodeType||d.jquery)?re(d):re.event,p=re.Deferred(),v=re.Callbacks("once memory"),m=f.statusCode||{},g={},y={},b=0,w="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!c)for(c={};t=Ht.exec(a);)c[t[1].toLowerCase()]=t[2];t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=y[n]=y[n]||e,g[e]=t),this},overrideMimeType:function(e){return b||(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)m[t]=[m[t],e[t]];else x.always(e[x.status]);return this},abort:function(e){var t=e||w;return u&&u.abort(t),n(0,t),this}};if(p.promise(x).complete=v.add,x.success=x.done,x.error=x.fail,f.url=((e||f.url||Lt)+"").replace(Pt,"").replace(Bt,Dt[1]+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=re.trim(f.dataType||"*").toLowerCase().match(be)||[""],null==f.crossDomain&&(i=qt.exec(f.url.toLowerCase()),f.crossDomain=!(!i||i[1]===Dt[1]&&i[2]===Dt[2]&&(i[3]||("http:"===i[1]?"80":"443"))===(Dt[3]||("http:"===Dt[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=re.param(f.data,f.traditional)),B(It,f,t,x),2===b)return x;l=re.event&&f.global,l&&0===re.active++&&re.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Rt.test(f.type),o=f.url,f.hasContent||(f.data&&(o=f.url+=(jt.test(o)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=Mt.test(o)?o.replace(Mt,"$1_="+Ot++):o+(jt.test(o)?"&":"?")+"_="+Ot++)),f.ifModified&&(re.lastModified[o]&&x.setRequestHeader("If-Modified-Since",re.lastModified[o]),re.etag[o]&&x.setRequestHeader("If-None-Match",re.etag[o])),(f.data&&f.hasContent&&f.contentType!==!1||t.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Vt+"; q=0.01":""):f.accepts["*"]);for(r in f.headers)x.setRequestHeader(r,f.headers[r]);if(f.beforeSend&&(f.beforeSend.call(d,x,f)===!1||2===b))return x.abort();w="abort";for(r in{success:1,error:1,complete:1})x[r](f[r]);if(u=B(Wt,f,t,x)){x.readyState=1,l&&h.trigger("ajaxSend",[x,f]),f.async&&f.timeout>0&&(s=setTimeout(function(){x.abort("timeout")},f.timeout));try{b=1,u.send(g,n)}catch(e){if(!(2>b))throw e;n(-1,e)}}else n(-1,"No Transport");return x},getJSON:function(e,t,n){return re.get(e,t,n,"json")},getScript:function(e,t){return re.get(e,void 0,t,"script")}}),re.each(["get","post"],function(e,t){re[t]=function(e,n,i,r){return re.isFunction(n)&&(r=r||i,i=n,n=void 0),re.ajax({url:e,type:t,dataType:r,data:n,success:i})}}),re._evalUrl=function(e){return re.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},re.fn.extend({wrapAll:function(e){if(re.isFunction(e))return this.each(function(t){re(this).wrapAll(e.call(this,t))});if(this[0]){var t=re(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return this.each(re.isFunction(e)?function(t){re(this).wrapInner(e.call(this,t))}:function(){var t=re(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=re.isFunction(e);return this.each(function(n){re(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){re.nodeName(this,"body")||re(this).replaceWith(this.childNodes)}).end()}}),re.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0||!ne.reliableHiddenOffsets()&&"none"===(e.style&&e.style.display||re.css(e,"display"))},re.expr.filters.visible=function(e){return!re.expr.filters.hidden(e)};var Ut=/%20/g,zt=/\[\]$/,Xt=/\r?\n/g,Gt=/^(?:submit|button|image|reset|file)$/i,Jt=/^(?:input|select|textarea|keygen)/i;re.param=function(e,t){var n,i=[],r=function(e,t){t=re.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=re.ajaxSettings&&re.ajaxSettings.traditional),re.isArray(e)||e.jquery&&!re.isPlainObject(e))re.each(e,function(){r(this.name,this.value)});else for(n in e)V(n,e[n],t,r);return i.join("&").replace(Ut,"+")},re.fn.extend({serialize:function(){return re.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=re.prop(this,"elements");return e?re.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!re(this).is(":disabled")&&Jt.test(this.nodeName)&&!Gt.test(e)&&(this.checked||!Oe.test(e))}).map(function(e,t){var n=re(this).val();return null==n?null:re.isArray(n)?re.map(n,function(e){return{name:t.name,value:e.replace(Xt,"\r\n")}}):{name:t.name,value:n.replace(Xt,"\r\n")}}).get()}}),re.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&U()||z();
}:U;var Yt=0,Kt={},Qt=re.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Kt)Kt[e](void 0,!0)}),ne.cors=!!Qt&&"withCredentials"in Qt,Qt=ne.ajax=!!Qt,Qt&&re.ajaxTransport(function(e){if(!e.crossDomain||ne.cors){var t;return{send:function(n,i){var r,o=e.xhr(),a=++Yt;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)o[r]=e.xhrFields[r];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)void 0!==n[r]&&o.setRequestHeader(r,n[r]+"");o.send(e.hasContent&&e.data||null),t=function(n,r){var s,l,u;if(t&&(r||4===o.readyState))if(delete Kt[a],t=void 0,o.onreadystatechange=re.noop,r)4!==o.readyState&&o.abort();else{u={},s=o.status,"string"==typeof o.responseText&&(u.text=o.responseText);try{l=o.statusText}catch(e){l=""}s||!e.isLocal||e.crossDomain?1223===s&&(s=204):s=u.text?200:404}u&&i(s,l,u,o.getAllResponseHeaders())},e.async?4===o.readyState?setTimeout(t):o.onreadystatechange=Kt[a]=t:t()},abort:function(){t&&t(void 0,!0)}}}}),re.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return re.globalEval(e),e}}}),re.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),re.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=pe.head||re("head")[0]||pe.documentElement;return{send:function(i,r){t=pe.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||r(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var Zt=[],en=/(=)\?(?=&|$)|\?\?/;re.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Zt.pop()||re.expando+"_"+Ot++;return this[e]=!0,e}}),re.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,a,s=t.jsonp!==!1&&(en.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&en.test(t.data)&&"data");return s||"jsonp"===t.dataTypes[0]?(r=t.jsonpCallback=re.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(en,"$1"+r):t.jsonp!==!1&&(t.url+=(jt.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||re.error(r+" was not called"),a[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){a=arguments},i.always(function(){e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,Zt.push(r)),a&&re.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),re.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||pe;var i=fe.exec(e),r=!n&&[];return i?[t.createElement(i[1])]:(i=re.buildFragment([e],t,r),r&&r.length&&re(r).remove(),re.merge([],i.childNodes))};var tn=re.fn.load;re.fn.load=function(e,t,n){if("string"!=typeof e&&tn)return tn.apply(this,arguments);var i,r,o,a=this,s=e.indexOf(" ");return s>=0&&(i=re.trim(e.slice(s,e.length)),e=e.slice(0,s)),re.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&re.ajax({url:e,type:o,dataType:"html",data:t}).done(function(e){r=arguments,a.html(i?re("<div>").append(re.parseHTML(e)).find(i):e)}).complete(n&&function(e,t){a.each(n,r||[e.responseText,t,e])}),this},re.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){re.fn[t]=function(e){return this.on(t,e)}}),re.expr.filters.animated=function(e){return re.grep(re.timers,function(t){return e===t.elem}).length};var nn=e.document.documentElement;re.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,u,c=re.css(e,"position"),f=re(e),d={};"static"===c&&(e.style.position="relative"),s=f.offset(),o=re.css(e,"top"),l=re.css(e,"left"),u=("absolute"===c||"fixed"===c)&&re.inArray("auto",[o,l])>-1,u?(i=f.position(),a=i.top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),re.isFunction(t)&&(t=t.call(e,n,s)),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+r),"using"in t?t.using.call(e,d):f.css(d)}},re.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){re.offset.setOffset(this,e,t)});var t,n,i={top:0,left:0},r=this[0],o=r&&r.ownerDocument;return o?(t=o.documentElement,re.contains(t,r)?(typeof r.getBoundingClientRect!==_e&&(i=r.getBoundingClientRect()),n=X(o),{top:i.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:i.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):i):void 0},position:function(){if(this[0]){var e,t,n={top:0,left:0},i=this[0];return"fixed"===re.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),re.nodeName(e[0],"html")||(n=e.offset()),n.top+=re.css(e[0],"borderTopWidth",!0),n.left+=re.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-re.css(i,"marginTop",!0),left:t.left-n.left-re.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||nn;e&&!re.nodeName(e,"html")&&"static"===re.css(e,"position");)e=e.offsetParent;return e||nn})}}),re.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);re.fn[e]=function(i){return Se(this,function(e,i,r){var o=X(e);return void 0===r?o?t in o?o[t]:o.document.documentElement[i]:e[i]:void(o?o.scrollTo(n?re(o).scrollLeft():r,n?r:re(o).scrollTop()):e[i]=r)},e,i,arguments.length,null)}}),re.each(["top","left"],function(e,t){re.cssHooks[t]=E(ne.pixelPosition,function(e,n){return n?(n=tt(e,t),it.test(n)?re(e).position()[t]+"px":n):void 0})}),re.each({Height:"height",Width:"width"},function(e,t){re.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){re.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),a=n||(i===!0||r===!0?"margin":"border");return Se(this,function(t,n,i){var r;return re.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?re.css(t,n,a):re.style(t,n,i,a)},t,o?i:void 0,o,null)}})}),re.fn.size=function(){return this.length},re.fn.andSelf=re.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return re});var rn=e.jQuery,on=e.$;return re.noConflict=function(t){return e.$===re&&(e.$=on),t&&e.jQuery===re&&(e.jQuery=rn),re},typeof t===_e&&(e.jQuery=e.$=re),re});var snid="112",gameid="222",_hmt,searchParams=new URLSearchParams(window.location.search.slice(1));axios.get("./data/test.json").then(function(e){return e.data}).then(function(data){var json=eval("("+data+")");return json.channels}).then(function(e){for(var t,n=searchParams.get("channel"),i=e.length,r=0;r<i;r++)if(e[r].channelId==n){var o=e[r];t=o.content.download.androidUrl}new Vue({el:"html",data:{channel:o,show:!1,iosUrl:"javascript:;",androidUrl:"javascript:;",bgObject:{}},created:function(){var e=this;_hmt=_hmt||[];var t=document.createElement("script");t.src="https://hm.baidu.com/hm.js?"+o.content.baiduAnalytic;var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n),e.bgObject={background:"#fff url("+o.content.bgImg+") no-repeat"}},methods:{androidClick:function(){isWechat()||isWeibo()?this.show=!0:window.location.replace(o.content.download.androidUrl),window._hmt.push(["_trackEvent","software","androidClick","ttplayer"])},iosClick:function(){isWechat()||isWeibo()?this.show=!0:window.location.replace(o.content.download.iosUrl),window._hmt.push(["_trackEvent","software","iosClick","ttplayer"])},closeTip:function(){this.show=!1}}});return t}).then(function(e){return _digger_={disablePageViewTrack:!1,trackerUrlMap:{pageView:["//bicollect.hulai.com:8182/api"],click:["//bicollect.hulai.com:8182/api"]},cookieDomain:"",strictMode:{paramOrder:{"//bicollect.hulai.com:8182/api":["cookie","url","referer","metric","snid","gameid","downloadUrl","act"]},disableDefaultParams:!0},extendParams:{metric:"Landing",snid:snid,gameid:gameid,referer:document.referrer?document.referrer:"",act:"visit",downloadUrl:""},trackCookieKeys:{cookie:"cookie_id"},trackLocalStorageKeys:{latitude:"location.latitude",longitude:"location.longitude"},eventConfigArr:[{eventType:"click",selectors:["a[id='android']"],extendParams:{event_flag:"downloadClick",act:"click",downloadUrl:e}}]},_digger_}).then(function(e){digger(e)}).catch(function(){}),window.Modernizr=function(e,t,n){function i(e){b.cssText=e}function r(e,t){return i(_.join(e+";")+(t||""))}function o(e,t){return typeof e===t}function a(e,t){return!!~(""+e).indexOf(t)}function s(e,t){for(var i in e){var r=e[i];if(!a(r,"-")&&b[r]!==n)return"pfx"!=t||r}return!1}function l(e,t,i){for(var r in e){var a=t[e[r]];if(a!==n)return i===!1?e[r]:o(a,"function")?a.bind(i||t):a}return!1}function u(e,t,n){var i=e.charAt(0).toUpperCase()+e.slice(1),r=(e+" "+A.join(i+" ")+i).split(" ");return o(t,"string")||o(t,"undefined")?s(r,t):(r=(e+" "+E.join(i+" ")+i).split(" "),l(r,t,n))}function c(){p.input=function(n){for(var i=0,r=n.length;i<r;i++)O[n[i]]=n[i]in w;return O.list&&(O.list=!!t.createElement("datalist")&&!!e.HTMLDataListElement),O}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),p.inputtypes=function(e){for(var i,r,o,a=0,s=e.length;a<s;a++)w.setAttribute("type",r=e[a]),i="text"!==w.type,i&&(w.value=x,w.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(r)&&w.style.WebkitAppearance!==n?(m.appendChild(w),o=t.defaultView,i=o.getComputedStyle&&"textfield"!==o.getComputedStyle(w,null).WebkitAppearance&&0!==w.offsetHeight,m.removeChild(w)):/^(search|tel)$/.test(r)||(i=/^(url|email)$/.test(r)?w.checkValidity&&w.checkValidity()===!1:w.value!=x)),S[e[a]]=!!i;return S}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var f,d,h="2.8.3",p={},v=!0,m=t.documentElement,g="modernizr",y=t.createElement(g),b=y.style,w=t.createElement("input"),x=":)",C={}.toString,_=" -webkit- -moz- -o- -ms- ".split(" "),k="Webkit Moz O ms",A=k.split(" "),E=k.toLowerCase().split(" "),T={svg:"http://www.w3.org/2000/svg"},N={},S={},O={},j=[],$=j.slice,D=function(e,n,i,r){var o,a,s,l,u=t.createElement("div"),c=t.body,f=c||t.createElement("body");if(parseInt(i,10))for(;i--;)s=t.createElement("div"),s.id=r?r[i]:g+(i+1),u.appendChild(s);return o=["&#173;",'<style id="s',g,'">',e,"</style>"].join(""),u.id=g,(c?u:f).innerHTML+=o,f.appendChild(u),c||(f.style.background="",f.style.overflow="hidden",l=m.style.overflow,m.style.overflow="hidden",m.appendChild(f)),a=n(u,e),c?u.parentNode.removeChild(u):(f.parentNode.removeChild(f),m.style.overflow=l),!!a},L=function(t){var n=e.matchMedia||e.msMatchMedia;if(n)return n(t)&&n(t).matches||!1;var i;return D("@media "+t+" { #"+g+" { position: absolute; } }",function(t){i="absolute"==(e.getComputedStyle?getComputedStyle(t,null):t.currentStyle).position}),i},P=function(){function e(e,r){r=r||t.createElement(i[e]||"div"),e="on"+e;var a=e in r;return a||(r.setAttribute||(r=t.createElement("div")),r.setAttribute&&r.removeAttribute&&(r.setAttribute(e,""),a=o(r[e],"function"),o(r[e],"undefined")||(r[e]=n),r.removeAttribute(e))),r=null,a}var i={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return e}(),M={}.hasOwnProperty;d=o(M,"undefined")||o(M.call,"undefined")?function(e,t){return t in e&&o(e.constructor.prototype[t],"undefined")}:function(e,t){return M.call(e,t)},Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if("function"!=typeof t)throw new TypeError;var n=$.call(arguments,1),i=function(){if(this instanceof i){var r=function(){};r.prototype=t.prototype;var o=new r,a=t.apply(o,n.concat($.call(arguments)));return Object(a)===a?a:o}return t.apply(e,n.concat($.call(arguments)))};return i}),N.flexbox=function(){return u("flexWrap")},N.canvas=function(){var e=t.createElement("canvas");return!!e.getContext&&!!e.getContext("2d")},N.canvastext=function(){return!!p.canvas&&!!o(t.createElement("canvas").getContext("2d").fillText,"function")},N.webgl=function(){return!!e.WebGLRenderingContext},N.touch=function(){var n;return"ontouchstart"in e||e.DocumentTouch&&t instanceof DocumentTouch?n=!0:D(["@media (",_.join("touch-enabled),("),g,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(e){n=9===e.offsetTop}),n},N.geolocation=function(){return"geolocation"in navigator},N.postmessage=function(){return!!e.postMessage},N.websqldatabase=function(){return!!e.openDatabase},N.indexedDB=function(){return!!u("indexedDB",e)},N.hashchange=function(){return P("hashchange",e)&&(t.documentMode===n||t.documentMode>7)},N.history=function(){return!!e.history&&!!history.pushState},N.draganddrop=function(){var e=t.createElement("div");return"draggable"in e||"ondragstart"in e&&"ondrop"in e},N.websockets=function(){return"WebSocket"in e||"MozWebSocket"in e},N.rgba=function(){return i("background-color:rgba(150,255,150,.5)"),a(b.backgroundColor,"rgba")},N.hsla=function(){return i("background-color:hsla(120,40%,100%,.5)"),a(b.backgroundColor,"rgba")||a(b.backgroundColor,"hsla")},N.multiplebgs=function(){return i("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(b.background)},N.backgroundsize=function(){return u("backgroundSize")},N.borderimage=function(){return u("borderImage")},N.borderradius=function(){return u("borderRadius")},N.boxshadow=function(){return u("boxShadow")},N.textshadow=function(){return""===t.createElement("div").style.textShadow},N.opacity=function(){return r("opacity:.55"),/^0.55$/.test(b.opacity)},N.cssanimations=function(){return u("animationName")},N.csscolumns=function(){return u("columnCount")},N.cssgradients=function(){var e="background-image:",t="gradient(linear,left top,right bottom,from(#9f9),to(white));",n="linear-gradient(left top,#9f9, white);";return i((e+"-webkit- ".split(" ").join(t+e)+_.join(n+e)).slice(0,-e.length)),a(b.backgroundImage,"gradient")},N.cssreflections=function(){return u("boxReflect")},N.csstransforms=function(){return!!u("transform")},N.csstransforms3d=function(){var e=!!u("perspective");return e&&"webkitPerspective"in m.style&&D("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(t,n){e=9===t.offsetLeft&&3===t.offsetHeight}),e},N.csstransitions=function(){return u("transition")},N.fontface=function(){var e;return D('@font-face {font-family:"font";src:url("https://")}',function(n,i){var r=t.getElementById("smodernizr"),o=r.sheet||r.styleSheet,a=o?o.cssRules&&o.cssRules[0]?o.cssRules[0].cssText:o.cssText||"":"";e=/src/i.test(a)&&0===a.indexOf(i.split(" ")[0])}),e},N.generatedcontent=function(){var e;return D(["#",g,"{font:0/0 a}#",g,':after{content:"',x,'";visibility:hidden;font:3px/1 a}'].join(""),function(t){e=t.offsetHeight>=3}),e},N.video=function(){var e=t.createElement("video"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=e.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=e.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(e){}return n},N.audio=function(){var e=t.createElement("audio"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=e.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=e.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(e.canPlayType("audio/x-m4a;")||e.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(e){}return n},N.localstorage=function(){try{return localStorage.setItem(g,g),localStorage.removeItem(g),!0}catch(e){return!1}},N.sessionstorage=function(){try{return sessionStorage.setItem(g,g),sessionStorage.removeItem(g),!0}catch(e){return!1}},N.webworkers=function(){return!!e.Worker},N.applicationcache=function(){return!!e.applicationCache},N.svg=function(){return!!t.createElementNS&&!!t.createElementNS(T.svg,"svg").createSVGRect},N.inlinesvg=function(){var e=t.createElement("div");return e.innerHTML="<svg/>",(e.firstChild&&e.firstChild.namespaceURI)==T.svg},N.smil=function(){return!!t.createElementNS&&/SVGAnimate/.test(C.call(t.createElementNS(T.svg,"animate")))},N.svgclippaths=function(){return!!t.createElementNS&&/SVGClipPath/.test(C.call(t.createElementNS(T.svg,"clipPath")))};for(var H in N)d(N,H)&&(f=H.toLowerCase(),p[f]=N[H](),j.push((p[f]?"":"no-")+f));return p.input||c(),p.addTest=function(e,t){if("object"==typeof e)for(var i in e)d(e,i)&&p.addTest(i,e[i]);else{if(e=e.toLowerCase(),p[e]!==n)return p;t="function"==typeof t?t():t,"undefined"!=typeof v&&v&&(m.className+=" "+(t?"":"no-")+e),p[e]=t}return p},i(""),y=w=null,function(e,t){function n(e,t){var n=e.createElement("p"),i=e.getElementsByTagName("head")[0]||e.documentElement;return n.innerHTML="x<style>"+t+"</style>",i.insertBefore(n.lastChild,i.firstChild)}function i(){var e=y.elements;return"string"==typeof e?e.split(" "):e}function r(e){var t=g[e[v]];return t||(t={},m++,e[v]=m,g[m]=t),t}function o(e,n,i){if(n||(n=t),c)return n.createElement(e);i||(i=r(n));var o;return o=i.cache[e]?i.cache[e].cloneNode():p.test(e)?(i.cache[e]=i.createElem(e)).cloneNode():i.createElem(e),!o.canHaveChildren||h.test(e)||o.tagUrn?o:i.frag.appendChild(o)}function a(e,n){if(e||(e=t),c)return e.createDocumentFragment();n=n||r(e);for(var o=n.frag.cloneNode(),a=0,s=i(),l=s.length;a<l;a++)o.createElement(s[a]);return o}function s(e,t){t.cache||(t.cache={},t.createElem=e.createElement,t.createFrag=e.createDocumentFragment,t.frag=t.createFrag()),e.createElement=function(n){return y.shivMethods?o(n,e,t):t.createElem(n)},e.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+i().join().replace(/[\w\-]+/g,function(e){return t.createElem(e),t.frag.createElement(e),'c("'+e+'")'})+");return n}")(y,t.frag)}function l(e){e||(e=t);var i=r(e);return y.shivCSS&&!u&&!i.hasCSS&&(i.hasCSS=!!n(e,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),c||s(e,i),e}var u,c,f="3.7.0",d=e.html5||{},h=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,p=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,v="_html5shiv",m=0,g={};!function(){try{var e=t.createElement("a");e.innerHTML="<xyz></xyz>",u="hidden"in e,c=1==e.childNodes.length||function(){t.createElement("a");var e=t.createDocumentFragment();return"undefined"==typeof e.cloneNode||"undefined"==typeof e.createDocumentFragment||"undefined"==typeof e.createElement}()}catch(e){u=!0,c=!0}}();var y={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:f,shivCSS:d.shivCSS!==!1,supportsUnknownElements:c,shivMethods:d.shivMethods!==!1,type:"default",shivDocument:l,createElement:o,createDocumentFragment:a};e.html5=y,l(t)}(this,t),p._version=h,p._prefixes=_,p._domPrefixes=E,p._cssomPrefixes=A,p.mq=L,p.hasEvent=P,p.testProp=function(e){return s([e])},p.testAllProps=u,p.testStyles=D,p.prefixed=function(e,t,n){return t?u(e,t,n):u(e,"pfx")},m.className=m.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(v?" js "+j.join(" "):""),p}(this,this.document),function(e,t,n){function i(e){return"[object Function]"==m.call(e)}function r(e){return"string"==typeof e}function o(){}function a(e){return!e||"loaded"==e||"complete"==e||"uninitialized"==e}function s(){var e=g.shift();y=1,e?e.t?p(function(){("c"==e.t?d.injectCss:d.injectJs)(e.s,0,e.a,e.x,e.e,1)},0):(e(),s()):y=0}function l(e,n,i,r,o,l,u){function c(t){if(!h&&a(f.readyState)&&(b.r=h=1,!y&&s(),f.onload=f.onreadystatechange=null,t)){"img"!=e&&p(function(){x.removeChild(f)},50);for(var i in E[n])E[n].hasOwnProperty(i)&&E[n][i].onload()}}var u=u||d.errorTimeout,f=t.createElement(e),h=0,m=0,b={t:i,s:n,e:o,a:l,x:u};1===E[n]&&(m=1,E[n]=[]),"object"==e?f.data=n:(f.src=n,f.type=e),f.width=f.height="0",f.onerror=f.onload=f.onreadystatechange=function(){c.call(this,m)},g.splice(r,0,b),"img"!=e&&(m||2===E[n]?(x.insertBefore(f,w?null:v),p(c,u)):E[n].push(f))}function u(e,t,n,i,o){return y=0,t=t||"j",r(e)?l("c"==t?_:C,e,t,this.i++,n,i,o):(g.splice(this.i++,0,e),1==g.length&&s()),this}function c(){var e=d;return e.loader={load:u,i:0},e}var f,d,h=t.documentElement,p=e.setTimeout,v=t.getElementsByTagName("script")[0],m={}.toString,g=[],y=0,b="MozAppearance"in h.style,w=b&&!!t.createRange().compareNode,x=w?h:v.parentNode,h=e.opera&&"[object Opera]"==m.call(e.opera),h=!!t.attachEvent&&!h,C=b?"object":h?"script":"img",_=h?"script":C,k=Array.isArray||function(e){return"[object Array]"==m.call(e)},A=[],E={},T={timeout:function(e,t){return t.length&&(e.timeout=t[0]),e}};d=function(e){function t(e){var t,n,i,e=e.split("!"),r=A.length,o=e.pop(),a=e.length,o={url:o,origUrl:o,prefixes:e};for(n=0;n<a;n++)i=e[n].split("="),(t=T[i.shift()])&&(o=t(o,i));for(n=0;n<r;n++)o=A[n](o);return o}function a(e,r,o,a,s){var l=t(e),u=l.autoCallback;l.url.split(".").pop().split("?").shift(),l.bypass||(r&&(r=i(r)?r:r[e]||r[a]||r[e.split("/").pop().split("?")[0]]),l.instead?l.instead(e,r,o,a,s):(E[l.url]?l.noexec=!0:E[l.url]=1,o.load(l.url,l.forceCSS||!l.forceJS&&"css"==l.url.split(".").pop().split("?").shift()?"c":n,l.noexec,l.attrs,l.timeout),(i(r)||i(u))&&o.load(function(){c(),r&&r(l.origUrl,s,a),u&&u(l.origUrl,s,a),E[l.url]=2})))}function s(e,t){function n(e,n){if(e){if(r(e))n||(f=function(){var e=[].slice.call(arguments);d.apply(this,e),h()}),a(e,f,t,0,u);else if(Object(e)===e)for(l in s=function(){var t,n=0;for(t in e)e.hasOwnProperty(t)&&n++;return n}(),e)e.hasOwnProperty(l)&&(!n&&!--s&&(i(f)?f=function(){var e=[].slice.call(arguments);d.apply(this,e),h()}:f[l]=function(e){return function(){var t=[].slice.call(arguments);e&&e.apply(this,t),h()}}(d[l])),a(e[l],f,t,l,u))}else!n&&h()}var s,l,u=!!e.test,c=e.load||e.both,f=e.callback||o,d=f,h=e.complete||o;n(u?e.yep:e.nope,!!c),c&&n(c)}var l,u,f=this.yepnope.loader;if(r(e))a(e,0,f,0);else if(k(e))for(l=0;l<e.length;l++)u=e[l],r(u)?a(u,0,f,0):k(u)?d(u):Object(u)===u&&s(u,f);else Object(e)===e&&s(e,f)},d.addPrefix=function(e,t){T[e]=t},d.addFilter=function(e){A.push(e)},d.errorTimeout=1e4,null==t.readyState&&t.addEventListener&&(t.readyState="loading",t.addEventListener("DOMContentLoaded",f=function(){t.removeEventListener("DOMContentLoaded",f,0),t.readyState="complete"},0)),e.yepnope=c(),e.yepnope.executeStack=s,e.yepnope.injectJs=function(e,n,i,r,l,u){var c,f,h=t.createElement("script"),r=r||d.errorTimeout;h.src=e;for(f in i)h.setAttribute(f,i[f]);n=u?s:n||o,h.onreadystatechange=h.onload=function(){!c&&a(h.readyState)&&(c=1,n(),h.onload=h.onreadystatechange=null)},p(function(){c||(c=1,n(1))},r),l?h.onload():v.parentNode.insertBefore(h,v)},e.yepnope.injectCss=function(e,n,i,r,a,l){var u,r=t.createElement("link"),n=l?s:n||o;r.href=e,r.rel="stylesheet",r.type="text/css";for(u in i)r.setAttribute(u,i[u]);a||(v.parentNode.insertBefore(r,v),p(n,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))},function(){for(var e,t=function(){},n=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],i=n.length,r=window.console=window.console||{};i--;)e=n[i],r[e]||(r[e]=t)}(),!function(e,t){"function"==typeof define&&define.amd?define(["jquery"],function(n){return t(e,n)}):"object"==typeof exports?t(e,require("jquery")):t(e,e.jQuery||e.Zepto)}(this,function(e,t){"use strict";function n(e){if(C&&"none"===e.css("animation-name")&&"none"===e.css("-webkit-animation-name")&&"none"===e.css("-moz-animation-name")&&"none"===e.css("-o-animation-name")&&"none"===e.css("-ms-animation-name"))return 0;var t,n,i,r,o=e.css("animation-duration")||e.css("-webkit-animation-duration")||e.css("-moz-animation-duration")||e.css("-o-animation-duration")||e.css("-ms-animation-duration")||"0s",a=e.css("animation-delay")||e.css("-webkit-animation-delay")||e.css("-moz-animation-delay")||e.css("-o-animation-delay")||e.css("-ms-animation-delay")||"0s",s=e.css("animation-iteration-count")||e.css("-webkit-animation-iteration-count")||e.css("-moz-animation-iteration-count")||e.css("-o-animation-iteration-count")||e.css("-ms-animation-iteration-count")||"1";for(o=o.split(", "),a=a.split(", "),s=s.split(", "),r=0,n=o.length,t=Number.NEGATIVE_INFINITY;r<n;r++)i=parseFloat(o[r])*parseInt(s[r],10)+parseFloat(a[r]),i>t&&(t=i);return t}function i(){if(t(document.body).height()<=t(window).height())return 0;var e,n,i=document.createElement("div"),r=document.createElement("div");return i.style.visibility="hidden",i.style.width="100px",document.body.appendChild(i),e=i.offsetWidth,i.style.overflow="scroll",r.style.width="100%",i.appendChild(r),n=r.offsetWidth,i.parentNode.removeChild(i),e-n}function r(){if(!_){var e,n,r=t("html"),o=c("is-locked");r.hasClass(o)||(n=t(document.body),e=parseInt(n.css("padding-right"),10)+i(),n.css("padding-right",e+"px"),r.addClass(o))}}function o(){if(!_){var e,n,r=t("html"),o=c("is-locked");r.hasClass(o)&&(n=t(document.body),e=parseInt(n.css("padding-right"),10)-i(),n.css("padding-right",e+"px"),r.removeClass(o))}}function a(e,t,n,i){var r=c("is",t),o=[c("is",w.CLOSING),c("is",w.OPENING),c("is",w.CLOSED),c("is",w.OPENED)].join(" ");e.$bg.removeClass(o).addClass(r),e.$overlay.removeClass(o).addClass(r),e.$wrapper.removeClass(o).addClass(r),e.$modal.removeClass(o).addClass(r),e.state=t,!n&&e.$modal.trigger({type:t,reason:i},[{reason:i}])}function s(e,i,r){var o=0,a=function(e){e.target===this&&o++},s=function(e){e.target===this&&0===--o&&(t.each(["$bg","$overlay","$wrapper","$modal"],function(e,t){r[t].off(g+" "+y)}),i())};t.each(["$bg","$overlay","$wrapper","$modal"],function(e,t){r[t].on(g,a).on(y,s)}),e(),0===n(r.$bg)&&0===n(r.$overlay)&&0===n(r.$wrapper)&&0===n(r.$modal)&&(t.each(["$bg","$overlay","$wrapper","$modal"],function(e,t){r[t].off(g+" "+y)}),i())}function l(e){e.state!==w.CLOSED&&(t.each(["$bg","$overlay","$wrapper","$modal"],function(t,n){e[n].off(g+" "+y)}),e.$bg.removeClass(e.settings.modifier),e.$overlay.removeClass(e.settings.modifier).hide(),e.$wrapper.hide(),o(),a(e,w.CLOSED,!0))}function u(e){var t,n,i,r,o={};for(e=e.replace(/\s*:\s*/g,":").replace(/\s*,\s*/g,","),t=e.split(","),r=0,n=t.length;r<n;r++)t[r]=t[r].split(":"),i=t[r][1],("string"==typeof i||i instanceof String)&&(i="true"===i||"false"!==i&&i),("string"==typeof i||i instanceof String)&&(i=isNaN(i)?i:+i),o[t[r][0]]=i;return o}function c(){for(var e=m,t=0;t<arguments.length;++t)e+="-"+arguments[t];return e}function f(){var e,n,i=location.hash.replace("#","");if(i){try{n=t('[data-remodal-id="'+i+'"]')}catch(e){}n&&n.length&&(e=t[v].lookup[n.data(v)],e&&e.settings.hashTracking&&e.open())}else h&&h.state===w.OPENED&&h.settings.hashTracking&&h.close()}function d(e,n){var i=t(document.body),r=i,o=this;o.settings=t.extend({},b,n),o.index=t[v].lookup.push(o)-1,o.state=w.CLOSED,o.$overlay=t("."+c("overlay")),null!==o.settings.appendTo&&o.settings.appendTo.length&&(r=t(o.settings.appendTo)),o.$overlay.length||(o.$overlay=t("<div>").addClass(c("overlay")+" "+c("is",w.CLOSED)).hide(),r.append(o.$overlay)),o.$bg=t("."+c("bg")).addClass(c("is",w.CLOSED)),o.$modal=e.addClass(m+" "+c("is-initialized")+" "+o.settings.modifier+" "+c("is",w.CLOSED)).attr("tabindex","-1"),o.$wrapper=t("<div>").addClass(c("wrapper")+" "+o.settings.modifier+" "+c("is",w.CLOSED)).hide().append(o.$modal),r.append(o.$wrapper),o.$wrapper.on("click."+m,'[data-remodal-action="close"]',function(e){e.preventDefault(),o.close()}),o.$wrapper.on("click."+m,'[data-remodal-action="cancel"]',function(e){e.preventDefault(),o.$modal.trigger(x.CANCELLATION),o.settings.closeOnCancel&&o.close(x.CANCELLATION)}),o.$wrapper.on("click."+m,'[data-remodal-action="confirm"]',function(e){e.preventDefault(),o.$modal.trigger(x.CONFIRMATION),o.settings.closeOnConfirm&&o.close(x.CONFIRMATION)}),o.$wrapper.on("click."+m,function(e){var n=t(e.target);n.hasClass(c("wrapper"))&&o.settings.closeOnOutsideClick&&o.close()})}var h,p,v="remodal",m=e.REMODAL_GLOBALS&&e.REMODAL_GLOBALS.NAMESPACE||v,g=t.map(["animationstart","webkitAnimationStart","MSAnimationStart","oAnimationStart"],function(e){return e+"."+m}).join(" "),y=t.map(["animationend","webkitAnimationEnd","MSAnimationEnd","oAnimationEnd"],function(e){return e+"."+m}).join(" "),b=t.extend({hashTracking:!0,closeOnConfirm:!0,closeOnCancel:!0,closeOnEscape:!0,closeOnOutsideClick:!0,modifier:"",appendTo:null},e.REMODAL_GLOBALS&&e.REMODAL_GLOBALS.DEFAULTS),w={CLOSING:"closing",CLOSED:"closed",OPENING:"opening",OPENED:"opened"},x={CONFIRMATION:"confirmation",CANCELLATION:"cancellation"},C=function(){var e=document.createElement("div").style;return void 0!==e.animationName||void 0!==e.WebkitAnimationName||void 0!==e.MozAnimationName||void 0!==e.msAnimationName||void 0!==e.OAnimationName}(),_=/iPad|iPhone|iPod/.test(navigator.platform);d.prototype.open=function(){var e,n=this;n.state!==w.OPENING&&n.state!==w.CLOSING&&(e=n.$modal.attr("data-remodal-id"),e&&n.settings.hashTracking&&(p=t(window).scrollTop(),location.hash=e),h&&h!==n&&l(h),h=n,r(),n.$bg.addClass(n.settings.modifier),n.$overlay.addClass(n.settings.modifier).show(),n.$wrapper.show().scrollTop(0),n.$modal.focus(),s(function(){a(n,w.OPENING)},function(){a(n,w.OPENED)},n))},d.prototype.close=function(e){var n=this;n.state!==w.OPENING&&n.state!==w.CLOSING&&(n.settings.hashTracking&&n.$modal.attr("data-remodal-id")===location.hash.substr(1)&&(location.hash="",t(window).scrollTop(p)),s(function(){a(n,w.CLOSING,!1,e)},function(){n.$bg.removeClass(n.settings.modifier),n.$overlay.removeClass(n.settings.modifier).hide(),n.$wrapper.hide(),o(),a(n,w.CLOSED,!1,e)},n))},d.prototype.getState=function(){return this.state},d.prototype.destroy=function(){var e,n=t[v].lookup;l(this),this.$wrapper.remove(),delete n[this.index],e=t.grep(n,function(e){return!!e}).length,0===e&&(this.$overlay.remove(),this.$bg.removeClass(c("is",w.CLOSING)+" "+c("is",w.OPENING)+" "+c("is",w.CLOSED)+" "+c("is",w.OPENED)))},t[v]={lookup:[]},t.fn[v]=function(e){var n,i;return this.each(function(r,o){i=t(o),null==i.data(v)?(n=new d(i,e),i.data(v,n.index),n.settings.hashTracking&&i.attr("data-remodal-id")===location.hash.substr(1)&&n.open()):n=t[v].lookup[i.data(v)]}),n},t(document).ready(function(){t(document).on("click","[data-remodal-target]",function(e){e.preventDefault();var n=e.currentTarget,i=n.getAttribute("data-remodal-target"),r=t('[data-remodal-id="'+i+'"]');t[v].lookup[r.data(v)].open()}),t(document).find("."+m).each(function(e,n){var i=t(n),r=i.data("remodal-options");r?("string"==typeof r||r instanceof String)&&(r=u(r)):r={},i[v](r)}),t(document).on("keydown."+m,function(e){h&&h.settings.closeOnEscape&&h.state===w.OPENED&&27===e.keyCode&&h.close()}),t(window).on("hashchange."+m,f)})}),!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Sweetalert2=t()}(this,function(){"use strict";var e="swal2-",t=function(t){var n={};for(var i in t)n[t[i]]=e+t[i];return n},n=t(["container","in","iosfix","modal","overlay","fade","show","hide","noanimation","close","title","content","spacer","confirm","cancel","icon","image","input","file","range","select","radio","checkbox","textarea","inputerror","validationerror","progresssteps","activeprogressstep","progresscircle","progressline","loading","styled"]),i=t(["success","warning","info","question","error"]),r={title:"",titleText:"",text:"",html:"",type:null,customClass:"",
animation:!0,allowOutsideClick:!0,allowEscapeKey:!0,showConfirmButton:!0,showCancelButton:!1,preConfirm:null,confirmButtonText:"OK",confirmButtonColor:"#3085d6",confirmButtonClass:null,cancelButtonText:"Cancel",cancelButtonColor:"#aaa",cancelButtonClass:null,buttonsStyling:!0,reverseButtons:!1,focusCancel:!1,showCloseButton:!1,showLoaderOnConfirm:!1,imageUrl:null,imageWidth:null,imageHeight:null,imageClass:null,timer:null,width:500,padding:20,background:"#fff",input:null,inputPlaceholder:"",inputValue:"",inputOptions:{},inputAutoTrim:!0,inputClass:null,inputAttributes:{},inputValidator:null,progressSteps:[],currentProgressStep:null,progressStepsDistance:"40px",onOpen:null,onClose:null},o=('\n  <div class="'+n.modal+'" tabIndex="-1">\n    <ul class="'+n.progresssteps+'"></ul>\n    <div class="'+n.icon+" "+i.error+'">\n      <span class="x-mark"><span class="line left"></span><span class="line right"></span></span>\n    </div>\n    <div class="'+n.icon+" "+i.question+'">?</div>\n    <div class="'+n.icon+" "+i.warning+'">!</div>\n    <div class="'+n.icon+" "+i.info+'">i</div>\n    <div class="'+n.icon+" "+i.success+'">\n      <span class="line tip"></span> <span class="line long"></span>\n      <div class="placeholder"></div> <div class="fix"></div>\n    </div>\n    <img class="'+n.image+'">\n    <h2 class="'+n.title+'"></h2>\n    <div class="'+n.content+'"></div>\n    <input class="'+n.input+'">\n    <input type="file" class="'+n.file+'">\n    <div class="'+n.range+'">\n      <output></output>\n      <input type="range">\n    </div>\n    <select class="'+n.select+'"></select>\n    <div class="'+n.radio+'"></div>\n    <label for="'+n.checkbox+'" class="'+n.checkbox+'">\n      <input type="checkbox">\n    </label>\n    <textarea class="'+n.textarea+'"></textarea>\n    <div class="'+n.validationerror+'"></div>\n    <hr class="'+n.spacer+'">\n    <button type="button" class="'+n.confirm+'">OK</button>\n    <button type="button" class="'+n.cancel+'">Cancel</button>\n    <span class="'+n.close+'">&times;</span>\n  </div>\n').replace(/(^|\n)\s*/g,""),a=void 0,s=document.getElementsByClassName(n.container);s.length?a=s[0]:(a=document.createElement("div"),a.className=n.container,a.innerHTML=o);var l=function(e,t){e=String(e).replace(/[^0-9a-f]/gi,""),e.length<6&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),t=t||0;for(var n="#",i=0;i<3;i++){var r=parseInt(e.substr(2*i,2),16);r=Math.round(Math.min(Math.max(0,r+r*t),255)).toString(16),n+=("00"+r).substr(r.length)}return n},u={previousWindowKeyDown:null,previousActiveElement:null,previousBodyPadding:null},c=function(){if("undefined"==typeof document)return void console.error("SweetAlert2 requires document to initialize");if(!document.getElementsByClassName(n.container).length){document.body.appendChild(a);var e=d(),t=N(e,n.input),i=N(e,n.file),r=e.querySelector("."+n.range+" input"),o=e.querySelector("."+n.range+" output"),s=N(e,n.select),l=e.querySelector("."+n.checkbox+" input"),u=N(e,n.textarea);return t.oninput=function(){K.resetValidationError()},t.onkeydown=function(e){setTimeout(function(){13===e.keyCode&&(e.stopPropagation(),K.clickConfirm())},0)},i.onchange=function(){K.resetValidationError()},r.oninput=function(){K.resetValidationError(),o.value=r.value},r.onchange=function(){K.resetValidationError(),r.previousSibling.value=r.value},s.onchange=function(){K.resetValidationError()},l.onchange=function(){K.resetValidationError()},u.oninput=function(){K.resetValidationError()},e}},f=function(e){return a.querySelector("."+e)},d=function(){return document.body.querySelector("."+n.modal)||c()},h=function(){var e=d();return e.querySelectorAll("."+n.icon)},p=function(){return f(n.title)},v=function(){return f(n.content)},m=function(){return f(n.image)},g=function(){return f(n.spacer)},y=function(){return f(n.progresssteps)},b=function(){return f(n.validationerror)},w=function(){return f(n.confirm)},x=function(){return f(n.cancel)},C=function(){return f(n.close)},_=function(t){var n=[w(),x()];return t&&n.reverse(),n.concat(Array.prototype.slice.call(d().querySelectorAll("button:not([class^="+e+"]), input:not([type=hidden]), textarea, select")))},k=function(e,t){return!!e.classList&&e.classList.contains(t)},A=function(e){if(e.focus(),"file"!==e.type){var t=e.value;e.value="",e.value=t}},E=function(e,t){if(e&&t){var n=t.split(/\s+/).filter(Boolean);n.forEach(function(t){e.classList.add(t)})}},T=function(e,t){if(e&&t){var n=t.split(/\s+/).filter(Boolean);n.forEach(function(t){e.classList.remove(t)})}},N=function(e,t){for(var n=0;n<e.childNodes.length;n++)if(k(e.childNodes[n],t))return e.childNodes[n]},S=function(e,t){t||(t="block"),e.style.opacity="",e.style.display=t},O=function(e){e.style.opacity="",e.style.display="none"},j=function(e){for(;e.firstChild;)e.removeChild(e.firstChild)},$=function(e){return e.offsetWidth||e.offsetHeight||e.getClientRects().length},D=function(e,t){e.style.removeProperty?e.style.removeProperty(t):e.style.removeAttribute(t)},L=function(e){if(!$(e))return!1;if("function"==typeof MouseEvent){var t=new MouseEvent("click",{view:window,bubbles:!1,cancelable:!0});e.dispatchEvent(t)}else if(document.createEvent){var n=document.createEvent("MouseEvents");n.initEvent("click",!1,!1),e.dispatchEvent(n)}else document.createEventObject?e.fireEvent("onclick"):"function"==typeof e.onclick&&e.onclick()},P=function(){var e=document.createElement("div"),t={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd oanimationend",msAnimation:"MSAnimationEnd",animation:"animationend"};for(var n in t)if(t.hasOwnProperty(n)&&void 0!==e.style[n])return t[n];return!1}(),M=function(){var e=d();window.onkeydown=u.previousWindowKeyDown,u.previousActiveElement&&u.previousActiveElement.focus&&u.previousActiveElement.focus(),clearTimeout(e.timeout)},H=function(){var e=document.createElement("div");e.style.width="50px",e.style.height="50px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t},F=function(e,t){var n=void 0;return function(){var i=function(){n=null,e()};clearTimeout(n),n=setTimeout(i,t)}},R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B=(function(){function e(e){this.value=e}function t(t){function n(e,t){return new Promise(function(n,r){var s={key:e,arg:t,resolve:n,reject:r,next:null};a?a=a.next=s:(o=a=s,i(e,t))})}function i(n,o){try{var a=t[n](o),s=a.value;s instanceof e?Promise.resolve(s.value).then(function(e){i("next",e)},function(e){i("throw",e)}):r(a.done?"return":"normal",a.value)}catch(e){r("throw",e)}}function r(e,t){switch(e){case"return":o.resolve({value:t,done:!0});break;case"throw":o.reject(t);break;default:o.resolve({value:t,done:!1})}o=o.next,o?i(o.key,o.arg):a=null}var o,a;this._invoke=n,"function"!=typeof t.return&&(this.return=void 0)}return"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)},{wrap:function(e){return function(){return new t(e.apply(this,arguments))}},await:function(t){return new e(t)}}}(),Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}),q=B({},r),I=[],W=void 0,V=function(e){var t=d();for(var o in e)r.hasOwnProperty(o)||"extraParams"===o||console.warn('SweetAlert2: Unknown parameter "'+o+'"');t.style.width="number"==typeof e.width?e.width+"px":e.width,t.style.padding=e.padding+"px",t.style.background=e.background;var a=p(),s=v(),l=w(),u=x(),c=C();if(e.titleText?a.innerText=e.titleText:a.innerHTML=e.title.split("\n").join("<br>"),e.text||e.html){if("object"===R(e.html))if(s.innerHTML="",0 in e.html)for(var f=0;f in e.html;f++)s.appendChild(e.html[f].cloneNode(!0));else s.appendChild(e.html.cloneNode(!0));else e.html?s.innerHTML=e.html:e.text&&(s.textContent=e.text);S(s)}else O(s);e.showCloseButton?S(c):O(c),t.className=n.modal,e.customClass&&E(t,e.customClass);var b=y(),_=parseInt(null===e.currentProgressStep?K.getQueueStep():e.currentProgressStep,10);e.progressSteps.length?(S(b),j(b),_>=e.progressSteps.length&&console.warn("SweetAlert2: Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"),e.progressSteps.forEach(function(t,i){var r=document.createElement("li");if(E(r,n.progresscircle),r.innerHTML=t,i===_&&E(r,n.activeprogressstep),b.appendChild(r),i!==e.progressSteps.length-1){var o=document.createElement("li");E(o,n.progressline),o.style.width=e.progressStepsDistance,b.appendChild(o)}})):O(b);for(var k=h(),A=0;A<k.length;A++)O(k[A]);if(e.type){var N=!1;for(var $ in i)if(e.type===$){N=!0;break}if(!N)return console.error("SweetAlert2: Unknown alert type: "+e.type),!1;var L=t.querySelector("."+n.icon+"."+i[e.type]);switch(S(L),e.type){case"success":E(L,"animate"),E(L.querySelector(".tip"),"animate-success-tip"),E(L.querySelector(".long"),"animate-success-long");break;case"error":E(L,"animate-error-icon"),E(L.querySelector(".x-mark"),"animate-x-mark");break;case"warning":E(L,"pulse-warning")}}var P=m();e.imageUrl?(P.setAttribute("src",e.imageUrl),S(P),e.imageWidth?P.setAttribute("width",e.imageWidth):P.removeAttribute("width"),e.imageHeight?P.setAttribute("height",e.imageHeight):P.removeAttribute("height"),P.className=n.image,e.imageClass&&E(P,e.imageClass)):O(P),e.showCancelButton?u.style.display="inline-block":O(u),e.showConfirmButton?D(l,"display"):O(l);var M=g();e.showConfirmButton||e.showCancelButton?S(M):O(M),l.innerHTML=e.confirmButtonText,u.innerHTML=e.cancelButtonText,e.buttonsStyling&&(l.style.backgroundColor=e.confirmButtonColor,u.style.backgroundColor=e.cancelButtonColor),l.className=n.confirm,E(l,e.confirmButtonClass),u.className=n.cancel,E(u,e.cancelButtonClass),e.buttonsStyling?(E(l,n.styled),E(u,n.styled)):(T(l,n.styled),T(u,n.styled),l.style.backgroundColor=l.style.borderLeftColor=l.style.borderRightColor="",u.style.backgroundColor=u.style.borderLeftColor=u.style.borderRightColor=""),e.animation===!0?T(t,n.noanimation):E(t,n.noanimation)},U=function(e,t){var i=d();e?(E(i,n.show),E(a,n.fade),T(i,n.hide)):T(i,n.fade),S(i),a.style.overflowY="hidden",P&&!k(i,n.noanimation)?i.addEventListener(P,function e(){i.removeEventListener(P,e),a.style.overflowY="auto"}):a.style.overflowY="auto",E(a,n.in),E(document.body,n.in),z(),G(),u.previousActiveElement=document.activeElement,null!==t&&"function"==typeof t&&t(i)},z=function(){null===u.previousBodyPadding&&document.body.scrollHeight>window.innerHeight&&(u.previousBodyPadding=document.body.style.paddingRight,document.body.style.paddingRight=H()+"px")},X=function(){null!==u.previousBodyPadding&&(document.body.style.paddingRight=u.previousBodyPadding,u.previousBodyPadding=null)},G=function(){var e=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream;if(e&&!k(document.body,n.iosfix)){var t=document.body.scrollTop;document.body.style.top=t*-1+"px",E(document.body,n.iosfix)}},J=function(){if(k(document.body,n.iosfix)){var e=parseInt(document.body.style.top,10);T(document.body,n.iosfix),document.body.style.top="",document.body.scrollTop=e*-1}},Y=function(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];if(void 0===t[0])return console.error("SweetAlert2 expects at least 1 attribute!"),!1;var r=B({},q);switch(R(t[0])){case"string":r.title=t[0],r.html=t[1],r.type=t[2];break;case"object":B(r,t[0]),r.extraParams=t[0].extraParams,"email"===r.input&&null===r.inputValidator&&(r.inputValidator=function(e){return new Promise(function(t,n){var i=/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;i.test(e)?t():n("Invalid email address")})});break;default:return console.error('SweetAlert2: Unexpected type of argument! Expected "string" or "object", got '+R(t[0])),!1}V(r);var o=d();return new Promise(function(e,t){r.timer&&(o.timeout=setTimeout(function(){K.closeModal(r.onClose),t("timer")},r.timer));var i=function(e){switch(e=e||r.input){case"select":case"textarea":case"file":return N(o,n[e]);case"checkbox":return o.querySelector("."+n.checkbox+" input");case"radio":return o.querySelector("."+n.radio+" input:checked")||o.querySelector("."+n.radio+" input:first-child");case"range":return o.querySelector("."+n.range+" input");default:return N(o,n.input)}},s=function(){var e=i();if(!e)return null;switch(r.input){case"checkbox":return e.checked?1:0;case"radio":return e.checked?e.value:null;case"file":return e.files.length?e.files[0]:null;default:return r.inputAutoTrim?e.value.trim():e.value}};r.input&&setTimeout(function(){var e=i();e&&A(e)},0);for(var c=function(t){r.showLoaderOnConfirm&&K.showLoading(),r.preConfirm?r.preConfirm(t,r.extraParams).then(function(n){K.closeModal(r.onClose),e(n||t)},function(e){K.hideLoading(),e&&K.showValidationError(e)}):(K.closeModal(r.onClose),e(t))},f=function(e){var n=e||window.event,i=n.target||n.srcElement,o=w(),a=x(),u=o===i||o.contains(i),f=a===i||a.contains(i);switch(n.type){case"mouseover":case"mouseup":r.buttonsStyling&&(u?o.style.backgroundColor=l(r.confirmButtonColor,-.1):f&&(a.style.backgroundColor=l(r.cancelButtonColor,-.1)));break;case"mouseout":r.buttonsStyling&&(u?o.style.backgroundColor=r.confirmButtonColor:f&&(a.style.backgroundColor=r.cancelButtonColor));break;case"mousedown":r.buttonsStyling&&(u?o.style.backgroundColor=l(r.confirmButtonColor,-.2):f&&(a.style.backgroundColor=l(r.cancelButtonColor,-.2)));break;case"click":u&&K.isVisible()?r.input?!function(){var e=s();r.inputValidator?(K.disableInput(),r.inputValidator(e,r.extraParams).then(function(){K.enableInput(),c(e)},function(e){K.enableInput(),e&&K.showValidationError(e)})):c(e)}():c(!0):f&&K.isVisible()&&(K.closeModal(r.onClose),t("cancel"))}},h=o.querySelectorAll("button"),p=0;p<h.length;p++)h[p].onclick=f,h[p].onmouseover=f,h[p].onmouseout=f,h[p].onmousedown=f;C().onclick=function(){K.closeModal(r.onClose),t("close")},a.onclick=function(e){e.target===a&&r.allowOutsideClick&&(K.closeModal(r.onClose),t("overlay"))};var v=w(),m=x();r.reverseButtons?v.parentNode.insertBefore(m,v):v.parentNode.insertBefore(v,m);var k=function(e,t){for(var n=_(r.focusCancel),i=0;i<n.length;i++){e+=t,e===n.length?e=0:e===-1&&(e=n.length-1);var o=n[e];if($(o))return o.focus()}},j=function(e){var n=e||window.event,i=n.keyCode||n.which;if([9,13,32,27].indexOf(i)!==-1){for(var o=n.target||n.srcElement,a=_(r.focusCancel),s=-1,l=0;l<a.length;l++)if(o===a[l]){s=l;break}9===i?(n.shiftKey?k(s,-1):k(s,1),n.stopPropagation(),n.preventDefault()):13===i||32===i?s===-1&&(r.focusCancel?L(m,n):L(v,n)):27===i&&r.allowEscapeKey===!0&&(K.closeModal(r.onClose),t("esc"))}};u.previousWindowKeyDown=window.onkeydown,window.onkeydown=j,r.buttonsStyling&&(v.style.borderLeftColor=r.confirmButtonColor,v.style.borderRightColor=r.confirmButtonColor),K.showLoading=K.enableLoading=function(){S(g()),S(v,"inline-block"),E(v,n.loading),E(o,n.loading),v.disabled=!0,m.disabled=!0},K.hideLoading=K.disableLoading=function(){r.showConfirmButton||(O(v),r.showCancelButton||O(g())),T(v,n.loading),T(o,n.loading),v.disabled=!1,m.disabled=!1},K.enableButtons=function(){v.disabled=!1,m.disabled=!1},K.disableButtons=function(){v.disabled=!0,m.disabled=!0},K.enableConfirmButton=function(){v.disabled=!1},K.disableConfirmButton=function(){v.disabled=!0},K.enableInput=function(){var e=i();if(!e)return!1;if("radio"===e.type)for(var t=e.parentNode.parentNode,n=t.querySelectorAll("input"),r=0;r<n.length;r++)n[r].disabled=!1;else e.disabled=!1},K.disableInput=function(){var e=i();if(!e)return!1;if(e&&"radio"===e.type)for(var t=e.parentNode.parentNode,n=t.querySelectorAll("input"),r=0;r<n.length;r++)n[r].disabled=!0;else e.disabled=!0},K.recalculateHeight=F(function(){var e=d(),t=e.style.display;e.style.minHeight="",S(e),e.style.minHeight=e.scrollHeight+1+"px",e.style.display=t},50),K.showValidationError=function(e){var t=b();t.innerHTML=e,S(t);var r=i();A(r),E(r,n.inputerror)},K.resetValidationError=function(){var e=b();O(e),K.recalculateHeight();var t=i();t&&T(t,n.inputerror)},K.getProgressSteps=function(){return r.progressSteps},K.setProgressSteps=function(e){r.progressSteps=e,V(r)},K.showProgressSteps=function(){S(y())},K.hideProgressSteps=function(){O(y())},K.enableButtons(),K.hideLoading(),K.resetValidationError();for(var D=["input","file","range","select","radio","checkbox","textarea"],P=void 0,M=0;M<D.length;M++){var H=n[D[M]],B=N(o,H);if(P=i(D[M])){for(var q in P.attributes)if(P.attributes.hasOwnProperty(q)){var I=P.attributes[q].name;"type"!==I&&"value"!==I&&P.removeAttribute(I)}for(var z in r.inputAttributes)P.setAttribute(z,r.inputAttributes[z])}B.className=H,r.inputClass&&E(B,r.inputClass),O(B)}var X=void 0;!function(){switch(r.input){case"text":case"email":case"password":case"number":case"tel":P=N(o,n.input),P.value=r.inputValue,P.placeholder=r.inputPlaceholder,P.type=r.input,S(P);break;case"file":P=N(o,n.file),P.placeholder=r.inputPlaceholder,P.type=r.input,S(P);break;case"range":var e=N(o,n.range),t=e.querySelector("input"),a=e.querySelector("output");t.value=r.inputValue,t.type=r.input,a.value=r.inputValue,S(e);break;case"select":var s=N(o,n.select);if(s.innerHTML="",r.inputPlaceholder){var l=document.createElement("option");l.innerHTML=r.inputPlaceholder,l.value="",l.disabled=!0,l.selected=!0,s.appendChild(l)}X=function(e){for(var t in e){var n=document.createElement("option");n.value=t,n.innerHTML=e[t],r.inputValue===t&&(n.selected=!0),s.appendChild(n)}S(s),s.focus()};break;case"radio":var u=N(o,n.radio);u.innerHTML="",X=function(e){for(var t in e){var i=1,o=document.createElement("input"),a=document.createElement("label"),s=document.createElement("span");o.type="radio",o.name=n.radio,o.value=t,o.id=n.radio+"-"+i++,r.inputValue===t&&(o.checked=!0),s.innerHTML=e[t],a.appendChild(o),a.appendChild(s),a.for=o.id,u.appendChild(a)}S(u);var l=u.querySelectorAll("input");l.length&&l[0].focus()};break;case"checkbox":var c=N(o,n.checkbox),f=i("checkbox");f.type="checkbox",f.value=1,f.id=n.checkbox,f.checked=Boolean(r.inputValue);var d=c.getElementsByTagName("span");d.length&&c.removeChild(d[0]),d=document.createElement("span"),d.innerHTML=r.inputPlaceholder,c.appendChild(d),S(c);break;case"textarea":var h=N(o,n.textarea);h.value=r.inputValue,h.placeholder=r.inputPlaceholder,S(h);break;case null:break;default:console.error('SweetAlert2: Unexpected type of input! Expected "text", "email", "password", "select", "checkbox", "textarea" or "file", got "'+r.input+'"')}}(),"select"!==r.input&&"radio"!==r.input||(r.inputOptions instanceof Promise?(K.showLoading(),r.inputOptions.then(function(e){K.hideLoading(),X(e)})):"object"===R(r.inputOptions)?X(r.inputOptions):console.error("SweetAlert2: Unexpected type of inputOptions! Expected object or Promise, got "+R(r.inputOptions))),U(r.animation,r.onOpen),k(-1,1),a.scrollTop=0,"undefined"==typeof MutationObserver||W||(W=new MutationObserver(K.recalculateHeight),W.observe(o,{childList:!0,characterData:!0,subtree:!0}))})},K=function e(){for(var t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];return e.isVisible()&&e.close(),Y.apply(void 0,n)};return K.isVisible=function(){var e=d();return $(e)},K.queue=function(e){I=e;var t=d(),n=function(){I=[],t.removeAttribute("data-queue-step")},i=[];return new Promise(function(e,r){!function o(a,s){a<I.length?(t.setAttribute("data-queue-step",a),K(I[a]).then(function(e){i.push(e),o(a+1,s)},function(e){n(),r(e)})):(n(),e(i))}(0)})},K.getQueueStep=function(){return d().getAttribute("data-queue-step")},K.insertQueueStep=function(e,t){return t&&t<I.length?I.splice(t,0,e):I.push(e)},K.deleteQueueStep=function(e){"undefined"!=typeof I[e]&&I.splice(e,1)},K.close=K.closeModal=function(e){var t=d();T(t,n.show),E(t,n.hide);var r=t.querySelector("."+n.icon+"."+i.success);T(r,"animate"),T(r.querySelector(".tip"),"animate-success-tip"),T(r.querySelector(".long"),"animate-success-long");var o=t.querySelector("."+n.icon+"."+i.error);T(o,"animate-error-icon"),T(o.querySelector(".x-mark"),"animate-x-mark");var s=t.querySelector("."+n.icon+"."+i.warning);T(s,"pulse-warning"),M();var l=function(){O(t),t.style.minHeight="",T(a,n.in),T(document.body,n.in),X(),J()};P&&!k(t,n.noanimation)?t.addEventListener(P,function e(){t.removeEventListener(P,e),k(t,n.hide)&&l()}):l(),null!==e&&"function"==typeof e&&e(t)},K.clickConfirm=function(){return w().click()},K.clickCancel=function(){return x().click()},K.setDefaults=function(e){if(!e||"object"!==("undefined"==typeof e?"undefined":R(e)))return console.error("SweetAlert2: the argument for setDefaults() is required and has to be a object");for(var t in e)r.hasOwnProperty(t)||"extraParams"===t||(console.warn('SweetAlert2: Unknown parameter "'+t+'"'),delete e[t]);B(q,e)},K.resetDefaults=function(){q=B({},r)},K.noop=function(){},K.version="6.2.8",K}),window.Sweetalert2&&(window.sweetAlert=window.swal=window.Sweetalert2),function(e,t){"use strict";var n="0.7.12",i="",r="?",o="function",a="undefined",s="object",l="string",u="major",c="model",f="name",d="type",h="vendor",p="version",v="architecture",m="console",g="mobile",y="tablet",b="smarttv",w="wearable",x="embedded",C={extend:function(e,t){var n={};for(var i in e)t[i]&&t[i].length%2===0?n[i]=t[i].concat(e[i]):n[i]=e[i];return n},has:function(e,t){return"string"==typeof e&&t.toLowerCase().indexOf(e.toLowerCase())!==-1},lowerize:function(e){return e.toLowerCase()},major:function(e){return typeof e===l?e.replace(/[^\d\.]/g,"").split(".")[0]:t},trim:function(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}},_={rgx:function(){for(var e,n,i,r,l,u,c,f=0,d=arguments;f<d.length&&!u;){var h=d[f],p=d[f+1];if(typeof e===a){e={};for(r in p)p.hasOwnProperty(r)&&(l=p[r],typeof l===s?e[l[0]]=t:e[l]=t)}for(n=i=0;n<h.length&&!u;)if(u=h[n++].exec(this.getUA()))for(r=0;r<p.length;r++)c=u[++i],l=p[r],typeof l===s&&l.length>0?2==l.length?typeof l[1]==o?e[l[0]]=l[1].call(this,c):e[l[0]]=l[1]:3==l.length?typeof l[1]!==o||l[1].exec&&l[1].test?e[l[0]]=c?c.replace(l[1],l[2]):t:e[l[0]]=c?l[1].call(this,c,l[2]):t:4==l.length&&(e[l[0]]=c?l[3].call(this,c.replace(l[1],l[2])):t):e[l]=c?c:t;f+=2}return e},str:function(e,n){for(var i in n)if(typeof n[i]===s&&n[i].length>0){for(var o=0;o<n[i].length;o++)if(C.has(n[i][o],e))return i===r?t:i}else if(C.has(n[i],e))return i===r?t:i;return e}},k={browser:{oldsafari:{version:{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}}},device:{amazon:{model:{"Fire Phone":["SD","KF"]}},sprint:{model:{"Evo Shift 4G":"7373KT"},vendor:{HTC:"APA",Sprint:"Sprint"}}},os:{windows:{version:{ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"}}}},A={browser:[[/(opera\smini)\/([\w\.-]+)/i,/(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,/(opera).+version\/([\w\.]+)/i,/(opera)[\/\s]+([\w\.]+)/i],[f,p],[/(opios)[\/\s]+([\w\.]+)/i],[[f,"Opera Mini"],p],[/\s(opr)\/([\w\.]+)/i],[[f,"Opera"],p],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]+)*/i,/(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,/(?:ms|\()(ie)\s([\w\.]+)/i,/(rekonq)\/([\w\.]+)*/i,/(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs)\/([\w\.-]+)/i],[f,p],[/(trident).+rv[:\s]([\w\.]+).+like\sgecko/i],[[f,"IE"],p],[/(edge)\/((\d+)?[\w\.]+)/i],[f,p],[/(yabrowser)\/([\w\.]+)/i],[[f,"Yandex"],p],[/(comodo_dragon)\/([\w\.]+)/i],[[f,/_/g," "],p],[/(micromessenger)\/([\w\.]+)/i],[[f,"WeChat"],p],[/xiaomi\/miuibrowser\/([\w\.]+)/i],[p,[f,"MIUI Browser"]],[/\swv\).+(chrome)\/([\w\.]+)/i],[[f,/(.+)/,"$1 WebView"],p],[/android.+samsungbrowser\/([\w\.]+)/i,/android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i],[p,[f,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i,/(qqbrowser)[\/\s]?([\w\.]+)/i],[f,p],[/(uc\s?browser)[\/\s]?([\w\.]+)/i,/ucweb.+(ucbrowser)[\/\s]?([\w\.]+)/i,/juc.+(ucweb)[\/\s]?([\w\.]+)/i],[[f,"UCBrowser"],p],[/(dolfin)\/([\w\.]+)/i],[[f,"Dolphin"],p],[/((?:android.+)crmo|crios)\/([\w\.]+)/i],[[f,"Chrome"],p],[/;fbav\/([\w\.]+);/i],[p,[f,"Facebook"]],[/fxios\/([\w\.-]+)/i],[p,[f,"Firefox"]],[/version\/([\w\.]+).+?mobile\/\w+\s(safari)/i],[p,[f,"Mobile Safari"]],[/version\/([\w\.]+).+?(mobile\s?safari|safari)/i],[p,f],[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],[f,[p,_.str,k.browser.oldsafari.version]],[/(konqueror)\/([\w\.]+)/i,/(webkit|khtml)\/([\w\.]+)/i],[f,p],[/(navigator|netscape)\/([\w\.-]+)/i],[[f,"Netscape"],p],[/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,/(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/([\w\.-]+)/i,/(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,/(links)\s\(([\w\.]+)/i,/(gobrowser)\/?([\w\.]+)*/i,/(ice\s?browser)\/v?([\w\._]+)/i,/(mosaic)[\/\s]([\w\.]+)/i],[f,p]],cpu:[[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],[[v,"amd64"]],[/(ia32(?=;))/i],[[v,C.lowerize]],[/((?:i[346]|x)86)[;\)]/i],[[v,"ia32"]],[/windows\s(ce|mobile);\sppc;/i],[[v,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],[[v,/ower/,"",C.lowerize]],[/(sun4\w)[;\)]/i],[[v,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i],[[v,C.lowerize]]],device:[[/\((ipad|playbook);[\w\s\);-]+(rim|apple)/i],[c,h,[d,y]],[/applecoremedia\/[\w\.]+ \((ipad)/],[c,[h,"Apple"],[d,y]],[/(apple\s{0,1}tv)/i],[[c,"Apple TV"],[h,"Apple"]],[/(archos)\s(gamepad2?)/i,/(hp).+(touchpad)/i,/(hp).+(tablet)/i,/(kindle)\/([\w\.]+)/i,/\s(nook)[\w\s]+build\/(\w+)/i,/(dell)\s(strea[kpr\s\d]*[\dko])/i],[h,c,[d,y]],[/(kf[A-z]+)\sbuild\/[\w\.]+.*silk\//i],[c,[h,"Amazon"],[d,y]],[/(sd|kf)[0349hijorstuw]+\sbuild\/[\w\.]+.*silk\//i],[[c,_.str,k.device.amazon.model],[h,"Amazon"],[d,g]],[/\((ip[honed|\s\w*]+);.+(apple)/i],[c,h,[d,g]],[/\((ip[honed|\s\w*]+);/i],[c,[h,"Apple"],[d,g]],[/(blackberry)[\s-]?(\w+)/i,/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|huawei|meizu|motorola|polytron)[\s_-]?([\w-]+)*/i,/(hp)\s([\w\s]+\w)/i,/(asus)-?(\w+)/i],[h,c,[d,g]],[/\(bb10;\s(\w+)/i],[c,[h,"BlackBerry"],[d,g]],[/android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i],[c,[h,"Asus"],[d,y]],[/(sony)\s(tablet\s[ps])\sbuild\//i,/(sony)?(?:sgp.+)\sbuild\//i],[[h,"Sony"],[c,"Xperia Tablet"],[d,y]],[/(?:sony)?(?:(?:(?:c|d)\d{4})|(?:so[-l].+))\sbuild\//i],[[h,"Sony"],[c,"Xperia Phone"],[d,g]],[/\s(ouya)\s/i,/(nintendo)\s([wids3u]+)/i],[h,c,[d,m]],[/android.+;\s(shield)\sbuild/i],[c,[h,"Nvidia"],[d,m]],[/(playstation\s[34portablevi]+)/i],[c,[h,"Sony"],[d,m]],[/(sprint\s(\w+))/i],[[h,_.str,k.device.sprint.vendor],[c,_.str,k.device.sprint.model],[d,g]],[/(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i],[h,c,[d,y]],[/(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,/(zte)-(\w+)*/i,/(alcatel|geeksphone|huawei|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i],[h,[c,/_/g," "],[d,g]],[/(nexus\s9)/i],[c,[h,"HTC"],[d,y]],[/(nexus\s6p)/i],[c,[h,"Huawei"],[d,g]],[/(microsoft);\s(lumia[\s\w]+)/i],[h,c,[d,g]],[/[\s\(;](xbox(?:\sone)?)[\s\);]/i],[c,[h,"Microsoft"],[d,m]],[/(kin\.[onetw]{3})/i],[[c,/\./g," "],[h,"Microsoft"],[d,g]],[/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?(:?\s4g)?)[\w\s]+build\//i,/mot[\s-]?(\w+)*/i,/(XT\d{3,4}) build\//i,/(nexus\s6)/i],[c,[h,"Motorola"],[d,g]],[/android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],[c,[h,"Motorola"],[d,y]],[/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i],[[h,C.trim],[c,C.trim],[d,b]],[/hbbtv.+maple;(\d+)/i],[[c,/^/,"SmartTV"],[h,"Samsung"],[d,b]],[/\(dtv[\);].+(aquos)/i],[c,[h,"Sharp"],[d,b]],[/android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,/((SM-T\w+))/i],[[h,"Samsung"],c,[d,y]],[/smart-tv.+(samsung)/i],[h,[d,b],c],[/((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,/(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i,/sec-((sgh\w+))/i],[[h,"Samsung"],c,[d,g]],[/sie-(\w+)*/i],[c,[h,"Siemens"],[d,g]],[/(maemo|nokia).*(n900|lumia\s\d+)/i,/(nokia)[\s_-]?([\w-]+)*/i],[[h,"Nokia"],c,[d,g]],[/android\s3\.[\s\w;-]{10}(a\d{3})/i],[c,[h,"Acer"],[d,y]],[/android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i],[[h,"LG"],c,[d,y]],[/(lg) netcast\.tv/i],[h,c,[d,b]],[/(nexus\s[45])/i,/lg[e;\s\/-]+(\w+)*/i],[c,[h,"LG"],[d,g]],[/android.+(ideatab[a-z0-9\-\s]+)/i],[c,[h,"Lenovo"],[d,y]],[/linux;.+((jolla));/i],[h,c,[d,g]],[/((pebble))app\/[\d\.]+\s/i],[h,c,[d,w]],[/android.+;\s(glass)\s\d/i],[c,[h,"Google"],[d,w]],[/android.+(\w+)\s+build\/hm\1/i,/android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,/android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d\w)?)\s+build/i],[[c,/_/g," "],[h,"Xiaomi"],[d,g]],[/android.+a000(1)\s+build/i],[c,[h,"OnePlus"],[d,g]],[/\s(tablet)[;\/]/i,/\s(mobile)(?:[;\/]|\ssafari)/i],[[d,C.lowerize],h,c]],engine:[[/windows.+\sedge\/([\w\.]+)/i],[p,[f,"EdgeHTML"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,/(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,/(icab)[\/\s]([23]\.[\d\.]+)/i],[f,p],[/rv\:([\w\.]+).*(gecko)/i],[p,f]],os:[[/microsoft\s(windows)\s(vista|xp)/i],[f,p],[/(windows)\snt\s6\.2;\s(arm)/i,/(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s]+\w)*/i,/(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i],[f,[p,_.str,k.os.windows.version]],[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],[[f,"Windows"],[p,_.str,k.os.windows.version]],[/\((bb)(10);/i],[[f,"BlackBerry"],p],[/(blackberry)\w*\/?([\w\.]+)*/i,/(tizen)[\/\s]([\w\.]+)/i,/(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]+)*/i,/linux;.+(sailfish);/i],[f,p],[/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i],[[f,"Symbian"],p],[/\((series40);/i],[f],[/mozilla.+\(mobile;.+gecko.+firefox/i],[[f,"Firefox OS"],p],[/(nintendo|playstation)\s([wids34portablevu]+)/i,/(mint)[\/\s\(]?(\w+)*/i,/(mageia|vectorlinux)[;\s]/i,/(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]+)*/i,/(hurd|linux)\s?([\w\.]+)*/i,/(gnu)\s?([\w\.]+)*/i],[f,p],[/(cros)\s[\w]+\s([\w\.]+\w)/i],[[f,"Chromium OS"],p],[/(sunos)\s?([\w\.]+\d)*/i],[[f,"Solaris"],p],[/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i],[f,p],[/(haiku)\s(\w+)/i],[f,p],[/(ip[honead]+)(?:.*os\s([\w]+)*\slike\smac|;\sopera)/i],[[f,"iOS"],[p,/_/g,"."]],[/(mac\sos\sx)\s?([\w\s\.]+\w)*/i,/(macintosh|mac(?=_powerpc)\s)/i],[[f,"Mac OS"],[p,/_/g,"."]],[/((?:open)?solaris)[\/\s-]?([\w\.]+)*/i,/(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i,/(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,/(unix)\s?([\w\.]+)*/i],[f,p]]},E=function(t,n){if(this instanceof E){var r=t||(e&&e.navigator&&e.navigator.userAgent?e.navigator.userAgent:i),o=n?C.extend(A,n):A;return this.getBrowser=function(){var e=_.rgx.apply(this,o.browser);return e.major=C.major(e.version),e},this.getCPU=function(){return _.rgx.apply(this,o.cpu)},this.getDevice=function(){return _.rgx.apply(this,o.device)},this.getEngine=function(){return _.rgx.apply(this,o.engine)},this.getOS=function(){return _.rgx.apply(this,o.os)},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return r},this.setUA=function(e){return r=e,this},this}return new E(t,n).getResult()};E.VERSION=n,E.BROWSER={NAME:f,MAJOR:u,VERSION:p},E.CPU={ARCHITECTURE:v},E.DEVICE={MODEL:c,VENDOR:h,TYPE:d,CONSOLE:m,MOBILE:g,SMARTTV:b,TABLET:y,WEARABLE:w,EMBEDDED:x},E.ENGINE={NAME:f,VERSION:p},E.OS={NAME:f,VERSION:p},typeof exports!==a?(typeof module!==a&&module.exports&&(exports=module.exports=E),exports.UAParser=E):typeof define===o&&define.amd?define(function(){
return E}):e.UAParser=E;var T=e.jQuery||e.Zepto;if(typeof T!==a){var N=new E;T.ua=N.getResult(),T.ua.get=function(){return N.getUA()},T.ua.set=function(e){N.setUA(e);var t=N.getResult();for(var n in t)T.ua[n]=t[n]}}}("object"==typeof window?window:this);var URLSearchParams=URLSearchParams||function(){"use strict";function e(e){return encodeURIComponent(e).replace(o,l)}function t(e){return decodeURIComponent(e.replace(a," "))}function n(e){if(this[c]=Object.create(null),e){"?"===e.charAt(0)&&(e=e.slice(1));for(var n,i,r=(e||"").split("&"),o=0,a=r.length;o<a;o++)i=r[o],n=i.indexOf("="),-1<n?this.append(t(i.slice(0,n)),t(i.slice(n+1))):i.length&&this.append(t(i),"")}}function i(){try{return!!Symbol.iterator}catch(e){return!1}}var r=n.prototype,o=/[!'\(\)~]|%20|%00/g,a=/\+/g,s={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"},l=function(e){return s[e]},u=i(),c="__URLSearchParams__:"+Math.random();r.append=function(e,t){var n=this[c];e in n?n[e].push(""+t):n[e]=[""+t]},r.delete=function(e){delete this[c][e]},r.get=function(e){var t=this[c];return e in t?t[e][0]:null},r.getAll=function(e){var t=this[c];return e in t?t[e].slice(0):[]},r.has=function(e){return e in this[c]},r.set=function(e,t){this[c][e]=[""+t]},r.forEach=function(e,t){var n=this[c];Object.getOwnPropertyNames(n).forEach(function(i){n[i].forEach(function(n){e.call(t,n,i,this)},this)},this)},r.keys=function(){var e=[];this.forEach(function(t,n){e.push(n)});var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return u&&(t[Symbol.iterator]=function(){return t}),t},r.values=function(){var e=[];this.forEach(function(t){e.push(t)});var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return u&&(t[Symbol.iterator]=function(){return t}),t},r.entries=function(){var e=[];this.forEach(function(t,n){e.push([n,t])});var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return u&&(t[Symbol.iterator]=function(){return t}),t},u&&(r[Symbol.iterator]=r.entries),r.toJSON=function(){return{}},r.toString=function(){var t,n,i,r,o=this[c],a=[];for(n in o)for(i=e(n),t=0,r=o[n];t<r.length;t++)a.push(i+"="+e(r[t]));return a.join("&")};var f=Object.defineProperty,d=Object.getOwnPropertyDescriptor,h=function(e){function t(t,n){r.append.call(this,t,n),t=this.toString(),e.set.call(this._usp,t?"?"+t:"")}function n(t){r.delete.call(this,t),t=this.toString(),e.set.call(this._usp,t?"?"+t:"")}function i(t,n){r.set.call(this,t,n),t=this.toString(),e.set.call(this._usp,t?"?"+t:"")}return function(e,r){return e.append=t,e.delete=n,e.set=i,f(e,"_usp",{configurable:!0,writable:!0,value:r})}},p=function(e){return function(t,n){return f(t,"_searchParams",{configurable:!0,writable:!0,value:e(n,t)}),n}},v=function(e){var t=e.append;e.append=r.append,n.call(e,e._usp.search.slice(1)),e.append=t},m=function(e,t){if(!(e instanceof t))throw new TypeError("'searchParams' accessed on an object that does not implement interface "+t.name)},g=function(e){var t,i=e.prototype,r=d(i,"searchParams"),o=d(i,"href"),a=d(i,"search");!r&&a&&a.set&&(t=p(h(a)),Object.defineProperties(i,{href:{get:function(){return o.get.call(this)},set:function(e){var t=this._searchParams;o.set.call(this,e),t&&v(t)}},search:{get:function(){return a.get.call(this)},set:function(e){var t=this._searchParams;a.set.call(this,e),t&&v(t)}},searchParams:{get:function(){return m(this,e),this._searchParams||t(this,new n(this.search.slice(1)))},set:function(n){m(this,e),t(this,n)}}}))};return g(HTMLAnchorElement),/^function|object$/.test(typeof URL)&&URL.prototype&&g(URL),n}();!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Vue=t()}(this,function(){"use strict";function e(t,i,r){if(n(t,i))return void(t[i]=r);if(t._isVue)return void e(t._data,i,r);var o=t.__ob__;if(!o)return void(t[i]=r);if(o.convert(i,r),o.dep.notify(),o.vms)for(var a=o.vms.length;a--;){var s=o.vms[a];s._proxy(i),s._digest()}return r}function t(e,t){if(n(e,t)){delete e[t];var i=e.__ob__;if(!i)return void(e._isVue&&(delete e._data[t],e._digest()));if(i.dep.notify(),i.vms)for(var r=i.vms.length;r--;){var o=i.vms[r];o._unproxy(t),o._digest()}}}function n(e,t){return On.call(e,t)}function i(e){return jn.test(e)}function r(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function o(e){return null==e?"":e.toString()}function a(e){if("string"!=typeof e)return e;var t=Number(e);return isNaN(t)?e:t}function s(e){return"true"===e||"false"!==e&&e}function l(e){var t=e.charCodeAt(0),n=e.charCodeAt(e.length-1);return t!==n||34!==t&&39!==t?e:e.slice(1,-1)}function u(e){return e.replace($n,c)}function c(e,t){return t?t.toUpperCase():""}function f(e){return e.replace(Dn,"$1-$2").toLowerCase()}function d(e){return e.replace(Ln,c)}function h(e,t){return function(n){var i=arguments.length;return i?i>1?e.apply(t,arguments):e.call(t,n):e.call(t)}}function p(e,t){t=t||0;for(var n=e.length-t,i=new Array(n);n--;)i[n]=e[n+t];return i}function v(e,t){for(var n=Object.keys(t),i=n.length;i--;)e[n[i]]=t[n[i]];return e}function m(e){return null!==e&&"object"==typeof e}function g(e){return Pn.call(e)===Mn}function y(e,t,n,i){Object.defineProperty(e,t,{value:n,enumerable:!!i,writable:!0,configurable:!0})}function b(e,t){var n,i,r,o,a,s=function s(){var l=Date.now()-o;l<t&&l>=0?n=setTimeout(s,t-l):(n=null,a=e.apply(r,i),n||(r=i=null))};return function(){return r=this,i=arguments,o=Date.now(),n||(n=setTimeout(s,t)),a}}function w(e,t){for(var n=e.length;n--;)if(e[n]===t)return n;return-1}function x(e){var t=function t(){if(!t.cancelled)return e.apply(this,arguments)};return t.cancel=function(){t.cancelled=!0},t}function C(e,t){return e==t||!(!m(e)||!m(t))&&JSON.stringify(e)===JSON.stringify(t)}function _(e){this.size=0,this.limit=e,this.head=this.tail=void 0,this._keymap=Object.create(null)}function k(){var e,t=ri.slice(ci,li).trim();if(t){e={};var n=t.match(gi);e.name=n[0],n.length>1&&(e.args=n.slice(1).map(A))}e&&(oi.filters=oi.filters||[]).push(e),ci=li+1}function A(e){if(yi.test(e))return{value:a(e),dynamic:!1};var t=l(e),n=t===e;return{value:n?e:t,dynamic:n}}function E(e){var t=mi.get(e);if(t)return t;for(ri=e,fi=di=!1,hi=pi=vi=0,ci=0,oi={},li=0,ui=ri.length;li<ui;li++)if(si=ai,ai=ri.charCodeAt(li),fi)39===ai&&92!==si&&(fi=!fi);else if(di)34===ai&&92!==si&&(di=!di);else if(124===ai&&124!==ri.charCodeAt(li+1)&&124!==ri.charCodeAt(li-1))null==oi.expression?(ci=li+1,oi.expression=ri.slice(0,li).trim()):k();else switch(ai){case 34:di=!0;break;case 39:fi=!0;break;case 40:vi++;break;case 41:vi--;break;case 91:pi++;break;case 93:pi--;break;case 123:hi++;break;case 125:hi--}return null==oi.expression?oi.expression=ri.slice(0,li).trim():0!==ci&&k(),mi.put(e,oi),oi}function T(e){return e.replace(wi,"\\$&")}function N(){var e=T(Ni.delimiters[0]),t=T(Ni.delimiters[1]),n=T(Ni.unsafeDelimiters[0]),i=T(Ni.unsafeDelimiters[1]);Ci=new RegExp(n+"((?:.|\\n)+?)"+i+"|"+e+"((?:.|\\n)+?)"+t,"g"),_i=new RegExp("^"+n+"((?:.|\\n)+?)"+i+"$"),xi=new _(1e3)}function S(e){xi||N();var t=xi.get(e);if(t)return t;if(!Ci.test(e))return null;for(var n,i,r,o,a,s,l=[],u=Ci.lastIndex=0;n=Ci.exec(e);)i=n.index,i>u&&l.push({value:e.slice(u,i)}),r=_i.test(n[0]),o=r?n[1]:n[2],a=o.charCodeAt(0),s=42===a,o=s?o.slice(1):o,l.push({tag:!0,value:o.trim(),html:r,oneTime:s}),u=i+n[0].length;return u<e.length&&l.push({value:e.slice(u)}),xi.put(e,l),l}function O(e,t){return e.length>1?e.map(function(e){return j(e,t)}).join("+"):j(e[0],t,!0)}function j(e,t,n){return e.tag?e.oneTime&&t?'"'+t.$eval(e.value)+'"':$(e.value,n):'"'+e.value+'"'}function $(e,t){if(ki.test(e)){var n=E(e);return n.filters?"this._applyFilters("+n.expression+",null,"+JSON.stringify(n.filters)+",false)":"("+e+")"}return t?e:"("+e+")"}function D(e,t,n,i){M(e,1,function(){t.appendChild(e)},n,i)}function L(e,t,n,i){M(e,1,function(){I(e,t)},n,i)}function P(e,t,n){M(e,-1,function(){V(e)},t,n)}function M(e,t,n,i,r){var o=e.__v_trans;if(!o||!o.hooks&&!Yn||!i._isCompiled||i.$parent&&!i.$parent._isCompiled)return n(),void(r&&r());var a=t>0?"enter":"leave";o[a](n,r)}function H(e){if("string"==typeof e){var t=e;e=document.querySelector(e),e||Si("Cannot find element: "+t)}return e}function F(e){if(!e)return!1;var t=e.ownerDocument.documentElement,n=e.parentNode;return t===e||t===n||!(!n||1!==n.nodeType||!t.contains(n))}function R(e,t){var n=e.getAttribute(t);return null!==n&&e.removeAttribute(t),n}function B(e,t){var n=R(e,":"+t);return null===n&&(n=R(e,"v-bind:"+t)),n}function q(e,t){return e.hasAttribute(t)||e.hasAttribute(":"+t)||e.hasAttribute("v-bind:"+t)}function I(e,t){t.parentNode.insertBefore(e,t)}function W(e,t){t.nextSibling?I(e,t.nextSibling):t.parentNode.appendChild(e)}function V(e){e.parentNode.removeChild(e)}function U(e,t){t.firstChild?I(e,t.firstChild):t.appendChild(e)}function z(e,t){var n=e.parentNode;n&&n.replaceChild(t,e)}function X(e,t,n,i){e.addEventListener(t,n,i)}function G(e,t,n){e.removeEventListener(t,n)}function J(e){var t=e.className;return"object"==typeof t&&(t=t.baseVal||""),t}function Y(e,t){Wn&&!/svg$/.test(e.namespaceURI)?e.className=t:e.setAttribute("class",t)}function K(e,t){if(e.classList)e.classList.add(t);else{var n=" "+J(e)+" ";n.indexOf(" "+t+" ")<0&&Y(e,(n+t).trim())}}function Q(e,t){if(e.classList)e.classList.remove(t);else{for(var n=" "+J(e)+" ",i=" "+t+" ";n.indexOf(i)>=0;)n=n.replace(i," ");Y(e,n.trim())}e.className||e.removeAttribute("class")}function Z(e,t){var n,i;if(ne(e)&&se(e.content)&&(e=e.content),e.hasChildNodes())for(ee(e),i=t?document.createDocumentFragment():document.createElement("div");n=e.firstChild;)i.appendChild(n);return i}function ee(e){for(var t;t=e.firstChild,te(t);)e.removeChild(t);for(;t=e.lastChild,te(t);)e.removeChild(t)}function te(e){return e&&(3===e.nodeType&&!e.data.trim()||8===e.nodeType)}function ne(e){return e.tagName&&"template"===e.tagName.toLowerCase()}function ie(e,t){var n=Ni.debug?document.createComment(e):document.createTextNode(t?" ":"");return n.__v_anchor=!0,n}function re(e){if(e.hasAttributes())for(var t=e.attributes,n=0,i=t.length;n<i;n++){var r=t[n].name;if($i.test(r))return u(r.replace($i,""))}}function oe(e,t,n){for(var i;e!==t;)i=e.nextSibling,n(e),e=i;n(t)}function ae(e,t,n,i,r){function o(){if(s++,a&&s>=l.length){for(var e=0;e<l.length;e++)i.appendChild(l[e]);r&&r()}}var a=!1,s=0,l=[];oe(e,t,function(e){e===t&&(a=!0),l.push(e),P(e,n,o)})}function se(e){return e&&11===e.nodeType}function le(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}function ue(e,t){var n=e.tagName.toLowerCase(),i=e.hasAttributes();if(Di.test(n)||Li.test(n)){if(i)return ce(e,t)}else{if(ge(t,"components",n))return{id:n};var r=i&&ce(e,t);if(r)return r;var o=t._componentNameMap&&t._componentNameMap[n];o?Si("Unknown custom element: <"+n+"> - did you mean <"+o+">? HTML is case-insensitive, remember to use kebab-case in templates."):Pi(e,n)&&Si("Unknown custom element: <"+n+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.')}}function ce(e,t){var n=e.getAttribute("is");if(null!=n){if(ge(t,"components",n))return e.removeAttribute("is"),{id:n}}else if(n=B(e,"is"),null!=n)return{id:n,dynamic:!0}}function fe(t,i){var r,o,a;for(r in i)o=t[r],a=i[r],n(t,r)?m(o)&&m(a)&&fe(o,a):e(t,r,a);return t}function de(e,t){var n=Object.create(e||null);return t?v(n,ve(t)):n}function he(e){if(e.components)for(var t,n=e.components=ve(e.components),i=Object.keys(n),r=e._componentNameMap={},o=0,a=i.length;o<a;o++){var s=i[o];Di.test(s)||Li.test(s)?Si("Do not use built-in or reserved HTML elements as component id: "+s):(r[s.replace(/-/g,"").toLowerCase()]=f(s),t=n[s],g(t)&&(n[s]=kn.extend(t)))}}function pe(e){var t,n,i=e.props;if(Hn(i))for(e.props={},t=i.length;t--;)n=i[t],"string"==typeof n?e.props[n]=null:n.name&&(e.props[n.name]=n);else if(g(i)){var r=Object.keys(i);for(t=r.length;t--;)n=i[r[t]],"function"==typeof n&&(i[r[t]]={type:n})}}function ve(e){if(Hn(e)){for(var t,n={},i=e.length;i--;){t=e[i];var r="function"==typeof t?t.options&&t.options.name||t.id:t.name||t.id;r?n[r]=t:Si('Array-syntax assets must provide a "name" or "id" field.')}return n}return e}function me(e,t,i){function r(n){var r=Mi[n]||Hi;a[n]=r(e[n],t[n],i,n)}he(t),pe(t),t.propsData&&!i&&Si("propsData can only be used as an instantiation option.");var o,a={};if(t.extends&&(e="function"==typeof t.extends?me(e,t.extends.options,i):me(e,t.extends,i)),t.mixins)for(var s=0,l=t.mixins.length;s<l;s++){var u=t.mixins[s],c=u.prototype instanceof kn?u.options:u;e=me(e,c,i)}for(o in e)r(o);for(o in t)n(e,o)||r(o);return a}function ge(e,t,n,i){if("string"==typeof n){var r,o=e[t],a=o[n]||o[r=u(n)]||o[r.charAt(0).toUpperCase()+r.slice(1)];return i&&!a&&Si("Failed to resolve "+t.slice(0,-1)+": "+n,e),a}}function ye(){this.id=Fi++,this.subs=[]}function be(e){Ii=!1,e(),Ii=!0}function we(e){if(this.value=e,this.dep=new ye,y(e,"__ob__",this),Hn(e)){var t=Fn?xe:Ce;t(e,Bi,qi),this.observeArray(e)}else this.walk(e)}function xe(e,t){e.__proto__=t}function Ce(e,t,n){for(var i=0,r=n.length;i<r;i++){var o=n[i];y(e,o,t[o])}}function _e(e,t){if(e&&"object"==typeof e){var i;return n(e,"__ob__")&&e.__ob__ instanceof we?i=e.__ob__:Ii&&(Hn(e)||g(e))&&Object.isExtensible(e)&&!e._isVue&&(i=new we(e)),i&&t&&i.addVm(t),i}}function ke(e,t,n){var i=new ye,r=Object.getOwnPropertyDescriptor(e,t);if(!r||r.configurable!==!1){var o=r&&r.get,a=r&&r.set,s=_e(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=o?o.call(e):n;if(ye.target&&(i.depend(),s&&s.dep.depend(),Hn(t)))for(var r,a=0,l=t.length;a<l;a++)r=t[a],r&&r.__ob__&&r.__ob__.dep.depend();return t},set:function(t){var r=o?o.call(e):n;t!==r&&(a?a.call(e,t):n=t,s=_e(t),i.notify())}})}}function Ae(e){e.prototype._init=function(e){e=e||{},this.$el=null,this.$parent=e.parent,this.$root=this.$parent?this.$parent.$root:this,this.$children=[],this.$refs={},this.$els={},this._watchers=[],this._directives=[],this._uid=Vi++,this._isVue=!0,this._events={},this._eventsCount={},this._isFragment=!1,this._fragment=this._fragmentStart=this._fragmentEnd=null,this._isCompiled=this._isDestroyed=this._isReady=this._isAttached=this._isBeingDestroyed=this._vForRemoving=!1,this._unlinkFn=null,this._context=e._context||this.$parent,this._scope=e._scope,this._frag=e._frag,this._frag&&this._frag.children.push(this),this.$parent&&this.$parent.$children.push(this),e=this.$options=me(this.constructor.options,e,this),this._updateRef(),this._data={},this._callHook("init"),this._initState(),this._initEvents(),this._callHook("created"),e.el&&this.$mount(e.el)}}function Ee(e){if(void 0===e)return"eof";var t=e.charCodeAt(0);switch(t){case 91:case 93:case 46:case 34:case 39:case 48:return e;case 95:case 36:return"ident";case 32:case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return t>=97&&t<=122||t>=65&&t<=90?"ident":t>=49&&t<=57?"number":"else"}function Te(e){var t=e.trim();return("0"!==e.charAt(0)||!isNaN(e))&&(i(t)?l(t):"*"+t)}function Ne(e){function t(){var t=e[c+1];if(f===tr&&"'"===t||f===nr&&'"'===t)return c++,i="\\"+t,h[zi](),!0}var n,i,r,o,a,s,l,u=[],c=-1,f=Yi,d=0,h=[];for(h[Xi]=function(){void 0!==r&&(u.push(r),r=void 0)},h[zi]=function(){void 0===r?r=i:r+=i},h[Gi]=function(){h[zi](),d++},h[Ji]=function(){if(d>0)d--,f=er,h[zi]();else{if(d=0,r=Te(r),r===!1)return!1;h[Xi]()}};null!=f;)if(c++,n=e[c],"\\"!==n||!t()){if(o=Ee(n),l=or[f],a=l[o]||l.else||rr,a===rr)return;if(f=a[0],s=h[a[1]],s&&(i=a[2],i=void 0===i?n:i,s()===!1))return;if(f===ir)return u.raw=e,u}}function Se(e){var t=Ui.get(e);return t||(t=Ne(e),t&&Ui.put(e,t)),t}function Oe(e,t){return Re(t).get(e)}function je(t,n,i){var r=t;if("string"==typeof n&&(n=Ne(n)),!n||!m(t))return!1;for(var o,a,s=0,l=n.length;s<l;s++)o=t,a=n[s],"*"===a.charAt(0)&&(a=Re(a.slice(1)).get.call(r,r)),s<l-1?(t=t[a],m(t)||(t={},o._isVue&&ar(n,o),e(o,a,t))):Hn(t)?t.$set(a,i):a in t?t[a]=i:(t._isVue&&ar(n,t),e(t,a,i));return!0}function $e(){}function De(e,t){var n=wr.length;return wr[n]=t?e.replace(pr,"\\n"):e,'"'+n+'"'}function Le(e){var t=e.charAt(0),n=e.slice(1);return cr.test(n)?e:(n=n.indexOf('"')>-1?n.replace(mr,Pe):n,t+"scope."+n)}function Pe(e,t){return wr[t]}function Me(e){dr.test(e)&&Si("Avoid using reserved keywords in expression: "+e),wr.length=0;var t=e.replace(vr,De).replace(hr,"");return t=(" "+t).replace(yr,Le).replace(mr,Pe),He(t)}function He(e){try{return new Function("scope","return "+e+";")}catch(t){return Si(t.toString().match(/unsafe-eval|CSP/)?"It seems you are using the default build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. Use the CSP-compliant build instead: http://vuejs.org/guide/installation.html#CSP-compliant-build":"Invalid expression. Generated function body: "+e),$e}}function Fe(e){var t=Se(e);return t?function(e,n){je(e,t,n)}:void Si("Invalid setter expression: "+e)}function Re(e,t){e=e.trim();var n=lr.get(e);if(n)return t&&!n.set&&(n.set=Fe(n.exp)),n;var i={exp:e};return i.get=Be(e)&&e.indexOf("[")<0?He("scope."+e):Me(e),t&&(i.set=Fe(e)),lr.put(e,i),i}function Be(e){return gr.test(e)&&!br.test(e)&&"Math."!==e.slice(0,5)}function qe(){Cr.length=0,_r.length=0,kr={},Ar={},Er=!1}function Ie(){for(var e=!0;e;)e=!1,We(Cr),We(_r),Cr.length?e=!0:(Bn&&Ni.devtools&&Bn.emit("flush"),qe())}function We(e){for(var t=0;t<e.length;t++){var n=e[t],i=n.id;if(kr[i]=null,n.run(),null!=kr[i]&&(Ar[i]=(Ar[i]||0)+1,Ar[i]>Ni._maxUpdateCount)){Si('You may have an infinite update loop for watcher with expression "'+n.expression+'"',n.vm);break}}e.length=0}function Ve(e){var t=e.id;if(null==kr[t]){var n=e.user?_r:Cr;kr[t]=n.length,n.push(e),Er||(Er=!0,ti(Ie))}}function Ue(e,t,n,i){i&&v(this,i);var r="function"==typeof t;if(this.vm=e,e._watchers.push(this),this.expression=t,this.cb=n,this.id=++Tr,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ni,this.newDepIds=new ni,this.prevError=null,r)this.getter=t,this.setter=void 0;else{var o=Re(t,this.twoWay);this.getter=o.get,this.setter=o.set}this.value=this.lazy?void 0:this.get(),this.queued=this.shallow=!1}function ze(e,t){var n=void 0,i=void 0;t||(t=Nr,t.clear());var r=Hn(e),o=m(e);if((r||o)&&Object.isExtensible(e)){if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(r)for(n=e.length;n--;)ze(e[n],t);else if(o)for(i=Object.keys(e),n=i.length;n--;)ze(e[i[n]],t)}}function Xe(e){return ne(e)&&se(e.content)}function Ge(e,t){var n=t?e:e.trim(),i=Or.get(n);if(i)return i;var r=document.createDocumentFragment(),o=e.match(Dr),a=Lr.test(e),s=Pr.test(e);if(o||a||s){var l=o&&o[1],u=$r[l]||$r.efault,c=u[0],f=u[1],d=u[2],h=document.createElement("div");for(h.innerHTML=f+e+d;c--;)h=h.lastChild;for(var p;p=h.firstChild;)r.appendChild(p)}else r.appendChild(document.createTextNode(e));return t||ee(r),Or.put(n,r),r}function Je(e){if(Xe(e))return Ge(e.innerHTML);if("SCRIPT"===e.tagName)return Ge(e.textContent);for(var t,n=Ye(e),i=document.createDocumentFragment();t=n.firstChild;)i.appendChild(t);return ee(i),i}function Ye(e){if(!e.querySelectorAll)return e.cloneNode();var t,n,i,r=e.cloneNode(!0);if(Mr){var o=r;if(Xe(e)&&(e=e.content,o=r.content),n=e.querySelectorAll("template"),n.length)for(i=o.querySelectorAll("template"),t=i.length;t--;)i[t].parentNode.replaceChild(Ye(n[t]),i[t])}if(Hr)if("TEXTAREA"===e.tagName)r.value=e.value;else if(n=e.querySelectorAll("textarea"),n.length)for(i=r.querySelectorAll("textarea"),t=i.length;t--;)i[t].value=n[t].value;return r}function Ke(e,t,n){var i,r;return se(e)?(ee(e),t?Ye(e):e):("string"==typeof e?n||"#"!==e.charAt(0)?r=Ge(e,n):(r=jr.get(e),r||(i=document.getElementById(e.slice(1)),i&&(r=Je(i),jr.put(e,r)))):e.nodeType&&(r=Je(e)),r&&t?Ye(r):r)}function Qe(e,t,n,i,r,o){this.children=[],this.childFrags=[],this.vm=t,this.scope=r,this.inserted=!1,this.parentFrag=o,o&&o.childFrags.push(this),this.unlink=e(t,n,i,r,this);var a=this.single=1===n.childNodes.length&&!n.childNodes[0].__v_anchor;a?(this.node=n.childNodes[0],this.before=Ze,this.remove=et):(this.node=ie("fragment-start"),this.end=ie("fragment-end"),this.frag=n,U(this.node,n),n.appendChild(this.end),this.before=tt,this.remove=nt),this.node.__v_frag=this}function Ze(e,t){this.inserted=!0;var n=t!==!1?L:I;n(this.node,e,this.vm),F(this.node)&&this.callHook(it)}function et(){this.inserted=!1;var e=F(this.node),t=this;this.beforeRemove(),P(this.node,this.vm,function(){e&&t.callHook(rt),t.destroy()})}function tt(e,t){this.inserted=!0;var n=this.vm,i=t!==!1?L:I;oe(this.node,this.end,function(t){i(t,e,n)}),F(this.node)&&this.callHook(it)}function nt(){this.inserted=!1;var e=this,t=F(this.node);this.beforeRemove(),ae(this.node,this.end,this.vm,this.frag,function(){t&&e.callHook(rt),e.destroy()})}function it(e){!e._isAttached&&F(e.$el)&&e._callHook("attached")}function rt(e){e._isAttached&&!F(e.$el)&&e._callHook("detached")}function ot(e,t){this.vm=e;var n,i="string"==typeof t;i||ne(t)&&!t.hasAttribute("v-if")?n=Ke(t,!0):(n=document.createDocumentFragment(),n.appendChild(t)),this.template=n;var r,o=e.constructor.cid;if(o>0){var a=o+(i?t:le(t));r=Br.get(a),r||(r=Mt(n,e.$options,!0),Br.put(a,r))}else r=Mt(n,e.$options,!0);this.linker=r}function at(e,t,n){var i=e.node.previousSibling;if(i){for(e=i.__v_frag;!(e&&e.forId===n&&e.inserted||i===t);){if(i=i.previousSibling,!i)return;e=i.__v_frag}return e}}function st(e){var t=e.node;if(e.end)for(;!t.__vue__&&t!==e.end&&t.nextSibling;)t=t.nextSibling;return t.__vue__}function lt(e){for(var t=-1,n=new Array(Math.floor(e));++t<e;)n[t]=t;return n}function ut(e,t,n,i){return i?"$index"===i?e:i.charAt(0).match(/\w/)?Oe(n,i):n[i]:t||n}function ct(e,t,n){for(var i,r,o,a=t?[]:null,s=0,l=e.options.length;s<l;s++)if(i=e.options[s],o=n?i.hasAttribute("selected"):i.selected){if(r=i.hasOwnProperty("_value")?i._value:i.value,!t)return r;a.push(r)}return a}function ft(e,t){for(var n=e.length;n--;)if(C(e[n],t))return n;return-1}function dt(e,t){var n=t.map(function(e){var t=e.charCodeAt(0);return t>47&&t<58?parseInt(e,10):1===e.length&&(t=e.toUpperCase().charCodeAt(0),t>64&&t<91)?t:so[e]});return n=[].concat.apply([],n),function(t){if(n.indexOf(t.keyCode)>-1)return e.call(this,t)}}function ht(e){return function(t){return t.stopPropagation(),e.call(this,t)}}function pt(e){return function(t){return t.preventDefault(),e.call(this,t)}}function vt(e){return function(t){if(t.target===t.currentTarget)return e.call(this,t)}}function mt(e){if(ho[e])return ho[e];var t=gt(e);return ho[e]=ho[t]=t,t}function gt(e){e=f(e);var t=u(e),n=t.charAt(0).toUpperCase()+t.slice(1);po||(po=document.createElement("div"));var i,r=uo.length;if("filter"!==t&&t in po.style)return{kebab:e,camel:t};for(;r--;)if(i=co[r]+n,i in po.style)return{kebab:uo[r]+e,camel:i}}function yt(e){var t=[];if(Hn(e))for(var n=0,i=e.length;n<i;n++){var r=e[n];if(r)if("string"==typeof r)t.push(r);else for(var o in r)r[o]&&t.push(o)}else if(m(e))for(var a in e)e[a]&&t.push(a);return t}function bt(e,t,n){if(t=t.trim(),t.indexOf(" ")===-1)return void n(e,t);for(var i=t.split(/\s+/),r=0,o=i.length;r<o;r++)n(e,i[r])}function wt(e,t,n){function i(){++o>=r?n():e[o].call(t,i)}var r=e.length,o=0;e[0].call(t,i)}function xt(e,t,n){for(var r,o,a,s,l,c,d,h=[],p=Object.keys(t),v=p.length;v--;)if(o=p[v],r=t[o]||Oo,"$data"!==o)if(l=u(o),jo.test(l)){if(d={name:o,path:l,options:r,mode:So.ONE_WAY,raw:null},a=f(o),null===(s=B(e,a))&&(null!==(s=B(e,a+".sync"))?d.mode=So.TWO_WAY:null!==(s=B(e,a+".once"))&&(d.mode=So.ONE_TIME)),null!==s)d.raw=s,c=E(s),s=c.expression,d.filters=c.filters,i(s)&&!c.filters?d.optimizedLiteral=!0:(d.dynamic=!0,d.mode!==So.TWO_WAY||$o.test(s)||(d.mode=So.ONE_WAY,Si("Cannot bind two-way prop with non-settable parent path: "+s,n))),d.parentPath=s,r.twoWay&&d.mode!==So.TWO_WAY&&Si('Prop "'+o+'" expects a two-way binding type.',n);else if(null!==(s=R(e,a)))d.raw=s;else{var m=l.toLowerCase();s=/[A-Z\-]/.test(o)&&(e.getAttribute(m)||e.getAttribute(":"+m)||e.getAttribute("v-bind:"+m)||e.getAttribute(":"+m+".once")||e.getAttribute("v-bind:"+m+".once")||e.getAttribute(":"+m+".sync")||e.getAttribute("v-bind:"+m+".sync")),s?Si("Possible usage error for prop `"+m+"` - did you mean `"+a+"`? HTML is case-insensitive, remember to use kebab-case for props in templates.",n):r.required&&Si("Missing required prop: "+o,n)}h.push(d)}else Si('Invalid prop key: "'+o+'". Prop keys must be valid identifiers.',n);else Si("Do not use $data as prop.",n);return Ct(h)}function Ct(e){return function(t,i){t._props={};for(var r,o,u,c,d,h=t.$options.propsData,p=e.length;p--;)if(r=e[p],d=r.raw,o=r.path,u=r.options,t._props[o]=r,h&&n(h,o)&&kt(t,r,h[o]),null===d)kt(t,r,void 0);else if(r.dynamic)r.mode===So.ONE_TIME?(c=(i||t._context||t).$get(r.parentPath),kt(t,r,c)):t._context?t._bindDir({name:"prop",def:Lo,prop:r},null,null,i):kt(t,r,t.$get(r.parentPath));else if(r.optimizedLiteral){var v=l(d);c=v===d?s(a(d)):v,kt(t,r,c)}else c=u.type===Boolean&&(""===d||d===f(r.name))||d,kt(t,r,c)}}function _t(e,t,n,i){var r=t.dynamic&&Be(t.parentPath),o=n;void 0===o&&(o=Et(e,t)),o=Nt(t,o,e);var a=o!==n;Tt(t,o,e)||(o=void 0),r&&!a?be(function(){i(o)}):i(o)}function kt(e,t,n){_t(e,t,n,function(n){ke(e,t.path,n)})}function At(e,t,n){_t(e,t,n,function(n){e[t.path]=n})}function Et(e,t){var i=t.options;if(!n(i,"default"))return i.type!==Boolean&&void 0;var r=i.default;return m(r)&&Si('Invalid default value for prop "'+t.name+'": Props with type Object/Array must use a factory function to return the default value.',e),"function"==typeof r&&i.type!==Function?r.call(e):r}function Tt(e,t,n){if(!e.options.required&&(null===e.raw||null==t))return!0;var i=e.options,r=i.type,o=!r,a=[];if(r){Hn(r)||(r=[r]);for(var s=0;s<r.length&&!o;s++){var l=St(t,r[s]);a.push(l.expectedType),o=l.valid}}if(!o)return Si('Invalid prop: type check failed for prop "'+e.name+'". Expected '+a.map(Ot).join(", ")+", got "+jt(t)+".",n),!1;var u=i.validator;return!(u&&!u(t))||(Si('Invalid prop: custom validator check failed for prop "'+e.name+'".',n),!1)}function Nt(e,t,n){var i=e.options.coerce;return i?"function"==typeof i?i(t):(Si('Invalid coerce for prop "'+e.name+'": expected function, got '+typeof i+".",n),t):t}function St(e,t){var n,i;return t===String?(i="string",n=typeof e===i):t===Number?(i="number",n=typeof e===i):t===Boolean?(i="boolean",n=typeof e===i):t===Function?(i="function",n=typeof e===i):t===Object?(i="object",n=g(e)):t===Array?(i="array",n=Hn(e)):n=e instanceof t,{valid:n,expectedType:i}}function Ot(e){return e?e.charAt(0).toUpperCase()+e.slice(1):"custom type"}function jt(e){return Object.prototype.toString.call(e).slice(8,-1)}function $t(e){Po.push(e),Mo||(Mo=!0,ti(Dt))}function Dt(){for(var e=document.documentElement.offsetHeight,t=0;t<Po.length;t++)Po[t]();return Po=[],Mo=!1,e}function Lt(e,t,n,i){this.id=t,this.el=e,this.enterClass=n&&n.enterClass||t+"-enter",this.leaveClass=n&&n.leaveClass||t+"-leave",this.hooks=n,this.vm=i,this.pendingCssEvent=this.pendingCssCb=this.cancel=this.pendingJsCb=this.op=this.cb=null,this.justEntered=!1,this.entered=this.left=!1,this.typeCache={},this.type=n&&n.type,this.type&&this.type!==Ho&&this.type!==Fo&&Si('invalid CSS transition type for transition="'+this.id+'": '+this.type,i);var r=this;["enterNextTick","enterDone","leaveNextTick","leaveDone"].forEach(function(e){r[e]=h(r[e],r)})}function Pt(e){if(/svg$/.test(e.namespaceURI)){var t=e.getBoundingClientRect();return!(t.width||t.height)}return!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}function Mt(e,t,n){var i=n||!t._asComponent?Wt(e,t):null,r=i&&i.terminal||sn(e)||!e.hasChildNodes()?null:Jt(e.childNodes,t);return function(e,t,n,o,a){var s=p(t.childNodes),l=Ht(function(){i&&i(e,t,n,o,a),r&&r(e,s,n,o,a)},e);return Rt(e,l)}}function Ht(e,t){var n=t._directives.length;e();var i=t._directives.slice(n);i.sort(Ft);for(var r=0,o=i.length;r<o;r++)i[r]._bind();return i}function Ft(e,t){return e=e.descriptor.def.priority||Ko,t=t.descriptor.def.priority||Ko,e>t?-1:e===t?0:1}function Rt(e,t,n,i){function r(r){Bt(e,t,r),n&&i&&Bt(n,i)}return r.dirs=t,r}function Bt(e,t,n){for(var i=t.length;i--;)t[i]._teardown(),n||e._directives.$remove(t[i])}function qt(e,t,n,i){var r=xt(t,n,e),o=Ht(function(){r(e,i)},e);return Rt(e,o)}function It(e,t,n){var i,r,o=t._containerAttrs,a=t._replacerAttrs;if(11!==e.nodeType)t._asComponent?(o&&n&&(i=nn(o,n)),a&&(r=nn(a,t))):r=nn(e.attributes,t);else if(o){var s=o.filter(function(e){return e.name.indexOf("_v-")<0&&!Xo.test(e.name)&&"slot"!==e.name}).map(function(e){return'"'+e.name+'"'});if(s.length){var l=s.length>1;Si("Attribute"+(l?"s ":" ")+s.join(", ")+(l?" are":" is")+" ignored on component <"+t.el.tagName.toLowerCase()+"> because the component is a fragment instance: http://vuejs.org/guide/components.html#Fragment-Instance")}}return t._containerAttrs=t._replacerAttrs=null,function(e,t,n){var o,a=e._context;a&&i&&(o=Ht(function(){i(a,t,null,n)},a));var s=Ht(function(){r&&r(e,t)},e);return Rt(e,s,a,o)}}function Wt(e,t){var n=e.nodeType;return 1!==n||sn(e)?3===n&&e.data.trim()?Ut(e,t):null:Vt(e,t)}function Vt(e,t){if("TEXTAREA"===e.tagName){var n=S(e.value);n&&(e.setAttribute(":value",O(n)),e.value="")}var i,r=e.hasAttributes(),o=r&&p(e.attributes);return r&&(i=Zt(e,o,t)),i||(i=Kt(e,t)),i||(i=Qt(e,t)),!i&&r&&(i=nn(o,t)),i}function Ut(e,t){if(e._skip)return zt;var n=S(e.wholeText);if(!n)return null;for(var i=e.nextSibling;i&&3===i.nodeType;)i._skip=!0,i=i.nextSibling;for(var r,o,a=document.createDocumentFragment(),s=0,l=n.length;s<l;s++)o=n[s],r=o.tag?Xt(o,t):document.createTextNode(o.value),a.appendChild(r);return Gt(n,a,t)}function zt(e,t){V(t)}function Xt(e,t){function n(t){if(!e.descriptor){var n=E(e.value);e.descriptor={name:t,def:Eo[t],expression:n.expression,filters:n.filters}}}var i;return e.oneTime?i=document.createTextNode(e.value):e.html?(i=document.createComment("v-html"),n("html")):(i=document.createTextNode(" "),n("text")),i}function Gt(e,t){return function(n,i,r,a){for(var s,l,u,c=t.cloneNode(!0),f=p(c.childNodes),d=0,h=e.length;d<h;d++)s=e[d],l=s.value,s.tag&&(u=f[d],s.oneTime?(l=(a||n).$eval(l),s.html?z(u,Ke(l,!0)):u.data=o(l)):n._bindDir(s.descriptor,u,r,a));z(i,c)}}function Jt(e,t){for(var n,i,r,o=[],a=0,s=e.length;a<s;a++)r=e[a],n=Wt(r,t),i=n&&n.terminal||"SCRIPT"===r.tagName||!r.hasChildNodes()?null:Jt(r.childNodes,t),o.push(n,i);return o.length?Yt(o):null}function Yt(e){return function(t,n,i,r,o){for(var a,s,l,u=0,c=0,f=e.length;u<f;c++){a=n[c],s=e[u++],l=e[u++];var d=p(a.childNodes);s&&s(t,a,i,r,o),l&&l(t,d,i,r,o)}}}function Kt(e,t){var n=e.tagName.toLowerCase();if(!Di.test(n)){var i=ge(t,"elementDirectives",n);return i?tn(e,n,"",t,i):void 0}}function Qt(e,t){var n=ue(e,t);if(n){var i=re(e),r={name:"component",ref:i,expression:n.id,def:Uo.component,modifiers:{literal:!n.dynamic}},o=function(e,t,n,o,a){i&&ke((o||e).$refs,i,null),e._bindDir(r,t,n,o,a)};return o.terminal=!0,o}}function Zt(e,t,n){if(null!==R(e,"v-pre"))return en;if(e.hasAttribute("v-else")){var i=e.previousElementSibling;if(i&&i.hasAttribute("v-if"))return en}for(var r,o,a,s,l,u,c,f,d,h,p=0,v=t.length;p<v;p++)r=t[p],o=r.name.replace(Jo,""),(l=o.match(Go))&&(d=ge(n,"directives",l[1]),d&&d.terminal&&(!h||(d.priority||Qo)>h.priority)&&(h=d,c=r.name,s=rn(r.name),a=r.value,u=l[1],f=l[2]));return h?tn(e,u,a,n,h,c,f,s):void 0}function en(){}function tn(e,t,n,i,r,o,a,s){var l=E(n),u={name:t,arg:a,expression:l.expression,filters:l.filters,raw:n,attr:o,modifiers:s,def:r};"for"!==t&&"router-view"!==t||(u.ref=re(e));var c=function(e,t,n,i,r){u.ref&&ke((i||e).$refs,u.ref,null),e._bindDir(u,t,n,i,r)};return c.terminal=!0,c}function nn(e,t){function n(e,t,n){var i=n&&an(n),r=!i&&E(o);v.push({name:e,attr:a,raw:s,def:t,arg:u,modifiers:c,expression:r&&r.expression,filters:r&&r.filters,interp:n,hasOneTime:i})}for(var i,r,o,a,s,l,u,c,f,d,h,p=e.length,v=[];p--;)if(i=e[p],r=a=i.name,o=s=i.value,d=S(o),u=null,c=rn(r),r=r.replace(Jo,""),d)o=O(d),u=r,n("bind",Eo.bind,d),"class"===r&&Array.prototype.some.call(e,function(e){
return":class"===e.name||"v-bind:class"===e.name})&&Si('class="'+s+'": Do not mix mustache interpolation and v-bind for "class" on the same element. Use one or the other.',t);else if(Yo.test(r))c.literal=!zo.test(r),n("transition",Uo.transition);else if(Xo.test(r))u=r.replace(Xo,""),n("on",Eo.on);else if(zo.test(r))l=r.replace(zo,""),"style"===l||"class"===l?n(l,Uo[l]):(u=l,n("bind",Eo.bind));else if(h=r.match(Go)){if(l=h[1],u=h[2],"else"===l)continue;f=ge(t,"directives",l,!0),f&&n(l,f)}if(v.length)return on(v)}function rn(e){var t=Object.create(null),n=e.match(Jo);if(n)for(var i=n.length;i--;)t[n[i].slice(1)]=!0;return t}function on(e){return function(t,n,i,r,o){for(var a=e.length;a--;)t._bindDir(e[a],n,i,r,o)}}function an(e){for(var t=e.length;t--;)if(e[t].oneTime)return!0}function sn(e){return"SCRIPT"===e.tagName&&(!e.hasAttribute("type")||"text/javascript"===e.getAttribute("type"))}function ln(e,t){return t&&(t._containerAttrs=cn(e)),ne(e)&&(e=Ke(e)),t&&(t._asComponent&&!t.template&&(t.template="<slot></slot>"),t.template&&(t._content=Z(e),e=un(e,t))),se(e)&&(U(ie("v-start",!0),e),e.appendChild(ie("v-end",!0))),e}function un(e,t){var n=t.template,i=Ke(n,!0);if(i){var r=i.firstChild,o=r.tagName&&r.tagName.toLowerCase();return t.replace?(e===document.body&&Si("You are mounting an instance with a template to <body>. This will replace <body> entirely. You should probably use `replace: false` here."),i.childNodes.length>1||1!==r.nodeType||"component"===o||ge(t,"components",o)||q(r,"is")||ge(t,"elementDirectives",o)||r.hasAttribute("v-for")||r.hasAttribute("v-if")?i:(t._replacerAttrs=cn(r),fn(e,r),r)):(e.appendChild(i),e)}Si("Invalid template option: "+n)}function cn(e){if(1===e.nodeType&&e.hasAttributes())return p(e.attributes)}function fn(e,t){for(var n,i,r=e.attributes,o=r.length;o--;)n=r[o].name,i=r[o].value,t.hasAttribute(n)||Zo.test(n)?"class"===n&&!S(i)&&(i=i.trim())&&i.split(/\s+/).forEach(function(e){K(t,e)}):t.setAttribute(n,i)}function dn(e,t){if(t){for(var n,i,r=e._slotContents=Object.create(null),o=0,a=t.children.length;o<a;o++)n=t.children[o],(i=n.getAttribute("slot"))&&(r[i]||(r[i]=[])).push(n),B(n,"slot")&&Si('The "slot" attribute must be static.',e.$parent);for(i in r)r[i]=hn(r[i],t);if(t.hasChildNodes()){var s=t.childNodes;if(1===s.length&&3===s[0].nodeType&&!s[0].data.trim())return;r.default=hn(t.childNodes,t)}}}function hn(e,t){var n=document.createDocumentFragment();e=p(e);for(var i=0,r=e.length;i<r;i++){var o=e[i];!ne(o)||o.hasAttribute("v-if")||o.hasAttribute("v-for")||(t.removeChild(o),o=Ke(o,!0)),n.appendChild(o)}return n}function pn(e){function t(){}function i(e,t){var n=new Ue(t,e,null,{lazy:!0});return function(){return n.dirty&&n.evaluate(),ye.target&&n.depend(),n.value}}Object.defineProperty(e.prototype,"$data",{get:function(){return this._data},set:function(e){e!==this._data&&this._setData(e)}}),e.prototype._initState=function(){this._initProps(),this._initMeta(),this._initMethods(),this._initData(),this._initComputed()},e.prototype._initProps=function(){var e=this.$options,t=e.el,n=e.props;n&&!t&&Si("Props will not be compiled if no `el` option is provided at instantiation.",this),t=e.el=H(t),this._propsUnlinkFn=t&&1===t.nodeType&&n?qt(this,t,n,this._scope):null},e.prototype._initData=function(){var e=this.$options.data,t=this._data=e?e():{};g(t)||(t={},Si("data functions should return an object.",this));var i,r,o=this._props,a=Object.keys(t);for(i=a.length;i--;)r=a[i],o&&n(o,r)?Si('Data field "'+r+'" is already defined as a prop. To provide default value for a prop, use the "default" prop option; if you want to pass prop values to an instantiation call, use the "propsData" option.',this):this._proxy(r);_e(t,this)},e.prototype._setData=function(e){e=e||{};var t=this._data;this._data=e;var i,r,o;for(i=Object.keys(t),o=i.length;o--;)r=i[o],r in e||this._unproxy(r);for(i=Object.keys(e),o=i.length;o--;)r=i[o],n(this,r)||this._proxy(r);t.__ob__.removeVm(this),_e(e,this),this._digest()},e.prototype._proxy=function(e){if(!r(e)){var t=this;Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:function(){return t._data[e]},set:function(n){t._data[e]=n}})}},e.prototype._unproxy=function(e){r(e)||delete this[e]},e.prototype._digest=function(){for(var e=0,t=this._watchers.length;e<t;e++)this._watchers[e].update(!0)},e.prototype._initComputed=function(){var e=this.$options.computed;if(e)for(var n in e){var r=e[n],o={enumerable:!0,configurable:!0};"function"==typeof r?(o.get=i(r,this),o.set=t):(o.get=r.get?r.cache!==!1?i(r.get,this):h(r.get,this):t,o.set=r.set?h(r.set,this):t),Object.defineProperty(this,n,o)}},e.prototype._initMethods=function(){var e=this.$options.methods;if(e)for(var t in e)this[t]=h(e[t],this)},e.prototype._initMeta=function(){var e=this.$options._meta;if(e)for(var t in e)ke(this,t,e[t])}}function vn(e){function t(e,t){for(var n,i,r,o=t.attributes,a=0,s=o.length;a<s;a++)n=o[a].name,ta.test(n)&&(n=n.replace(ta,""),i=o[a].value,Be(i)&&(i+=".apply(this, $arguments)"),r=(e._scope||e._context).$eval(i,!0),r._fromParent=!0,e.$on(n.replace(ta),r))}function n(e,t,n){if(n){var r,o,a,s;for(o in n)if(r=n[o],Hn(r))for(a=0,s=r.length;a<s;a++)i(e,t,o,r[a]);else i(e,t,o,r)}}function i(e,t,n,r,o){var a=typeof r;if("function"===a)e[t](n,r,o);else if("string"===a){var s=e.$options.methods,l=s&&s[r];l?e[t](n,l,o):Si('Unknown method: "'+r+'" when registering callback for '+t+': "'+n+'".',e)}else r&&"object"===a&&i(e,t,n,r.handler,r)}function r(){this._isAttached||(this._isAttached=!0,this.$children.forEach(o))}function o(e){!e._isAttached&&F(e.$el)&&e._callHook("attached")}function a(){this._isAttached&&(this._isAttached=!1,this.$children.forEach(s))}function s(e){e._isAttached&&!F(e.$el)&&e._callHook("detached")}e.prototype._initEvents=function(){var e=this.$options;e._asComponent&&t(this,e.el),n(this,"$on",e.events),n(this,"$watch",e.watch)},e.prototype._initDOMHooks=function(){this.$on("hook:attached",r),this.$on("hook:detached",a)},e.prototype._callHook=function(e){this.$emit("pre-hook:"+e);var t=this.$options[e];if(t)for(var n=0,i=t.length;n<i;n++)t[n].call(this);this.$emit("hook:"+e)}}function mn(){}function gn(e,t,n,i,r,o){this.vm=t,this.el=n,this.descriptor=e,this.name=e.name,this.expression=e.expression,this.arg=e.arg,this.modifiers=e.modifiers,this.filters=e.filters,this.literal=this.modifiers&&this.modifiers.literal,this._locked=!1,this._bound=!1,this._listeners=null,this._host=i,this._scope=r,this._frag=o,this.el&&(this.el._vue_directives=this.el._vue_directives||[],this.el._vue_directives.push(this))}function yn(e){e.prototype._updateRef=function(e){var t=this.$options._ref;if(t){var n=(this._scope||this._context).$refs;e?n[t]===this&&(n[t]=null):n[t]=this}},e.prototype._compile=function(e){var t=this.$options,n=e;if(e=ln(e,t),this._initElement(e),1!==e.nodeType||null===R(e,"v-pre")){var i=this._context&&this._context.$options,r=It(e,t,i);dn(this,t._content);var o,a=this.constructor;t._linkerCachable&&(o=a.linker,o||(o=a.linker=Mt(e,t)));var s=r(this,e,this._scope),l=o?o(this,e):Mt(e,t)(this,e);this._unlinkFn=function(){s(),l(!0)},t.replace&&z(n,e),this._isCompiled=!0,this._callHook("compiled")}},e.prototype._initElement=function(e){se(e)?(this._isFragment=!0,this.$el=this._fragmentStart=e.firstChild,this._fragmentEnd=e.lastChild,3===this._fragmentStart.nodeType&&(this._fragmentStart.data=this._fragmentEnd.data=""),this._fragment=e):this.$el=e,this.$el.__vue__=this,this._callHook("beforeCompile")},e.prototype._bindDir=function(e,t,n,i,r){this._directives.push(new gn(e,this,t,n,i,r))},e.prototype._destroy=function(e,t){if(this._isBeingDestroyed)return void(t||this._cleanup());var n,i,r=this,o=function(){!n||i||t||r._cleanup()};e&&this.$el&&(i=!0,this.$remove(function(){i=!1,o()})),this._callHook("beforeDestroy"),this._isBeingDestroyed=!0;var a,s=this.$parent;for(s&&!s._isBeingDestroyed&&(s.$children.$remove(this),this._updateRef(!0)),a=this.$children.length;a--;)this.$children[a].$destroy();for(this._propsUnlinkFn&&this._propsUnlinkFn(),this._unlinkFn&&this._unlinkFn(),a=this._watchers.length;a--;)this._watchers[a].teardown();this.$el&&(this.$el.__vue__=null),n=!0,o()},e.prototype._cleanup=function(){this._isDestroyed||(this._frag&&this._frag.children.$remove(this),this._data&&this._data.__ob__&&this._data.__ob__.removeVm(this),this.$el=this.$parent=this.$root=this.$children=this._watchers=this._context=this._scope=this._directives=null,this._isDestroyed=!0,this._callHook("destroyed"),this.$off())}}function bn(e){e.prototype._applyFilters=function(e,t,n,i){var r,o,a,s,l,u,c,f,d;for(u=0,c=n.length;u<c;u++)if(r=n[i?c-u-1:u],o=ge(this.$options,"filters",r.name,!0),o&&(o=i?o.write:o.read||o,"function"==typeof o)){if(a=i?[e,t]:[e],l=i?2:1,r.args)for(f=0,d=r.args.length;f<d;f++)s=r.args[f],a[f+l]=s.dynamic?this.$get(s.value):s.value;e=o.apply(this,a)}return e},e.prototype._resolveComponent=function(t,n){var i;if(i="function"==typeof t?t:ge(this.$options,"components",t,!0))if(i.options)n(i);else if(i.resolved)n(i.resolved);else if(i.requested)i.pendingCallbacks.push(n);else{i.requested=!0;var r=i.pendingCallbacks=[n];i.call(this,function(t){g(t)&&(t=e.extend(t)),i.resolved=t;for(var n=0,o=r.length;n<o;n++)r[n](t)},function(e){Si("Failed to resolve async component"+("string"==typeof t?": "+t:"")+". "+(e?"\nReason: "+e:""))})}}}function wn(e){function n(e){return JSON.parse(JSON.stringify(e))}e.prototype.$get=function(e,t){var n=Re(e);if(n){if(t){var i=this;return function(){i.$arguments=p(arguments);var e=n.get.call(i,i);return i.$arguments=null,e}}try{return n.get.call(this,this)}catch(e){}}},e.prototype.$set=function(e,t){var n=Re(e,!0);n&&n.set&&n.set.call(this,this,t)},e.prototype.$delete=function(e){t(this._data,e)},e.prototype.$watch=function(e,t,n){var i,r=this;"string"==typeof e&&(i=E(e),e=i.expression);var o=new Ue(r,e,t,{deep:n&&n.deep,sync:n&&n.sync,filters:i&&i.filters,user:!n||n.user!==!1});return n&&n.immediate&&t.call(r,o.value),function(){o.teardown()}},e.prototype.$eval=function(e,t){if(na.test(e)){var n=E(e),i=this.$get(n.expression,t);return n.filters?this._applyFilters(i,null,n.filters):i}return this.$get(e,t)},e.prototype.$interpolate=function(e){var t=S(e),n=this;return t?1===t.length?n.$eval(t[0].value)+"":t.map(function(e){return e.tag?n.$eval(e.value):e.value}).join(""):e},e.prototype.$log=function(e){var t=e?Oe(this._data,e):this._data;if(t&&(t=n(t)),!e){var i;for(i in this.$options.computed)t[i]=n(this[i]);if(this._props)for(i in this._props)t[i]=n(this[i])}console.log(t)}}function xn(e){function t(e,t,i,r,o,a){t=n(t);var s=!F(t),l=r===!1||s?o:a,u=!s&&!e._isAttached&&!F(e.$el);return e._isFragment?(oe(e._fragmentStart,e._fragmentEnd,function(n){l(n,t,e)}),i&&i()):l(e.$el,t,e,i),u&&e._callHook("attached"),e}function n(e){return"string"==typeof e?document.querySelector(e):e}function i(e,t,n,i){t.appendChild(e),i&&i()}function r(e,t,n,i){I(e,t),i&&i()}function o(e,t,n){V(e),n&&n()}e.prototype.$nextTick=function(e){ti(e,this)},e.prototype.$appendTo=function(e,n,r){return t(this,e,n,r,i,D)},e.prototype.$prependTo=function(e,t,i){return e=n(e),e.hasChildNodes()?this.$before(e.firstChild,t,i):this.$appendTo(e,t,i),this},e.prototype.$before=function(e,n,i){return t(this,e,n,i,r,L)},e.prototype.$after=function(e,t,i){return e=n(e),e.nextSibling?this.$before(e.nextSibling,t,i):this.$appendTo(e.parentNode,t,i),this},e.prototype.$remove=function(e,t){if(!this.$el.parentNode)return e&&e();var n=this._isAttached&&F(this.$el);n||(t=!1);var i=this,r=function(){n&&i._callHook("detached"),e&&e()};if(this._isFragment)ae(this._fragmentStart,this._fragmentEnd,this,this._fragment,r);else{var a=t===!1?o:P;a(this.$el,this,r)}return this}}function Cn(e){function t(e,t,i){var r=e.$parent;if(r&&i&&!n.test(t))for(;r;)r._eventsCount[t]=(r._eventsCount[t]||0)+i,r=r.$parent}e.prototype.$on=function(e,n){return(this._events[e]||(this._events[e]=[])).push(n),t(this,e,1),this},e.prototype.$once=function(e,t){function n(){i.$off(e,n),t.apply(this,arguments)}var i=this;return n.fn=t,this.$on(e,n),this},e.prototype.$off=function(e,n){var i;if(!arguments.length){if(this.$parent)for(e in this._events)i=this._events[e],i&&t(this,e,-i.length);return this._events={},this}if(i=this._events[e],!i)return this;if(1===arguments.length)return t(this,e,-i.length),this._events[e]=null,this;for(var r,o=i.length;o--;)if(r=i[o],r===n||r.fn===n){t(this,e,-1),i.splice(o,1);break}return this},e.prototype.$emit=function(e){var t="string"==typeof e;e=t?e:e.name;var n=this._events[e],i=t||!n;if(n){n=n.length>1?p(n):n;var r=t&&n.some(function(e){return e._fromParent});r&&(i=!1);for(var o=p(arguments,1),a=0,s=n.length;a<s;a++){var l=n[a],u=l.apply(this,o);u!==!0||r&&!l._fromParent||(i=!0)}}return i},e.prototype.$broadcast=function(e){var t="string"==typeof e;if(e=t?e:e.name,this._eventsCount[e]){var n=this.$children,i=p(arguments);t&&(i[0]={name:e,source:this});for(var r=0,o=n.length;r<o;r++){var a=n[r],s=a.$emit.apply(a,i);s&&a.$broadcast.apply(a,i)}return this}},e.prototype.$dispatch=function(e){var t=this.$emit.apply(this,arguments);if(t){var n=this.$parent,i=p(arguments);for(i[0]={name:e,source:this};n;)t=n.$emit.apply(n,i),n=t?n.$parent:null;return this}};var n=/^hook:/}function _n(e){function t(){this._isAttached=!0,this._isReady=!0,this._callHook("ready")}e.prototype.$mount=function(e){return this._isCompiled?void Si("$mount() should be called only once.",this):(e=H(e),e||(e=document.createElement("div")),this._compile(e),this._initDOMHooks(),F(this.$el)?(this._callHook("attached"),t.call(this)):this.$once("hook:attached",t),this)},e.prototype.$destroy=function(e,t){this._destroy(e,t)},e.prototype.$compile=function(e,t,n,i){return Mt(e,this.$options,!0)(this,e,t,n,i)}}function kn(e){this._init(e)}function An(e,t,n){return n=n?parseInt(n,10):0,t=a(t),"number"==typeof t?e.slice(n,n+t):e}function En(e,t,n){if(e=aa(e),null==t)return e;if("function"==typeof t)return e.filter(t);t=(""+t).toLowerCase();for(var i,r,o,a,s="in"===n?3:2,l=Array.prototype.concat.apply([],p(arguments,s)),u=[],c=0,f=e.length;c<f;c++)if(i=e[c],o=i&&i.$value||i,a=l.length){for(;a--;)if(r=l[a],"$key"===r&&Nn(i.$key,t)||Nn(Oe(o,r),t)){u.push(i);break}}else Nn(i,t)&&u.push(i);return u}function Tn(e){function t(e,t,n){var r=i[n];return r&&("$key"!==r&&(m(e)&&"$value"in e&&(e=e.$value),m(t)&&"$value"in t&&(t=t.$value)),e=m(e)?Oe(e,r):e,t=m(t)?Oe(t,r):t),e===t?0:e>t?o:-o}var n=null,i=void 0;e=aa(e);var r=p(arguments,1),o=r[r.length-1];"number"==typeof o?(o=o<0?-1:1,r=r.length>1?r.slice(0,-1):r):o=1;var a=r[0];return a?("function"==typeof a?n=function(e,t){return a(e,t)*o}:(i=Array.prototype.concat.apply([],r),n=function(e,r,o){return o=o||0,o>=i.length-1?t(e,r,o):t(e,r,o)||n(e,r,o+1)}),e.slice().sort(n)):e}function Nn(e,t){var n;if(g(e)){var i=Object.keys(e);for(n=i.length;n--;)if(Nn(e[i[n]],t))return!0}else if(Hn(e)){for(n=e.length;n--;)if(Nn(e[n],t))return!0}else if(null!=e)return e.toString().toLowerCase().indexOf(t)>-1}function Sn(n){function i(e){return new Function("return function "+d(e)+" (options) { this._init(options) }")()}n.options={directives:Eo,elementDirectives:oa,filters:la,transitions:{},components:{},partials:{},replace:!0},n.util=Wi,n.config=Ni,n.set=e,n.delete=t,n.nextTick=ti,n.compiler=ea,n.FragmentFactory=ot,n.internalDirectives=Uo,n.parsers={path:sr,text:Ai,template:Fr,directive:bi,expression:xr},n.cid=0;var r=1;n.extend=function(e){e=e||{};var t=this,n=0===t.cid;if(n&&e._Ctor)return e._Ctor;var o=e.name||t.options.name;/^[a-zA-Z][\w-]*$/.test(o)||(Si('Invalid component name: "'+o+'". Component names can only contain alphanumeric characaters and the hyphen.'),o=null);var a=i(o||"VueComponent");return a.prototype=Object.create(t.prototype),a.prototype.constructor=a,a.cid=r++,a.options=me(t.options,e),a.super=t,a.extend=t.extend,Ni._assetTypes.forEach(function(e){a[e]=t[e]}),o&&(a.options.components[o]=a),n&&(e._Ctor=a),a},n.use=function(e){if(!e.installed){var t=p(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):e.apply(null,t),e.installed=!0,this}},n.mixin=function(e){n.options=me(n.options,e)},Ni._assetTypes.forEach(function(e){n[e]=function(t,i){return i?("component"===e&&(Di.test(t)||Li.test(t))&&Si("Do not use built-in or reserved HTML elements as component id: "+t),"component"===e&&g(i)&&(i.name||(i.name=t),i=n.extend(i)),this.options[e+"s"][t]=i,i):this.options[e+"s"][t]}}),v(n.transition,ji)}var On=Object.prototype.hasOwnProperty,jn=/^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/,$n=/-(\w)/g,Dn=/([a-z\d])([A-Z])/g,Ln=/(?:^|[-_\/])(\w)/g,Pn=Object.prototype.toString,Mn="[object Object]",Hn=Array.isArray,Fn="__proto__"in{},Rn="undefined"!=typeof window&&"[object Object]"!==Object.prototype.toString.call(window),Bn=Rn&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,qn=Rn&&window.navigator.userAgent.toLowerCase(),In=qn&&qn.indexOf("trident")>0,Wn=qn&&qn.indexOf("msie 9.0")>0,Vn=qn&&qn.indexOf("android")>0,Un=qn&&/(iphone|ipad|ipod|ios)/i.test(qn),zn=Un&&qn.match(/os ([\d_]+)/),Xn=zn&&zn[1].split("_"),Gn=Xn&&Number(Xn[0])>=9&&Number(Xn[1])>=3&&!window.indexedDB,Jn=void 0,Yn=void 0,Kn=void 0,Qn=void 0;if(Rn&&!Wn){var Zn=void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend,ei=void 0===window.onanimationend&&void 0!==window.onwebkitanimationend;Jn=Zn?"WebkitTransition":"transition",Yn=Zn?"webkitTransitionEnd":"transitionend",Kn=ei?"WebkitAnimation":"animation",Qn=ei?"webkitAnimationEnd":"animationend"}var ti=function(){function e(){i=!1;var e=n.slice(0);n=[];for(var t=0;t<e.length;t++)e[t]()}var t,n=[],i=!1;if("undefined"==typeof MutationObserver||Gn){var r=Rn?window:"undefined"!=typeof global?global:{};t=r.setImmediate||setTimeout}else{var o=1,a=new MutationObserver(e),s=document.createTextNode(o);a.observe(s,{characterData:!0}),t=function(){o=(o+1)%2,s.data=o}}return function(r,o){var a=o?function(){r.call(o)}:r;n.push(a),i||(i=!0,t(e,0))}}(),ni=void 0;"undefined"!=typeof Set&&Set.toString().match(/native code/)?ni=Set:(ni=function(){this.set=Object.create(null)},ni.prototype.has=function(e){return void 0!==this.set[e]},ni.prototype.add=function(e){this.set[e]=1},ni.prototype.clear=function(){this.set=Object.create(null)});var ii=_.prototype;ii.put=function(e,t){var n,i=this.get(e,!0);return i||(this.size===this.limit&&(n=this.shift()),i={key:e},this._keymap[e]=i,this.tail?(this.tail.newer=i,i.older=this.tail):this.head=i,this.tail=i,this.size++),i.value=t,n},ii.shift=function(){var e=this.head;return e&&(this.head=this.head.newer,this.head.older=void 0,e.newer=e.older=void 0,this._keymap[e.key]=void 0,this.size--),e},ii.get=function(e,t){var n=this._keymap[e];if(void 0!==n)return n===this.tail?t?n:n.value:(n.newer&&(n===this.head&&(this.head=n.newer),n.newer.older=n.older),n.older&&(n.older.newer=n.newer),n.newer=void 0,n.older=this.tail,this.tail&&(this.tail.newer=n),this.tail=n,t?n:n.value)};var ri,oi,ai,si,li,ui,ci,fi,di,hi,pi,vi,mi=new _(1e3),gi=/[^\s'"]+|'[^']*'|"[^"]*"/g,yi=/^in$|^-?\d+/,bi=Object.freeze({parseDirective:E}),wi=/[-.*+?^${}()|[\]\/\\]/g,xi=void 0,Ci=void 0,_i=void 0,ki=/[^|]\|[^|]/,Ai=Object.freeze({compileRegex:N,parseText:S,tokensToExp:O}),Ei=["{{","}}"],Ti=["{{{","}}}"],Ni=Object.defineProperties({debug:!1,silent:!1,async:!0,warnExpressionErrors:!0,devtools:!0,_delimitersChanged:!0,_assetTypes:["component","directive","elementDirective","filter","transition","partial"],_propBindingModes:{ONE_WAY:0,TWO_WAY:1,ONE_TIME:2},_maxUpdateCount:100},{delimiters:{get:function(){return Ei},set:function(e){Ei=e,N()},configurable:!0,enumerable:!0},unsafeDelimiters:{get:function(){return Ti},set:function(e){Ti=e,N()},configurable:!0,enumerable:!0}}),Si=void 0,Oi=void 0;!function(){var e="undefined"!=typeof console;Si=function(t,n){e&&!Ni.silent&&console.error("[Vue warn]: "+t+(n?Oi(n):""))},Oi=function(e){var t=e._isVue?e.$options.name:e.name;return t?" (found in component: <"+f(t)+">)":""}}();var ji=Object.freeze({appendWithTransition:D,beforeWithTransition:L,removeWithTransition:P,applyTransition:M}),$i=/^v-ref:/,Di=/^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i,Li=/^(slot|partial|component)$/i,Pi=void 0;Pi=function(e,t){return t.indexOf("-")>-1?e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:/HTMLUnknownElement/.test(e.toString())&&!/^(data|time|rtc|rb|details|dialog|summary)$/.test(t)};var Mi=Ni.optionMergeStrategies=Object.create(null);Mi.data=function(e,t,n){return n?e||t?function(){var i="function"==typeof t?t.call(n):t,r="function"==typeof e?e.call(n):void 0;return i?fe(i,r):r}:void 0:t?"function"!=typeof t?(Si('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):e?function(){return fe(t.call(this),e.call(this))}:t:e},Mi.el=function(e,t,n){if(!n&&t&&"function"!=typeof t)return void Si('The "el" option should be a function that returns a per-instance value in component definitions.',n);var i=t||e;return n&&"function"==typeof i?i.call(n):i},Mi.init=Mi.created=Mi.ready=Mi.attached=Mi.detached=Mi.beforeCompile=Mi.compiled=Mi.beforeDestroy=Mi.destroyed=Mi.activate=function(e,t){return t?e?e.concat(t):Hn(t)?t:[t]:e},Ni._assetTypes.forEach(function(e){Mi[e+"s"]=de}),Mi.watch=Mi.events=function(e,t){if(!t)return e;if(!e)return t;var n={};v(n,e);for(var i in t){var r=n[i],o=t[i];r&&!Hn(r)&&(r=[r]),n[i]=r?r.concat(o):[o]}return n},Mi.props=Mi.methods=Mi.computed=function(e,t){if(!t)return e;if(!e)return t;var n=Object.create(null);return v(n,e),v(n,t),n};var Hi=function(e,t){return void 0===t?e:t},Fi=0;ye.target=null,ye.prototype.addSub=function(e){this.subs.push(e)},ye.prototype.removeSub=function(e){this.subs.$remove(e)},ye.prototype.depend=function(){ye.target.addDep(this)},ye.prototype.notify=function(){for(var e=p(this.subs),t=0,n=e.length;t<n;t++)e[t].update()};var Ri=Array.prototype,Bi=Object.create(Ri);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=Ri[e];y(Bi,e,function(){for(var n=arguments.length,i=new Array(n);n--;)i[n]=arguments[n];var r,o=t.apply(this,i),a=this.__ob__;switch(e){case"push":r=i;break;case"unshift":r=i;break;case"splice":r=i.slice(2)}return r&&a.observeArray(r),a.dep.notify(),o})}),y(Ri,"$set",function(e,t){return e>=this.length&&(this.length=Number(e)+1),this.splice(e,1,t)[0]}),y(Ri,"$remove",function(e){if(this.length){var t=w(this,e);return t>-1?this.splice(t,1):void 0}});var qi=Object.getOwnPropertyNames(Bi),Ii=!0;we.prototype.walk=function(e){for(var t=Object.keys(e),n=0,i=t.length;n<i;n++)this.convert(t[n],e[t[n]])},we.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)_e(e[t])},we.prototype.convert=function(e,t){ke(this.value,e,t)},we.prototype.addVm=function(e){(this.vms||(this.vms=[])).push(e)},we.prototype.removeVm=function(e){this.vms.$remove(e)};var Wi=Object.freeze({defineReactive:ke,set:e,del:t,hasOwn:n,isLiteral:i,isReserved:r,_toString:o,toNumber:a,toBoolean:s,stripQuotes:l,camelize:u,hyphenate:f,classify:d,bind:h,toArray:p,extend:v,isObject:m,isPlainObject:g,def:y,debounce:b,indexOf:w,cancellable:x,looseEqual:C,isArray:Hn,hasProto:Fn,inBrowser:Rn,devtools:Bn,isIE:In,isIE9:Wn,isAndroid:Vn,isIos:Un,iosVersionMatch:zn,iosVersion:Xn,hasMutationObserverBug:Gn,get transitionProp(){return Jn},get transitionEndEvent(){return Yn},get animationProp(){return Kn},get animationEndEvent(){return Qn},nextTick:ti,get _Set(){return ni},query:H,inDoc:F,getAttr:R,getBindAttr:B,hasBindAttr:q,before:I,after:W,remove:V,prepend:U,replace:z,on:X,off:G,setClass:Y,addClass:K,removeClass:Q,extractContent:Z,trimNode:ee,isTemplate:ne,createAnchor:ie,findRef:re,mapNodeRange:oe,removeNodeRange:ae,isFragment:se,getOuterHTML:le,mergeOptions:me,resolveAsset:ge,checkComponentAttr:ue,commonTagRE:Di,reservedTagRE:Li,get warn(){return Si}}),Vi=0,Ui=new _(1e3),zi=0,Xi=1,Gi=2,Ji=3,Yi=0,Ki=1,Qi=2,Zi=3,er=4,tr=5,nr=6,ir=7,rr=8,or=[];or[Yi]={ws:[Yi],ident:[Zi,zi],"[":[er],eof:[ir]},or[Ki]={ws:[Ki],".":[Qi],"[":[er],eof:[ir]},or[Qi]={ws:[Qi],ident:[Zi,zi]},or[Zi]={ident:[Zi,zi],0:[Zi,zi],number:[Zi,zi],ws:[Ki,Xi],".":[Qi,Xi],"[":[er,Xi],eof:[ir,Xi]},or[er]={"'":[tr,zi],'"':[nr,zi],"[":[er,Gi],"]":[Ki,Ji],eof:rr,else:[er,zi]},or[tr]={"'":[er,zi],eof:rr,else:[tr,zi]},or[nr]={'"':[er,zi],eof:rr,else:[nr,zi]};var ar;ar=function(e,t){Si('You are setting a non-existent path "'+e.raw+'" on a vm instance. Consider pre-initializing the property with the "data" option for more reliable reactivity and better performance.',t)};var sr=Object.freeze({parsePath:Se,getPath:Oe,setPath:je}),lr=new _(1e3),ur="Math,Date,this,true,false,null,undefined,Infinity,NaN,isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,parseInt,parseFloat",cr=new RegExp("^("+ur.replace(/,/g,"\\b|")+"\\b)"),fr="break,case,class,catch,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,let,return,super,switch,throw,try,var,while,with,yield,enum,await,implements,package,protected,static,interface,private,public",dr=new RegExp("^("+fr.replace(/,/g,"\\b|")+"\\b)"),hr=/\s/g,pr=/\n/g,vr=/[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g,mr=/"(\d+)"/g,gr=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/,yr=/[^\w$\.](?:[A-Za-z_$][\w$]*)/g,br=/^(?:true|false|null|undefined|Infinity|NaN)$/,wr=[],xr=Object.freeze({parseExpression:Re,isSimplePath:Be}),Cr=[],_r=[],kr={},Ar={},Er=!1,Tr=0;Ue.prototype.get=function(){this.beforeGet();var e,t=this.scope||this.vm;try{e=this.getter.call(t,t)}catch(e){Ni.warnExpressionErrors&&Si('Error when evaluating expression "'+this.expression+'": '+e.toString(),this.vm)}return this.deep&&ze(e),this.preProcess&&(e=this.preProcess(e)),this.filters&&(e=t._applyFilters(e,null,this.filters,!1)),this.postProcess&&(e=this.postProcess(e)),this.afterGet(),e},Ue.prototype.set=function(e){var t=this.scope||this.vm;this.filters&&(e=t._applyFilters(e,this.value,this.filters,!0));try{this.setter.call(t,t,e)}catch(e){Ni.warnExpressionErrors&&Si('Error when evaluating setter "'+this.expression+'": '+e.toString(),this.vm)}var n=t.$forContext;if(n&&n.alias===this.expression){if(n.filters)return void Si("It seems you are using two-way binding on a v-for alias ("+this.expression+"), and the v-for has filters. This will not work properly. Either remove the filters or use an array of objects and bind to object properties instead.",this.vm);n._withLock(function(){t.$key?n.rawValue[t.$key]=e:n.rawValue.$set(t.$index,e)})}},Ue.prototype.beforeGet=function(){ye.target=this},Ue.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Ue.prototype.afterGet=function(){ye.target=null;for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Ue.prototype.update=function(e){this.lazy?this.dirty=!0:this.sync||!Ni.async?this.run():(this.shallow=this.queued?!!e&&this.shallow:!!e,this.queued=!0,Ni.debug&&(this.prevError=new Error("[vue] async stack trace")),Ve(this))},Ue.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||(m(e)||this.deep)&&!this.shallow){var t=this.value;this.value=e;var n=this.prevError;if(Ni.debug&&n){this.prevError=null;try{this.cb.call(this.vm,e,t)}catch(e){throw ti(function(){throw n},0),e}}else this.cb.call(this.vm,e,t)}this.queued=this.shallow=!1}},Ue.prototype.evaluate=function(){var e=ye.target;this.value=this.get(),this.dirty=!1,ye.target=e},Ue.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Ue.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||this.vm._vForRemoving||this.vm._watchers.$remove(this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.vm=this.cb=this.value=null}};var Nr=new ni,Sr={bind:function(){this.attr=3===this.el.nodeType?"data":"textContent"},update:function(e){this.el[this.attr]=o(e)}},Or=new _(1e3),jr=new _(1e3),$r={efault:[0,"",""],legend:[1,"<fieldset>","</fieldset>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"]};$r.td=$r.th=[3,"<table><tbody><tr>","</tr></tbody></table>"],$r.option=$r.optgroup=[1,'<select multiple="multiple">',"</select>"],$r.thead=$r.tbody=$r.colgroup=$r.caption=$r.tfoot=[1,"<table>","</table>"],$r.g=$r.defs=$r.symbol=$r.use=$r.image=$r.text=$r.circle=$r.ellipse=$r.line=$r.path=$r.polygon=$r.polyline=$r.rect=[1,'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events"version="1.1">',"</svg>"];var Dr=/<([\w:-]+)/,Lr=/&#?\w+?;/,Pr=/<!--/,Mr=function(){if(Rn){var e=document.createElement("div");return e.innerHTML="<template>1</template>",!e.cloneNode(!0).firstChild.innerHTML}return!1}(),Hr=function(){if(Rn){var e=document.createElement("textarea");return e.placeholder="t","t"===e.cloneNode(!0).value}return!1}(),Fr=Object.freeze({cloneNode:Ye,parseTemplate:Ke}),Rr={bind:function(){8===this.el.nodeType&&(this.nodes=[],this.anchor=ie("v-html"),z(this.el,this.anchor))},update:function(e){e=o(e),this.nodes?this.swap(e):this.el.innerHTML=e},swap:function(e){for(var t=this.nodes.length;t--;)V(this.nodes[t]);var n=Ke(e,!0,!0);this.nodes=p(n.childNodes),I(n,this.anchor)}};Qe.prototype.callHook=function(e){var t,n;for(t=0,n=this.childFrags.length;t<n;t++)this.childFrags[t].callHook(e);for(t=0,n=this.children.length;t<n;t++)e(this.children[t])},Qe.prototype.beforeRemove=function(){var e,t;for(e=0,t=this.childFrags.length;e<t;e++)this.childFrags[e].beforeRemove(!1);for(e=0,t=this.children.length;e<t;e++)this.children[e].$destroy(!1,!0);var n=this.unlink.dirs;for(e=0,t=n.length;e<t;e++)n[e]._watcher&&n[e]._watcher.teardown()},Qe.prototype.destroy=function(){this.parentFrag&&this.parentFrag.childFrags.$remove(this),this.node.__v_frag=null,this.unlink()};var Br=new _(5e3);ot.prototype.create=function(e,t,n){var i=Ye(this.template);return new Qe(this.linker,this.vm,i,e,t,n)};var qr=700,Ir=800,Wr=850,Vr=1100,Ur=1500,zr=1500,Xr=1750,Gr=2100,Jr=2200,Yr=2300,Kr=0,Qr={priority:Jr,terminal:!0,params:["track-by","stagger","enter-stagger","leave-stagger"],bind:function(){var e=this.expression.match(/(.*) (?:in|of) (.*)/);if(e){var t=e[1].match(/\((.*),(.*)\)/);t?(this.iterator=t[1].trim(),this.alias=t[2].trim()):this.alias=e[1].trim(),this.expression=e[2]}if(!this.alias)return void Si('Invalid v-for expression "'+this.descriptor.raw+'": alias is required.',this.vm);this.id="__v-for__"+ ++Kr;var n=this.el.tagName;this.isOption=("OPTION"===n||"OPTGROUP"===n)&&"SELECT"===this.el.parentNode.tagName,this.start=ie("v-for-start"),this.end=ie("v-for-end"),z(this.el,this.end),I(this.start,this.end),this.cache=Object.create(null),this.factory=new ot(this.vm,this.el)},update:function(e){this.diff(e),this.updateRef(),this.updateModel()},diff:function(e){var t,i,r,o,a,s,l=e[0],u=this.fromObject=m(l)&&n(l,"$key")&&n(l,"$value"),c=this.params.trackBy,f=this.frags,d=this.frags=new Array(e.length),h=this.alias,p=this.iterator,v=this.start,g=this.end,y=F(v),b=!f;for(t=0,i=e.length;t<i;t++)l=e[t],o=u?l.$key:null,a=u?l.$value:l,s=!m(a),r=!b&&this.getCachedFrag(a,t,o),r?(r.reused=!0,r.scope.$index=t,o&&(r.scope.$key=o),p&&(r.scope[p]=null!==o?o:t),(c||u||s)&&be(function(){r.scope[h]=a})):(r=this.create(a,h,t,o),r.fresh=!b),d[t]=r,b&&r.before(g);if(!b){var w=0,x=f.length-d.length;for(this.vm._vForRemoving=!0,t=0,i=f.length;t<i;t++)r=f[t],r.reused||(this.deleteCachedFrag(r),this.remove(r,w++,x,y));this.vm._vForRemoving=!1,w&&(this.vm._watchers=this.vm._watchers.filter(function(e){return e.active}));var C,_,k,A=0;for(t=0,i=d.length;t<i;t++)r=d[t],
C=d[t-1],_=C?C.staggerCb?C.staggerAnchor:C.end||C.node:v,r.reused&&!r.staggerCb?(k=at(r,v,this.id),k===C||k&&at(k,v,this.id)===C||this.move(r,_)):this.insert(r,A++,_,y),r.reused=r.fresh=!1}},create:function(e,t,n,i){var r=this._host,o=this._scope||this.vm,a=Object.create(o);a.$refs=Object.create(o.$refs),a.$els=Object.create(o.$els),a.$parent=o,a.$forContext=this,be(function(){ke(a,t,e)}),ke(a,"$index",n),i?ke(a,"$key",i):a.$key&&y(a,"$key",null),this.iterator&&ke(a,this.iterator,null!==i?i:n);var s=this.factory.create(r,a,this._frag);return s.forId=this.id,this.cacheFrag(e,s,n,i),s},updateRef:function(){var e=this.descriptor.ref;if(e){var t,n=(this._scope||this.vm).$refs;this.fromObject?(t={},this.frags.forEach(function(e){t[e.scope.$key]=st(e)})):t=this.frags.map(st),n[e]=t}},updateModel:function(){if(this.isOption){var e=this.start.parentNode,t=e&&e.__v_model;t&&t.forceUpdate()}},insert:function(e,t,n,i){e.staggerCb&&(e.staggerCb.cancel(),e.staggerCb=null);var r=this.getStagger(e,t,null,"enter");if(i&&r){var o=e.staggerAnchor;o||(o=e.staggerAnchor=ie("stagger-anchor"),o.__v_frag=e),W(o,n);var a=e.staggerCb=x(function(){e.staggerCb=null,e.before(o),V(o)});setTimeout(a,r)}else{var s=n.nextSibling;s||(W(this.end,n),s=this.end),e.before(s)}},remove:function(e,t,n,i){if(e.staggerCb)return e.staggerCb.cancel(),void(e.staggerCb=null);var r=this.getStagger(e,t,n,"leave");if(i&&r){var o=e.staggerCb=x(function(){e.staggerCb=null,e.remove()});setTimeout(o,r)}else e.remove()},move:function(e,t){t.nextSibling||this.end.parentNode.appendChild(this.end),e.before(t.nextSibling,!1)},cacheFrag:function(e,t,i,r){var o,a=this.params.trackBy,s=this.cache,l=!m(e);r||a||l?(o=ut(i,r,e,a),s[o]?"$index"!==a&&this.warnDuplicate(e):s[o]=t):(o=this.id,n(e,o)?null===e[o]?e[o]=t:this.warnDuplicate(e):Object.isExtensible(e)?y(e,o,t):Si("Frozen v-for objects cannot be automatically tracked, make sure to provide a track-by key.")),t.raw=e},getCachedFrag:function(e,t,n){var i,r=this.params.trackBy,o=!m(e);if(n||r||o){var a=ut(t,n,e,r);i=this.cache[a]}else i=e[this.id];return i&&(i.reused||i.fresh)&&this.warnDuplicate(e),i},deleteCachedFrag:function(e){var t=e.raw,i=this.params.trackBy,r=e.scope,o=r.$index,a=n(r,"$key")&&r.$key,s=!m(t);if(i||a||s){var l=ut(o,a,t,i);this.cache[l]=null}else t[this.id]=null,e.raw=null},getStagger:function(e,t,n,i){i+="Stagger";var r=e.node.__v_trans,o=r&&r.hooks,a=o&&(o[i]||o.stagger);return a?a.call(e,t,n):t*parseInt(this.params[i]||this.params.stagger,10)},_preProcess:function(e){return this.rawValue=e,e},_postProcess:function(e){if(Hn(e))return e;if(g(e)){for(var t,n=Object.keys(e),i=n.length,r=new Array(i);i--;)t=n[i],r[i]={$key:t,$value:e[t]};return r}return"number"!=typeof e||isNaN(e)||(e=lt(e)),e||[]},unbind:function(){if(this.descriptor.ref&&((this._scope||this.vm).$refs[this.descriptor.ref]=null),this.frags)for(var e,t=this.frags.length;t--;)e=this.frags[t],this.deleteCachedFrag(e),e.destroy()}};Qr.warnDuplicate=function(e){Si('Duplicate value found in v-for="'+this.descriptor.raw+'": '+JSON.stringify(e)+'. Use track-by="$index" if you are expecting duplicate values.',this.vm)};var Zr={priority:Gr,terminal:!0,bind:function(){var e=this.el;if(e.__vue__)Si('v-if="'+this.expression+'" cannot be used on an instance root element.',this.vm),this.invalid=!0;else{var t=e.nextElementSibling;t&&null!==R(t,"v-else")&&(V(t),this.elseEl=t),this.anchor=ie("v-if"),z(e,this.anchor)}},update:function(e){this.invalid||(e?this.frag||this.insert():this.remove())},insert:function(){this.elseFrag&&(this.elseFrag.remove(),this.elseFrag=null),this.factory||(this.factory=new ot(this.vm,this.el)),this.frag=this.factory.create(this._host,this._scope,this._frag),this.frag.before(this.anchor)},remove:function(){this.frag&&(this.frag.remove(),this.frag=null),this.elseEl&&!this.elseFrag&&(this.elseFactory||(this.elseFactory=new ot(this.elseEl._context||this.vm,this.elseEl)),this.elseFrag=this.elseFactory.create(this._host,this._scope,this._frag),this.elseFrag.before(this.anchor))},unbind:function(){this.frag&&this.frag.destroy(),this.elseFrag&&this.elseFrag.destroy()}},eo={bind:function(){var e=this.el.nextElementSibling;e&&null!==R(e,"v-else")&&(this.elseEl=e)},update:function(e){this.apply(this.el,e),this.elseEl&&this.apply(this.elseEl,!e)},apply:function(e,t){function n(){e.style.display=t?"":"none"}F(e)?M(e,t?1:-1,n,this.vm):n()}},to={bind:function(){var e=this,t=this.el,n="range"===t.type,i=this.params.lazy,r=this.params.number,o=this.params.debounce,s=!1;if(Vn||n||(this.on("compositionstart",function(){s=!0}),this.on("compositionend",function(){s=!1,i||e.listener()})),this.focused=!1,n||i||(this.on("focus",function(){e.focused=!0}),this.on("blur",function(){e.focused=!1,e._frag&&!e._frag.inserted||e.rawListener()})),this.listener=this.rawListener=function(){if(!s&&e._bound){var i=r||n?a(t.value):t.value;e.set(i),ti(function(){e._bound&&!e.focused&&e.update(e._watcher.value)})}},o&&(this.listener=b(this.listener,o)),this.hasjQuery="function"==typeof jQuery,this.hasjQuery){var l=jQuery.fn.on?"on":"bind";jQuery(t)[l]("change",this.rawListener),i||jQuery(t)[l]("input",this.listener)}else this.on("change",this.rawListener),i||this.on("input",this.listener);!i&&Wn&&(this.on("cut",function(){ti(e.listener)}),this.on("keyup",function(t){46!==t.keyCode&&8!==t.keyCode||e.listener()})),(t.hasAttribute("value")||"TEXTAREA"===t.tagName&&t.value.trim())&&(this.afterBind=this.listener)},update:function(e){e=o(e),e!==this.el.value&&(this.el.value=e)},unbind:function(){var e=this.el;if(this.hasjQuery){var t=jQuery.fn.off?"off":"unbind";jQuery(e)[t]("change",this.listener),jQuery(e)[t]("input",this.listener)}}},no={bind:function(){var e=this,t=this.el;this.getValue=function(){if(t.hasOwnProperty("_value"))return t._value;var n=t.value;return e.params.number&&(n=a(n)),n},this.listener=function(){e.set(e.getValue())},this.on("change",this.listener),t.hasAttribute("checked")&&(this.afterBind=this.listener)},update:function(e){this.el.checked=C(e,this.getValue())}},io={bind:function(){var e=this,t=this,n=this.el;this.forceUpdate=function(){t._watcher&&t.update(t._watcher.get())};var i=this.multiple=n.hasAttribute("multiple");this.listener=function(){var e=ct(n,i);e=t.params.number?Hn(e)?e.map(a):a(e):e,t.set(e)},this.on("change",this.listener);var r=ct(n,i,!0);(i&&r.length||!i&&null!==r)&&(this.afterBind=this.listener),this.vm.$on("hook:attached",function(){ti(e.forceUpdate)}),F(n)||ti(this.forceUpdate)},update:function(e){var t=this.el;t.selectedIndex=-1;for(var n,i,r=this.multiple&&Hn(e),o=t.options,a=o.length;a--;)n=o[a],i=n.hasOwnProperty("_value")?n._value:n.value,n.selected=r?ft(e,i)>-1:C(e,i)},unbind:function(){this.vm.$off("hook:attached",this.forceUpdate)}},ro={bind:function(){function e(){var e=n.checked;return e&&n.hasOwnProperty("_trueValue")?n._trueValue:!e&&n.hasOwnProperty("_falseValue")?n._falseValue:e}var t=this,n=this.el;this.getValue=function(){return n.hasOwnProperty("_value")?n._value:t.params.number?a(n.value):n.value},this.listener=function(){var i=t._watcher.value;if(Hn(i)){var r=t.getValue();n.checked?w(i,r)<0&&i.push(r):i.$remove(r)}else t.set(e())},this.on("change",this.listener),n.hasAttribute("checked")&&(this.afterBind=this.listener)},update:function(e){var t=this.el;Hn(e)?t.checked=w(e,this.getValue())>-1:t.hasOwnProperty("_trueValue")?t.checked=C(e,t._trueValue):t.checked=!!e}},oo={text:to,radio:no,select:io,checkbox:ro},ao={priority:Ir,twoWay:!0,handlers:oo,params:["lazy","number","debounce"],bind:function(){this.checkFilters(),this.hasRead&&!this.hasWrite&&Si('It seems you are using a read-only filter with v-model="'+this.descriptor.raw+'". You might want to use a two-way filter to ensure correct behavior.',this.vm);var e,t=this.el,n=t.tagName;if("INPUT"===n)e=oo[t.type]||oo.text;else if("SELECT"===n)e=oo.select;else{if("TEXTAREA"!==n)return void Si("v-model does not support element type: "+n,this.vm);e=oo.text}t.__v_model=this,e.bind.call(this),this.update=e.update,this._unbind=e.unbind},checkFilters:function(){var e=this.filters;if(e)for(var t=e.length;t--;){var n=ge(this.vm.$options,"filters",e[t].name);("function"==typeof n||n.read)&&(this.hasRead=!0),n.write&&(this.hasWrite=!0)}},unbind:function(){this.el.__v_model=null,this._unbind&&this._unbind()}},so={esc:27,tab:9,enter:13,space:32,delete:[8,46],up:38,left:37,right:39,down:40},lo={priority:qr,acceptStatement:!0,keyCodes:so,bind:function(){if("IFRAME"===this.el.tagName&&"load"!==this.arg){var e=this;this.iframeBind=function(){X(e.el.contentWindow,e.arg,e.handler,e.modifiers.capture)},this.on("load",this.iframeBind)}},update:function(e){if(this.descriptor.raw||(e=function(){}),"function"!=typeof e)return void Si("v-on:"+this.arg+'="'+this.expression+'" expects a function value, got '+e,this.vm);this.modifiers.stop&&(e=ht(e)),this.modifiers.prevent&&(e=pt(e)),this.modifiers.self&&(e=vt(e));var t=Object.keys(this.modifiers).filter(function(e){return"stop"!==e&&"prevent"!==e&&"self"!==e&&"capture"!==e});t.length&&(e=dt(e,t)),this.reset(),this.handler=e,this.iframeBind?this.iframeBind():X(this.el,this.arg,this.handler,this.modifiers.capture)},reset:function(){var e=this.iframeBind?this.el.contentWindow:this.el;this.handler&&G(e,this.arg,this.handler)},unbind:function(){this.reset()}},uo=["-webkit-","-moz-","-ms-"],co=["Webkit","Moz","ms"],fo=/!important;?$/,ho=Object.create(null),po=null,vo={deep:!0,update:function(e){"string"==typeof e?this.el.style.cssText=e:Hn(e)?this.handleObject(e.reduce(v,{})):this.handleObject(e||{})},handleObject:function(e){var t,n,i=this.cache||(this.cache={});for(t in i)t in e||(this.handleSingle(t,null),delete i[t]);for(t in e)n=e[t],n!==i[t]&&(i[t]=n,this.handleSingle(t,n))},handleSingle:function(e,t){if(e=mt(e))if(null!=t&&(t+=""),t){var n=fo.test(t)?"important":"";n?(Si("It's probably a bad idea to use !important with inline rules. This feature will be deprecated in a future version of Vue."),t=t.replace(fo,"").trim(),this.el.style.setProperty(e.kebab,t,n)):this.el.style[e.camel]=t}else this.el.style[e.camel]=""}},mo="http://www.w3.org/1999/xlink",go=/^xlink:/,yo=/^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/,bo=/^(?:value|checked|selected|muted)$/,wo=/^(?:draggable|contenteditable|spellcheck)$/,xo={value:"_value","true-value":"_trueValue","false-value":"_falseValue"},Co={priority:Wr,bind:function(){var e=this.arg,t=this.el.tagName;e||(this.deep=!0);var n=this.descriptor,i=n.interp;if(i){n.hasOneTime&&(this.expression=O(i,this._scope||this.vm)),(yo.test(e)||"name"===e&&("PARTIAL"===t||"SLOT"===t))&&(Si(e+'="'+n.raw+'": attribute interpolation is not allowed in Vue.js directives and special attributes.',this.vm),this.el.removeAttribute(e),this.invalid=!0);var r=e+'="'+n.raw+'": ';"src"===e&&Si(r+'interpolation in "src" attribute will cause a 404 request. Use v-bind:src instead.',this.vm),"style"===e&&Si(r+'interpolation in "style" attribute will cause the attribute to be discarded in Internet Explorer. Use v-bind:style instead.',this.vm)}},update:function(e){if(!this.invalid){var t=this.arg;this.arg?this.handleSingle(t,e):this.handleObject(e||{})}},handleObject:vo.handleObject,handleSingle:function(e,t){var n=this.el,i=this.descriptor.interp;if(this.modifiers.camel&&(e=u(e)),!i&&bo.test(e)&&e in n){var r="value"===e&&null==t?"":t;n[e]!==r&&(n[e]=r)}var o=xo[e];if(!i&&o){n[o]=t;var a=n.__v_model;a&&a.listener()}return"value"===e&&"TEXTAREA"===n.tagName?void n.removeAttribute(e):void(wo.test(e)?n.setAttribute(e,t?"true":"false"):null!=t&&t!==!1?"class"===e?(n.__v_trans&&(t+=" "+n.__v_trans.id+"-transition"),Y(n,t)):go.test(e)?n.setAttributeNS(mo,e,t===!0?"":t):n.setAttribute(e,t===!0?"":t):n.removeAttribute(e))}},_o={priority:Ur,bind:function(){if(this.arg){var e=this.id=u(this.arg),t=(this._scope||this.vm).$els;n(t,e)?t[e]=this.el:ke(t,e,this.el)}},unbind:function(){var e=(this._scope||this.vm).$els;e[this.id]===this.el&&(e[this.id]=null)}},ko={bind:function(){Si("v-ref:"+this.arg+" must be used on a child component. Found on <"+this.el.tagName.toLowerCase()+">.",this.vm)}},Ao={bind:function(){var e=this.el;this.vm.$once("pre-hook:compiled",function(){e.removeAttribute("v-cloak")})}},Eo={text:Sr,html:Rr,for:Qr,if:Zr,show:eo,model:ao,on:lo,bind:Co,el:_o,ref:ko,cloak:Ao},To={deep:!0,update:function(e){e?"string"==typeof e?this.setClass(e.trim().split(/\s+/)):this.setClass(yt(e)):this.cleanup()},setClass:function(e){this.cleanup(e);for(var t=0,n=e.length;t<n;t++){var i=e[t];i&&bt(this.el,i,K)}this.prevKeys=e},cleanup:function(e){var t=this.prevKeys;if(t)for(var n=t.length;n--;){var i=t[n];(!e||e.indexOf(i)<0)&&bt(this.el,i,Q)}}},No={priority:zr,params:["keep-alive","transition-mode","inline-template"],bind:function(){this.el.__vue__?Si('cannot mount component "'+this.expression+'" on already mounted element: '+this.el):(this.keepAlive=this.params.keepAlive,this.keepAlive&&(this.cache={}),this.params.inlineTemplate&&(this.inlineTemplate=Z(this.el,!0)),this.pendingComponentCb=this.Component=null,this.pendingRemovals=0,this.pendingRemovalCb=null,this.anchor=ie("v-component"),z(this.el,this.anchor),this.el.removeAttribute("is"),this.el.removeAttribute(":is"),this.descriptor.ref&&this.el.removeAttribute("v-ref:"+f(this.descriptor.ref)),this.literal&&this.setComponent(this.expression))},update:function(e){this.literal||this.setComponent(e)},setComponent:function(e,t){if(this.invalidatePending(),e){var n=this;this.resolveComponent(e,function(){n.mountComponent(t)})}else this.unbuild(!0),this.remove(this.childVM,t),this.childVM=null},resolveComponent:function(e,t){var n=this;this.pendingComponentCb=x(function(i){n.ComponentName=i.options.name||("string"==typeof e?e:null),n.Component=i,t()}),this.vm._resolveComponent(e,this.pendingComponentCb)},mountComponent:function(e){this.unbuild(!0);var t=this,n=this.Component.options.activate,i=this.getCached(),r=this.build();n&&!i?(this.waitingFor=r,wt(n,r,function(){t.waitingFor===r&&(t.waitingFor=null,t.transition(r,e))})):(i&&r._updateRef(),this.transition(r,e))},invalidatePending:function(){this.pendingComponentCb&&(this.pendingComponentCb.cancel(),this.pendingComponentCb=null)},build:function(e){var t=this.getCached();if(t)return t;if(this.Component){var n={name:this.ComponentName,el:Ye(this.el),template:this.inlineTemplate,parent:this._host||this.vm,_linkerCachable:!this.inlineTemplate,_ref:this.descriptor.ref,_asComponent:!0,_isRouterView:this._isRouterView,_context:this.vm,_scope:this._scope,_frag:this._frag};e&&v(n,e);var i=new this.Component(n);return this.keepAlive&&(this.cache[this.Component.cid]=i),this.el.hasAttribute("transition")&&i._isFragment&&Si("Transitions will not work on a fragment instance. Template: "+i.$options.template,i),i}},getCached:function(){return this.keepAlive&&this.cache[this.Component.cid]},unbuild:function(e){this.waitingFor&&(this.keepAlive||this.waitingFor.$destroy(),this.waitingFor=null);var t=this.childVM;return!t||this.keepAlive?void(t&&(t._inactive=!0,t._updateRef(!0))):void t.$destroy(!1,e)},remove:function(e,t){var n=this.keepAlive;if(e){this.pendingRemovals++,this.pendingRemovalCb=t;var i=this;e.$remove(function(){i.pendingRemovals--,n||e._cleanup(),!i.pendingRemovals&&i.pendingRemovalCb&&(i.pendingRemovalCb(),i.pendingRemovalCb=null)})}else t&&t()},transition:function(e,t){var n=this,i=this.childVM;switch(i&&(i._inactive=!0),e._inactive=!1,this.childVM=e,n.params.transitionMode){case"in-out":e.$before(n.anchor,function(){n.remove(i,t)});break;case"out-in":n.remove(i,function(){e.$before(n.anchor,t)});break;default:n.remove(i),e.$before(n.anchor,t)}},unbind:function(){if(this.invalidatePending(),this.unbuild(),this.cache){for(var e in this.cache)this.cache[e].$destroy();this.cache=null}}},So=Ni._propBindingModes,Oo={},jo=/^[$_a-zA-Z]+[\w$]*$/,$o=/^[A-Za-z_$][\w$]*(\.[A-Za-z_$][\w$]*|\[[^\[\]]+\])*$/,Do=Ni._propBindingModes,Lo={bind:function(){var e=this.vm,t=e._context,n=this.descriptor.prop,i=n.path,r=n.parentPath,o=n.mode===Do.TWO_WAY,a=this.parentWatcher=new Ue(t,r,function(t){At(e,n,t)},{twoWay:o,filters:n.filters,scope:this._scope});if(kt(e,n,a.value),o){var s=this;e.$once("pre-hook:created",function(){s.childWatcher=new Ue(e,i,function(e){a.set(e)},{sync:!0})})}},unbind:function(){this.parentWatcher.teardown(),this.childWatcher&&this.childWatcher.teardown()}},Po=[],Mo=!1,Ho="transition",Fo="animation",Ro=Jn+"Duration",Bo=Kn+"Duration",qo=Rn&&window.requestAnimationFrame,Io=qo?function(e){qo(function(){qo(e)})}:function(e){setTimeout(e,50)},Wo=Lt.prototype;Wo.enter=function(e,t){this.cancelPending(),this.callHook("beforeEnter"),this.cb=t,K(this.el,this.enterClass),e(),this.entered=!1,this.callHookWithCb("enter"),this.entered||(this.cancel=this.hooks&&this.hooks.enterCancelled,$t(this.enterNextTick))},Wo.enterNextTick=function(){var e=this;this.justEntered=!0,Io(function(){e.justEntered=!1});var t=this.enterDone,n=this.getCssTransitionType(this.enterClass);this.pendingJsCb?n===Ho&&Q(this.el,this.enterClass):n===Ho?(Q(this.el,this.enterClass),this.setupCssCb(Yn,t)):n===Fo?this.setupCssCb(Qn,t):t()},Wo.enterDone=function(){this.entered=!0,this.cancel=this.pendingJsCb=null,Q(this.el,this.enterClass),this.callHook("afterEnter"),this.cb&&this.cb()},Wo.leave=function(e,t){this.cancelPending(),this.callHook("beforeLeave"),this.op=e,this.cb=t,K(this.el,this.leaveClass),this.left=!1,this.callHookWithCb("leave"),this.left||(this.cancel=this.hooks&&this.hooks.leaveCancelled,this.op&&!this.pendingJsCb&&(this.justEntered?this.leaveDone():$t(this.leaveNextTick)))},Wo.leaveNextTick=function(){var e=this.getCssTransitionType(this.leaveClass);if(e){var t=e===Ho?Yn:Qn;this.setupCssCb(t,this.leaveDone)}else this.leaveDone()},Wo.leaveDone=function(){this.left=!0,this.cancel=this.pendingJsCb=null,this.op(),Q(this.el,this.leaveClass),this.callHook("afterLeave"),this.cb&&this.cb(),this.op=null},Wo.cancelPending=function(){this.op=this.cb=null;var e=!1;this.pendingCssCb&&(e=!0,G(this.el,this.pendingCssEvent,this.pendingCssCb),this.pendingCssEvent=this.pendingCssCb=null),this.pendingJsCb&&(e=!0,this.pendingJsCb.cancel(),this.pendingJsCb=null),e&&(Q(this.el,this.enterClass),Q(this.el,this.leaveClass)),this.cancel&&(this.cancel.call(this.vm,this.el),this.cancel=null)},Wo.callHook=function(e){this.hooks&&this.hooks[e]&&this.hooks[e].call(this.vm,this.el)},Wo.callHookWithCb=function(e){var t=this.hooks&&this.hooks[e];t&&(t.length>1&&(this.pendingJsCb=x(this[e+"Done"])),t.call(this.vm,this.el,this.pendingJsCb))},Wo.getCssTransitionType=function(e){if(!(!Yn||document.hidden||this.hooks&&this.hooks.css===!1||Pt(this.el))){var t=this.type||this.typeCache[e];if(t)return t;var n=this.el.style,i=window.getComputedStyle(this.el),r=n[Ro]||i[Ro];if(r&&"0s"!==r)t=Ho;else{var o=n[Bo]||i[Bo];o&&"0s"!==o&&(t=Fo)}return t&&(this.typeCache[e]=t),t}},Wo.setupCssCb=function(e,t){this.pendingCssEvent=e;var n=this,i=this.el,r=this.pendingCssCb=function(o){o.target===i&&(G(i,e,r),n.pendingCssEvent=n.pendingCssCb=null,!n.pendingJsCb&&t&&t())};X(i,e,r)};var Vo={priority:Vr,update:function(e,t){var n=this.el,i=ge(this.vm.$options,"transitions",e);e=e||"v",t=t||"v",n.__v_trans=new Lt(n,e,i,this.vm),Q(n,t+"-transition"),K(n,e+"-transition")}},Uo={style:vo,class:To,component:No,prop:Lo,transition:Vo},zo=/^v-bind:|^:/,Xo=/^v-on:|^@/,Go=/^v-([^:]+)(?:$|:(.*)$)/,Jo=/\.[^\.]+/g,Yo=/^(v-bind:|:)?transition$/,Ko=1e3,Qo=2e3;en.terminal=!0;var Zo=/[^\w\-:\.]/,ea=Object.freeze({compile:Mt,compileAndLinkProps:qt,compileRoot:It,transclude:ln,resolveSlots:dn}),ta=/^v-on:|^@/;gn.prototype._bind=function(){var e=this.name,t=this.descriptor;if(("cloak"!==e||this.vm._isCompiled)&&this.el&&this.el.removeAttribute){var n=t.attr||"v-"+e;this.el.removeAttribute(n)}var i=t.def;if("function"==typeof i?this.update=i:v(this,i),this._setupParams(),this.bind&&this.bind(),this._bound=!0,this.literal)this.update&&this.update(t.raw);else if((this.expression||this.modifiers)&&(this.update||this.twoWay)&&!this._checkStatement()){var r=this;this.update?this._update=function(e,t){r._locked||r.update(e,t)}:this._update=mn;var o=this._preProcess?h(this._preProcess,this):null,a=this._postProcess?h(this._postProcess,this):null,s=this._watcher=new Ue(this.vm,this.expression,this._update,{filters:this.filters,twoWay:this.twoWay,deep:this.deep,preProcess:o,postProcess:a,scope:this._scope});this.afterBind?this.afterBind():this.update&&this.update(s.value)}},gn.prototype._setupParams=function(){if(this.params){var e=this.params;this.params=Object.create(null);for(var t,n,i,r=e.length;r--;)t=f(e[r]),i=u(t),n=B(this.el,t),null!=n?this._setupParamWatcher(i,n):(n=R(this.el,t),null!=n&&(this.params[i]=""===n||n))}},gn.prototype._setupParamWatcher=function(e,t){var n=this,i=!1,r=(this._scope||this.vm).$watch(t,function(t,r){if(n.params[e]=t,i){var o=n.paramWatchers&&n.paramWatchers[e];o&&o.call(n,t,r)}else i=!0},{immediate:!0,user:!1});(this._paramUnwatchFns||(this._paramUnwatchFns=[])).push(r)},gn.prototype._checkStatement=function(){var e=this.expression;if(e&&this.acceptStatement&&!Be(e)){var t=Re(e).get,n=this._scope||this.vm,i=function(e){n.$event=e,t.call(n,n),n.$event=null};return this.filters&&(i=n._applyFilters(i,null,this.filters)),this.update(i),!0}},gn.prototype.set=function(e){this.twoWay?this._withLock(function(){this._watcher.set(e)}):Si("Directive.set() can only be used inside twoWaydirectives.")},gn.prototype._withLock=function(e){var t=this;t._locked=!0,e.call(t),ti(function(){t._locked=!1})},gn.prototype.on=function(e,t,n){X(this.el,e,t,n),(this._listeners||(this._listeners=[])).push([e,t])},gn.prototype._teardown=function(){if(this._bound){this._bound=!1,this.unbind&&this.unbind(),this._watcher&&this._watcher.teardown();var e,t=this._listeners;if(t)for(e=t.length;e--;)G(this.el,t[e][0],t[e][1]);var n=this._paramUnwatchFns;if(n)for(e=n.length;e--;)n[e]();this.el&&this.el._vue_directives.$remove(this),this.vm=this.el=this._watcher=this._listeners=null}};var na=/[^|]\|[^|]/;Ae(kn),pn(kn),vn(kn),yn(kn),bn(kn),wn(kn),xn(kn),Cn(kn),_n(kn);var ia={priority:Yr,params:["name"],bind:function(){var e=this.params.name||"default",t=this.vm._slotContents&&this.vm._slotContents[e];t&&t.hasChildNodes()?this.compile(t.cloneNode(!0),this.vm._context,this.vm):this.fallback()},compile:function(e,t,n){if(e&&t){if(this.el.hasChildNodes()&&1===e.childNodes.length&&1===e.childNodes[0].nodeType&&e.childNodes[0].hasAttribute("v-if")){var i=document.createElement("template");i.setAttribute("v-else",""),i.innerHTML=this.el.innerHTML,i._context=this.vm,e.appendChild(i)}var r=n?n._scope:this._scope;this.unlink=t.$compile(e,n,r,this._frag)}e?z(this.el,e):V(this.el)},fallback:function(){this.compile(Z(this.el,!0),this.vm)},unbind:function(){this.unlink&&this.unlink()}},ra={priority:Xr,params:["name"],paramWatchers:{name:function(e){Zr.remove.call(this),e&&this.insert(e)}},bind:function(){this.anchor=ie("v-partial"),z(this.el,this.anchor),this.insert(this.params.name)},insert:function(e){var t=ge(this.vm.$options,"partials",e,!0);t&&(this.factory=new ot(this.vm,t),Zr.insert.call(this))},unbind:function(){this.frag&&this.frag.destroy()}},oa={slot:ia,partial:ra},aa=Qr._postProcess,sa=/(\d{3})(?=\d)/g,la={orderBy:Tn,filterBy:En,limitBy:An,json:{read:function(e,t){return"string"==typeof e?e:JSON.stringify(e,null,arguments.length>1?t:2)},write:function(e){try{return JSON.parse(e)}catch(t){return e}}},capitalize:function(e){return e||0===e?(e=e.toString(),e.charAt(0).toUpperCase()+e.slice(1)):""},uppercase:function(e){return e||0===e?e.toString().toUpperCase():""},lowercase:function(e){return e||0===e?e.toString().toLowerCase():""},currency:function(e,t,n){if(e=parseFloat(e),!isFinite(e)||!e&&0!==e)return"";t=null!=t?t:"$",n=null!=n?n:2;var i=Math.abs(e).toFixed(n),r=n?i.slice(0,-1-n):i,o=r.length%3,a=o>0?r.slice(0,o)+(r.length>3?",":""):"",s=n?i.slice(-1-n):"",l=e<0?"-":"";return l+t+a+r.slice(o).replace(sa,"$1,")+s},pluralize:function(e){var t=p(arguments,1),n=t.length;if(n>1){var i=e%10-1;return i in t?t[i]:t[n-1]}return t[0]+(1===e?"":"s")},debounce:function(e,t){if(e)return t||(t=300),b(e,t)}};return Sn(kn),kn.version="1.0.26",setTimeout(function(){Ni.devtools&&(Bn?Bn.emit("init",kn):Rn&&/Chrome\/\d+/.test(window.navigator.userAgent)&&console.log("Download the Vue Devtools for a better development experience:\nhttps://github.com/vuejs/vue-devtools"))},0),kn});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
